<Type Name="MemberChangeConflict" FullName="System.Data.Linq.MemberChangeConflict">
  <TypeSignature Language="C#" Value="public sealed class MemberChangeConflict" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemberChangeConflict extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.MemberChangeConflict" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemberChangeConflict" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemberChangeConflict sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ac4a1-101">Reprezentuje sytuacji niepowodzenia próba aktualizacji, ponieważ element członkowski wartości zostały zaktualizowane od czasu ich odczytu ostatnio klienta.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-101">Represents a situation in which an attempted update fails because member values have been updated since the client last read them.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ac4a1-102">Poniższy przykład pokazuje, jak można pobrać informacji na temat elementów członkowskich w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-102">The following example shows how to retrieve information about members in conflict.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.MemberChangeConflict#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.memberchangeconflict/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.MemberChangeConflict#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.memberchangeconflict/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CurrentValue">
      <MemberSignature Language="C#" Value="public object CurrentValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.MemberChangeConflict.CurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ac4a1-103">Pobiera bieżącą wartość elementu członkowskiego w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-103">Gets the current value of the member in conflict.</span></span></summary>
        <value><span data-ttu-id="ac4a1-104">Obiekt, który powoduje konflikt.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-104">The object in conflict.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseValue">
      <MemberSignature Language="C#" Value="public object DatabaseValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DatabaseValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.MemberChangeConflict.DatabaseValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DatabaseValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DatabaseValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ac4a1-105">Pobiera wartość bazy danych elementu członkowskiego w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-105">Gets the database value of the member in conflict.</span></span></summary>
        <value><span data-ttu-id="ac4a1-106">Wartość obiektu w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-106">The value of the object in conflict.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModified">
      <MemberSignature Language="C#" Value="public bool IsModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModified" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.MemberChangeConflict.IsModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModified As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModified { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ac4a1-107">Pobiera wartość wskazującą, czy element członkowski danych został zmieniony od ostatniego bazy danych do odczytu lub odświeżania.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-107">Gets a value that indicates whether the member data has been changed since the last database read or refresh.</span></span></summary>
        <value>
          <span data-ttu-id="ac4a1-108"><see langword="True" /> Jeśli element członkowski danych został zmieniony.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-108"><see langword="True" /> if the member data has been changed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ac4a1-109">Użyj właściwości można scalić nowych wartości bez zastępowania oczekujące aktualizacje.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-109">Use the property to merge new values without overwriting pending updates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsResolved">
      <MemberSignature Language="C#" Value="public bool IsResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsResolved" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.MemberChangeConflict.IsResolved" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsResolved As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsResolved { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ac4a1-110">Pobiera wartość wskazującą, czy konflikt został rozwiązany.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-110">Gets a value that indicates whether the conflict has been resolved.</span></span></summary>
        <value>
          <span data-ttu-id="ac4a1-111"><see langword="True" /> Jeśli konflikt został rozwiązany.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-111"><see langword="True" /> if the conflict has been resolved.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ac4a1-112">Ta właściwość jest tylko do odczytu i zostanie automatycznie zaktualizowana, jak są rozwiązywane konflikty.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-112">This property is read-only and is automatically updated as conflicts are resolved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo Member" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.MemberChangeConflict.Member" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Member As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberInfo ^ Member { System::Reflection::MemberInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ac4a1-113">Pobiera metadane dotyczące element członkowski, powoduje konflikt.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-113">Gets metadata information about the member in conflict.</span></span></summary>
        <value><span data-ttu-id="ac4a1-114">Informacje o element członkowski, powoduje konflikt.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-114">Information about the member in conflict.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalValue">
      <MemberSignature Language="C#" Value="public object OriginalValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.MemberChangeConflict.OriginalValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ac4a1-115">Pobiera oryginalnej wartości elementu członkowskiego w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-115">Gets the original value of the member in conflict.</span></span></summary>
        <value><span data-ttu-id="ac4a1-116">Oryginalnej wartości elementu członkowskiego w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-116">The original value of the member in conflict.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Resolve">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ac4a1-117">Rozpoznaje wystąpił konflikt elementu członkowskiego, pamiętając bieżące wartości i zresetowanie oryginalnych wartości bazowej odpowiadające nowszą wartościami bazy danych.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-117">Resolves member conflicts by keeping current values and resetting the baseline original values to match the more recent database values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public void Resolve (System.Data.Linq.RefreshMode refreshMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resolve(valuetype System.Data.Linq.RefreshMode refreshMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resolve(System::Data::Linq::RefreshMode refreshMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Linq.RefreshMode" />
      </Parameters>
      <Docs>
        <param name="refreshMode"><span data-ttu-id="ac4a1-118">Zobacz <see cref="T:System.Data.Linq.RefreshMode" />.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-118">See <see cref="T:System.Data.Linq.RefreshMode" />.</span></span></param>
        <summary><span data-ttu-id="ac4a1-119">Używa <see cref="T:System.Data.Linq.RefreshMode" /> parametr, aby automatycznie określić wartość do ustawienia jako bieżąca wartość dla elementu członkowskiego w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-119">Uses a <see cref="T:System.Data.Linq.RefreshMode" /> parameter to automatically specify the value to set as the current value for the member in conflict.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ac4a1-120">W poniższych przykładach pokazano, jakie wyniki są tworzone za pomocą różnych wartości <xref:System.Data.Linq.RefreshMode>.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-120">The following examples show what results are produced by using the various values for <xref:System.Data.Linq.RefreshMode>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ac4a1-121">Poniższy przykład zastępuje bieżących wartości z wartościami z bazy danych.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-121">The following example overwrites current values with values from the database.</span></span>  
  
 [!code-csharp[System.Data.Linq.RefreshMode#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.refreshmode/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.RefreshMode#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.refreshmode/vb/module1.vb#1)]  
  
 <span data-ttu-id="ac4a1-122">Poniższy przykład pokazuje, jak można zamienić oryginalnej wartości z wartościami pobrane z bazy danych.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-122">The following example shows how to swap the original value with the values retrieved from the database.</span></span> <span data-ttu-id="ac4a1-123">Nie bieżąca wartość jest modyfikowany.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-123">No current value is modified.</span></span>  
  
 [!code-csharp[System.Data.Linq.RefreshMode#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.refreshmode/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.RefreshMode#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.refreshmode/vb/module1.vb#2)]  
  
 <span data-ttu-id="ac4a1-124">Poniższy przykład zachowuje bieżące wartości, które zostały zmienione, ale aktualizacji innych wartości z wartościami bazy danych.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-124">The following example keeps the current values that have been changed, but updates the other values with database values.</span></span>  
  
 [!code-csharp[System.Data.Linq.RefreshMode#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.refreshmode/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.RefreshMode#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.refreshmode/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public void Resolve (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resolve(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resolve (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resolve(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ac4a1-125">Wartość do ustawienia jako bieżącą wartość.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-125">The value to set as the current value.</span></span></param>
        <summary><span data-ttu-id="ac4a1-126">Określa wartość do ustawienia jako bieżąca wartość dla elementu członkowskiego w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-126">Specifies the value to set as the current value for the member in conflict.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ac4a1-127">Wartość ustawiona w tym miejscu jest wartości do użycia w kolejnej <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operacji.</span><span class="sxs-lookup"><span data-stu-id="ac4a1-127">The value set here is the value to be used in a subsequent <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>