<Type Name="ActivityDesigner" FullName="System.Activities.Presentation.ActivityDesigner">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b76608e78061541052b8d4568af47af5dd61cead" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30437037" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ActivityDesigner : System.Activities.Presentation.WorkflowViewElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ActivityDesigner extends System.Activities.Presentation.WorkflowViewElement" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ActivityDesigner" />
  <TypeSignature Language="VB.NET" Value="Public Class ActivityDesigner&#xA;Inherits WorkflowViewElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActivityDesigner : System::Activities::Presentation::WorkflowViewElement" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.Presentation.WorkflowViewElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia klasę podstawową dla wszystkich działań projektanta składników.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten typ zapewnia podstawowe funkcje wyglądu i działania dla innych projektantów działań i umożliwia dewelopera dodać dodatkowe funkcje do działania powierzchnię projektanta. Jest to zazwyczaj wykonywane w celu albo wyświetlić dodatkowe informacje interesujące dla użytkownika, działania, Utwórz lepiej na kanwie edytowania (na przykład za pomocą `ExpressionTextBox` na `If` Projektant działań), lub aby umożliwić zawierał elementy do edycji (ponownie, należy wziąć pod uwagę <xref:System.Activities.Statements.If.Then%2A> i <xref:System.Activities.Statements.If.Else%2A> właściwości <xref:System.Activities.Statements.If> działania).  
  
 <xref:System.Activities.Presentation.ActivityDesigner> Dziedziczy <xref:System.Activities.Presentation.WorkflowViewElement> i dodaje głównie stylem domyślnym, a także możliwość dostosowania ikona za pośrednictwem <xref:System.Activities.Presentation.ActivityDesigner.Icon%2A> właściwości. Powinien być używany, gdy tworzysz projektanta dla typu, która jest pochodną <xref:System.Activities.Activity>. Jeśli są skojarzone z <xref:System.Activities.Activity> typu, <xref:System.Activities.Presentation.WorkflowViewElement.ModelItem%2A> właściwości wskaże hierarchii ModelItem opisujący wystąpienia tego typu edytowany.  
  
   
  
## Examples  
 W przykładowym kodzie poniżej `First2of3` działania jest definiowana jako pierwsza, a następnie kod dla projektanta First2of3 jest wyświetlany, a na koniec przedstawiono sposób użycia atrybutu projektanta do skojarzenia działanie przy użyciu projektanta jest dostępne.  
  
```  
  
//The First2of3 activity  
using System.Activities;  
using System.Collections.Generic;  
using System.Linq;  
  
namespace Microsoft.Activities.Documentation.ActivityTypes  
{  
  
    public sealed class First2of3 : NativeActivity  
    {  
        public Activity Activity1 { get; set; }  
        public Activity Activity2 { get; set; }  
        public Activity Activity3 { get; set; }  
  
        Variable<List<ActivityInstance>> ExecutingActivities { get; set; }  
  
        public First2of3()  
        {  
            ExecutingActivities = new Variable<List<ActivityInstance>>();  
        }  
  
        // If your activity returns a value, derive from CodeActivity<TResult>  
        // and return the value from the Execute method.  
        protected override void Execute(NativeActivityContext context)  
        {  
            // Obtain the runtime value of the Text input argument  
            var l = new List<ActivityInstance>();  
            ExecutingActivities.Set(context, l);  
            l.Add(context.ScheduleActivity(Activity1, onComplete));  
            l.Add(context.ScheduleActivity(Activity2, onComplete));  
            l.Add(context.ScheduleActivity(Activity3, onComplete));  
        }  
  
        protected override void CacheMetadata(NativeActivityMetadata metadata)  
        {  
            metadata.AddImplementationVariable(ExecutingActivities);  
            metadata.AddChild(Activity1);  
            metadata.AddChild(Activity2);  
            metadata.AddChild(Activity3);  
        }  
  
        private void onComplete(NativeActivityContext context, ActivityInstance completedInstance)  
        {  
            var l = ExecutingActivities.Get(context);  
            l.Remove(completedInstance);  
            if (l.Count == 1)  
            {  
                context.CancelChild(l.Single());  
            }  
        }  
    }  
}  
  
//’Code for the First2of3 Designer:  
<sap:ActivityDesigner x:Class="Microsoft.Activites.Documentation.First2of3Designer"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    xmlns:sap="clr-namespace:System.Activities.Presentation;assembly=System.Activities.Presentation"  
    xmlns:sapv="clr-namespace:System.Activities.Presentation.View;assembly=System.Activities.Presentation">  
    <StackPanel>  
        <Label Content="2 of 3 activity">  
            <Label.ToolTip>  
                This activity has 3 child activities which will be scheduled in parallel.    
                Upon completion of any 2, the third will be cancelled  
            </Label.ToolTip>  
        </Label>  
        <StackPanel Orientation="Horizontal">  
            <Border BorderBrush="Blue" BorderThickness="2" CornerRadius="2" Margin="2" Padding="2">  
                <sap:WorkflowItemPresenter HintText="Drop Activity1 Here" Item="{Binding Path=ModelItem.Activity1, Mode=TwoWay}" />  
            </Border>  
            <Border BorderBrush="Blue" BorderThickness="2" CornerRadius="2" Margin="2" Padding="2">  
                <sap:WorkflowItemPresenter HintText="Drop Activity2 Here" Item="{Binding Path=ModelItem.Activity2, Mode=TwoWay}" />  
  
            </Border>  
            <Border BorderBrush="Blue" BorderThickness="2" CornerRadius="2" Margin="2" Padding="2">  
                <sap:WorkflowItemPresenter HintText="Drop Activity3 Here" Item="{Binding Path=ModelItem.Activity3, Mode=TwoWay}" />  
  
            </Border>  
        </StackPanel>  
    </StackPanel>  
</sap:ActivityDesigner>  
  
//Code for associating the activity with the designer using the Designer attribute.  
[Designer(typeof(First2of3Designer))]  
public sealed class First2of3 : NativeActivity  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActivityDesigner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ActivityDesigner.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActivityDesigner();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.Presentation.ActivityDesigner" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutomationIdMemberName">
      <MemberSignature Language="C#" Value="protected override string GetAutomationIdMemberName ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetAutomationIdMemberName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ActivityDesigner.GetAutomationIdMemberName" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAutomationIdMemberName () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetAutomationIdMemberName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg "DisplayName" w tej implementacji przesłoniętej metody.</summary>
        <returns>Ciąg "DisplayName" w tej implementacji przesłoniętej metody.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutomationItemStatus">
      <MemberSignature Language="C#" Value="protected internal override string GetAutomationItemStatus ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string GetAutomationItemStatus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ActivityDesigner.GetAutomationItemStatus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetAutomationItemStatus () As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ GetAutomationItemStatus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca informacje o stanie elementu automatyzacji.</summary>
        <returns>Stan elementu automatyzacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.DrawingBrush Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.DrawingBrush Icon" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.ActivityDesigner.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As DrawingBrush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::DrawingBrush ^ Icon { System::Windows::Media::DrawingBrush ^ get(); void set(System::Windows::Media::DrawingBrush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.DrawingBrush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ikony skojarzone z tym <see cref="T:System.Activities.Presentation.ActivityDesigner" />.</summary>
        <value>Zwraca <see cref="T:System.Windows.Media.DrawingBrush" /> reprezentujący ikony skojarzone z tym <see cref="T:System.Activities.Presentation.ActivityDesigner" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Activities.Presentation.ActivityDesigner.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="F:System.Activities.Presentation.ActivityDesigner.IconProperty" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public override void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ActivityDesigner.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnApplyTemplate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna się proces stosowania szablonu w celu utworzenia <see cref="T:System.Activities.Presentation.ActivityDesigner" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEditAnnotation">
      <MemberSignature Language="C#" Value="protected internal override void OnEditAnnotation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnEditAnnotation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ActivityDesigner.OnEditAnnotation" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnEditAnnotation ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnEditAnnotation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna przetwarzanie występujący podczas edytowania adnotacji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnModelItemChanged">
      <MemberSignature Language="C#" Value="protected override void OnModelItemChanged (object newItem);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnModelItemChanged(object newItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ActivityDesigner.OnModelItemChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnModelItemChanged (newItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnModelItemChanged(System::Object ^ newItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="newItem">Nowy element.</param>
        <summary>Rozpoczyna się informacje o przetwarzaniu uruchamianym po zmianie elementu modelu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ActivityDesigner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Rozpoczyna przetwarzanie, która występuje po zwolnieniu dowolnego przycisku myszy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected override void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ActivityDesigner.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Rozpoczyna przetwarzanie, gdy jest to nieobsługiwany <see cref="T:System.Windows.Input.Mouse.PreviewMouseDown" /> dołączone kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>