<Type Name="ServiceManager" FullName="System.Activities.Presentation.ServiceManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1cbc2e11dcde8e5947f80148f71714d64441074d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69322474" /></Metadata><TypeSignature Language="C#" Value="public abstract class ServiceManager : IServiceProvider, System.Collections.Generic.IEnumerable&lt;Type&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ServiceManager extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt;, class System.Collections.IEnumerable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ServiceManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ServiceManager&#xA;Implements IEnumerable(Of Type), IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceManager abstract : IServiceProvider, System::Collections::Generic::IEnumerable&lt;Type ^&gt;" />
  <TypeSignature Language="F#" Value="type ServiceManager = class&#xA;    interface IServiceProvider&#xA;    interface seq&lt;Type&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Implementuje <see cref="T:System.IServiceProvider" /> i zapewnia dostęp do usług oferowanych przez kontekst edycji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.EditingContext.Services%2A>reprezentuje funkcje dostarczone przez hosta, które będą używane przez projektanta lub które są używane przez projektanta w celu udostępnienia funkcji wszystkim projektantom w edytorze. Jest uzyskiwany od <xref:System.Activities.Presentation.EditingContext> <xref:System.Activities.Presentation.EditingContext.Services%2A> przez właściwość.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ServiceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.Presentation.ServiceManager" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Contains (serviceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Contains(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member Contains : Type -&gt; bool" Usage="serviceManager.Contains serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Typ usługi do sprawdzenia.</param>
        <summary>Zwraca wartość logiczną wskazującą, czy Menedżer usług zawiera usługę danego typu.</summary>
        <returns><see langword="true" />Jeśli usługa typu <paramref name="serviceType" /> została opublikowana; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public bool Contains&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains(Of TServiceType) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; bool Contains();" />
      <MemberSignature Language="F#" Value="member this.Contains : unit -&gt; bool" Usage="serviceManager.Contains " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType">Typ usługi do sprawdzenia.</typeparam>
        <summary>Zwraca wartość logiczną wskazującą, czy Menedżer usług zawiera usługę danego typu.</summary>
        <returns><see langword="true" />Jeśli usługa typu <paramref name="serviceType" /> została opublikowana; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;Type&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Type&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEnumerator () As IEnumerator(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerator&lt;Type ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Type&gt;" Usage="serviceManager.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający, który może służyć do wyliczania wszystkich usług publikowanych przez ten Menedżer usług.</summary>
        <returns>Zwraca <see cref="T:System.Collections.Generic.IEnumerator`1" />, która zawiera Wyliczenie opublikowanych usług.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetRequiredService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetRequiredService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetRequiredService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetRequiredService();" />
      <MemberSignature Language="F#" Value="member this.GetRequiredService : unit -&gt; 'ServiceType" Usage="serviceManager.GetRequiredService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType">Typ usługi do pobrania.</typeparam>
        <summary>Pobiera żądaną usługę.</summary>
        <returns>Typ ogólny, który jest wystąpieniem usługi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie <xref:System.Activities.Presentation.ServiceManager.GetService%2A>do, ta metoda <xref:System.NotSupportedException> zgłasza, jeśli usługa jest niedostępna.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Nie ma usługi danego typu.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public abstract object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj" Usage="serviceManager.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Typ usługi do pobrania.</param>
        <summary>Pobiera żądaną usługę.  Ta metoda zwraca <see langword="null" /> wartość, jeśli nie można odnaleźć usługi.</summary>
        <returns>Zwraca <see cref="T:System.Object" />, czyli wystąpienie usługi, lub <see langword="null" /> Jeśli usługa nie została opublikowana.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'ServiceType" Usage="serviceManager.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType">Typ usługi do pobrania.</typeparam>
        <summary>Pobiera żądaną usługę. Ta metoda zwraca <see langword="null" /> wartość, jeśli nie można odnaleźć usługi.</summary>
        <returns>Typ ogólny, który jest wystąpieniem usługi lub <see langword="null" /> Jeśli usługa nie została opublikowana.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="protected static object GetTarget (Delegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetTarget(class System.Delegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetTarget(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetTarget (callback As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Object ^ GetTarget(Delegate ^ callback);" />
      <MemberSignature Language="F#" Value="static member GetTarget : Delegate -&gt; obj" Usage="System.Activities.Presentation.ServiceManager.GetTarget callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat, dla którego ma zostać pobrany element docelowy.</param>
        <summary>Metoda pomocnika zwracająca obiekt docelowy dla delegata. Jeśli delegat został utworzony na serwerze proxy z delegatem ogólnym, spowoduje to poprawne zwrócenie oryginalnego obiektu, a nie serwera proxy.</summary>
        <returns>Zwraca <see cref="T:System.Object" />, który jest obiektem docelowym wywołania zwrotnego. Może to zwrócić <see langword="null" /> , jeśli wywołanie zwrotne reprezentuje obiekt statyczny.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Publish">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Publikuje dany typ usługi, ale nie deklaruje wystąpienia. Gdy żąda się usługi, wywołanie zwrotne usługi publikowania zostanie wywołane w celu utworzenia wystąpienia. Wywołanie zwrotne jest wywoływane tylko raz. Po tym wystąpieniu zwrócone wystąpienie jest buforowane.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, System.Activities.Presentation.PublishServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, class System.Activities.Presentation.PublishServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Activities.Presentation.PublishServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, callback As PublishServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Activities::Presentation::PublishServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Publish : Type * System.Activities.Presentation.PublishServiceCallback -&gt; unit" Usage="serviceManager.Publish (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType">Typ usługi do opublikowania.</param>
        <param name="callback">Wywołanie zwrotne, które zostanie wywołane, gdy jest wymagana wystąpienie usługi.</param>
        <summary>Publikuje określony typ usługi, ale nie deklaruje wystąpienia. Gdy żąda się usługi, wywołanie zwrotne usługi publikowania zostanie wywołane w celu utworzenia wystąpienia. Wywołanie zwrotne jest wywoływane tylko raz. Po tym wystąpieniu zwrócone wystąpienie jest buforowane.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />lub <paramref name="callback" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="serviceType" />został już opublikowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, serviceInstance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Object ^ serviceInstance);" />
      <MemberSignature Language="F#" Value="abstract member Publish : Type * obj -&gt; unit" Usage="serviceManager.Publish (serviceType, serviceInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">Typ usługi do opublikowania.</param>
        <param name="serviceInstance">Wystąpienie usługi.</param>
        <summary>Publikuje daną usługę. Po opublikowaniu wystąpienie usługi pozostanie w programie Service Manager do momentu usunięcia kontekstu edycji.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />lub <paramref name="serviceInstance" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="serviceInstance" />nie pochodzi ani nie implementuje <paramref name="serviceType" /> <paramref name="serviceType" /> ani nie została już opublikowana.</exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(class System.Activities.Presentation.PublishServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(System.Activities.Presentation.PublishServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (callback As PublishServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(System::Activities::Presentation::PublishServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Publish : System.Activities.Presentation.PublishServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Publish callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType">Typ usługi do opublikowania.</typeparam>
        <param name="callback">Wywołanie zwrotne, które zostanie wywołane, gdy jest wymagana wystąpienie usługi.</param>
        <summary>Publikuje dany typ usługi, ale nie deklaruje jeszcze wystąpienia. Po zażądaniu <see langword="PublishServiceCallback" /> usługi zostanie wywołana, aby utworzyć wystąpienie. Wywołanie zwrotne jest wywoływane tylko raz. Po tym wystąpieniu zwrócone wystąpienie jest buforowane.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="callback" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (TServiceType serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(!!TServiceType serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (serviceInstance As TServiceType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(TServiceType serviceInstance);" />
      <MemberSignature Language="F#" Value="member this.Publish : 'ServiceType -&gt; unit" Usage="serviceManager.Publish serviceInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceInstance" Type="TServiceType" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType">Typ usługi do opublikowania.</typeparam>
        <param name="serviceInstance">Wystąpienie usługi.</param>
        <summary>Publikuje daną usługę. Po opublikowaniu wystąpienie usługi pozostanie w programie Service Manager do momentu usunięcia kontekstu edycji.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceInstance" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="protected static Delegate RemoveCallback (Delegate existing, Delegate toRemove);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Delegate RemoveCallback(class System.Delegate existing, class System.Delegate toRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.RemoveCallback(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveCallback (existing As Delegate, toRemove As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Delegate ^ RemoveCallback(Delegate ^ existing, Delegate ^ toRemove);" />
      <MemberSignature Language="F#" Value="static member RemoveCallback : Delegate * Delegate -&gt; Delegate" Usage="System.Activities.Presentation.ServiceManager.RemoveCallback (existing, toRemove)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existing" Type="System.Delegate" />
        <Parameter Name="toRemove" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="existing">Istniejący delegat do usuwania wywołania zwrotnego z.</param>
        <param name="toRemove">Wywołanie zwrotne do usunięcia.</param>
        <summary>Metoda pomocnika, która wykonuje <see langword="Delegate.Remove" /> operację, i odpakuje delegatów, które są serwerami proxy do ogólnych wywołań zwrotnych. Tej metody należy używać w Twoich <see cref="Overload:System.Activities.Presentation.ServiceManager.Unsubscribe" /> implementacjach.</summary>
        <returns>Zwraca <see cref="T:System.Delegate" />wartość, która jest nową wartością do przypisania do istniejącego delegata.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public abstract void Subscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Subscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Subscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Subscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : Type * System.Activities.Presentation.SubscribeServiceCallback -&gt; unit" Usage="serviceManager.Subscribe (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType">Typ usługi do subskrybowania.</param>
        <param name="callback">Wywołanie zwrotne, które będzie powiadamiane, gdy usługa jest dostępna.</param>
        <summary>Wywołuje podane wywołanie zwrotne, gdy ktoś opublikował żądaną usługę. Jeśli usługa była już dostępna, ta metoda natychmiast wywołuje wywołanie zwrotne.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />lub <paramref name="callback" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Subscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Subscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Subscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Subscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Subscribe : System.Activities.Presentation.SubscribeServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Subscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType">Typ usługi, dla której ma zostać subskrybowany.</typeparam>
        <param name="callback">Wywołanie zwrotne, które będzie powiadamiane, gdy usługa jest dostępna.</param>
        <summary>Wywołuje podane wywołanie zwrotne, gdy ktoś opublikował żądaną usługę. Jeśli usługa była już dostępna, ta metoda natychmiast wywołuje wywołanie zwrotne.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający, który może służyć do wyliczania wszystkich usług publikowanych przez ten Menedżer usług.</summary>
        <returns>Zwraca <see cref="T:System.Collections.IEnumerator" />, która zawiera Wyliczenie opublikowanych usług.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe">
      <MemberSignature Language="C#" Value="public abstract void Unsubscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unsubscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unsubscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unsubscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Unsubscribe : Type * System.Activities.Presentation.SubscribeServiceCallback -&gt; unit" Usage="serviceManager.Unsubscribe (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType">Typ usługi, z której ma zostać usunięta subskrypcja.</param>
        <param name="callback">Obiekt wywołania zwrotnego do usunięcia z subskrypcji.</param>
        <summary>Usuwa subskrypcję dla typu usługi.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />lub <paramref name="callback" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Unsubscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsubscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unsubscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Unsubscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Unsubscribe : System.Activities.Presentation.SubscribeServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Unsubscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType">Typ usługi, z której ma zostać usunięta subskrypcja.</typeparam>
        <param name="callback">Obiekt wywołania zwrotnego do usunięcia z subskrypcji.</param>
        <summary>Usuwa subskrypcję dla typu usługi.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
