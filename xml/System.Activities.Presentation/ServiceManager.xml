<Type Name="ServiceManager" FullName="System.Activities.Presentation.ServiceManager">
  <TypeSignature Language="C#" Value="public abstract class ServiceManager : IServiceProvider, System.Collections.Generic.IEnumerable&lt;Type&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ServiceManager extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt;, class System.Collections.IEnumerable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ServiceManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ServiceManager&#xA;Implements IEnumerable(Of Type), IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceManager abstract : IServiceProvider, System::Collections::Generic::IEnumerable&lt;Type ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7e87a-101">Implementuje <see cref="T:System.IserviceProvider" /> i zapewnia dostęp do usług oferowanych przez Kontekst edycyjny.</span><span class="sxs-lookup"><span data-stu-id="7e87a-101">Implements <see cref="T:System.IserviceProvider" /> and provides access to services offered by the editing context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e87a-102"><xref:System.Activities.Presentation.EditingContext.Services%2A> reprezentuje funkcji, która jest dostarczona przez hosta do projektanta do użycia lub używanego przez projektanta, aby udostępnić funkcje wszystkie projektantów w edytorze.</span><span class="sxs-lookup"><span data-stu-id="7e87a-102"><xref:System.Activities.Presentation.EditingContext.Services%2A> represent functionality that is either provided by the host for the designer to use or that is used by the designer to make functionality available to all designers within the editor.</span></span> <span data-ttu-id="7e87a-103">Są uzyskiwane z <xref:System.Activities.Presentation.EditingContext> przez <xref:System.Activities.Presentation.EditingContext.Services%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="7e87a-103">It is obtained from the <xref:System.Activities.Presentation.EditingContext> by the <xref:System.Activities.Presentation.EditingContext.Services%2A> property.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ServiceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e87a-104">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.Presentation.ServiceManager" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="7e87a-104">Initializes a new instance of the <see cref="T:System.Activities.Presentation.ServiceManager" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Contains (serviceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Contains(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="7e87a-105">Typ usługi do sprawdzenia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-105">The type of service to check.</span></span></param>
        <summary><span data-ttu-id="7e87a-106">Zwraca wartość logiczną, wskazującą, czy programu service manager zawiera usługę danego typu.</span><span class="sxs-lookup"><span data-stu-id="7e87a-106">Returns a Boolean value that indicates whether the service manager contains a service of the given type.</span></span></summary>
        <returns>
          <span data-ttu-id="7e87a-107"><see langword="true" /> Jeśli usługa typu <paramref name="serviceType" /> została opublikowana; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-107"><see langword="true" /> if a service of type <paramref name="serviceType" /> has been published; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public bool Contains&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains(Of TServiceType) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; bool Contains();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="7e87a-108">Typ usługi do sprawdzenia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-108">The type of service to check.</span></span></typeparam>
        <summary><span data-ttu-id="7e87a-109">Zwraca wartość logiczną, wskazującą, czy programu service manager zawiera usługę danego typu.</span><span class="sxs-lookup"><span data-stu-id="7e87a-109">Returns a Boolean value that indicates whether the service manager contains a service of the given type.</span></span></summary>
        <returns>
          <span data-ttu-id="7e87a-110"><see langword="true" /> Jeśli usługa typu <paramref name="serviceType" /> została opublikowana; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-110"><see langword="true" /> if a service of type <paramref name="serviceType" /> has been published; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;Type&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Type&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEnumerator () As IEnumerator(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerator&lt;Type ^&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e87a-111">Pobiera moduł wyliczający, który może służyć do wszystkich usług, które publikuje tego programu service manager.</span><span class="sxs-lookup"><span data-stu-id="7e87a-111">Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</span></span></summary>
        <returns><span data-ttu-id="7e87a-112">Zwraca <see cref="T:System.Collections.Generic.IEnumerator`1" />, który zawiera wyliczenie opublikowanych usług.</span><span class="sxs-lookup"><span data-stu-id="7e87a-112">Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />, which contains an enumeration of published services.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetRequiredService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetRequiredService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetRequiredService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetRequiredService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="7e87a-113">Typ usługi do pobrania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-113">The type of service to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="7e87a-114">Pobiera żądanej usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-114">Retrieves the requested service.</span></span></summary>
        <returns><span data-ttu-id="7e87a-115">Zwraca wartość typu ogólnego, który jest wystąpieniem usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-115">Returns a generic type, which is an instance of the service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e87a-116">W odróżnieniu od <xref:System.Activities.Presentation.ServiceManager.GetService%2A>, ta metoda zgłasza <xref:System.NotSupportedException> Jeśli usługa nie jest dostępna.</span><span class="sxs-lookup"><span data-stu-id="7e87a-116">Unlike <xref:System.Activities.Presentation.ServiceManager.GetService%2A>, this method throws a <xref:System.NotSupportedException> if the service is not available.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e87a-117">Nie ma usługi o danym typie.</span><span class="sxs-lookup"><span data-stu-id="7e87a-117">There is no service of the given type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public abstract object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetService(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="7e87a-118">Typ usługi do pobrania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-118">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="7e87a-119">Pobiera żądanej usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-119">Retrieves the requested service.</span></span>  <span data-ttu-id="7e87a-120">Ta metoda zwraca <see langword="null" /> Jeśli usługi nie można zlokalizować.</span><span class="sxs-lookup"><span data-stu-id="7e87a-120">This method returns <see langword="null" /> if the service could not be located.</span></span></summary>
        <returns><span data-ttu-id="7e87a-121">Zwraca <see cref="T:System.Object" />, który jest wystąpieniem usługi lub <see langword="null" /> Jeśli usługi nie zostały opublikowane.</span><span class="sxs-lookup"><span data-stu-id="7e87a-121">Returns <see cref="T:System.Object" />, which is an instance of the service, or <see langword="null" /> if the service has not been published.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-122"><paramref name="serviceType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-122"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="7e87a-123">Typ usługi do pobrania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-123">The type of service to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="7e87a-124">Pobiera żądanej usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-124">Retrieves the requested service.</span></span>  <span data-ttu-id="7e87a-125">Ta metoda zwraca <see langword="null" /> Jeśli usługi nie można zlokalizować.</span><span class="sxs-lookup"><span data-stu-id="7e87a-125">This method returns <see langword="null" /> if the service could not be located.</span></span></summary>
        <returns><span data-ttu-id="7e87a-126">Zwraca wartość typu ogólnego, który jest wystąpieniem usługi, lub <see langword="null" /> Jeśli usługi nie zostały opublikowane.</span><span class="sxs-lookup"><span data-stu-id="7e87a-126">Returns a generic type, which is an instance of the service, or <see langword="null" /> if the service has not been published.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="protected static object GetTarget (Delegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetTarget(class System.Delegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetTarget(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetTarget (callback As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Object ^ GetTarget(Delegate ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="7e87a-127">Delegat można pobrać obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="7e87a-127">The delegate to get the target for.</span></span></param>
        <summary><span data-ttu-id="7e87a-128">Metoda pomocnika, która zwraca obiekt docelowy dla delegata.</span><span class="sxs-lookup"><span data-stu-id="7e87a-128">A helper method that returns the target object for a delegate.</span></span> <span data-ttu-id="7e87a-129">Jeśli delegat został utworzony z serwerem proxy Delegat ogólny, to zwróci poprawnie oryginalnego obiektu, a nie serwera proxy.</span><span class="sxs-lookup"><span data-stu-id="7e87a-129">If the delegate was created to proxy a generic delegate, this will correctly return the original object, not the proxy.</span></span></summary>
        <returns><span data-ttu-id="7e87a-130">Zwraca <see cref="T:System.Object" />, który jest elementem docelowym wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="7e87a-130">Returns <see cref="T:System.Object" />, which is the callback target.</span></span> <span data-ttu-id="7e87a-131">Interfejs może zwracać <see langword="null" /> Jeśli wywołanie zwrotne reprezentuje statycznego obiektu.</span><span class="sxs-lookup"><span data-stu-id="7e87a-131">This can return <see langword="null" /> if the callback represents a static object.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-132"><paramref name="callback" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-132"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Publish">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7e87a-133">Publikuje danego typu usługi, ale nie deklaruje wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-133">Publishes the given service type, but does not declare an instance.</span></span> <span data-ttu-id="7e87a-134">Gdy usługa jest wymagana, wywołania zwrotnego usługi publikowania zostanie wywołany się utworzenie wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-134">When the service is requested, the Publish service callback will be invoked to create the instance.</span></span> <span data-ttu-id="7e87a-135">Wywołanie zwrotne jest wywoływane tylko raz.</span><span class="sxs-lookup"><span data-stu-id="7e87a-135">The callback is invoked only once.</span></span> <span data-ttu-id="7e87a-136">Po utworzeniu tego wystąpienia, które zwróciło są buforowane.</span><span class="sxs-lookup"><span data-stu-id="7e87a-136">After that, the instance it returned is cached.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, System.Activities.Presentation.PublishServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, class System.Activities.Presentation.PublishServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Activities.Presentation.PublishServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, callback As PublishServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Activities::Presentation::PublishServiceCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="7e87a-137">Typ usługi do opublikowania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-137">The type of service to publish.</span></span></param>
        <param name="callback"><span data-ttu-id="7e87a-138">Wywołanie zwrotne, które będą wywoływane, gdy wystąpienie usługi jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="7e87a-138">A callback that will be invoked when an instance of the service is needed.</span></span></param>
        <summary><span data-ttu-id="7e87a-139">Publikuje podany typ usługi, ale nie deklaruje wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-139">Publishes the specified service type, but does not declare an instance.</span></span> <span data-ttu-id="7e87a-140">Gdy usługa jest wymagana, wywołania zwrotnego usługi publikowania zostanie wywołany się utworzenie wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-140">When the service is requested, the Publish service callback will be invoked to create the instance.</span></span> <span data-ttu-id="7e87a-141">Wywołanie zwrotne jest wywoływane tylko raz.</span><span class="sxs-lookup"><span data-stu-id="7e87a-141">The callback is invoked only once.</span></span> <span data-ttu-id="7e87a-142">Po utworzeniu tego wystąpienia, które zwróciło są buforowane.</span><span class="sxs-lookup"><span data-stu-id="7e87a-142">After that, the instance it returned is cached.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-143"><paramref name="serviceType" /> lub <paramref name="callback" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-143"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e87a-144"><paramref name="serviceType" /> został już opublikowany.</span><span class="sxs-lookup"><span data-stu-id="7e87a-144"><paramref name="serviceType" /> has already been published.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, serviceInstance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Object ^ serviceInstance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="7e87a-145">Typ usługi do opublikowania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-145">The type of service to publish.</span></span></param>
        <param name="serviceInstance"><span data-ttu-id="7e87a-146">Wystąpienie usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-146">An instance of the service.</span></span></param>
        <summary><span data-ttu-id="7e87a-147">Publikuje danej usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-147">Publishes the given service.</span></span> <span data-ttu-id="7e87a-148">Po opublikowaniu, wystąpienie usługi pozostaje w programie service manager do momentu edycji kontekst zostanie usunięty z.</span><span class="sxs-lookup"><span data-stu-id="7e87a-148">After it is published, the service instance remains in the service manager until the editing context is disposed of.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-149"><paramref name="serviceType" /> lub <paramref name="serviceInstance" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-149"><paramref name="serviceType" /> or <paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e87a-150"><paramref name="serviceInstance" /> nie implementować lub pochodzić od <paramref name="serviceType" />, lub <paramref name="serviceType" /> został już opublikowany.</span><span class="sxs-lookup"><span data-stu-id="7e87a-150"><paramref name="serviceInstance" /> does not derive from or implement <paramref name="serviceType" />, or <paramref name="serviceType" /> has already been published.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(class System.Activities.Presentation.PublishServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(System.Activities.Presentation.PublishServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (callback As PublishServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(System::Activities::Presentation::PublishServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="7e87a-151">Typ usługi do opublikowania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-151">The type of the service to publish.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="7e87a-152">Wywołanie zwrotne, które będą wywoływane, gdy wystąpienie usługi jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="7e87a-152">A callback that will be invoked when an instance of the service is needed.</span></span></param>
        <summary><span data-ttu-id="7e87a-153">Publikuje danego typu usługi, ale nie deklaruje jeszcze wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-153">Publishes the given service type, but does not declare an instance yet.</span></span> <span data-ttu-id="7e87a-154">Gdy usługa jest wymagana, <see langword="PublishServiceCallback" /> będą wywoływane w celu utworzenia wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-154">When the service is requested, the <see langword="PublishServiceCallback" /> will be invoked to create the instance.</span></span> <span data-ttu-id="7e87a-155">Wywołanie zwrotne jest wywoływane tylko raz.</span><span class="sxs-lookup"><span data-stu-id="7e87a-155">The callback is invoked only once.</span></span> <span data-ttu-id="7e87a-156">Po utworzeniu tego wystąpienia, które zwróciło są buforowane.</span><span class="sxs-lookup"><span data-stu-id="7e87a-156">After that, the instance it returned is cached.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e87a-157"><paramref name="callback" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-157"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (TServiceType serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(!!TServiceType serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (serviceInstance As TServiceType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(TServiceType serviceInstance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceInstance" Type="TServiceType" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="7e87a-158">Typ usługi do opublikowania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-158">The type of the service to publish.</span></span></typeparam>
        <param name="serviceInstance"><span data-ttu-id="7e87a-159">Wystąpienie usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-159">An instance of the service.</span></span></param>
        <summary><span data-ttu-id="7e87a-160">Publikuje danej usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-160">Publishes the given service.</span></span> <span data-ttu-id="7e87a-161">Po opublikowaniu, wystąpienie usługi pozostaje w programie service manager do momentu edycji kontekst zostanie usunięty z.</span><span class="sxs-lookup"><span data-stu-id="7e87a-161">After it is published, the service instance remains in the service manager until the editing context is disposed of.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-162"><paramref name="serviceInstance" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-162"><paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="protected static Delegate RemoveCallback (Delegate existing, Delegate toRemove);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Delegate RemoveCallback(class System.Delegate existing, class System.Delegate toRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.RemoveCallback(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveCallback (existing As Delegate, toRemove As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Delegate ^ RemoveCallback(Delegate ^ existing, Delegate ^ toRemove);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existing" Type="System.Delegate" />
        <Parameter Name="toRemove" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="existing"><span data-ttu-id="7e87a-163">Delegat istniejących do usunięcia z wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="7e87a-163">The existing delegate to remove the callback from.</span></span></param>
        <param name="toRemove"><span data-ttu-id="7e87a-164">Wywołanie zwrotne do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="7e87a-164">The callback to remove.</span></span></param>
        <summary><span data-ttu-id="7e87a-165">Metoda pomocnika, który wykonuje <see langword="Delegate.Remove" /> operację i dekoduje obiektów delegowanych, które serwery proxy do ogólnego wywołań zwrotnych.</span><span class="sxs-lookup"><span data-stu-id="7e87a-165">A helper method that performs a <see langword="Delegate.Remove" /> operation, and unwraps delegates that are proxies to generic callbacks.</span></span> <span data-ttu-id="7e87a-166">Należy używać tej metody w Twojej <see cref="Overload:System.Activities.Presentation.ServiceManager.UnSubscribe" /> implementacji.</span><span class="sxs-lookup"><span data-stu-id="7e87a-166">You should use this method in your <see cref="Overload:System.Activities.Presentation.ServiceManager.UnSubscribe" /> implementations.</span></span></summary>
        <returns><span data-ttu-id="7e87a-167">Zwraca <see cref="T:System.Delegate" />, która jest dostępna nowa wartość do przypisania do istniejącego obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="7e87a-167">Returns <see cref="T:System.Delegate" />, which is  a new value to assign to the existing delegate.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public abstract void Subscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Subscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Subscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Subscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="7e87a-168">Typ usługi do subskrybowania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-168">The type of service to subscribe to.</span></span></param>
        <param name="callback"><span data-ttu-id="7e87a-169">Wywołanie zwrotne, które zostanie powiadomiony, gdy usługa jest dostępna.</span><span class="sxs-lookup"><span data-stu-id="7e87a-169">A callback that will be notified when the service is available.</span></span></param>
        <summary><span data-ttu-id="7e87a-170">Wywołuje podana wywołania zwrotnego, gdy ktoś został opublikowany żądanej usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-170">Invokes the provided callback when someone has published the requested service.</span></span> <span data-ttu-id="7e87a-171">Usługa została już dostępne, ta metoda wywołuje metodę wywołania zwrotnego natychmiast.</span><span class="sxs-lookup"><span data-stu-id="7e87a-171">If the service was already available, this method invokes the callback immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-172"><paramref name="serviceType" /> lub <paramref name="callback" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-172"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Subscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Subscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Subscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Subscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="7e87a-173">Typ usługi do subskrybowania.</span><span class="sxs-lookup"><span data-stu-id="7e87a-173">The type of the service to subscribe to.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="7e87a-174">Wywołanie zwrotne, które zostanie powiadomiony, gdy usługa jest dostępna.</span><span class="sxs-lookup"><span data-stu-id="7e87a-174">A callback that will be notified when the service is available.</span></span></param>
        <summary><span data-ttu-id="7e87a-175">Wywołuje podana wywołania zwrotnego, gdy ktoś został opublikowany żądanej usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-175">Invokes the provided callback when someone has published the requested service.</span></span> <span data-ttu-id="7e87a-176">Usługa została już dostępne, ta metoda wywołuje metodę wywołania zwrotnego natychmiast.</span><span class="sxs-lookup"><span data-stu-id="7e87a-176">If the service was already available, this method invokes the callback immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-177"><paramref name="callback" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-177"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e87a-178">Pobiera moduł wyliczający, który może służyć do wszystkich usług, które publikuje tego programu service manager.</span><span class="sxs-lookup"><span data-stu-id="7e87a-178">Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</span></span></summary>
        <returns><span data-ttu-id="7e87a-179">Zwraca <see cref="T:System.Collections.IEnumerator" />, który zawiera wyliczenie opublikowanych usług.</span><span class="sxs-lookup"><span data-stu-id="7e87a-179">Returns <see cref="T:System.Collections.IEnumerator" />, which contains an enumeration of published services.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe">
      <MemberSignature Language="C#" Value="public abstract void Unsubscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unsubscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unsubscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unsubscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="7e87a-180">Typ usługi do usunięcia z subskrypcji.</span><span class="sxs-lookup"><span data-stu-id="7e87a-180">The type of service to remove the subscription from.</span></span></param>
        <param name="callback"><span data-ttu-id="7e87a-181">Obiekt wywołania zwrotnego, który ma zostać usunięty z subskrypcji.</span><span class="sxs-lookup"><span data-stu-id="7e87a-181">The callback object to remove from the subscription.</span></span></param>
        <summary><span data-ttu-id="7e87a-182">Usuwa subskrypcji dla typu usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-182">Removes a subscription for a service type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-183"><paramref name="serviceType" /> lub <paramref name="callback" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-183"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Unsubscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsubscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unsubscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Unsubscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="7e87a-184">Typ usługi do usunięcia z subskrypcji.</span><span class="sxs-lookup"><span data-stu-id="7e87a-184">The type of the service to remove the subscription from.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="7e87a-185">Obiekt wywołania zwrotnego, który ma zostać usunięty z subskrypcji.</span><span class="sxs-lookup"><span data-stu-id="7e87a-185">The callback object to remove from the subscription.</span></span></param>
        <summary><span data-ttu-id="7e87a-186">Usuwa subskrypcji dla typu usługi.</span><span class="sxs-lookup"><span data-stu-id="7e87a-186">Removes a subscription for a service type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e87a-187"><paramref name="callback" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e87a-187"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>