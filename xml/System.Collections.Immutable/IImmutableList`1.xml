<Type Name="IImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.IImmutableList&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="afb6f66b0d48351df58b47990b4747b4f796fe05" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69339942" /></Metadata><TypeSignature Language="C#" Value="public interface IImmutableList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IImmutableList`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.IImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IImmutableList(Of T)&#xA;Implements IEnumerable(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IImmutableList : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type IImmutableList&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="cf37b-101">Typ elementów na liście.</span><span class="sxs-lookup"><span data-stu-id="cf37b-101">The type of elements in the list.</span></span></typeparam>
    <summary><span data-ttu-id="cf37b-102">Reprezentuje listę elementów, których nie można modyfikować.</span><span class="sxs-lookup"><span data-stu-id="cf37b-102">Represents a list of elements that cannot be modified.</span></span>  
  
 <span data-ttu-id="cf37b-103">**Pakiet NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System. Collections. unzmienny</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">Informacje o niemodyfikowalnych kolekcjach i sposobie instalacji</see>)</span><span class="sxs-lookup"><span data-stu-id="cf37b-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="cf37b-104">Po dodaniu lub usunięciu elementów z <xref:System.Collections.Immutable.IImmutableList%601>, zostanie utworzona kopia oryginalnej listy z zastosowaniem zmian.</span><span class="sxs-lookup"><span data-stu-id="cf37b-104">When you add or remove items from an <xref:System.Collections.Immutable.IImmutableList%601>, a copy of the original list is created, with the changes applied.</span></span> <span data-ttu-id="cf37b-105">Przyrostowe zmiany w udziale listy są możliwie jak najwięcej pamięci ze starszymi wersjami listy i umożliwiają odzyskiwanie elementów bezużytecznych w celu oczyszczenia wszelkich unikatowych danych listy, które nie są już przywoływane.</span><span class="sxs-lookup"><span data-stu-id="cf37b-105">Incremental changes to a list share as much memory as possible with earlier versions of a list and enable garbage collection to clean up any unique list data that is no longer being referenced.</span></span>  
  
<span data-ttu-id="cf37b-106">Aby uzyskać informacje na temat `IImmutableList<T>` tworzenia implementacji, <xref:System.Collections.Immutable.ImmutableList%601?displayProperty=nameWithType>Zobacz.</span><span class="sxs-lookup"><span data-stu-id="cf37b-106">For information on creating an `IImmutableList<T>` implementation, see <xref:System.Collections.Immutable.ImmutableList%601?displayProperty=nameWithType>.</span></span> 
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cf37b-107">Obiekt, który ma zostać dodany do listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-107">The object to add to the list.</span></span></param>
        <summary><span data-ttu-id="cf37b-108">Tworzy kopię listy i dodaje określony obiekt na końcu skopiowanej listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-108">Makes a copy of the list, and adds the specified object to the end of the  copied list.</span></span></summary>
        <returns><span data-ttu-id="cf37b-109">Nowa lista z dodanym obiektem.</span><span class="sxs-lookup"><span data-stu-id="cf37b-109">A new list with the object added.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="cf37b-110">Obiekty, które mają zostać dodane do listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-110">The objects to add to the list.</span></span></param>
        <summary><span data-ttu-id="cf37b-111">Tworzy kopię listy i dodaje określone obiekty na końcu skopiowanej listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-111">Makes a copy of the list and adds the specified objects to the end of the copied list.</span></span></summary>
        <returns><span data-ttu-id="cf37b-112">Nowa lista z dodanymi elementami.</span><span class="sxs-lookup"><span data-stu-id="cf37b-112">A new list with the elements added.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf37b-113">Tworzy listę zawierającą wszystkie usunięte elementy, ale z taką samą semantyką sortowania i kolejności, jak ta lista.</span><span class="sxs-lookup"><span data-stu-id="cf37b-113">Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.</span></span></summary>
        <returns><span data-ttu-id="cf37b-114">Pusta lista, która ma taką samą semantykę sortowania i kolejności, co to wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="cf37b-114">An empty list that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.IndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="cf37b-115">Obiekt, który ma zostać zlokalizowany w <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="cf37b-115">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span> <span data-ttu-id="cf37b-116">Ta wartość może być równa null dla typów referencyjnych.</span><span class="sxs-lookup"><span data-stu-id="cf37b-116">This value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="cf37b-117">Początkowe indeksy wyszukiwania oparte na zero.</span><span class="sxs-lookup"><span data-stu-id="cf37b-117">The zero-based starting indexes of the search.</span></span> <span data-ttu-id="cf37b-118">wartość 0 (zero) jest prawidłowa na pustej liście.</span><span class="sxs-lookup"><span data-stu-id="cf37b-118">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="cf37b-119">Liczba elementów w sekcji do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="cf37b-119">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="cf37b-120">Moduł porównujący równości, który ma <paramref name="item" />być używany do lokalizowania.</span><span class="sxs-lookup"><span data-stu-id="cf37b-120">The equality comparer to use to locate <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="cf37b-121">Wyszukuje określony obiekt i zwraca indeks (liczony od zera) pierwszego wystąpienia w zakresie elementów w <see cref="T:System.Collections.Immutable.IImmutableList`1" /> obiekcie, który zaczyna się od określonego indeksu i zawiera określoną liczbę elementów.</span><span class="sxs-lookup"><span data-stu-id="cf37b-121">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="cf37b-122">Indeks (liczony od zera) pierwszego <paramref name="item" /> wystąpienia elementu <see cref="T:System.Collections.Immutable.IImmutableList`1" /> w zakresie, który zaczyna się <paramref name="index" /> od i zawiera <paramref name="count" /> liczbę elementów, jeśli został znaleziony; w przeciwnym razie-1.</span><span class="sxs-lookup"><span data-stu-id="cf37b-122">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements if found; otherwise -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, element As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Insert(int index, T element);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Insert (index, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cf37b-123">Indeks (liczony od zera), w którym ma zostać wstawiona wartość.</span><span class="sxs-lookup"><span data-stu-id="cf37b-123">The zero-based index at which to insert the value.</span></span></param>
        <param name="element"><span data-ttu-id="cf37b-124">Obiekt do wstawienia.</span><span class="sxs-lookup"><span data-stu-id="cf37b-124">The object to insert.</span></span></param>
        <summary><span data-ttu-id="cf37b-125">Wstawia określony element w określonym indeksie na liście niemodyfikowalnej.</span><span class="sxs-lookup"><span data-stu-id="cf37b-125">Inserts the specified element at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="cf37b-126">Nowa niezmienna lista, która zawiera określony element.</span><span class="sxs-lookup"><span data-stu-id="cf37b-126">A new immutable list that includes the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cf37b-127">Indeks (liczony od zera), w którym należy wstawić nowe elementy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-127">The zero-based index at which the new elements should be inserted.</span></span></param>
        <param name="items"><span data-ttu-id="cf37b-128">Elementy do wstawienia.</span><span class="sxs-lookup"><span data-stu-id="cf37b-128">The elements to insert.</span></span></param>
        <summary><span data-ttu-id="cf37b-129">Wstawia określone elementy w określonym indeksie na liście niemodyfikowalnej.</span><span class="sxs-lookup"><span data-stu-id="cf37b-129">Inserts the specified elements at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="cf37b-130">Nowa niezmienna lista, która zawiera określone elementy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-130">A new immutable list that includes the specified elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.LastIndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="cf37b-131">Obiekt, który ma znajdować się na liście.</span><span class="sxs-lookup"><span data-stu-id="cf37b-131">The object to locate in the list.</span></span> <span data-ttu-id="cf37b-132">Wartość może być <see langword="null" /> dla typów referencyjnych.</span><span class="sxs-lookup"><span data-stu-id="cf37b-132">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="cf37b-133">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="cf37b-133">The zero-based starting index of the search.</span></span> <span data-ttu-id="cf37b-134">wartość 0 (zero) jest prawidłowa na pustej liście.</span><span class="sxs-lookup"><span data-stu-id="cf37b-134">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="cf37b-135">Liczba elementów w sekcji do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="cf37b-135">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="cf37b-136">Funkcja porównująca równość do <paramref name="item" />dopasowania.</span><span class="sxs-lookup"><span data-stu-id="cf37b-136">The equality comparer to match <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="cf37b-137">Wyszukuje określony obiekt i zwraca indeks (liczony od zera) ostatniego wystąpienia w zakresie elementów w <see cref="T:System.Collections.Immutable.IImmutableList`1" /> elemencie, który zawiera określoną liczbę elementów i kończą się określonym indeksem.</span><span class="sxs-lookup"><span data-stu-id="cf37b-137">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="cf37b-138">Zwraca <see cref="T:System.Int32" />wartość.</span><span class="sxs-lookup"><span data-stu-id="cf37b-138">Returns <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Remove (value, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cf37b-139">Obiekt, który ma zostać usunięty z listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-139">The object to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="cf37b-140">Moduł porównujący równości, który ma <paramref name="value" />być używany do lokalizowania.</span><span class="sxs-lookup"><span data-stu-id="cf37b-140">The equality comparer to use to locate <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="cf37b-141">Usuwa pierwsze wystąpienie określonego obiektu z tej niezmiennej listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-141">Removes the first occurrence of a specified object from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="cf37b-142">Usunięto nową listę z określonym obiektem.</span><span class="sxs-lookup"><span data-stu-id="cf37b-142">A new list with the specified object removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="cf37b-143">Delegat, który definiuje warunki elementów do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="cf37b-143">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="cf37b-144">Usuwa wszystkie elementy, które pasują do warunków zdefiniowanych przez określony predykat.</span><span class="sxs-lookup"><span data-stu-id="cf37b-144">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="cf37b-145">Nowa niezmienna lista z usuniętymi elementami.</span><span class="sxs-lookup"><span data-stu-id="cf37b-145">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cf37b-146">Indeks elementu, który ma zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="cf37b-146">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="cf37b-147">Usuwa element w określonym indeksie niezmiennej listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-147">Removes the element at the specified index of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="cf37b-148">Nowa lista z usuniętym elementem.</span><span class="sxs-lookup"><span data-stu-id="cf37b-148">A new list with the element removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="cf37b-149">Obiekty, które mają zostać usunięte z listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-149">The objects to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="cf37b-150">Moduł porównujący równości używany do określenia, <paramref name="items" /> czy pasuje do wszystkich obiektów na liście.</span><span class="sxs-lookup"><span data-stu-id="cf37b-150">The equality comparer to use to determine if <paramref name="items" /> match any objects in the list.</span></span></param>
        <summary><span data-ttu-id="cf37b-151">Usuwa określony obiekt z listy.</span><span class="sxs-lookup"><span data-stu-id="cf37b-151">Removes the specified object from the list.</span></span></summary>
        <returns><span data-ttu-id="cf37b-152">Nowa niezmienna lista z usuniętymi obiektami, jeśli <paramref name="items" /> pasują do nich obiekty na liście.</span><span class="sxs-lookup"><span data-stu-id="cf37b-152">A new immutable list with the specified objects removed, if <paramref name="items" /> matched objects in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : int * int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cf37b-153">Początkowy indeks (liczony od zera) zakresu elementów do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="cf37b-153">The zero-based starting index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="cf37b-154">Liczba elementów do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="cf37b-154">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="cf37b-155">Usuwa zakres elementów z <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="cf37b-155">Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span></summary>
        <returns><span data-ttu-id="cf37b-156">Nowa niezmienna lista z usuniętymi elementami.</span><span class="sxs-lookup"><span data-stu-id="cf37b-156">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="cf37b-157">Element, który ma zostać zastąpiony.</span><span class="sxs-lookup"><span data-stu-id="cf37b-157">The element to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="cf37b-158">Element, który ma zostać zamieniony na <paramref name="oldValue" /> pierwsze wystąpienie z</span><span class="sxs-lookup"><span data-stu-id="cf37b-158">The element to replace the first occurrence of <paramref name="oldValue" /> with</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="cf37b-159">Moduł porównujący równości, który ma <paramref name="oldValue" />być używany do dopasowywania.</span><span class="sxs-lookup"><span data-stu-id="cf37b-159">The equality comparer to use for matching <paramref name="oldValue" />.</span></span></param>
        <summary><span data-ttu-id="cf37b-160">Zwraca nową listę zawierającą pierwszy pasujący element na liście zamieniono na określony element.</span><span class="sxs-lookup"><span data-stu-id="cf37b-160">Returns a new list with the first matching element in the list replaced with the specified element.</span></span></summary>
        <returns><span data-ttu-id="cf37b-161">Nowa lista zawierająca <paramref name="newValue" />, nawet jeśli <paramref name="oldvalue" /> jest taka sama jak <paramref name="newValue" />.</span><span class="sxs-lookup"><span data-stu-id="cf37b-161">A new list that contains <paramref name="newValue" />, even if <paramref name="oldvalue" /> is the same as <paramref name="newValue" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cf37b-162"><paramref name="oldValue" />nie istnieje na liście.</span><span class="sxs-lookup"><span data-stu-id="cf37b-162"><paramref name="oldValue" /> does not exist in the list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberSignature Language="F#" Value="abstract member SetItem : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cf37b-163">Pozycja na liście elementu, który ma zostać zamieniony.</span><span class="sxs-lookup"><span data-stu-id="cf37b-163">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="cf37b-164">Element, do którego ma zostać zamieniony stary element.</span><span class="sxs-lookup"><span data-stu-id="cf37b-164">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="cf37b-165">Zastępuje element na liście w danej pozycji określonym elementem.</span><span class="sxs-lookup"><span data-stu-id="cf37b-165">Replaces an element in the list at a given position with the specified element.</span></span></summary>
        <returns><span data-ttu-id="cf37b-166">Nowa lista, która zawiera nowy element, nawet jeśli element w określonej lokalizacji jest taki sam jak nowy element.</span><span class="sxs-lookup"><span data-stu-id="cf37b-166">A new list that contains the new element, even if the element at the specified location is the same as the new element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
