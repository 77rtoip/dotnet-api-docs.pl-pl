<Type Name="ImmutableArray&lt;T&gt;+Builder" FullName="System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d23fb8c429d08bc84caa340c388f22304626b3e" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68542712" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImmutableArray&lt;T&gt;.Builder : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit ImmutableArray`1/Builder&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableArray`1.Builder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImmutableArray(Of T).Builder&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="public: ref class ImmutableArray&lt;T&gt;::Builder sealed : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ImmutableArray&lt;'T&gt;.Builder = class&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Immutable.ImmutableArrayBuilderDebuggerProxy`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="71a3c-101">Zapisywalny akcesor tablic, który można przekonwertować na <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> wystąpienie bez przydzielania dodatkowej pamięci.</span><span class="sxs-lookup"><span data-stu-id="71a3c-101">A writable array accessor that can be converted into an <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> instance without allocating extra memory.</span></span>  
  
 <span data-ttu-id="71a3c-102">**Pakiet NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System. Collections. unzmienny</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">Informacje o niemodyfikowalnych kolekcjach i sposobie instalacji</see>)</span><span class="sxs-lookup"><span data-stu-id="71a3c-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; unit&#xA;override this.Add : 'T -&gt; unit" Usage="builder.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-103">Obiekt do dodania do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-103">The object to add to the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-104">Dodaje określony element do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-104">Adds the specified item to the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; unit" Usage="builder.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="71a3c-105">Elementy, które mają zostać dodane do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-105">The items to add to the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-106">Dodaje określone elementy do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-106">Adds the specified items to the end of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Immutable.ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As ImmutableArray(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Immutable::ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; unit" Usage="builder.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="71a3c-107">Elementy, które mają zostać dodane do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-107">The items to add to the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-108">Dodaje określone elementy do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-108">Adds the specified items to the end of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Immutable.ImmutableArray&lt;T&gt;.Builder items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray`1.Builder{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As ImmutableArray(Of T).Builder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Immutable::ImmutableArray&lt;T&gt;::Builder ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder -&gt; unit" Usage="builder.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="71a3c-109">Elementy, które mają zostać dodane do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-109">The items to add to the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-110">Dodaje określone elementy do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-110">Adds the specified items to the end of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (params T[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(!T[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (ParamArray items As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(... cli::array &lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : 'T[] -&gt; unit" Usage="builder.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="T[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="71a3c-111">Elementy, które mają zostać dodane do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-111">The items to add to the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-112">Dodaje określone elementy do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-112">Adds the specified items to the end of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Immutable.ImmutableArray&lt;T&gt; items, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As ImmutableArray(Of T), length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Immutable::ImmutableArray&lt;T&gt; items, int length);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * int -&gt; unit" Usage="builder.AddRange (items, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="71a3c-113">Elementy, które mają zostać dodane do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-113">The items to add to the array.</span></span></param>
        <param name="length"><span data-ttu-id="71a3c-114">Liczba elementów z tablicy źródłowej do dodania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-114">The number of elements from the source array to add.</span></span></param>
        <summary><span data-ttu-id="71a3c-115">Dodaje określone elementy do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-115">Adds the specified items to the end of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (T[] items, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(!T[] items, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As T(), length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;T&gt; ^ items, int length);" />
      <MemberSignature Language="F#" Value="member this.AddRange : 'T[] * int -&gt; unit" Usage="builder.AddRange (items, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="T[]" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="71a3c-116">Elementy, które mają zostać dodane do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-116">The items to add to the array.</span></span></param>
        <param name="length"><span data-ttu-id="71a3c-117">Liczba elementów z tablicy źródłowej do dodania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-117">The number of elements from the source array to add.</span></span></param>
        <summary><span data-ttu-id="71a3c-118">Dodaje określone elementy do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-118">Adds the specified items to the end of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange&lt;TDerived&gt;">
      <MemberSignature Language="C#" Value="public void AddRange&lt;TDerived&gt; (System.Collections.Immutable.ImmutableArray&lt;TDerived&gt; items) where TDerived : T;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange&lt;(!T) TDerived&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TDerived&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange(Of TDerived As T) (items As ImmutableArray(Of TDerived))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDerived&gt;&#xA; where TDerived : T void AddRange(System::Collections::Immutable::ImmutableArray&lt;TDerived&gt; items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Collections.Immutable.ImmutableArray&lt;#'T&gt; -&gt; unit" Usage="builder.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <BaseTypeName>T</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;TDerived&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived"><span data-ttu-id="71a3c-119">Typ, który pochodzi od typu elementu znajdującego się już w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-119">The type that derives from the type of item already in the array.</span></span></typeparam>
        <param name="items"><span data-ttu-id="71a3c-120">Elementy, które mają zostać dodane do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-120">The items to add to the end of the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-121">Dodaje określone elementy, które pochodzą z typu, który jest aktualnie w tablicy, do końca tablicy</span><span class="sxs-lookup"><span data-stu-id="71a3c-121">Adds the specified items that derive from the type currently in the array, to the end of the array</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange&lt;TDerived&gt;">
      <MemberSignature Language="C#" Value="public void AddRange&lt;TDerived&gt; (System.Collections.Immutable.ImmutableArray&lt;TDerived&gt;.Builder items) where TDerived : T;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange&lt;(!T) TDerived&gt;(class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!!TDerived&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange(Of TDerived As T) (items As ImmutableArray(Of TDerived).Builder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDerived&gt;&#xA; where TDerived : T void AddRange(System::Collections::Immutable::ImmutableArray&lt;TDerived&gt;::Builder ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Collections.Immutable.ImmutableArray&lt;#'T&gt;.Builder -&gt; unit" Usage="builder.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <BaseTypeName>T</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;TDerived&gt;+Builder" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived"><span data-ttu-id="71a3c-122">Typ, który pochodzi od typu elementu znajdującego się już w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-122">The type that derives from the type of item already in the array.</span></span></typeparam>
        <param name="items"><span data-ttu-id="71a3c-123">Elementy, które mają zostać dodane do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-123">The items to add to the end of the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-124">Dodaje określone elementy, które pochodzą z typu, który jest aktualnie w tablicy, do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-124">Adds the specified items that derive from the type currently in the array, to the end of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange&lt;TDerived&gt;">
      <MemberSignature Language="C#" Value="public void AddRange&lt;TDerived&gt; (TDerived[] items) where TDerived : T;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange&lt;(!T) TDerived&gt;(!!TDerived[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange(Of TDerived As T) (items As TDerived())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDerived&gt;&#xA; where TDerived : T void AddRange(cli::array &lt;TDerived&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : 'Derived[] -&gt; unit" Usage="builder.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <BaseTypeName>T</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="items" Type="TDerived[]" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived"><span data-ttu-id="71a3c-125">Typ, który pochodzi od typu elementu znajdującego się już w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-125">The type that derives from the type of item already in the array.</span></span></typeparam>
        <param name="items"><span data-ttu-id="71a3c-126">Elementy, które mają zostać dodane do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-126">The items to add to end of the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-127">Dodaje określone elementy, które pochodzą z typu, który jest aktualnie w tablicy, do końca tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-127">Adds the specified items that derive from the type currently in the array, to the end of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71a3c-128">Pobiera lub ustawia długość tablicy wewnętrznej.</span><span class="sxs-lookup"><span data-stu-id="71a3c-128">Gets or sets the length of the internal array.</span></span> <span data-ttu-id="71a3c-129">Po ustawieniu, tablica wewnętrzna jest ponownie przydzielana do danej pojemności, jeśli nie jest jeszcze określoną długością.</span><span class="sxs-lookup"><span data-stu-id="71a3c-129">When set, the internal array is reallocated to the given capacity if it is not already the specified length.</span></span></summary>
        <value><span data-ttu-id="71a3c-130">Długość tablicy wewnętrznej.</span><span class="sxs-lookup"><span data-stu-id="71a3c-130">The length of the internal array.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="builder.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-131">Usuwa wszystkie elementy z tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-131">Removes all items from the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="builder.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-132">Obiekt, który ma zostać zlokalizowany w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-132">The object to locate in the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-133">Określa, czy tablica zawiera konkretną wartość.</span><span class="sxs-lookup"><span data-stu-id="71a3c-133">Determines whether the array contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="71a3c-134"><see langword="true" />Jeśli obiekt zostanie znaleziony; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="71a3c-134"><see langword="true" /> if the object is found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="builder.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="71a3c-135">Tablica, do której mają zostać skopiowane.</span><span class="sxs-lookup"><span data-stu-id="71a3c-135">The array to copy to.</span></span></param>
        <param name="index"><span data-ttu-id="71a3c-136">Indeks, w którym ma zostać rozpoczęta operacja kopiowania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-136">The index to start the copy operation.</span></span></param>
        <summary><span data-ttu-id="71a3c-137">Kopiuje bieżącą zawartość do określonej tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-137">Copies the current contents to the specified array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" />
      <MemberSignature Language="VB.NET" Value="Public Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Count : int with get, set" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71a3c-138">Pobiera lub ustawia liczbę elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-138">Gets or sets the number of items in the array.</span></span></summary>
        <value><span data-ttu-id="71a3c-139">Liczba elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-139">The number of items in the array.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71a3c-140">Jeśli wartość zostanie zmniejszona, zawartość tablicy zostanie obcięta.</span><span class="sxs-lookup"><span data-stu-id="71a3c-140">If the value is decreased, the array contents are truncated.</span></span>  
  
 <span data-ttu-id="71a3c-141">Jeśli wartość zostanie zwiększona, dodane elementy są inicjowane do ich wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="71a3c-141">If the value is increased, the added elements are initialized to their default value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="builder.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Collections.Immutable.ImmutableArray`1/Builder/&lt;GetEnumerator&gt;d__48))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Collections.Immutable.ImmutableArray`1/Builder/&lt;GetEnumerator&gt;d__1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-142">Pobiera obiekt, którego można użyć do iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="71a3c-142">Gets an object that can be used to iterate through the collection.</span></span></summary>
        <returns><span data-ttu-id="71a3c-143">Obiekt, którego można użyć do iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="71a3c-143">An object that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="builder.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-144">Element, który ma zostać zlokalizowany w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-144">The item to locate in the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-145">Określa indeks określonego elementu w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-145">Determines the index of a specific item in the array.</span></span></summary>
        <returns><span data-ttu-id="71a3c-146">Indeks <paramref name="item" /> , jeśli znajduje się na liście; w przeciwnym razie-1.</span><span class="sxs-lookup"><span data-stu-id="71a3c-146">The index of <paramref name="item" /> if it's found in the list; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int -&gt; int" Usage="builder.IndexOf (item, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-147">Element, który ma zostać zlokalizowany w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-147">The item to locate in the array.</span></span></param>
        <param name="startIndex"><span data-ttu-id="71a3c-148">Pozycja początkowa wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-148">The starting position of the search.</span></span></param>
        <summary><span data-ttu-id="71a3c-149">Określa indeks określonego elementu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-149">Determines the index of the specified item.</span></span></summary>
        <returns><span data-ttu-id="71a3c-150">Indeks <paramref name="item" /> , jeśli znajduje się na liście; w przeciwnym razie-1.</span><span class="sxs-lookup"><span data-stu-id="71a3c-150">The index of <paramref name="item" /> if it's found in the list; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int -&gt; int" Usage="builder.IndexOf (item, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-151">Element, który ma zostać zlokalizowany w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-151">The item to locate in the array.</span></span></param>
        <param name="startIndex"><span data-ttu-id="71a3c-152">Pozycja początkowa wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-152">The starting position of the search.</span></span></param>
        <param name="count"><span data-ttu-id="71a3c-153">Liczba elementów do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-153">The number of elements to search.</span></span></param>
        <summary><span data-ttu-id="71a3c-154">Określa indeks określonego elementu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-154">Determines the index of the specified item.</span></span></summary>
        <returns><span data-ttu-id="71a3c-155">Indeks <paramref name="item" /> , jeśli znajduje się na liście; w przeciwnym razie-1.</span><span class="sxs-lookup"><span data-stu-id="71a3c-155">The index of <paramref name="item" /> if it's found in the list; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="builder.IndexOf (item, startIndex, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-156">Element, który ma zostać zlokalizowany w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-156">The item to locate in the array.</span></span></param>
        <param name="startIndex"><span data-ttu-id="71a3c-157">Indeks, od którego ma zostać rozpoczęte wyszukiwanie.</span><span class="sxs-lookup"><span data-stu-id="71a3c-157">The index at which to begin the search.</span></span></param>
        <param name="count"><span data-ttu-id="71a3c-158">Pozycja początkowa wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-158">The starting position of the search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="71a3c-159">Moduł porównujący równości do użycia w wyszukiwaniu</span><span class="sxs-lookup"><span data-stu-id="71a3c-159">The equality comparer to use in the search</span></span></param>
        <summary><span data-ttu-id="71a3c-160">Określa indeks dla określonego elementu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-160">Determines the index for the specified item.</span></span></summary>
        <returns><span data-ttu-id="71a3c-161">Indeks <paramref name="item" /> , jeśli znajduje się na liście; w przeciwnym razie-1.</span><span class="sxs-lookup"><span data-stu-id="71a3c-161">The index of <paramref name="item" /> if it's found in the list; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; unit&#xA;override this.Insert : int * 'T -&gt; unit" Usage="builder.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="71a3c-162">Indeks (liczony od zera), w którym ma zostać wstawiony element.</span><span class="sxs-lookup"><span data-stu-id="71a3c-162">The zero-based index at which to insert the item.</span></span></param>
        <param name="item"><span data-ttu-id="71a3c-163">Obiekt, który ma zostać wstawiony do tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-163">The object to insert into the array.</span></span></param>
        <summary><span data-ttu-id="71a3c-164">Wstawia element w tablicy pod określonym indeksem.</span><span class="sxs-lookup"><span data-stu-id="71a3c-164">Inserts an item in the array at the specified index.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T with get, set" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="71a3c-165">Indeks elementu, który ma zostać pobrany lub ustawiony.</span><span class="sxs-lookup"><span data-stu-id="71a3c-165">The index of the item to get or set.</span></span></param>
        <summary><span data-ttu-id="71a3c-166">Pobiera lub ustawia element o określonym indeksie.</span><span class="sxs-lookup"><span data-stu-id="71a3c-166">Gets or sets the item at the specified index.</span></span></summary>
        <value><span data-ttu-id="71a3c-167">Element o określonym indeksie.</span><span class="sxs-lookup"><span data-stu-id="71a3c-167">The item at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="71a3c-168">Określony indeks nie znajduje się w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-168">The specified index is not in the array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ItemRef">
      <MemberSignature Language="C#" Value="public T&amp; ItemRef (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) ItemRef(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ItemRef (index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ ItemRef(int index);" />
      <MemberSignature Language="F#" Value="member this.ItemRef : int -&gt; T&amp;" Usage="builder.ItemRef index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.2">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="71a3c-169">Indeks elementu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-169">The item index.</span></span></param>
        <summary><span data-ttu-id="71a3c-170">Pobiera odwołanie tylko do odczytu do elementu w określonym indeksie.</span><span class="sxs-lookup"><span data-stu-id="71a3c-170">Gets a read-only reference to the element at the specified index.</span></span></summary>
        <returns><span data-ttu-id="71a3c-171">Odwołanie tylko do odczytu do elementu w określonym indeksie.</span><span class="sxs-lookup"><span data-stu-id="71a3c-171">The read-only reference to the element at the specified index.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="71a3c-172"><paramref name="index" />jest większa lub równa liczbie tablic.</span><span class="sxs-lookup"><span data-stu-id="71a3c-172"><paramref name="index" /> is greater or equal to the array count.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T -&gt; int" Usage="builder.LastIndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-173">Element do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-173">The item to search for.</span></span></param>
        <summary><span data-ttu-id="71a3c-174">Określa indeks (0) ostatniego wystąpienia określonego elementu w tej tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-174">Determines the 0-based index of the last occurrence of the specified item in this array.</span></span></summary>
        <returns><span data-ttu-id="71a3c-175">Indeks (0), w którym znaleziono element; lub-1, jeśli nie można go znaleźć.</span><span class="sxs-lookup"><span data-stu-id="71a3c-175">The 0-based index where the item was found; or -1 if it could not be found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int -&gt; int" Usage="builder.LastIndexOf (item, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-176">Element do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-176">The item to search for.</span></span></param>
        <param name="startIndex"><span data-ttu-id="71a3c-177">Pozycja początkowa wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-177">The starting position of the search.</span></span></param>
        <summary><span data-ttu-id="71a3c-178">Określa indeks (0) ostatniego wystąpienia określonego elementu w tej tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-178">Determines the 0-based index of the last occurrence of the specified item in this array.</span></span></summary>
        <returns><span data-ttu-id="71a3c-179">Indeks (0) w tablicy, w której znaleziono element; lub-1, jeśli nie można go znaleźć.</span><span class="sxs-lookup"><span data-stu-id="71a3c-179">The 0-based index into the array where the item was found; or -1 if it could not be found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int -&gt; int" Usage="builder.LastIndexOf (item, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-180">Element do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-180">The item to search for.</span></span></param>
        <param name="startIndex"><span data-ttu-id="71a3c-181">Pozycja początkowa wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-181">The starting position of the search.</span></span></param>
        <param name="count"><span data-ttu-id="71a3c-182">Liczba elementów do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-182">The number of elements to search.</span></span></param>
        <summary><span data-ttu-id="71a3c-183">Określa indeks (0) ostatniego wystąpienia określonego elementu w tej tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-183">Determines the 0-based index of the last occurrence of the specified item in this array.</span></span></summary>
        <returns><span data-ttu-id="71a3c-184">Indeks (0) w tablicy, w której znaleziono element; lub-1, jeśli nie można go znaleźć.</span><span class="sxs-lookup"><span data-stu-id="71a3c-184">The 0-based index into the array where the item was found; or -1 if it could not be found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 startIndex, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int startIndex, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="builder.LastIndexOf (item, startIndex, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="71a3c-185">Element do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-185">The item to search for.</span></span></param>
        <param name="startIndex"><span data-ttu-id="71a3c-186">Pozycja początkowa wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-186">The starting position of the search.</span></span></param>
        <param name="count"><span data-ttu-id="71a3c-187">Liczba elementów do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-187">The number of elements to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="71a3c-188">Moduł porównujący równości do użycia w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-188">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="71a3c-189">Określa indeks (0) ostatniego wystąpienia określonego elementu w tej tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-189">Determines the 0-based index of the last occurrence of the specified item in this array.</span></span></summary>
        <returns><span data-ttu-id="71a3c-190">Indeks (0) w tablicy, w której znaleziono element; lub-1, jeśli nie można go znaleźć.</span><span class="sxs-lookup"><span data-stu-id="71a3c-190">The 0-based index into the array where the item was found; or -1 if it could not be found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveToImmutable">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; MoveToImmutable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; MoveToImmutable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveToImmutable () As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; MoveToImmutable();" />
      <MemberSignature Language="F#" Value="member this.MoveToImmutable : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="builder.MoveToImmutable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-191">Wyodrębnia tablicę wewnętrzną jako <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> i zastępuje ją tablicą o zerowej długości.</span><span class="sxs-lookup"><span data-stu-id="71a3c-191">Extracts the internal array as an <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> and replaces it              with a zero length array.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="71a3c-192">Gdy <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> nie równa <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />się.</span><span class="sxs-lookup"><span data-stu-id="71a3c-192">When <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> doesn't              equal <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (element As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T element);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T -&gt; bool&#xA;override this.Remove : 'T -&gt; bool" Usage="builder.Remove element" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="71a3c-193">Element do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="71a3c-193">The item to remove.</span></span></param>
        <summary><span data-ttu-id="71a3c-194">Usuwa określony element.</span><span class="sxs-lookup"><span data-stu-id="71a3c-194">Removes the specified element.</span></span></summary>
        <returns><span data-ttu-id="71a3c-195"><see langword="true" />Jeśli <paramref name="element" /> został znaleziony i usunięty; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="71a3c-195"><see langword="true" /> if <paramref name="element" /> was found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="builder.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="71a3c-196">Liczony od zera indeks elementu, który ma zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="71a3c-196">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="71a3c-197">Usuwa element o określonym indeksie z tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-197">Removes the item at the specified index from the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; unit" Usage="builder.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-198">Odwraca kolejność elementów w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="71a3c-198">Reverses the order of elements in the collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="builder.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-199">Sortuje zawartość tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-199">Sorts the contents of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="builder.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="71a3c-200">Moduł porównujący do użycia podczas sortowania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-200">The comparer to use for sorting.</span></span> <span data-ttu-id="71a3c-201">Jeśli jest to <see langword="null" />funkcja porównująca, używana jest domyślna funkcja porównująca dla typu elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-201">If comparer is <see langword="null" />, the default comparer for the elements type in the array is used.</span></span></param>
        <summary><span data-ttu-id="71a3c-202">Sortuje zawartość tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-202">Sorts the contents of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; unit" Usage="builder.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="comparison"><span data-ttu-id="71a3c-203"><see cref="T:System.Comparison`1" /> Do użycia podczas porównywania elementów.</span><span class="sxs-lookup"><span data-stu-id="71a3c-203">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span></span></param>
        <summary><span data-ttu-id="71a3c-204">Sortuje elementy w całej tablicy przy użyciu określonego <see cref="T:System.Comparison`1" />.</span><span class="sxs-lookup"><span data-stu-id="71a3c-204">Sorts the elements in the entire array using the specified <see cref="T:System.Comparison`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="71a3c-205"><paramref name="comparison" />ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="71a3c-205"><paramref name="comparison" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (index As Integer, count As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="builder.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="71a3c-206">Początkowy indeks sortowania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-206">The starting index for the sort.</span></span></param>
        <param name="count"><span data-ttu-id="71a3c-207">Liczba elementów do uwzględnienia w sortowaniu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-207">The number of elements to include in the sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="71a3c-208">Moduł porównujący do użycia podczas sortowania.</span><span class="sxs-lookup"><span data-stu-id="71a3c-208">The comparer to use for sorting.</span></span> <span data-ttu-id="71a3c-209">Jeśli jest to <see langword="null" />funkcja porównująca, używana jest domyślna funkcja porównująca dla typu elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-209">If comparer is <see langword="null" />, the default comparer for the elements type in the array is used.</span></span></param>
        <summary><span data-ttu-id="71a3c-210">Sortuje zawartość tablicy.</span><span class="sxs-lookup"><span data-stu-id="71a3c-210">Sorts the contents of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71a3c-211">Pobiera wartość wskazującą, czy jest tylko <see cref="T:System.Collections.Generic.ICollection`1" /> do odczytu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-211">Gets a value that indicates whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="71a3c-212"><see langword="true" />Jeśli jest <see cref="T:System.Collections.Generic.ICollection`1" /> tylko do odczytu; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="71a3c-212"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-213">Zwraca moduł wyliczający, który wykonuje iterację przez tablicę.</span><span class="sxs-lookup"><span data-stu-id="71a3c-213">Returns an enumerator that iterates through the array.</span></span></summary>
        <returns><span data-ttu-id="71a3c-214">Moduł wyliczający, który wykonuje iterację przez tablicę.</span><span class="sxs-lookup"><span data-stu-id="71a3c-214">An enumerator that iterates through the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71a3c-215">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="71a3c-215">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="71a3c-216">Może być używana tylko wtedy, <xref:System.Collections.Immutable.ImmutableArray%601.Builder> gdy wystąpienie jest rzutowane <xref:System.Collections.Generic.IEnumerable%601> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-216">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601.Builder> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-217">Zwraca moduł wyliczający, który wykonuje iterację przez tablicę.</span><span class="sxs-lookup"><span data-stu-id="71a3c-217">Returns an enumerator that iterates through the array.</span></span></summary>
        <returns><span data-ttu-id="71a3c-218">Moduł wyliczający, który wykonuje iterację przez tablicę.</span><span class="sxs-lookup"><span data-stu-id="71a3c-218">An enumerator that iterates through the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71a3c-219">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="71a3c-219">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="71a3c-220">Może być używana tylko wtedy, <xref:System.Collections.Immutable.ImmutableArray%601.Builder> gdy wystąpienie jest rzutowane <xref:System.Collections.IEnumerable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-220">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601.Builder> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="builder.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-221">Tworzy nową tablicę z bieżącą zawartością tego <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />elementu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-221">Creates a new array with the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</span></span></summary>
        <returns><span data-ttu-id="71a3c-222">Nowa tablica z zawartością <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</span><span class="sxs-lookup"><span data-stu-id="71a3c-222">A new array with the contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToImmutable">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; ToImmutable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; ToImmutable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable" />
      <MemberSignature Language="VB.NET" Value="Public Function ToImmutable () As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; ToImmutable();" />
      <MemberSignature Language="F#" Value="member this.ToImmutable : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="builder.ToImmutable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71a3c-223">Zwraca niemodyfikowalną tablicę, która zawiera bieżącą zawartość <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />tego elementu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-223">Returns an immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</span></span></summary>
        <returns><span data-ttu-id="71a3c-224">Niezmienna tablica, która zawiera bieżącą zawartość tego <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />elementu.</span><span class="sxs-lookup"><span data-stu-id="71a3c-224">An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>