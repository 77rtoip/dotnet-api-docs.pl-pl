<Type Name="ImmutableInterlocked" FullName="System.Collections.Immutable.ImmutableInterlocked">
  <TypeSignature Language="C#" Value="public static class ImmutableInterlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ImmutableInterlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableInterlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class ImmutableInterlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImmutableInterlocked abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8e64d-101">Zawiera mechanizmy blokowanego programu exchange do obsługi kolekcji niezmienialnych.</span><span class="sxs-lookup"><span data-stu-id="8e64d-101">Contains interlocked exchange mechanisms for immutable collections.</span></span>  
  
 <span data-ttu-id="8e64d-102">**Pakiet NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">o kolekcjach niezmienialnych oraz instrukcje dotyczące instalowania</see>)</span><span class="sxs-lookup"><span data-stu-id="8e64d-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>To be added.</remarks>
    <threadsafe><span data-ttu-id="8e64d-103">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="8e64d-103">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; addValueFactory, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ addValueFactory, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location"><span data-ttu-id="8e64d-104">Zmienna lub pola automatycznie zaktualizować, jeśli określony nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="8e64d-104">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="8e64d-105">Klucz dla wartości dodać lub zaktualizować.</span><span class="sxs-lookup"><span data-stu-id="8e64d-105">The key for the value to add or update.</span></span></param>
        <param name="addValueFactory"><span data-ttu-id="8e64d-106">Funkcja, która odbiera klucz i zwraca nową wartość do dodania do słownika, gdy nie wcześniej istnieje wartość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-106">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</span></span></param>
        <param name="updateValueFactory"><span data-ttu-id="8e64d-107">Funkcja, która odbiera klucz i poprzedniej wartości i zwraca nową wartość, z którą chcesz zaktualizować słownika.</span><span class="sxs-lookup"><span data-stu-id="8e64d-107">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span></span></param>
        <summary><span data-ttu-id="8e64d-108">Pobiera wartość ze słownika po dodaniu go lub zaktualizować istniejący wpis.</span><span class="sxs-lookup"><span data-stu-id="8e64d-108">Obtains the value from a dictionary after having added it or updated an existing entry.</span></span></summary>
        <returns><span data-ttu-id="8e64d-109">Wartość dodane lub zaktualizowane.</span><span class="sxs-lookup"><span data-stu-id="8e64d-109">The added or updated value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue addValue, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue addValue, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location"><span data-ttu-id="8e64d-110">Zmienna lub pola automatycznie zaktualizować, jeśli określony nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="8e64d-110">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="8e64d-111">Klucz dla wartości dodać lub zaktualizować.</span><span class="sxs-lookup"><span data-stu-id="8e64d-111">The key for the value to add or update.</span></span></param>
        <param name="addValue"><span data-ttu-id="8e64d-112">Wartość do użycia, jeśli nie ma żadnej poprzedniej wartości.</span><span class="sxs-lookup"><span data-stu-id="8e64d-112">The value to use if no previous value exists.</span></span></param>
        <param name="updateValueFactory"><span data-ttu-id="8e64d-113">Funkcja, która odbiera klucz i poprzedniej wartości i zwraca nową wartość, z którą chcesz zaktualizować słownika.</span><span class="sxs-lookup"><span data-stu-id="8e64d-113">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span></span></param>
        <summary><span data-ttu-id="8e64d-114">Pobiera wartość ze słownika po dodaniu go lub zaktualizować istniejący wpis.</span><span class="sxs-lookup"><span data-stu-id="8e64d-114">Obtains the value from a dictionary after having added it or updated an existing entry.</span></span></summary>
        <returns><span data-ttu-id="8e64d-115">Wartość dodane lub zaktualizowane.</span><span class="sxs-lookup"><span data-stu-id="8e64d-115">The added or updated value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Enqueue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enqueue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enqueue(Of T) (ByRef location As ImmutableQueue(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Enqueue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-116">Typ elementów zawartych w kolekcji</span><span class="sxs-lookup"><span data-stu-id="8e64d-116">The type of items contained in the collection</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-117">Zmienna lub pola można automatycznie zaktualizować.</span><span class="sxs-lookup"><span data-stu-id="8e64d-117">The variable or field to atomically update.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-118">Wartość można umieścić w kolejce.</span><span class="sxs-lookup"><span data-stu-id="8e64d-118">The value to enqueue.</span></span></param>
        <summary><span data-ttu-id="8e64d-119">Automatycznie enqueues element na końcu kolejki.</span><span class="sxs-lookup"><span data-stu-id="8e64d-119">Atomically enqueues an element to the end of a queue.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="8e64d-120">Typ kluczy zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-120">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="8e64d-121">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-121">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-122">Zmienna lub pola automatycznie zaktualizować, jeśli określony nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="8e64d-122">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="8e64d-123">Klucz wartości do pobrania lub Dodaj.</span><span class="sxs-lookup"><span data-stu-id="8e64d-123">The key for the value to retrieve or add.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="8e64d-124">Funkcja do wykonania w celu uzyskania wartości do wstawienia do słownika, jeśli klucz nie zostanie znaleziony.</span><span class="sxs-lookup"><span data-stu-id="8e64d-124">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span></span> <span data-ttu-id="8e64d-125">Ten delegat nie będzie można wywołać więcej niż raz.</span><span class="sxs-lookup"><span data-stu-id="8e64d-125">This delegate will not be invoked more than once.</span></span></param>
        <summary><span data-ttu-id="8e64d-126">Pobiera wartość o określonym kluczu ze słownika, lub jeśli nie można odnaleźć klucza, dodaje nową wartość do słownika.</span><span class="sxs-lookup"><span data-stu-id="8e64d-126">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="8e64d-127">Wartość w określonym kluczu lub <paramref name="valueFactory" /> Jeśli klucz nie jest obecny.</span><span class="sxs-lookup"><span data-stu-id="8e64d-127">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="8e64d-128">Typ kluczy zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-128">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="8e64d-129">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-129">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-130">Zmienna lub pola można zaktualizować automatycznie, jeśli określony klucz nie jest w słowniku.</span><span class="sxs-lookup"><span data-stu-id="8e64d-130">The variable or field to atomically update if the specified key is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="8e64d-131">Klucz wartości do pobrania lub dodać.</span><span class="sxs-lookup"><span data-stu-id="8e64d-131">The key for the value to get or add.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-132">Nie znaleziono wartość do dodania do słownika klucza.</span><span class="sxs-lookup"><span data-stu-id="8e64d-132">The value to add to the dictionary the key is not found.</span></span></param>
        <summary><span data-ttu-id="8e64d-133">Pobiera wartość o określonym kluczu ze słownika, lub jeśli nie można odnaleźć klucza, dodaje nową wartość do słownika.</span><span class="sxs-lookup"><span data-stu-id="8e64d-133">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="8e64d-134">Wartość w określonym kluczu lub <paramref name="valueFactory" /> Jeśli klucz nie jest obecny.</span><span class="sxs-lookup"><span data-stu-id="8e64d-134">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue,TArg&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue,TArg&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TArg,TValue&gt; valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue, TArg&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`3&lt;!!TKey, !!TArg, !!TValue&gt; valueFactory, !!TArg factoryArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue, TArg) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TArg, TValue), factoryArgument As TArg) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue, typename TArg&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TArg, TValue&gt; ^ valueFactory, TArg factoryArgument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TArg,TValue&gt;" />
        <Parameter Name="factoryArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="8e64d-135">Typ kluczy zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-135">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="8e64d-136">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-136">The type of the values contained in the collection.</span></span></typeparam>
        <typeparam name="TArg">To be added.</typeparam>
        <param name="location"><span data-ttu-id="8e64d-137">Zmienna lub pola można zaktualizować, jeśli określony nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="8e64d-137">The variable or field to update if the specified is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="8e64d-138">Klucz wartości do pobrania lub Dodaj.</span><span class="sxs-lookup"><span data-stu-id="8e64d-138">The key for the value to retrieve or add.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="8e64d-139">Funkcja do wykonania w celu uzyskania wartości do wstawienia do słownika, jeśli klucz nie zostanie znaleziony.</span><span class="sxs-lookup"><span data-stu-id="8e64d-139">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span></span></param>
        <param name="factoryArgument"><span data-ttu-id="8e64d-140">Argument do przekazania do fabryki wartości.</span><span class="sxs-lookup"><span data-stu-id="8e64d-140">The argument to pass to the value factory.</span></span></param>
        <summary><span data-ttu-id="8e64d-141">Pobiera wartość o określonym kluczu ze słownika, lub jeśli nie można odnaleźć klucza, dodaje nową wartość do słownika.</span><span class="sxs-lookup"><span data-stu-id="8e64d-141">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="8e64d-142">Wartość w określonym kluczu lub <paramref name="valueFactory" /> Jeśli klucz nie jest obecny.</span><span class="sxs-lookup"><span data-stu-id="8e64d-142">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedCompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedCompareExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value, System.Collections.Immutable.ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedCompareExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedCompareExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T), comparand As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedCompareExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value, System::Collections::Immutable::ImmutableArray&lt;T&gt; comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="comparand" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-143">Typ elementu przechowywane w tablicy.</span><span class="sxs-lookup"><span data-stu-id="8e64d-143">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-144">Miejsce docelowe, którego wartość jest porównywana z <c>wzorzec</c> i ewentualnie zamieniany.</span><span class="sxs-lookup"><span data-stu-id="8e64d-144">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-145">Wartość, która zastąpi wartość docelowego, jeśli wynikiem porównania jest równość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-145">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="8e64d-146">Wartość, która jest porównywana z wartością w <c>lokalizacji</c>.</span><span class="sxs-lookup"><span data-stu-id="8e64d-146">The value that is compared to the value at <c>location</c>.</span></span></param>
        <summary>  
  
 <span data-ttu-id="8e64d-147">Porównuje dwie tablice niezmienne równości i, jeśli są one takie same, zastąpi tablic.</span><span class="sxs-lookup"><span data-stu-id="8e64d-147">Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.</span></span></summary>
        <returns><span data-ttu-id="8e64d-148">Pierwotna wartość w <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="8e64d-148">The original value in <paramref name="location" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-149">Typ elementu przechowywane w tablicy.</span><span class="sxs-lookup"><span data-stu-id="8e64d-149">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-150">Tablica można ustawić na określoną wartość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-150">The array to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-151">Wartość, do której <c>lokalizacji</c> ustawiono parametr.</span><span class="sxs-lookup"><span data-stu-id="8e64d-151">The value to which the <c>location</c> parameter is set.</span></span></param>
        <summary>  
  
 <span data-ttu-id="8e64d-152">Ustawia tablicy do określonej tablicy i zwraca odwołanie do tablicy oryginalnej jako operacją niepodzielną.</span><span class="sxs-lookup"><span data-stu-id="8e64d-152">Sets an array to the specified array and returns a reference to the original array, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="8e64d-153">Oryginalna wartość <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="8e64d-153">The original value of <paramref name="location" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedInitialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool InterlockedInitialize&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InterlockedInitialize&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedInitialize(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool InterlockedInitialize(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-154">Typ elementu przechowywane w tablicy.</span><span class="sxs-lookup"><span data-stu-id="8e64d-154">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-155">Tablica można ustawić na określoną wartość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-155">The array to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-156">Wartość, do której <c>lokalizacji</c> parametru jest ustawiona, jeśli nie został zainicjowany.</span><span class="sxs-lookup"><span data-stu-id="8e64d-156">The value to which the <c>location</c> parameter is set, if it’s not initialized.</span></span></param>
        <summary>  
  
 <span data-ttu-id="8e64d-157">Ustawia tablicy do określonej tablicy, jeśli tablica nie został zainicjowany.</span><span class="sxs-lookup"><span data-stu-id="8e64d-157">Sets an array to the specified array if the array has not been initialized.</span></span></summary>
        <returns>
          <span data-ttu-id="8e64d-158"><see langword="true" /> Jeśli określona wartość; tablicy  w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8e64d-158"><see langword="true" /> if the array was assigned the specified value;  otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Push(Of T) (ByRef location As ImmutableStack(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Push(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-159">Typ elementów w stosie.</span><span class="sxs-lookup"><span data-stu-id="8e64d-159">The type of items in the stack.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-160">Stos do aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-160">The stack to update.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-161">Wartość do wypychania na stosie.</span><span class="sxs-lookup"><span data-stu-id="8e64d-161">The value to push on the stack.</span></span></param>
        <summary><span data-ttu-id="8e64d-162">Wypycha nowy element na stosie.</span><span class="sxs-lookup"><span data-stu-id="8e64d-162">Pushes a new element onto the stack.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="8e64d-163">Typ kluczy zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-163">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="8e64d-164">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-164">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-165">Słownik do aktualizacji z określonym kluczem i wartością.</span><span class="sxs-lookup"><span data-stu-id="8e64d-165">The dictionary to update with the specified key and value.</span></span></param>
        <param name="key"><span data-ttu-id="8e64d-166">Klucz do dodania, jeśli nie jest już zdefiniowany w słowniku.</span><span class="sxs-lookup"><span data-stu-id="8e64d-166">The key to add, if is not already defined in the dictionary.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-167">Wartość do dodania.</span><span class="sxs-lookup"><span data-stu-id="8e64d-167">The value to add.</span></span></param>
        <summary><span data-ttu-id="8e64d-168">Dodaje określony klucz i wartość do słownika, jeśli klucz nie jest w słowniku.</span><span class="sxs-lookup"><span data-stu-id="8e64d-168">Adds the specified key and value to the dictionary if the key is not in the dictionary.</span></span></summary>
        <returns>
          <span data-ttu-id="8e64d-169"><see langword="true" /> Jeśli klucz nie jest słownika. w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8e64d-169"><see langword="true" /> if the key is not in the dictionary; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryDequeue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDequeue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDequeue(Of T) (ByRef location As ImmutableQueue(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryDequeue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-170">Typ elementów w kolejce.</span><span class="sxs-lookup"><span data-stu-id="8e64d-170">The type of items in the queue.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-171">Zmienna lub pola można automatycznie zaktualizować.</span><span class="sxs-lookup"><span data-stu-id="8e64d-171">The variable or field to atomically update.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-172">Ustaw wartość z węzła głównego kolejki, jeśli kolejka nie jest pusty.</span><span class="sxs-lookup"><span data-stu-id="8e64d-172">Set to the value from the head of the queue, if the queue not empty.</span></span></param>
        <summary><span data-ttu-id="8e64d-173">Automatycznie usuwa i zwraca wartość określonego elementu head kolejki, jeśli kolejka nie jest pusty.</span><span class="sxs-lookup"><span data-stu-id="8e64d-173">Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.</span></span></summary>
        <returns>
          <span data-ttu-id="8e64d-174"><see langword="true" /> Jeśli kolejka nie jest pusty i zostanie usunięty head element; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8e64d-174"><see langword="true" /> if the queue is not empty and the head element is removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryPop&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryPop&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryPop(Of T) (ByRef location As ImmutableStack(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryPop(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-175">Typ elementów w stosie.</span><span class="sxs-lookup"><span data-stu-id="8e64d-175">The type of items in the stack.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-176">Stos do aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-176">The stack to update.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-177">Odbiera wartość usunięte ze stosu, jeśli stos nie jest pusty.</span><span class="sxs-lookup"><span data-stu-id="8e64d-177">Receives the value removed from the stack, if the stack is not empty.</span></span></param>
        <summary><span data-ttu-id="8e64d-178">Usuwa element ze szczytu stosu, w przypadku elementu do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="8e64d-178">Removes an element from the top of the stack, if there is an element to remove.</span></span></summary>
        <returns>
          <span data-ttu-id="8e64d-179"><see langword="true" /> Jeśli element zostanie usunięty ze stosu; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8e64d-179"><see langword="true" /> if an element is removed from the stack; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRemove&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRemove&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRemove(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryRemove(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="8e64d-180">Typ kluczy zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-180">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="8e64d-181">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-181">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-182">Słownik do aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-182">The dictionary to update.</span></span></param>
        <param name="key"><span data-ttu-id="8e64d-183">Klucz do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="8e64d-183">The key to remove.</span></span></param>
        <param name="value"><span data-ttu-id="8e64d-184">Otrzymuje wartość usunięty element, jeśli słownik nie jest pusty.</span><span class="sxs-lookup"><span data-stu-id="8e64d-184">Receives the value of the removed item, if the dictionary is not empty.</span></span></param>
        <summary><span data-ttu-id="8e64d-185">Usuwa element z określonym kluczem, jeśli ten klucz istnieje.</span><span class="sxs-lookup"><span data-stu-id="8e64d-185">Removes the element with the specified key, if the key exists.</span></span></summary>
        <returns>
          <span data-ttu-id="8e64d-186"><see langword="true" /> Jeśli klucz został znaleziony i usunięte; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8e64d-186"><see langword="true" /> if the key was found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue newValue, !!TValue comparisonValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="8e64d-187">Typ kluczy zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-187">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="8e64d-188">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-188">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-189">Słownik do aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-189">The dictionary to update.</span></span></param>
        <param name="key"><span data-ttu-id="8e64d-190">Klucz do aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="8e64d-190">The key to update.</span></span></param>
        <param name="newValue"><span data-ttu-id="8e64d-191">Nowa wartość do ustawienia.</span><span class="sxs-lookup"><span data-stu-id="8e64d-191">The new value to set.</span></span></param>
        <param name="comparisonValue"><span data-ttu-id="8e64d-192">Bieżąca wartość dla <c>klucza</c> aby aktualizacja powiodła się.</span><span class="sxs-lookup"><span data-stu-id="8e64d-192">The current value for <c>key</c> in order for the update to succeed.</span></span></param>
        <summary><span data-ttu-id="8e64d-193">Ustawia określony klucz do określonej wartości, jeśli określony klucz jest już ustawiona na określoną wartość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-193">Sets the specified key to the specified value if the specified key already is set to a specific value.</span></span></summary>
        <returns>
          <span data-ttu-id="8e64d-194"><see langword="true" /> Jeśli <paramref name="key" /> i <paramref name="comparisonValue" /> są obecne w słowniku i porównanie zostało zaktualizowane do <paramref name="newValue" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8e64d-194"><see langword="true" /> if <paramref name="key" /> and <paramref name="comparisonValue" /> are present in the dictionary and comparison was updated to <paramref name="newValue" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T&gt; (ref T location, Func&lt;T,T&gt; transformer) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T&gt;(!!T&amp; location, class System.Func`2&lt;!!T, !!T&gt; transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class) (ByRef location As T, transformer As Func(Of T, T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, T&gt; ^ transformer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-195">Typ danych.</span><span class="sxs-lookup"><span data-stu-id="8e64d-195">The type of data.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-196">Zmienna lub pola zostanie zmieniony, które mogą być używane przez wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="8e64d-196">The variable or field to be changed, which may be accessed by multiple threads.</span></span></param>
        <param name="transformer"><span data-ttu-id="8e64d-197">Funkcja mutuje wartość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-197">A function that mutates the value.</span></span> <span data-ttu-id="8e64d-198">Ta funkcja powinien być efektem ubocznym bezpłatne, mogą uruchamiać wielokrotnie, gdy szczepy występują w przypadku innych wątków.</span><span class="sxs-lookup"><span data-stu-id="8e64d-198">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span></span></param>
        <summary><span data-ttu-id="8e64d-199">Mutuje wartość w miejscu z optymistyczne blokowanie semantyką transakcji za pomocą określonego przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="8e64d-199">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span></span>             <span data-ttu-id="8e64d-200">Transformacja próba zostanie ponowiona tyle razy, w razie potrzeby wygrać optymistyczne blokowanie wyścigu.</span><span class="sxs-lookup"><span data-stu-id="8e64d-200">The transformation is retried as many times as necessary to win the optimistic locking race.</span></span></summary>
        <returns>
          <span data-ttu-id="8e64d-201"><c>wartość true,</c> Jeśli wartość lokalizacji zostanie zmieniona, stosując wynik <paramref name="transformer" /> funkcji;             <c>false</c> Jeśli wartość lokalizacji pozostają takie same, ponieważ ostatnia wywołanie <paramref name="transformer" /> zwróciła wartość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-201"><c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T,TArg&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T,TArg&gt; (ref T location, Func&lt;T,TArg,T&gt; transformer, TArg transformerArgument) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T, TArg&gt;(!!T&amp; location, class System.Func`3&lt;!!T, !!TArg, !!T&gt; transformer, !!TArg transformerArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class, TArg As Class) (ByRef location As T, transformer As Func(Of T, TArg, T), transformerArgument As TArg) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TArg&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, TArg, T&gt; ^ transformer, TArg transformerArgument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,TArg,T&gt;" />
        <Parameter Name="transformerArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8e64d-202">Typ danych.</span><span class="sxs-lookup"><span data-stu-id="8e64d-202">The type of data.</span></span></typeparam>
        <typeparam name="TArg"><span data-ttu-id="8e64d-203">Typ argumentu przekazany do <c>transformatora</c>.</span><span class="sxs-lookup"><span data-stu-id="8e64d-203">The type of argument passed to the <c>transformer</c>.</span></span></typeparam>
        <param name="location"><span data-ttu-id="8e64d-204">Zmienna lub pola zostanie zmieniony, które mogą być używane przez wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="8e64d-204">The variable or field to be changed, which may be accessed by multiple threads.</span></span></param>
        <param name="transformer"><span data-ttu-id="8e64d-205">Funkcja mutuje wartość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-205">A function that mutates the value.</span></span> <span data-ttu-id="8e64d-206">Ta funkcja powinien być efektem ubocznym bezpłatne, mogą uruchamiać wielokrotnie, gdy szczepy występują w przypadku innych wątków.</span><span class="sxs-lookup"><span data-stu-id="8e64d-206">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span></span></param>
        <param name="transformerArgument"><span data-ttu-id="8e64d-207">Argument do przekazania do <c>transformatora</c>.</span><span class="sxs-lookup"><span data-stu-id="8e64d-207">The argument to pass to <c>transformer</c>.</span></span></param>
        <summary><span data-ttu-id="8e64d-208">Mutuje wartość w miejscu z optymistyczne blokowanie semantyką transakcji za pomocą określonego przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="8e64d-208">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span></span>             <span data-ttu-id="8e64d-209">Transformacja próba zostanie ponowiona tyle razy, w razie potrzeby wygrać optymistyczne blokowanie wyścigu.</span><span class="sxs-lookup"><span data-stu-id="8e64d-209">The transformation is retried as many times as necessary to win the optimistic locking race.</span></span></summary>
        <returns>
          <span data-ttu-id="8e64d-210"><c>wartość true,</c> Jeśli wartość lokalizacji zostanie zmieniona, stosując wynik <paramref name="transformer" /> funkcji;             <c>false</c> Jeśli wartość lokalizacji pozostają takie same, ponieważ ostatnia wywołanie <paramref name="transformer" /> zwróciła wartość.</span><span class="sxs-lookup"><span data-stu-id="8e64d-210"><c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>