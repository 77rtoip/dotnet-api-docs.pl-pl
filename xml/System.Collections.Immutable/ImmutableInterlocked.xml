<Type Name="ImmutableInterlocked" FullName="System.Collections.Immutable.ImmutableInterlocked">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51557de34345bb9f42852b6ded4cb3f9be8842f0" /><Meta Name="ms.sourcegitcommit" Value="8544f14c8194a55eb22d46721b0bbe46f345c063" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/21/2019" /><Meta Name="ms.locfileid" Value="69668057" /></Metadata><TypeSignature Language="C#" Value="public static class ImmutableInterlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ImmutableInterlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableInterlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class ImmutableInterlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImmutableInterlocked abstract sealed" />
  <TypeSignature Language="F#" Value="type ImmutableInterlocked = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ad1ab-101">Zawiera międzyblokadne mechanizmy wymiany dla niemodyfikowalnych kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-101">Contains interlocked exchange mechanisms for immutable collections.</span></span>  
  
 <span data-ttu-id="ad1ab-102">**Pakiet NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System. Collections. unzmienny</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">Informacje o niemodyfikowalnych kolekcjach i sposobie instalacji</see>)</span><span class="sxs-lookup"><span data-stu-id="ad1ab-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>To be added.</remarks>
    <threadsafe><span data-ttu-id="ad1ab-103">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-103">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; addValueFactory, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ addValueFactory, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * Func&lt;'Key, 'Value&gt; * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValueFactory, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="ad1ab-104">Typ klucza przechowywanego w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-104">The type of key stored by the dictionary.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="ad1ab-105">Typ wartości przechowywanej w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-105">The type of value stored by the dictionary.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-106">Zmienna lub pole do aktualizacji niepodzielnej, jeśli określony nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-106">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="ad1ab-107">Klucz dla wartości do dodania lub zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-107">The key for the value to add or update.</span></span></param>
        <param name="addValueFactory"><span data-ttu-id="ad1ab-108">Funkcja, która otrzymuje klucz i zwraca nową wartość, aby dodać do słownika, gdy żadna wartość nie istnieje wcześniej.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-108">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</span></span></param>
        <param name="updateValueFactory"><span data-ttu-id="ad1ab-109">Funkcja, która otrzymuje klucz i wcześniejszą wartość i zwraca nową wartość, za pomocą której ma zostać zaktualizowany słownik.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-109">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span></span></param>
        <summary><span data-ttu-id="ad1ab-110">Uzyskuje wartość ze słownika po dodaniu lub zaktualizowaniu istniejącego wpisu.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-110">Obtains the value from a dictionary after having added it or updated an existing entry.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-111">Dodana lub zaktualizowana wartość.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-111">The added or updated value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue addValue, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue addValue, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * 'Value * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValue, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="ad1ab-112">Typ klucza przechowywanego w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-112">The type of key stored by the dictionary.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="ad1ab-113">Typ wartości przechowywanej w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-113">The type of value stored by the dictionary.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-114">Zmienna lub pole do aktualizacji niepodzielnej, jeśli określony nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-114">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="ad1ab-115">Klucz dla wartości do dodania lub zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-115">The key for the value to add or update.</span></span></param>
        <param name="addValue"><span data-ttu-id="ad1ab-116">Wartość, która ma zostać użyta, jeśli nie istnieje Poprzednia wartość.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-116">The value to use if no previous value exists.</span></span></param>
        <param name="updateValueFactory"><span data-ttu-id="ad1ab-117">Funkcja, która otrzymuje klucz i wcześniejszą wartość i zwraca nową wartość, za pomocą której ma zostać zaktualizowany słownik.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-117">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span></span></param>
        <summary><span data-ttu-id="ad1ab-118">Uzyskuje wartość ze słownika po dodaniu lub zaktualizowaniu istniejącego wpisu.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-118">Obtains the value from a dictionary after having added it or updated an existing entry.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-119">Dodana lub zaktualizowana wartość.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-119">The added or updated value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Enqueue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enqueue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enqueue(Of T) (ByRef location As ImmutableQueue(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Enqueue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Enqueue :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Enqueue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-120">Typ elementów zawartych w kolekcji</span><span class="sxs-lookup"><span data-stu-id="ad1ab-120">The type of items contained in the collection</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-121">Zmienna lub pole do aktualizacji niepodzielnej.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-121">The variable or field to atomically update.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-122">Wartość do kolejki.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-122">The value to enqueue.</span></span></param>
        <summary><span data-ttu-id="ad1ab-123">Niepodzielne enqueues elementu na koniec kolejki.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-123">Atomically enqueues an element to the end of a queue.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="ad1ab-124">Typ kluczy znajdujących się w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-124">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="ad1ab-125">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-125">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-126">Zmienna lub pole do aktualizacji niepodzielnej, jeśli określony nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-126">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="ad1ab-127">Klucz dla wartości do pobrania lub dodania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-127">The key for the value to retrieve or add.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="ad1ab-128">Funkcja, która ma zostać wykonana w celu uzyskania wartości do wstawienia do słownika, jeśli nie znaleziono klucza.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-128">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span></span> <span data-ttu-id="ad1ab-129">Ten delegat nie zostanie wywołany więcej niż raz.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-129">This delegate will not be invoked more than once.</span></span></param>
        <summary><span data-ttu-id="ad1ab-130">Pobiera wartość określonego klucza ze słownika lub nie znaleziono klucza, dodaje nową wartość do słownika.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-130">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-131">Wartość w określonym kluczu lub <paramref name="valueFactory" /> Jeśli klucz nie był obecny.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-131">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * 'Value -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="ad1ab-132">Typ kluczy znajdujących się w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-132">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="ad1ab-133">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-133">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-134">Wartość zmiennej lub pola do zaktualizowania niepodzielnego, jeśli określony klucz nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-134">The variable or field to atomically update if the specified key is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="ad1ab-135">Klucz dla wartości, który ma zostać pobrany lub dodany.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-135">The key for the value to get or add.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-136">Wartość do dodania do słownika nie znaleziono klucza.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-136">The value to add to the dictionary the key is not found.</span></span></param>
        <summary><span data-ttu-id="ad1ab-137">Pobiera wartość określonego klucza ze słownika lub nie znaleziono klucza, dodaje nową wartość do słownika.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-137">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-138">Wartość w określonym kluczu lub <paramref name="valueFactory" /> Jeśli klucz nie był obecny.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-138">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue,TArg&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue,TArg&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TArg,TValue&gt; valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue, TArg&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`3&lt;!!TKey, !!TArg, !!TValue&gt; valueFactory, !!TArg factoryArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue, TArg) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TArg, TValue), factoryArgument As TArg) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue, typename TArg&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TArg, TValue&gt; ^ valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Arg, 'Value&gt; * 'Arg -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory, factoryArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TArg,TValue&gt;" />
        <Parameter Name="factoryArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="ad1ab-139">Typ kluczy znajdujących się w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-139">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="ad1ab-140">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-140">The type of the values contained in the collection.</span></span></typeparam>
        <typeparam name="TArg"><span data-ttu-id="ad1ab-141">Typ argumentu dostarczonego do fabryki wartości.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-141">The type of the argument supplied to the value factory.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-142">Zmienna lub pole do zaktualizowania, jeśli określony nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-142">The variable or field to update if the specified is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="ad1ab-143">Klucz dla wartości do pobrania lub dodania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-143">The key for the value to retrieve or add.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="ad1ab-144">Funkcja, która ma zostać wykonana w celu uzyskania wartości do wstawienia do słownika, jeśli nie znaleziono klucza.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-144">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span></span></param>
        <param name="factoryArgument"><span data-ttu-id="ad1ab-145">Argument, który ma zostać przekazany do fabryki wartości.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-145">The argument to pass to the value factory.</span></span></param>
        <summary><span data-ttu-id="ad1ab-146">Pobiera wartość określonego klucza ze słownika lub nie znaleziono klucza, dodaje nową wartość do słownika.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-146">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-147">Wartość w określonym kluczu lub <paramref name="valueFactory" /> Jeśli klucz nie był obecny.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-147">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedCompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedCompareExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value, System.Collections.Immutable.ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedCompareExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedCompareExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T), comparand As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedCompareExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value, System::Collections::Immutable::ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="F#" Value="static member InterlockedCompareExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange (location, value, comparand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="comparand" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-148">Typ elementu przechowywanego przez tablicę.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-148">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-149">Miejsce docelowe, którego wartość jest porównywana <paramref name="comparand" /> z i prawdopodobnie zastąpione.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-149">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-150">Wartość, która zamienia wartość docelową, jeśli wynikiem porównania jest równość.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-150">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="ad1ab-151">Wartość, która jest porównywana z wartością w <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-151">The value that is compared to the value at <paramref name="location" />.</span></span></param>
        <summary><span data-ttu-id="ad1ab-152">Porównuje dwie niezmienne tablice dla równości i, jeśli są równe, zastępuje jedną z tablic.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-152">Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-153">Oryginalna wartość w <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-153">The original value in <paramref name="location" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-154">Typ elementu przechowywanego przez tablicę.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-154">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-155">Tablica do ustawienia określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-155">The array to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-156">Wartość, dla której <paramref name="location" /> ustawiono parametr.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-156">The value to which the <paramref name="location" /> parameter is set.</span></span></param>
        <summary><span data-ttu-id="ad1ab-157">Ustawia tablicę na określoną tablicę i zwraca odwołanie do oryginalnej tablicy jako operację niepodzielną.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-157">Sets an array to the specified array and returns a reference to the original array, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-158">Oryginalna wartość <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-158">The original value of <paramref name="location" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedInitialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool InterlockedInitialize&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InterlockedInitialize&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedInitialize(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool InterlockedInitialize(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedInitialize :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-159">Typ elementu przechowywanego przez tablicę.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-159">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-160">Tablica do ustawienia określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-160">The array to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-161">Wartość, dla której <paramref name="location" /> jest ustawiony parametr, jeśli nie jest zainicjowany.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-161">The value to which the <paramref name="location" /> parameter is set, if it's not initialized.</span></span></param>
        <summary><span data-ttu-id="ad1ab-162">Ustawia tablicę na określoną tablicę, jeśli tablica nie została zainicjowana.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-162">Sets an array to the specified array if the array has not been initialized.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-163"><see langword="true" />Jeśli do tablicy została przypisana określona wartość;  w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="ad1ab-163"><see langword="true" /> if the array was assigned the specified value;  otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Push(Of T) (ByRef location As ImmutableStack(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Push(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Push :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Push (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-164">Typ elementów w stosie.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-164">The type of items in the stack.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-165">Stos do zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-165">The stack to update.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-166">Wartość do wypchnięcia na stosie.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-166">The value to push on the stack.</span></span></param>
        <summary><span data-ttu-id="ad1ab-167">Wypchnięcie nowego elementu na stos.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-167">Pushes a new element onto the stack.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member TryAdd :  * 'Key * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="ad1ab-168">Typ kluczy znajdujących się w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-168">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="ad1ab-169">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-169">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-170">Słownik, który ma zostać zaktualizowany przy użyciu podanego klucza i wartości.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-170">The dictionary to update with the specified key and value.</span></span></param>
        <param name="key"><span data-ttu-id="ad1ab-171">Klucz, który ma zostać dodany, jeśli nie jest jeszcze zdefiniowany w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-171">The key to add, if is not already defined in the dictionary.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-172">Wartość do dodania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-172">The value to add.</span></span></param>
        <summary><span data-ttu-id="ad1ab-173">Dodaje określony klucz i wartość do słownika, jeśli klucz nie znajduje się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-173">Adds the specified key and value to the dictionary if the key is not in the dictionary.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-174"><see langword="true" />Jeśli klucz nie znajduje się w słowniku; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="ad1ab-174"><see langword="true" /> if the key is not in the dictionary; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryDequeue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDequeue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDequeue(Of T) (ByRef location As ImmutableQueue(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryDequeue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryDequeue :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryDequeue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-175">Typ elementów w kolejce.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-175">The type of items in the queue.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-176">Zmienna lub pole do aktualizacji niepodzielnej.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-176">The variable or field to atomically update.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-177">Ustaw wartość z nagłówka kolejki, jeśli kolejka nie jest pusta.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-177">Set to the value from the head of the queue, if the queue not empty.</span></span></param>
        <summary><span data-ttu-id="ad1ab-178">Niepodzielnie usuwa i zwraca określony element na początku kolejki, jeśli kolejka nie jest pusta.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-178">Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-179"><see langword="true" />Jeśli kolejka nie jest pusta i element główny jest usuwany; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="ad1ab-179"><see langword="true" /> if the queue is not empty and the head element is removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryPop&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryPop&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryPop(Of T) (ByRef location As ImmutableStack(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryPop(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryPop :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryPop (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-180">Typ elementów w stosie.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-180">The type of items in the stack.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-181">Stos do zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-181">The stack to update.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-182">Odbiera wartość usuniętą ze stosu, jeśli stos nie jest pusty.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-182">Receives the value removed from the stack, if the stack is not empty.</span></span></param>
        <summary><span data-ttu-id="ad1ab-183">Usuwa element z góry stosu, jeśli istnieje element do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-183">Removes an element from the top of the stack, if there is an element to remove.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-184"><see langword="true" />Jeśli element zostanie usunięty ze stosu; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="ad1ab-184"><see langword="true" /> if an element is removed from the stack; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRemove&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRemove&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRemove(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryRemove(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="static member TryRemove :  * 'Key *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryRemove (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="ad1ab-185">Typ kluczy znajdujących się w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-185">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="ad1ab-186">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-186">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-187">Słownik do zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-187">The dictionary to update.</span></span></param>
        <param name="key"><span data-ttu-id="ad1ab-188">Klucz do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-188">The key to remove.</span></span></param>
        <param name="value"><span data-ttu-id="ad1ab-189">Odbiera wartość usuniętego elementu, jeśli słownik nie jest pusty.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-189">Receives the value of the removed item, if the dictionary is not empty.</span></span></param>
        <summary><span data-ttu-id="ad1ab-190">Usuwa element z określonym kluczem, jeśli istnieje klucz.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-190">Removes the element with the specified key, if the key exists.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-191"><see langword="true" />Jeśli klucz został znaleziony i usunięty; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="ad1ab-191"><see langword="true" /> if the key was found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue newValue, !!TValue comparisonValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="F#" Value="static member TryUpdate :  * 'Key * 'Value * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryUpdate (location, key, newValue, comparisonValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="ad1ab-192">Typ kluczy znajdujących się w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-192">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="ad1ab-193">Typ wartości zawartych w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-193">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-194">Słownik do zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-194">The dictionary to update.</span></span></param>
        <param name="key"><span data-ttu-id="ad1ab-195">Klucz do zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-195">The key to update.</span></span></param>
        <param name="newValue"><span data-ttu-id="ad1ab-196">Nowa wartość do ustawienia.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-196">The new value to set.</span></span></param>
        <param name="comparisonValue"><span data-ttu-id="ad1ab-197">Bieżąca wartość <paramref name="key" /> w celu pomyślnego przeprowadzenia aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-197">The current value for <paramref name="key" /> in order for the update to succeed.</span></span></param>
        <summary><span data-ttu-id="ad1ab-198">Ustawia określony klucz na określoną wartość, jeśli określony klucz jest już ustawiony na konkretną wartość.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-198">Sets the specified key to the specified value if the specified key already is set to a specific value.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-199"><see langword="true" />Jeśli <paramref name="key" /> <paramref name="newValue" /> <see langword="false" />i <paramref name="comparisonValue" /> są obecne w słowniku, a porównanie zostało zaktualizowane do; w przeciwnym razie,.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-199"><see langword="true" /> if <paramref name="key" /> and <paramref name="comparisonValue" /> are present in the dictionary and comparison was updated to <paramref name="newValue" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T&gt; (ref T location, Func&lt;T,T&gt; transformer) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T&gt;(!!T&amp; location, class System.Func`2&lt;!!T, !!T&gt; transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class) (ByRef location As T, transformer As Func(Of T, T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, T&gt; ^ transformer);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'T (requires 'T : null and 'T : null)&gt; -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-200">Typ danych.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-200">The type of data.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-201">Zmienna lub pole, które ma zostać zmienione, do którego można uzyskać dostęp za pomocą wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-201">The variable or field to be changed, which may be accessed by multiple threads.</span></span></param>
        <param name="transformer"><span data-ttu-id="ad1ab-202">Funkcja, która przydzieli wartość.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-202">A function that mutates the value.</span></span> <span data-ttu-id="ad1ab-203">Ta funkcja powinna być wolna od skutku, ponieważ może działać wiele razy, gdy Races wystąpią z innymi wątkami.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-203">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span></span></param>
        <summary><span data-ttu-id="ad1ab-204">Mutacja wartości w miejscu z semantyką blokowania transakcji optymistycznych za pośrednictwem określonej funkcji transformacji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-204">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span></span>             <span data-ttu-id="ad1ab-205">Przekształcenie jest ponawiane tyle razy, ile jest to konieczne do wygrania wyścigu optymistycznego blokowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-205">The transformation is retried as many times as necessary to win the optimistic locking race.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-206"><see langword="true" />Jeśli wartość lokalizacji jest zmieniana przez zastosowanie wyniku <paramref name="transformer" /> funkcji; Jeśli wartość lokalizacji była taka sama, ponieważ ostatnie <paramref name="transformer" /> Wywołanie zwróciło istniejącą wartość. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="ad1ab-206"><see langword="true" /> if the location's value is changed by applying the result of the <paramref name="transformer" /> function; <see langword="false" /> if the location's value remained the same because the last invocation of <paramref name="transformer" /> returned the existing value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T,TArg&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T,TArg&gt; (ref T location, Func&lt;T,TArg,T&gt; transformer, TArg transformerArgument) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T, TArg&gt;(!!T&amp; location, class System.Func`3&lt;!!T, !!TArg, !!T&gt; transformer, !!TArg transformerArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class, TArg As Class) (ByRef location As T, transformer As Func(Of T, TArg, T), transformerArgument As TArg) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TArg&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, TArg, T&gt; ^ transformer, TArg transformerArgument);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'Arg, 'T (requires 'T : null and 'T : null)&gt; * 'Arg -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer, transformerArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,TArg,T&gt;" />
        <Parameter Name="transformerArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad1ab-207">Typ danych.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-207">The type of data.</span></span></typeparam>
        <typeparam name="TArg"><span data-ttu-id="ad1ab-208">Typ argumentu, który został przesłany <paramref name="transformer" />do.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-208">The type of argument passed to the <paramref name="transformer" />.</span></span></typeparam>
        <param name="location"><span data-ttu-id="ad1ab-209">Zmienna lub pole, które ma zostać zmienione, do którego można uzyskać dostęp za pomocą wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-209">The variable or field to be changed, which may be accessed by multiple threads.</span></span></param>
        <param name="transformer"><span data-ttu-id="ad1ab-210">Funkcja, która przydzieli wartość.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-210">A function that mutates the value.</span></span> <span data-ttu-id="ad1ab-211">Ta funkcja powinna być wolna od skutku, ponieważ może działać wiele razy, gdy Races wystąpią z innymi wątkami.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-211">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span></span></param>
        <param name="transformerArgument"><span data-ttu-id="ad1ab-212">Argument do przekazania <paramref name="transformer" />.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-212">The argument to pass to <paramref name="transformer" />.</span></span></param>
        <summary><span data-ttu-id="ad1ab-213">Mutacja wartości w miejscu z semantyką blokowania transakcji optymistycznych za pośrednictwem określonej funkcji transformacji.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-213">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span></span>             <span data-ttu-id="ad1ab-214">Przekształcenie jest ponawiane tyle razy, ile jest to konieczne do wygrania wyścigu optymistycznego blokowania.</span><span class="sxs-lookup"><span data-stu-id="ad1ab-214">The transformation is retried as many times as necessary to win the optimistic locking race.</span></span></summary>
        <returns><span data-ttu-id="ad1ab-215"><see langword="true" />Jeśli wartość lokalizacji jest zmieniana przez zastosowanie wyniku <paramref name="transformer" /> funkcji; Jeśli wartość lokalizacji była taka sama, ponieważ ostatnie <paramref name="transformer" /> Wywołanie zwróciło istniejącą wartość. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="ad1ab-215"><see langword="true" /> if the location's value is changed by applying the result of the <paramref name="transformer" /> function; <see langword="false" /> if the location's value remained the same because the last invocation of <paramref name="transformer" /> returned the existing value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
