<Type Name="ImmutableArray&lt;T&gt;" FullName="System.Collections.Immutable.ImmutableArray&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="58c899b81d78feec36caa1c2578b9c7e2a60eaa1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36713087" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ImmutableArray&lt;T&gt; : IEquatable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;, System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList, System.Collections.Immutable.IImmutableList&lt;T&gt;, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ImmutableArray`1&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.Immutable.IImmutableList`1&lt;!T&gt;, class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IEquatable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableArray`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ImmutableArray(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IEquatable(Of ImmutableArray(Of T)), IImmutableList(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T), IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ImmutableArray : IEquatable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt;, System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList, System::Collections::Immutable::IImmutableList&lt;T&gt;, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type ImmutableArray&lt;'T&gt; = struct&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface IImmutableList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Immutable.IImmutableList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="3e42a-101">Typ elementu przechowywane w tablicy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e42a-101">The type of element stored by the array.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="3e42a-102">Reprezentuje tablicę, która jest niezmienialny; czyli nie można zmienić po jego utworzeniu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e42a-102">Represents an array that is immutable; meaning it cannot be changed once it is created.</span>
      </span>
      <span data-ttu-id="3e42a-103">** Pakiet NuGet **: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">o kolekcjach niezmienialnych oraz instrukcje dotyczące instalowania</see>)</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e42a-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-104">Są najlepsze w przypadku różnych scenariuszy <xref:System.Collections.Immutable.ImmutableArray%601> i innych najlepszych dla <xref:System.Collections.Immutable.ImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="3e42a-104">There are different scenarios best for <xref:System.Collections.Immutable.ImmutableArray%601> and others best for <xref:System.Collections.Immutable.ImmutableList%601>.</span></span>  
  
 <span data-ttu-id="3e42a-105">Użyj tablicy niezmienne powodów:</span><span class="sxs-lookup"><span data-stu-id="3e42a-105">Reasons to use immutable array:</span></span>  
  
-   <span data-ttu-id="3e42a-106">Aktualizowanie danych jest rzadko lub liczba elementów jest bardzo mały (mniej niż 16 elementów)</span><span class="sxs-lookup"><span data-stu-id="3e42a-106">Updating the data is rare or the number of elements is quite small (less than 16 items)</span></span>  
  
-   <span data-ttu-id="3e42a-107">Musisz mieć możliwość iteracja danych wydajności sekcje krytyczne</span><span class="sxs-lookup"><span data-stu-id="3e42a-107">You need to be able to iterate over the data in performance critical sections</span></span>  
  
-   <span data-ttu-id="3e42a-108">Istnieje wiele wystąpień kolekcji niezmienialnych i przechowywanie danych w drzewach niedopuszczalna</span><span class="sxs-lookup"><span data-stu-id="3e42a-108">You have many instances of immutable collections and you can’t afford keeping the data in trees</span></span>  
  
 <span data-ttu-id="3e42a-109">W jakich sytuacjach użyć niezmienne listy:</span><span class="sxs-lookup"><span data-stu-id="3e42a-109">Reasons to use immutable list:</span></span>  
  
-   <span data-ttu-id="3e42a-110">Aktualizowanie danych jest typowe lub liczba elementów nie powinien być małe</span><span class="sxs-lookup"><span data-stu-id="3e42a-110">Updating the data is common or the number of elements isn’t expected to be small</span></span>  
  
-   <span data-ttu-id="3e42a-111">Aktualizowanie kolekcji jest więcej wydajność krytyczne niż iteracja zawartości</span><span class="sxs-lookup"><span data-stu-id="3e42a-111">Updating the collection is more performance critical than iterating the contents</span></span>  
  
 <span data-ttu-id="3e42a-112">W poniższej tabeli przedstawiono charakterystyki wydajności <xref:System.Collections.Immutable.ImmutableArray%601></span><span class="sxs-lookup"><span data-stu-id="3e42a-112">The following table summarizes the performance characteristics of <xref:System.Collections.Immutable.ImmutableArray%601></span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="3e42a-113">**Operacja**</span><span class="sxs-lookup"><span data-stu-id="3e42a-113">**Operation**</span></span>|<span data-ttu-id="3e42a-114"><xref:System.Collections.Immutable.ImmutableArray%601> Złożoność</span><span class="sxs-lookup"><span data-stu-id="3e42a-114"><xref:System.Collections.Immutable.ImmutableArray%601> Complexity</span></span>|<span data-ttu-id="3e42a-115"><xref:System.Collections.Immutable.ImmutableList%601> Złożoność</span><span class="sxs-lookup"><span data-stu-id="3e42a-115"><xref:System.Collections.Immutable.ImmutableList%601> Complexity</span></span>|<span data-ttu-id="3e42a-116">**Komentarze**</span><span class="sxs-lookup"><span data-stu-id="3e42a-116">**Comments**</span></span>|  
|<span data-ttu-id="3e42a-117">**Element**</span><span class="sxs-lookup"><span data-stu-id="3e42a-117">**Item**</span></span>|<span data-ttu-id="3e42a-118">O(1)</span><span class="sxs-lookup"><span data-stu-id="3e42a-118">O(1)</span></span>|<span data-ttu-id="3e42a-119">O (dziennika n)</span><span class="sxs-lookup"><span data-stu-id="3e42a-119">O(log n)</span></span>|<span data-ttu-id="3e42a-120">Bezpośrednio indeks w tablicy źródłowej</span><span class="sxs-lookup"><span data-stu-id="3e42a-120">Directly index into the underlying array</span></span>|  
|<span data-ttu-id="3e42a-121">**Add()**</span><span class="sxs-lookup"><span data-stu-id="3e42a-121">**Add()**</span></span>|<span data-ttu-id="3e42a-122">O(n)</span><span class="sxs-lookup"><span data-stu-id="3e42a-122">O(n)</span></span>|<span data-ttu-id="3e42a-123">O (dziennika n)</span><span class="sxs-lookup"><span data-stu-id="3e42a-123">O(log n)</span></span>|<span data-ttu-id="3e42a-124">Wymaga utworzenia nowej tablicy</span><span class="sxs-lookup"><span data-stu-id="3e42a-124">Requires creating a new array</span></span>|  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="3e42a-125">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e42a-125">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (item As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Add(T item);" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Add item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-126">Element, który ma zostać dodany do końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-126">The item to be added to the end of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-127">Zwraca określony element dodawany na końcu kopię oryginalnej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-127">Returns a copy of the original array with the specified item added to the end.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-128">Nowej tablicy z określonym elementem dodawane na końcu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-128">A new array with the specified item added to the end.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e42a-129">Elementy do dodania do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-129">The elements to add to the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-130">Zwraca kopię oryginalnej tablicy określone elementy dodane do końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-130">Returns a copy of the original array with the specified elements added to the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-131">Nowe tablicą zawierającą elementy dodane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-131">A new array with the elements added.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; AddRange (System.Collections.Immutable.ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; AddRange(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; AddRange(System::Collections::Immutable::ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e42a-132">Elementy do dodania do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-132">The elements to add to the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-133">Zwraca kopię oryginalnej tablicy określone elementy dodane do końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-133">Returns a copy of the original array with the specified elements added to the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-134">Nowe tablicą zawierającą elementy dodane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-134">A new array with the elements added.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;TOther&gt; As&lt;TOther&gt; () where TOther : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TOther&gt; As&lt;class TOther&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.As``1" />
      <MemberSignature Language="VB.NET" Value="Public Function As(Of TOther As Class) () As ImmutableArray(Of TOther)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : class System::Collections::Immutable::ImmutableArray&lt;TOther&gt; As();" />
      <MemberSignature Language="F#" Value="member this.As : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'Other (requires 'Other : null)&gt; (requires 'Other : null)" Usage="immutableArray.As " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;TOther&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TOther">
          <span data-ttu-id="3e42a-135">Typ elementu tablicy do zwrócenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-135">The type of array element to return.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="3e42a-136">Zwraca tablicę niezmienne nowe zawiera elementy tej tablicy rzutowanie do innego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-136">Returns a new immutable array that contains the elements of this array cast to a different type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-137">Tablica niezmienne zawiera elementy tej tablicy rzutowanie do innego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-137">An immutable array that contains the elements of this array, cast to a different type.</span>
          </span>
          <span data-ttu-id="3e42a-138">W przypadku niepowodzenia rzutowanie zwraca tablicę których <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> zwraca właściwość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-138">If the cast fails, returns an array whose <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-139">Tablice typów pochodnych elementy mogą być rzutowane na tablice typów base element bez ponowne przydzielanie tablicy.</span><span class="sxs-lookup"><span data-stu-id="3e42a-139">Arrays of derived elements types can be cast to arrays of base element types without reallocating the array.</span></span>  
  
 <span data-ttu-id="3e42a-140">Upcasts utworzone za pomocą elementu <xref:System.Collections.Immutable.ImmutableArray.Create%2A> metody można wycofać, przy użyciu <xref:System.Collections.Immutable.ImmutableArray%601.As%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3e42a-140">Upcasts of element created with the <xref:System.Collections.Immutable.ImmutableArray.Create%2A> method can be reversed using the <xref:System.Collections.Immutable.ImmutableArray%601.As%2A> method.</span></span> <span data-ttu-id="3e42a-141">Jednak przypisanie elementu podrzędnego jest tylko powiodło się podczas odwraca ono rozszerzające wcześniejszych.</span><span class="sxs-lookup"><span data-stu-id="3e42a-141">However, a downcast is only successful when it reverses a prior upcast.</span></span> <span data-ttu-id="3e42a-142">Operacja.</span><span class="sxs-lookup"><span data-stu-id="3e42a-142">operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CastArray&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;TOther&gt; CastArray&lt;TOther&gt; () where TOther : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TOther&gt; CastArray&lt;class TOther&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CastArray(Of TOther As Class) () As ImmutableArray(Of TOther)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : class System::Collections::Immutable::ImmutableArray&lt;TOther&gt; CastArray();" />
      <MemberSignature Language="F#" Value="member this.CastArray : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'Other (requires 'Other : null)&gt; (requires 'Other : null)" Usage="immutableArray.CastArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;TOther&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TOther">To be added.</typeparam>
        <summary>
          <span data-ttu-id="3e42a-143">Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> struktury przez rzutowanie tablica bazowa do tablicy typu <typeparameter name="TOther"><paramref name="TOther" /></typeparameter> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-143">Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> struct by casting the underlying             array to an array of type <typeparameter name="TOther"><paramref name="TOther" /></typeparameter> .</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3e42a-144">Element zgłaszany, gdy rzutowanie jest niedozwolone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-144">Thrown if the cast is illegal.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CastUp&lt;TDerived&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; CastUp&lt;TDerived&gt; (System.Collections.Immutable.ImmutableArray&lt;TDerived&gt; items) where TDerived : class, T;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; CastUp&lt;class (!T) TDerived&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TDerived&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CastUp(Of TDerived As {Class, T}) (items As ImmutableArray(Of TDerived)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDerived&gt;&#xA; where TDerived : class, T static System::Collections::Immutable::ImmutableArray&lt;T&gt; CastUp(System::Collections::Immutable::ImmutableArray&lt;TDerived&gt; items);" />
      <MemberSignature Language="F#" Value="static member CastUp : System.Collections.Immutable.ImmutableArray&lt;#'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.CastUp items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>T</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;TDerived&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived">To be added.</typeparam>
        <param name="items">
          <span data-ttu-id="3e42a-145">Tablicę można zainicjować tablicy o.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-145">The array to initialize the array with.</span>
          </span>
          <span data-ttu-id="3e42a-146">Kopia nie jest wykonywana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-146">No copy is made.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-147">Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> struktury na podstawie zawartości istniejącego wystąpienia, umożliwiając kowariantnego rzutowania statycznego do wydajnie ponownego użycia istniejącej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-147">Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> struct based on the contents             of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-148">Upcasts kowariantne z tej metody może cofnąć przez wywołanie metody <xref:System.Collections.Immutable.ImmutableArray%601.As%2A> lub <xref:System.Collections.Immutable.ImmutableArray%601.CastArray%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3e42a-148">Covariant upcasts from this method may be reversed by calling the <xref:System.Collections.Immutable.ImmutableArray%601.As%2A> or <xref:System.Collections.Immutable.ImmutableArray%601.CastArray%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-149">Zwraca tablicę z wszystkie elementy usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-149">Returns an array with all the elements removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-150">Tablica nie zawierająca wszystkie elementy usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-150">An array with all of the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="immutableArray.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-151">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-151">The item to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-152">Określa, czy określony element istnieje w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-152">Determines whether the specified item exists in the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-153">
            <see langword="true" /> Jeśli określony element został znaleziony w tablicy; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-153">
              <see langword="true" /> if the specified item was found in the array; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="immutableArray.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="3e42a-154">Aby skopiować do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-154">The array to copy to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-155">Kopiuje zawartość tej tablicy do określonej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-155">Copies the contents of this array to the specified array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] destination, int destinationIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] destination, int32 destinationIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As T(), destinationIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ destination, int destinationIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="immutableArray.CopyTo (destination, destinationIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="T[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="3e42a-156">Aby skopiować do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-156">The array to copy to.</span>
          </span>
        </param>
        <param name="destinationIndex">
          <span data-ttu-id="3e42a-157">Indeks w <c>tablicy</c> którym rozpoczyna się kopiowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-157">The index in <c>array</c> where copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-158">Kopiuje zawartość tej tablicy do określonej tablicy, zaczynając od indeksu do określonej lokalizacji docelowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-158">Copies the contents of this array to the specified array starting at the specified destination index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, T[] destination, int destinationIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, !T[] destination, int32 destinationIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As T(), destinationIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, cli::array &lt;T&gt; ^ destination, int destinationIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="immutableArray.CopyTo (sourceIndex, destination, destinationIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="T[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex">
          <span data-ttu-id="3e42a-159">Indeks tej tablicy, w którym rozpoczyna się kopiowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-159">The index of this array where copying begins.</span>
          </span>
        </param>
        <param name="destination">
          <span data-ttu-id="3e42a-160">Aby skopiować do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-160">The array to copy to.</span>
          </span>
        </param>
        <param name="destinationIndex">
          <span data-ttu-id="3e42a-161">Indeks w <c>tablicy</c> którym rozpoczyna się kopiowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-161">The index in <c>array</c> where copying begins.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3e42a-162">Liczba elementów do skopiowania tej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-162">The number of elements to copy from this array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-163">Kopie elementów określonych w tej tablicy do określonej tablicy w określonym początkowy indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-163">Copies the specified items in this array to the specified array at the specified starting index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Immutable.ImmutableArray&lt;T&gt; Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="F:System.Collections.Immutable.ImmutableArray`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As ImmutableArray(Of T) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::Immutable::ImmutableArray&lt;T&gt; Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-164">Pobiera pustą tablicę niezmienialny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-164">Gets an empty immutable array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Collections.Immutable.ImmutableArray&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Collections::Immutable::ImmutableArray&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="immutableArray.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="3e42a-165">Obiekt do porównania z tym obiektem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-165">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-166">Wskazuje, czy określona tablica jest równa tej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-166">Indicates whether specified array is equal to this array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-167">
            <see langword="true" /> Jeśli <paramref name="other" /> jest taki sam, jak Ta tablica; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-167">
              <see langword="true" /> if <paramref name="other" /> is equal to this array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="immutableArray.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="3e42a-168">
            <see cref="T:System.Object" /> Do porównania z tej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-168">The <see cref="T:System.Object" /> to compare with this array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-169">Określa, czy ta tablica ma taki sam jak określony obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-169">Determines if this array is equal to the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-170">
            <see langword="true" /> Jeśli ta tablica jest równa <paramref name="obj" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-170">
              <see langword="true" /> if this array is equal to <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ImmutableArray(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Enumerator" Usage="immutableArray.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-171">Zwraca moduł wyliczający, który iteruje po zawartości tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-171">Returns an enumerator that iterates through the contents of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-172">Moduł wyliczający.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-172">An enumerator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="immutableArray.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-173">Zwraca wartość skrótu dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-173">Returns a hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-174">Wartość skrótu dla tego wystąpienia, odpowiednie do użycia z mieszania struktury algorytmów i danych, takich jak tablicy skrótów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-174">A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="immutableArray.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-175">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-175">The item to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-176">Wyszukuje tablicy dla określonego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-176">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-177">Liczony od zera indeks elementu, jeśli został znaleziony, lub wartość -1, jeśli nie jest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-177">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int -&gt; int" Usage="immutableArray.IndexOf (item, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-178">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-178">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3e42a-179">Indeks, w którym należy rozpocząć wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-179">The index at which to begin the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-180">Wyszukuje tablicy dla określonego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-180">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-181">Liczony od zera indeks elementu, jeśli został znaleziony, lub wartość -1, jeśli nie jest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-181">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableArray.IndexOf (item, startIndex, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-182">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-182">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3e42a-183">Indeks, w którym należy rozpocząć wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-183">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-184">Porównania równości, służące do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-184">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-185">Wyszukuje tablicy dla określonego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-185">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-186">Liczony od zera indeks elementu, jeśli został znaleziony, lub wartość -1, jeśli nie jest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-186">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int -&gt; int" Usage="immutableArray.IndexOf (item, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-187">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-187">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3e42a-188">Indeks, w którym należy rozpocząć wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-188">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e42a-189">Liczba elementów do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-189">The number of elements to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-190">Wyszukuje tablicy dla określonego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-190">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-191">Liczony od zera indeks elementu, jeśli został znaleziony, lub wartość -1, jeśli nie jest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-191">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 startIndex, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item, int startIndex, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int&#xA;override this.IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableArray.IndexOf (item, startIndex, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-192">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-192">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3e42a-193">Indeks, w którym należy rozpocząć wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-193">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e42a-194">Liczba elementów do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-194">The number of elements to search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-195">Porównania równości, służące do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-195">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-196">Wyszukuje tablicy dla określonego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-196">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-197">Liczony od zera indeks elementu, jeśli został znaleziony, lub wartość -1, jeśli nie jest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-197">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, item As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-198">Na podstawie 0 indeks w tablicy, w którym można dodać nowego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-198">The 0-based index into the array at which the new item should be added.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="3e42a-199">Element do wstawienia na początku tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-199">The item to insert at the start of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-200">Zwraca tablicę nowe o określonej wartości wstawione w określonej pozycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-200">Returns a new array with the specified value inserted at the specified position.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-201">Nowe tablicą zawierającą element wstawiony w określonym indeksie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-201">A new array with the item inserted at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-202">Indeks w celu wstawienia wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-202">The index at which to insert the value.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="3e42a-203">Elementy do wstawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-203">The elements to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-204">Wstawia określony wartości w określonym indeksie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-204">Inserts the specified values at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-205">Nowej tablicy niezmienne z elementami dodaje pod określonym indeksem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-205">A new immutable array with the items inserted at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; InsertRange (int index, System.Collections.Immutable.ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; InsertRange(int32 index, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; InsertRange(int index, System::Collections::Immutable::ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-206">Indeks w celu wstawienia wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-206">The index at which to insert the value.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="3e42a-207">Elementy do wstawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-207">The elements to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-208">Wstawia określony wartości w określonym indeksie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-208">Inserts the specified values at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-209">Nowej tablicy niezmienne z elementami dodaje pod określonym indeksem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-209">A new immutable array with the items inserted at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-210">Pobiera wartość wskazującą, czy ta tablica został zadeklarowany, ale nie został zainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-210">Gets a value indicating whether this array was declared but not initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-211">
            <see langword="true" /> Aby wskazać <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> jest <see langword="null" />; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-211">
              <see langword="true" /> to indicate the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is <see langword="null" />; otherwise, false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultOrEmpty">
      <MemberSignature Language="C#" Value="public bool IsDefaultOrEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaultOrEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefaultOrEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefaultOrEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefaultOrEmpty : bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.IsDefaultOrEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-212">Pobiera wartość wskazującą czy to <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> jest pusty lub nie został zainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-212">Gets a value indicating whether this <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is empty or is not initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-213">
            <see langword="true" /> Aby wskazać <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> jest <see langword="null" /> lub <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-213">
              <see langword="true" /> to indicate the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is <see langword="null" /> or <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />; otherwise, false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-214">Pobiera wartość wskazującą czy to <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-214">Gets a value indicating whether this <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-215">
            <see langword="true" /> Aby wskazać <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> jest pusty; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-215">
              <see langword="true" /> to indicate the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is empty; otherwise, false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-216">Liczony od zera indeks elementu do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-216">The zero-based index of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-217">Pobiera element pod określonym indeksem niezmienne tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-217">Gets the element at the specified index in the immutable array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-218">Element pod określonym indeksem niezmienne tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-218">The element at the specified index in the immutable array.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemRef">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.T&amp; ItemRef (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.T&amp; modreq(System.Runtime.InteropServices.InAttribute) ItemRef(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ItemRef (index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::T&amp; ^ ItemRef(int index);" />
      <MemberSignature Language="F#" Value="member this.ItemRef : int -&gt; System.Collections.Immutable.T&amp;" Usage="immutableArray.ItemRef index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.T&amp;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T -&gt; int" Usage="immutableArray.LastIndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-219">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-219">The item to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-220">Wyszukuje tablicy dla określonego elementu; począwszy od końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-220">Searches the array for the specified item; starting at the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-221">Na podstawie 0 indeks w tablicy, w którym element został znaleziony; lub -1, jeśli nie można go odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-221">The 0-based index into the array where the item was found; or -1 if it could not be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int -&gt; int" Usage="immutableArray.LastIndexOf (item, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-222">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-222">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3e42a-223">Indeks, w którym należy rozpocząć wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-223">The index at which to begin the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-224">Wyszukuje tablicy dla określonego elementu; począwszy od końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-224">Searches the array for the specified item; starting at the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-225">Na podstawie 0 indeks w tablicy, w którym element został znaleziony; lub -1, jeśli nie można go odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-225">The 0-based index into the array where the item was found; or -1 if it could not be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int -&gt; int" Usage="immutableArray.LastIndexOf (item, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-226">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-226">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3e42a-227">Indeks, w którym należy rozpocząć wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-227">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e42a-228">Liczba elementów do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-228">The number of elements to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-229">Wyszukuje tablicy dla określonego elementu; począwszy od końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-229">Searches the array for the specified item; starting at the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-230">Na podstawie 0 indeks w tablicy, w którym element został znaleziony; lub -1, jeśli nie można go odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-230">The 0-based index into the array where the item was found; or -1 if it could not be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 startIndex, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(T item, int startIndex, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int&#xA;override this.LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableArray.LastIndexOf (item, startIndex, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-231">Element do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-231">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3e42a-232">Indeks, w którym należy rozpocząć wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-232">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e42a-233">Liczba elementów do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-233">The number of elements to search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-234">Porównania równości, służące do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-234">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-235">Wyszukuje tablicy dla określonego elementu; począwszy od końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-235">Searches the array for the specified item; starting at the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-236">Na podstawie 0 indeks w tablicy, w którym element został znaleziony; lub -1, jeśli nie można go odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-236">The 0-based index into the array where the item was found; or -1 if it could not be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-237">Pobiera liczbę elementów w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-237">Gets the number of elements in the array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-238">Liczba elementów w tablicy</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-238">The number of elements in the array</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; seq&lt;'Result&gt;" Usage="immutableArray.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3e42a-239">Typ, aby filtrować elementy sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-239">The type to filter the elements of the sequence on.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="3e42a-240">Filtruje elementy tej tablicy do tych, które są przypisane do określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-240">Filters the elements of this array to those assignable to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-241">
            <see cref="T:System.Collections.IEnumerable" /> Zawierający elementy z sekwencji wejściowych typu <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-241">An <see cref="T:System.Collections.IEnumerable" /> that contains elements from the input sequence of type of <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Collections.Immutable.ImmutableArray&lt;T&gt; left, System.Collections.Immutable.ImmutableArray&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; left, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ImmutableArray(Of T), right As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Collections::Immutable::ImmutableArray&lt;T&gt; left, System::Collections::Immutable::ImmutableArray&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="right" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="3e42a-242">Tablica z lewej strony operatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-242">The array to the left of the operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="3e42a-243">Tablica z prawej strony operatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-243">The array to the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-244">Zwraca wartość wskazującą, czy dwie tablice są równe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-244">Returns a value that indicates if two arrays are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-245">
            <see langword="true" /> Jeśli tablic są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-245">
              <see langword="true" /> if the arrays are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt; left, Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Nullable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt; left, valuetype System.Nullable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Nullable(Of ImmutableArray(Of T)), right As Nullable(Of ImmutableArray(Of T))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Nullable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt; left, Nullable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;'T&gt;&gt; * Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;'T&gt;&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;" />
        <Parameter Name="right" Type="System.Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="3e42a-246">Tablica z lewej strony operatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-246">The array to the left of the operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="3e42a-247">Tablica z prawej strony operatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-247">The array to the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-248">Zwraca wartość wskazującą, czy dwie tablice są równe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-248">Returns a value that indicates if two arrays are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-249">
            <see langword="true" /> Jeśli tablic są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-249">
              <see langword="true" /> if the arrays are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Collections.Immutable.ImmutableArray&lt;T&gt; left, System.Collections.Immutable.ImmutableArray&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; left, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ImmutableArray(Of T), right As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Collections::Immutable::ImmutableArray&lt;T&gt; left, System::Collections::Immutable::ImmutableArray&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="right" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="3e42a-250">Tablica z lewej strony operatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-250">The array to the left of the operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="3e42a-251">Tablica z prawej strony operatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-251">The array to the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-252">Zwraca wartość wskazującą, czy dwie tablice nie są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-252">Returns a value that indicates whether two arrays are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-253">
            <see langword="true" /> tablice nie są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-253">
              <see langword="true" /> if the arrays are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt; left, Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Nullable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt; left, valuetype System.Nullable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Nullable(Of ImmutableArray(Of T)), right As Nullable(Of ImmutableArray(Of T))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Nullable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt; left, Nullable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;'T&gt;&gt; * Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;'T&gt;&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;" />
        <Parameter Name="right" Type="System.Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="3e42a-254">Obiekt do lewej strony operatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-254">The object to the left of the operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="3e42a-255">Obiekt z prawej strony operatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-255">The object to the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-256">Sprawdza, czy nierówności między dwoma tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-256">Checks for inequality between two array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-257">
            <see langword="true" /> Jeśli dwie tablice nie są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-257">
              <see langword="true" /> if the two arrays are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Remove(T item);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-258">Element do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-258">The item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-259">Zwraca tablicę z pierwsze wystąpienie określonego elementu usunąć z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-259">Returns an array with the first occurrence of the specified element removed from the array.</span>
          </span>
          <span data-ttu-id="3e42a-260">Jeśli nie znaleziono, zwracany jest bieżącym tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-260">If no match is found, the current array is returned.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-261">Nowej tablicy z elementów usuniętych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-261">A new array with the item removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Remove (T item, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Remove(!T item, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T, equalityComparer As IEqualityComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Remove(T item, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Remove (item, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-262">Element do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-262">The item to remove.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-263">Porównania równości, służące do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-263">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-264">Zwraca tablicę z pierwsze wystąpienie określonego elementu usunąć z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-264">Returns an array with the first occurrence of the specified element removed from the array.</span>
          </span>
          <span data-ttu-id="3e42a-265">Jeśli nie znaleziono, zwracany jest bieżącym tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-265">If no match is found, the current array is returned.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-266">Usunięte nowej tablicy z określonego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-266">A new array with the specified item removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3e42a-267">Delegat definiujący warunki elementu do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-267">The delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-268">Usuwa wszystkie elementy z tablicy, która spełnia określony warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-268">Removes all the items from the array that meet the specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-269">Nowej tablicy z elementami, które spełniają określony warunek usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-269">A new array with items that meet the specified condition removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-270">Oparte na 0 indeks elementu do usunięcia z zwrócony tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-270">The 0-based index of the element to remove from the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-271">Zwraca tablicę z elementu w określonej pozycji usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-271">Returns an array with the element at the specified position removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-272">Usunięte nowej tablicy z elementem pod określonym indeksem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-272">A new array with the item at the specified index removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e42a-273">Elementów, które chcesz usunąć, jeśli dopasowań na tej liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-273">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-274">Usuwa określone elementy z tej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-274">Removes the specified items from this array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-275">Nowe tablicą zawierającą elementy usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-275">A new array with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (System.Collections.Immutable.ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(System::Collections::Immutable::ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e42a-276">Elementów, które chcesz usunąć, jeśli dopasowań na tej liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-276">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-277">Usuwa określone wartości z tej listy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-277">Removes the specified values from this list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-278">Nowa lista z elementami usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-278">A new list with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e42a-279">Elementów, które chcesz usunąć, jeśli dopasowań na tej liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-279">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-280">Porównania równości, służące do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-280">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-281">Usuwa określone elementy z tej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-281">Removes the specified items from this array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-282">Nowe tablicą zawierającą elementy usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-282">A new array with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (System.Collections.Immutable.ImmutableArray&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As ImmutableArray(Of T), equalityComparer As IEqualityComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(System::Collections::Immutable::ImmutableArray&lt;T&gt; items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e42a-283">Elementów, które chcesz usunąć, jeśli dopasowań na tej liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-283">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-284">Porównania równości, służące do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-284">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-285">Usuwa określone elementy z tej listy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-285">Removes the specified items from this list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-286">Nowe tablicą zawierającą elementy usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-286">A new array with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, length As Integer) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(int index, int length);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange (index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-287">Na podstawie 0 indeks początkowy elementu do usunięcia z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-287">The 0-based index of the starting element to remove from the array.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3e42a-288">Liczba elementów, aby usunąć z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-288">The number of elements to remove from the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-289">Zwraca tablicę elementów w określonej pozycji usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-289">Returns an array with the elements at the specified position removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-290">Usunięte nowej tablicy z określonych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-290">The new array with the specified elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Replace (T oldValue, T newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Replace(!T oldValue, !T newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Replace(T oldValue, T newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : 'T * 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Replace (oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="3e42a-291">Wartość do Znajdź i Zamień w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-291">The value to find and replace in the array.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="3e42a-292">Wartość, która zastąpi <c>oldvalue</c> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-292">The value to replace the <c>oldvalue</c> with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-293">Znajduje pierwszy element w tablicy równa określonej wartości i zastępuje wartość określoną nową wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-293">Finds the first element in the array equal to the specified value and replaces the value with the specified new value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-294">Nowej tablicy, która zawiera <paramref name="newValue" /> nawet, jeśli w nowym i starym wartości są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-294">A new array that contains <paramref name="newValue" /> even if the new and old values are the same.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3e42a-295">
            <paramref name="oldValue" /> Nie znaleziono w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-295">
              <paramref name="oldValue" /> is not found in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="3e42a-296">Wartość do Znajdź i Zamień w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-296">The value to find and replace in the array.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="3e42a-297">Wartość, która zastąpi <c>oldvalue</c> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-297">The value to replace the <c>oldvalue</c> with.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-298">Porównanie równości służy do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-298">The equality comparer to use to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-299">Znajduje pierwszy element w tablicy równa określonej wartości i zastępuje wartość określoną nową wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-299">Finds the first element in the array equal to the specified value and replaces the value with the specified new value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-300">Nowej tablicy, która zawiera <paramref name="newValue" /> nawet, jeśli w nowym i starym wartości są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-300">A new array that contains <paramref name="newValue" /> even if the new and old values are the same.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3e42a-301">
            <paramref name="oldValue" /> Nie znaleziono w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-301">
              <paramref name="oldValue" /> is not found in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; SetItem (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; SetItem(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, item As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; SetItem(int index, T item);" />
      <MemberSignature Language="F#" Value="member this.SetItem : int * 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-302">Indeks elementu do zastąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-302">The index of the item to replace.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="3e42a-303">Element, który ma zostać dodany do listy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-303">The item to add to the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-304">Zamienia określony element element w określonym indeksie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-304">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-305">Nowej tablicy, która zawiera <paramref name="item" /> pod określonym indeksem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-305">The new array that contains <paramref name="item" /> at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort () As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-306">Sortuje elementów w tablicy modyfikować za pomocą domyślna funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-306">Sorts the elements in the immutable array using the default comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-307">Nowej tablicy niezmienne zawiera elementy tej tablicy posortowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-307">A new immutable array that contains the items in this array, in sorted order.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (comparer As IComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="3e42a-308">Implementacja do używania przy porównywaniu elementy, lub <see langword="null" /> do użycia domyślna funkcja porównująca</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-308">The implementation to use when comparing elements, or <see langword="null" /> to use the default comparer</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-309">Sortuje elementów w tablicy modyfikować za pomocą określona funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-309">Sorts the elements in the immutable array using the specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-310">Nowej tablicy niezmienne zawiera elementy tej tablicy posortowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-310">A new immutable array that contains the items in this array, in sorted order.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (comparison As Comparison(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">
          <span data-ttu-id="3e42a-311">
            <see cref="T:System.Comparison`1" /> Do użycia podczas porównywania elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-311">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-312">Sortuje elementów w całej <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> przy użyciu określonego <see cref="T:System.Comparison`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-312">Sorts the elements in the entire <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> using             the specified <see cref="T:System.Comparison`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-313">Posortowanej listy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-313">The sorted list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3e42a-314">
            <paramref name="comparison" /> ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-314">
              <paramref name="comparison" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (index As Integer, count As Integer, comparer As IComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-315">Indeks pierwszego elementu do sortowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-315">The index of the first element to sort.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e42a-316">Liczba elementów do dołączenia do sortowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-316">The number of elements to include in the sort.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3e42a-317">Implementacja do używania przy porównywaniu elementy, lub <see langword="null" /> do użycia domyślna funkcja porównująca</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-317">The implementation to use when comparing elements, or <see langword="null" /> to use the default comparer</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-318">Sortuje określonych elementów w tablicy modyfikować za pomocą określona funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-318">Sorts the specified elements in the immutable array using the specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-319">Nowej tablicy niezmienne zawiera elementy tej tablicy posortowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-319">A new immutable array that contains the items in this array, in sorted order.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As T) Implements ICollection(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Add(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-320">Element do dodania na koniec tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-320">The item to add to the end of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-321">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-321">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-322">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-322">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-323">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Generic.ICollection%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-323">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Clear() = System::Collections::Generic::ICollection&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-324">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-324">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-325">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-325">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-326">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Generic.ICollection%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-326">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.ICollection&lt;T&gt;.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.Generic.ICollection&lt;T&gt;.Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection(Of T).Count" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.Generic.ICollection&lt;T&gt;.Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-327">Pobiera liczbę tablicy w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-327">Gets the number of array in the collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3e42a-328">Element zgłaszany, gdy <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> właściwość zwraca wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-328">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-329">Pobiera wartość wskazującą, czy to wystąpienie jest tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-329">Gets a value indicating whether this instance is read only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-330">
            <c>wartość true,</c> Jeśli to wystąpienie jest tylko do odczytu; w przeciwnym razie <c>false</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-330">
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;T&gt;.Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As T) As Boolean Implements ICollection(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3e42a-331">Obiekt, który ma zostać usunięty z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-331">The object to remove from the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-332">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-332">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-333">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-333">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-334">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-334">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-335">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Generic.ICollection%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-335">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-336">Zwraca moduł wyliczający, który iteruje po tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-336">Returns an enumerator that iterates through the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-337">Moduł wyliczający, który może służyć do iterowania po tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-337">An enumerator that can be used to iterate through the array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-338">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-338">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-339">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Generic.IEnumerable%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-339">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As T) Implements IList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.Insert(int index, T item) = System::Collections::Generic::IList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-340">Indeks lokalizacji do wstawienia elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-340">The index of the location to insert the item.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="3e42a-341">Element do wstawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-341">The item to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-342">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-342">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-343">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-343">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-344">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Generic.IList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-344">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As T Implements IList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System.Collections.Generic.IList&lt;T&gt;.Item[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.Generic.IList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-345">Liczony od zera indeks elementu do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-345">The zero-based index of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-346">Pobiera lub ustawia element pod określonym indeksem na liście tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-346">Gets or sets the element at the specified index in the read-only list.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-347">Element pod określonym indeksem na liście tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-347">The element at the specified index in the read-only list.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3e42a-348">Zawsze generowany z metody ustawiającej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-348">Always thrown from the setter.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3e42a-349">Element zgłaszany, gdy <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> właściwość zwraca wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-349">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-350">Indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-350">The index.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-351">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-351">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection&lt;T&gt;#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements IReadOnlyCollection(Of T).Count" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-352">Pobiera liczbę tablicy w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-352">Gets the number of array in the collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3e42a-353">Element zgłaszany, gdy <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> właściwość zwraca wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-353">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As T Implements IReadOnlyList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item[int] { T get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-354">Indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-354">The index.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-355">Pobiera element wskazywany przez określony indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-355">Gets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-356">Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-356">The element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3e42a-357">Element zgłaszany, gdy <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> właściwość zwraca wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-357">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="3e42a-358">Tablicy na skopiowanie tej tablicy do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-358">The array to copy this array to.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3e42a-359">Indeks w tablicy docelowej, aby uruchomić operację kopiowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-359">The index in the destination array to start the copy operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-360">Kopiuje tej tablicy do innej tablicy, zaczynając od określonego indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-360">Copies this array to another array starting at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-361">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-361">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-362">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.ICollection> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-362">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-363">Pobiera rozmiar tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-363">Gets the size of the array.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3e42a-364">Element zgłaszany, gdy <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> właściwość zwraca wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-364">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-365">Zobacz <see cref="T:System.Collections.ICollection" /> interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-365">See the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-366">Pobiera główną synchronizację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-366">Gets the sync root.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-367">Zwraca moduł wyliczający, który iteruje po niezmienne tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-367">Returns an enumerator that iterates through the immutable array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-368">Moduł wyliczający, który iteruje po niezmienne tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-368">An enumerator that iterates through the immutable array.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e42a-369">Wartość do dodania do macierzy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-369">The value to add to the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-370">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-370">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-371">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-371">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-372">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-372">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e42a-373">Wartość do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-373">The value to check for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-374">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-374">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-375">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-375">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e42a-376">Wartość zwracana indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-376">The value to return the index of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-377">Pobiera wartość o określonym indeksie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-377">Gets the value at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-378">Wartość elementu pod określonym indeksem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-378">The value of the element at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-379">Indeks, która wskazuje, gdzie można wstawić elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-379">Index that indicates where to insert the item.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3e42a-380">Wartości do wstawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-380">The value to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-381">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-381">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-382">Pobiera wartość wskazującą, czy to wystąpienie ma stały rozmiar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-382">Gets a value indicating whether this instance is fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-383">
            <c>wartość true,</c> Jeśli to wystąpienie jest ustalony rozmiar; w przeciwnym razie <c>false</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-383">
              <c>true</c> if this instance is fixed size; otherwise, <c>false</c>.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-384">Pobiera wartość wskazującą, czy to wystąpienie jest tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-384">Gets a value indicating whether this instance is read only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e42a-385">
            <c>wartość true,</c> Jeśli to wystąpienie jest tylko do odczytu; w przeciwnym razie <c>false</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-385">
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-386">Indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-386">The index.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-387">Pobiera lub ustawia <see cref="T:System.Object" /> pod określonym indeksem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-387">Gets or sets the <see cref="T:System.Object" /> at the specified index.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3e42a-388">Zawsze generowany z metody ustawiającej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-388">Always thrown from the setter.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3e42a-389">Element zgłaszany, gdy <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> właściwość zwraca wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-389">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e42a-390">Wartość, aby usunąć z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-390">The value to remove from the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-391">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-391">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-392">Indeks elementu do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-392">The index of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-393">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-393">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As T) As IImmutableList(Of T) Implements IImmutableList(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Add(T value) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e42a-394">Wartość do dodania na koniec tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-394">The value to add to the end of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-395">Zwraca określony element dodawany na końcu kopię oryginalnej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-395">Returns a copy of the original array with the specified item added to the end.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-396">Nowej tablicy z określonym elementem dodawane na końcu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-396">A new array with the specified item added to the end.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-397">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-397">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-398">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-398">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).AddRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items) = System::Collections::Immutable::IImmutableList&lt;T&gt;::AddRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e42a-399">Elementy do dodania do końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-399">The elements to add to the end of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-400">Zwraca kopię oryginalnej tablicy określone elementy dodane do końca tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-400">Returns a copy of the original array with the specified elements added to the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-401">Nowej tablicy z elementami dodawane na końcu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-401">A new array with the elements added to the end.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-402">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-402">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-403">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-403">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Function Clear () As IImmutableList(Of T) Implements IImmutableList(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear() = System::Collections::Immutable::IImmutableList&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-404">Zwraca tablicę z wszystkie elementy usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-404">Returns an array with all the elements removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-405">Zwraca tablicę z wszystkie elementy usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-405">Returns an array with all the elements removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-406">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-406">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-407">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-407">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Function Insert (index As Integer, element As T) As IImmutableList(Of T) Implements IImmutableList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert(int index, T element) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-408">Na podstawie 0 indeks w tablicy, w którym można dodać nowego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-408">The 0-based index into the array at which the new item should be added.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="3e42a-409">Element do wstawienia na początku tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-409">The item to insert at the start of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-410">Zwraca tablicę nowe o określonej wartości wstawione w określonej pozycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-410">Returns a new array with the specified value inserted at the specified position.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-411">Nowej tablicy o określonej wartości wstawiony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-411">A new array with the specified value inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-412">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-412">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-413">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-413">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).InsertRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items) = System::Collections::Immutable::IImmutableList&lt;T&gt;::InsertRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-414">Indeks w celu wstawienia wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-414">The index at which to insert the value.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="3e42a-415">Elementy do wstawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-415">The elements to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-416">Wstawia określone wartości w określonym indeksie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-416">Inserts the specified values at the specified index</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-417">Z określonymi wartościami dodaje nowej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-417">A new array with the specified values inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-418">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-418">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-419">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-419">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e42a-420">Wartość, aby usunąć z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-420">The value to remove from the array.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-421">Porównania równości, służące do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-421">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-422">Zwraca tablicę z pierwsze wystąpienie określonego elementu usuwany z tablicy; Jeśli nie znaleziono, zwracany jest bieżącym tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-422">Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-423">Usunięte nowej tablicy o wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-423">A new array with the value removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-424">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-424">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-425">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-425">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll(Predicate&lt;T&gt; ^ match) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3e42a-426">Delegat definiujący warunki elementu do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-426">The delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-427">Usuwa wszystkie elementy z tablicy, która spełnia określony warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-427">Removes all the items from the array that meet the specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-428">Nowej tablicy z elementami, które spełniają określony warunek usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-428">A new array with items that meet the specified condition removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-429">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-429">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-430">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-430">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveAt (index As Integer) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt(int index) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-431">Oparte na 0 indeks elementu do usunięcia z zwrócony tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-431">The 0-based index of the element to remove from the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-432">Zwraca tablicę z elementu w określonej pozycji usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-432">Returns an array with the element at the specified position removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-433">Usunięte nowej tablicy z określonego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-433">A new array with the specified item removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-434">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-434">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-435">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-435">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="3e42a-436">Elementów, które chcesz usunąć, jeśli dopasowań na tej liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-436">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-437">Porównania równości, służące do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-437">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-438">Usuwa określone elementy z tej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-438">Removes the specified items from this array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-439">Nowe tablicą zawierającą elementy usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-439">A new array with the elements removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-440">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-440">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-441">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-441">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(int index, int count) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-442">Na podstawie 0 indeks początkowy elementu do usunięcia z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-442">The 0-based index of the starting element to remove from the array.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3e42a-443">Liczba elementów, aby usunąć z tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-443">The number of elements to remove from the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-444">Zwraca tablicę elementów w określonej pozycji usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-444">Returns an array with the elements at the specified position removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-445">Usunięte nowej tablicy z określonych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-445">The new array with the specified elements removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-446">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-446">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-447">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-447">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).Replace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Replace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="3e42a-448">Wartość do Znajdź i Zamień w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-448">The value to find and replace in the array.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="3e42a-449">Wartość, która zastąpi <c>oldvalue</c> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-449">The value to replace the <c>oldvalue</c> with.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="3e42a-450">Porównanie równości służy do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-450">The equality comparer to use to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-451">Znajduje pierwszy element w tablicy równa określonej wartości i zastępuje wartość określoną nową wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-451">Finds the first element in the array equal to the specified value and replaces the value with the specified new value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-452">Nowej tablicy, która zawiera <paramref name="newValue" /> nawet, jeśli w nowym i starym wartości są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-452">A new array that contains <paramref name="newValue" /> even if the new and old values are the same.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-453">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-453">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-454">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-454">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3e42a-455">
            <paramref name="oldValue" /> Nie znaleziono w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-455">
              <paramref name="oldValue" /> is not found in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Function SetItem (index As Integer, value As T) As IImmutableList(Of T) Implements IImmutableList(Of T).SetItem" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem(int index, T value) = System::Collections::Immutable::IImmutableList&lt;T&gt;::SetItem;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3e42a-456">Indeks elementu do zastąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-456">The index of the item to replace.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3e42a-457">Wartość do dodania do listy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-457">The value to add to the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-458">Zamienia określony element element w określonym indeksie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-458">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-459">Nowej tablicy, która zawiera <paramref name="item" /> pod określonym indeksem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-459">The new array that contains <paramref name="item" /> at the specified index.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-460">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-460">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-461">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.Immutable.IImmutableList%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-461">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="3e42a-462">Element do porównania z bieżącym wystąpieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-462">The element to compare with the current instance.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3e42a-463">Obiekt użyty do porównania członków bieżącej tablicy o odpowiednie elementy Członkowskie inne tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-463">The object used to compare members of the current array with the corresponding members of other array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-464">Określa, czy bieżący element kolekcji poprzedza, odbywa się w tym samym miejscu czy następuje innego elementu w kolejności sortowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-464">Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-465">Liczba całkowita, która wskazuje, czy bieżący element poprzedza, znajduje się w tej samej pozycji czy następuje z innego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-465">An integer that indicates whether the current element precedes, is in the same position or follows the other element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-466">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-466">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-467">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.IStructuralComparable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-467">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3e42a-468">Tablice nie są taką samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-468">The arrays are not the same length.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="3e42a-469">Tablica do porównania z bieżącym wystąpieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-469">The array to compare with the current instance.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3e42a-470">Obiekt, który określa, czy bieżące wystąpienie i inne są strukturalnie takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-470">An object that determines whether the current instance and other are structurally equal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-471">Określa, czy ta tablica jest strukturalnie równa określonej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-471">Determines whether this array is structurally equal to the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-472">
            <see langword="true" /> Jeśli dwie tablice są strukturalnie równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-472">
              <see langword="true" /> if the two arrays are structurally equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-473">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3e42a-473">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3e42a-474">Można go używać tylko wtedy, gdy <xref:System.Collections.Immutable.ImmutableArray%601> wystąpienia jest rzutowane na <xref:System.Collections.IStructuralEquatable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3e42a-474">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="3e42a-475">Obiekt, który oblicza wartość skrótu bieżącego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-475">An object that computes the hash code of the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e42a-476">Zwraca wartość skrótu dla bieżącego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-476">Returns a hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-477">Wartość skrótu dla bieżącego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-477">The hash code for the current instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBuilder">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt;.Builder ToBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!T&gt; ToBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBuilder () As ImmutableArray(Of T).Builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt;::Builder ^ ToBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToBuilder : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder" Usage="immutableArray.ToBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e42a-478">Tworzy modyfikowalną tablica, która ma tę samą zawartość jako tej tablicy i może ulegać mutacjom wydajnie między wiele operacji za pomocą standardowych interfejsów modyfikowalne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-478">Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e42a-479">Nowy Konstruktor przy użyciu tej samej zawartości jako tej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e42a-479">The new builder with the same contents as this array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e42a-480">To jest operacją O(1) i powoduje tylko alokacji pojedynczego pamięci (małe).</span><span class="sxs-lookup"><span data-stu-id="3e42a-480">This is an O(1) operation and results in only a single (small) memory allocation.</span></span> <span data-ttu-id="3e42a-481">Modyfikowalne listy, która jest zwracana nie jest bezpieczne wątkowo.</span><span class="sxs-lookup"><span data-stu-id="3e42a-481">The mutable list that is returned is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>