<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77ff688e28e7f70d70b9a98d3b23d3fb27c73f18" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53446138" /></Metadata><TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje element kodu jest kompilowana przez aparat skryptów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
Element określony kod może zawierać klas, modułów lub inny tekst źródłowy.

Nie uprawnienia są wymagane do wywoływania żadnych składowych interfejsu IVsaCodeItem.

Aparat skryptów implementuje ten interfejs, aby można było dodać elementów kodu.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Nazwą programową źródła zdarzeń.</param>
        <param name="eventSourceType">Nazwa typu źródła zdarzeń.</param>
        <summary>Dodaje źródło zdarzenia do elementu kodu. Element kodu używa źródła zdarzeń, aby zaczepić zdarzenie w źródle nazwane zdarzeń przez wywołanie metody IVsaSite.GetEventSourceInstance, która jest zaimplementowana przez hosta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Aparat skryptów używa informacji dostarczonych przez metodę AddEventSource do podłączania zdarzeń do źródła zdarzenia nazwanego. Uzyskuje źródła zdarzeń przez wywołanie metody IVsaSite.GetEventSourceInstance, która jest zaimplementowana przez hosta. Metoda AddEventSource tworzy klasę, która obsługuje zdarzenia zgłaszane przez obiekt dostarczone do hosta.

> [!NOTE]
> Aparat skryptu JScript .NET nie obsługuje tej metody. W przypadkach, gdy aparat JScript .NET należy podpiąć zdarzenie należy to zrobić przy użyciu elementu globalnego. Zamiast źródła zdarzeń, aparat JScript .NET używa AppGlobal typów elementów. Aby uzyskać więcej informacji zobacz VsaItemType.


W elemencie kod dostępu do obiektu źródłowego zdarzeń według nazwy, a następnie po dostępny, można napisać procedury obsługi zdarzeń w odniesieniu do obiektu. Typ źródła zdarzeń jest przekazywany jako ciąg, a nie jako obiekt typu ułatwiające implementującej źródła zdarzeń przez niezarządzane hosty.

Kompilator używa parametru eventSourceType powiązać z metod dostarczonych przez tego typu. Jest również używany później podczas aparat skryptu wywołuje metodę IVsaSite.GetEventSourceInstance do wystąpienia obiektu typu żądania.

Aby uzyskać więcej informacji na temat mechanizmów w celu podłączenia zdarzeń dla aparatu skryptów Zobacz metodę IVsaSite.GetEventSourceInstance.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst, który zostanie dołączony do elementu kodu.</param>
        <summary>Dołącza określony tekst na koniec elementu kodu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Tekst źródłowy dołączonych nie jest poddawana weryfikacji. Z tego powodu błędy, jeśli istnieje, ujawni w następnym wywołaniu metody IVsaEngine.Compile.

Tekst źródłowy dołączany jest dostarczany jako pojedynczy ciąg. Ciąg wymagać formatowania, należy podać to samodzielnie.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kod document object model (CodeDOM) reprezentowane w elemencie kodu.</summary>
        <value>CodeDOM dla elementu kodu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Właściwość CodeDOM zwykle jest generowany w ramach kroku kompilacji aparatu skryptów, więc nie jest dostępna do momentu po wywołaniu metody IVsaEngine.Compile. Niektóre implementacje VSA może umożliwiać CodeDOM dynamicznie, bez konieczności etap kompilację typu explicit, ale hostów nie można polegać na to zachowanie. Niektóre aparaty skryptów, na przykład aparat skryptu JScript .NET, nie obsługują tego zachowania.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Nazwą programową źródła zdarzeń do usunięcia.</param>
        <summary>Usuwa źródła określonego zdarzenia z elementu kodu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Usunięcie źródła zdarzeń nie powoduje usunięcia podstawowego programu obsługi zdarzeń w tekście źródłowym. Zamiast zdarzenia nie są już wywoływanie powiadomień o do narzędzia obsługi zdarzeń. W związku z tym otrzymasz błąd kompilatora Jeśli Usuń źródła zdarzenia, ale pozostawić podstawowych funkcji w kodzie źródłowym.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia lub pobiera tekst elementu określonego kodu, w tym automatycznie wygenerowany kod, jeśli istnieje.</summary>
        <value>Tekst źródłowy elementu kodu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Jeśli ustawisz tę właściwość, tekst nie jest poddawana weryfikacji. Z tego powodu błędy, jeśli istnieje, ujawni w następnym wywołaniu metody IVsaEngine.Compile.

Właściwość elementu SourceText zwraca zwraca tekst źródłowy w jednym ciągu dużych, w tym znaki formatowania, takie jak powrotu karetki.

Do pobrania tej właściwości aparat nie może być zamknięty. Aby ustawić tę właściwość aparat nie może być zamknięty, a aparat nie może być uruchomiona.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>