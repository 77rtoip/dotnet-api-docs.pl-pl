<Type Name="ProviderBase" FullName="System.Configuration.Provider.ProviderBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8ac4b3e2914d1d8ccd4f48a74612cd6abd56d602" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30443154" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProviderBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderBase abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia podstawową implementację dostawcy rozszerzonego modelu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Model dostawcy jest przeznaczona do Hermetyzowanie całość lub część funkcji wielu funkcji programu ASP.NET, takich jak członkostwa, profile i konfiguracji chronionych. Umożliwia deweloperom tworzenie klasy obsługi udostępniające wiele implementacji hermetyzowany funkcji. Ponadto programiści mogą pisać nowych funkcji przy użyciu modelu dostawcy. Może to być efektywny sposób obsługuje wiele implementacji tej funkcji bez duplikowania kodu funkcji lub nagrywanie warstwy aplikacji, jeśli metoda implementacji musi zostać zmienione.  
  
 <xref:System.Configuration.Provider.ProviderBase> Klasy jest proste, zawierający tylko kilka podstawowe metody i właściwości, które są wspólne dla wszystkich dostawców. Dostawców właściwych dla funkcji (takich jak <xref:System.Web.Security.MembershipProvider>) dziedziczyć <xref:System.Configuration.Provider.ProviderBase> i ustal niezbędne metody i właściwości, które muszą obsługiwać dostawców konkretnej implementacji dla tej funkcji. Konkretnej implementacji dostawcy (takich jak <xref:System.Web.Security.SqlMembershipProvider>) z kolei dziedziczyć dostawcy właściwych dla funkcji (w tym przypadku <xref:System.Web.Security.MembershipProvider>).  
  
 Najważniejszym aspektem modelu dostawcy jest, że implementacja (na przykład, czy dane jest trwała jako plik tekstowy lub w bazie danych) jest pobieranej z kodu aplikacji. Typ dostawcy konkretnej implementacji dla danej funkcji wyznaczono w pliku konfiguracji. Następnie dostawca funkcji na poziomie odczytuje w typie z pliku konfiguracji, a także pełni rolę fabrykę do kodu funkcji. Deweloper aplikacji może następnie używać klas funkcji w kodzie aplikacji. Typ implementacji można wymieniony w pliku konfiguracji, co eliminuje konieczność ponownego pisania kodu, aby pomieścić metodologii inną implementację.  
  
 Dostawcy dołączonego ASP.NET są przeważnie abstrakcje implementacje trwałości danych dla funkcji, takich jak profile lub członkostwa. Jednak ten model może odnosić się do innego rodzaju korzystanie z funkcji, który można pobieranej i wdrożone na wiele sposobów.  
  
   
  
## Examples  
 Przykład sposobu użycia <xref:System.Configuration.Provider.ProviderBase> , zobacz [przykład implementacji dostawcy profilu](http://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProviderBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ProviderBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Configuration.Provider.ProviderBase" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opis krótki, przyjazną odpowiednią do wyświetlania w narzędzia administracyjne lub inne interfejsy użytkownika (UI).</summary>
        <value>Krótkie, przyjazną opis odpowiednią do wyświetlania narzędzi administracyjnych lub innych UI.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli skonfigurowanego dostawcy nie dostarcza opis, wartość <xref:System.Configuration.Provider.ProviderBase.Name%2A> zwracana jest właściwość jako domyślny.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">Przyjazna nazwa dostawcy.</param>
        <param name="config">Kolekcja par nazw i wartości reprezentujących atrybuty specyficzne dla dostawcy określonego w konfiguracji dla tego dostawcy.</param>
        <summary>Inicjuje konstruktora konfiguracji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja klasy podstawowej wewnętrznie śledzi liczbę razy dostawcy `Initialize` została wywołana metoda. Jeśli więcej niż raz, zainicjować dostawcy `InvalidOperationException` jest zgłaszany, informujący, że dostawca został już zainicjowany.  
  
 Ponieważ większość funkcji wywołania dostawców <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> przed wykonaniem inicjowania specyficznych dla dostawcy, ta metoda jest centralną lokalizację uniemożliwia podwójne inicjowania.  
  
   
  
## Examples  
 Przykład sposobu użycia <xref:System.Configuration.Provider.ProviderBase.Initialize%2A>, zobacz [przykład implementacji dostawcy profilu](http://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nazwa dostawcy jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa dostawcy ma długość równą zero.</exception>
        <exception cref="T:System.InvalidOperationException">Próby wywołania <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> przez dostawcę po dostawca został już zainicjowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera przyjazną nazwę używaną do odwoływania się do dostawcy podczas konfiguracji.</summary>
        <value>Przyjazna nazwa używana do odwoływania się do dostawcy podczas konfiguracji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest zalecana wzorca dla tych parametrów: [*twórcy dostawcy*] [*typ implementacji*] [*funkcji*] dostawcy. Mimo że <xref:System.Configuration.Provider.ProviderBase.Description%2A> właściwość zapewnia również przyjazny opis <xref:System.Configuration.Provider.ProviderBase.Name%2A> właściwość jest używana jako identyfikator dla dostawcy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>