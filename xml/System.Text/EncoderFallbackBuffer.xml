<Type Name="EncoderFallbackBuffer" FullName="System.Text.EncoderFallbackBuffer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="116c4743750d62c78bf7a85e6e5dff453828390b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579259" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderFallbackBuffer abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia bufor umożliwiający rezerwowy obsługi powrócić do kodera ciągu alternatywne, gdy nie można zakodować znak wejściowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie definiuje mapowanie między znaków Unicode i zakodowanego sekwencji bajtów. Operację kodowania, który konwertuje znak wejściowy do sekwencji bajtów wyjściowych, kończy się niepowodzeniem, jeśli nie jest zdefiniowany dla określonego znaku.  
  
 .NET Framework zapewnia awarii mechanizmu wywołuje rezerwowe, jeśli nie można wykonać konwersji obsługi. Wszystkie programy obsługi rezerwowego kodera musi implementować następujące czynności:  
  
-   Koder rezerwowej, która jest reprezentowana przez klasę pochodną <xref:System.Text.EncoderFallback> klasy.  
  
-   Koder buforze rezerwowym, która jest reprezentowana przez typ pochodny typu <xref:System.Text.EncoderFallbackBuffer> klasy, która może zwracać ciąg do operacji konwersji.  
  
 Przejścia służą trzy strategie do obsługi błędów konwersji:  
  
-   Mapowanie najlepszego dopasowania. Koder buforze rezerwowym może zwracać ciąg reprezentujący Zamknij zbliżenia się znak wejściowy. .NET Framework nie ma najlepszego dopasowania publiczny <xref:System.Text.EncoderFallbackBuffer> implementacji.  
  
-   Zastąpienie. Koder buforze rezerwowym może zwrócić typu string, takie jak znak zapytania ("?"), który wskazuje znak nie może zostać zakodowany. W programie .NET Framework <xref:System.Text.EncoderReplacementFallback> i <xref:System.Text.EncoderReplacementFallbackBuffer> klasy udostępnić implementację buforze rezerwowym publicznego zastąpienia. Konstruktor obiektu <xref:System.Text.EncoderReplacementFallback> klasa umożliwia zdefiniowanie ciąg zastępczy.  
  
-   Wyjątek. <xref:System.Text.EncoderFallbackBuffer> Implementacja zwraca wyjątek, który wskazuje, że znak nie może zostać zakodowany i zakończy operację kodowania. W takim przypadku należy zapewnić obsługi rezerwowego <xref:System.Text.EncoderFallbackBuffer> implementacji, chociaż nie zwrócił ciągu do kodera. W programie .NET Framework <xref:System.Text.EncoderExceptionFallback> i <xref:System.Text.EncoderExceptionFallbackBuffer> klasy Podaj implementacji rezerwowy publicznego wyjątek, który zgłasza <xref:System.Text.EncoderFallbackException> gdy znak nie może zostać zakodowany.  
  
 Bufor w <xref:System.Text.EncoderFallbackBuffer> implementacji reprezentuje cały ciąg ma zostać zwrócona do kodera w odpowiedzi na kodera rezerwowego. Ogólnie rzecz biorąc występujące implementacje to również informacje o stanie, takie jak indeks następny znak, aby powrócić do kodera i liczbę pozostałych znaków, które ma zostać zwrócona. Ponieważ <xref:System.Text.EncoderFallbackBuffer> jest klasą abstrakcyjną, wymaga klas pochodnych do implementacji co najmniej następujące elementy:  
  
-   Przeciążone <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metodę, która jest wywoływana przez koder, gdy nie można zakodować znak. Koder przekazuje informacje do realizacji buforze rezerwowym: znak lub para zastępcza, który nie może być kodowany i indeks znaku w danych wejściowych. W program obsługi wyjątku rezerwowy kodera wyjątku w ramach tej metody. W przeciwnym razie metoda zwraca `true` Jeśli zapewnia rezerwowe, lub `false` jeśli jej nie ma.  
  
-   <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Metodę, która jest często nazywana przez koder Jeśli <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metoda zwraca `true`. W kolejnych wywołaniach program obsługi ma zwracać każdego znaku w swoim buforze. Po jego zwróceniem wszystkie znaki, powinien on zwrócić 0000 U +. Program obsługi wyjątku zawsze zwraca wartość U + 0000.  
  
-   <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> Metodę, która podejmuje próbę Przesuń wskaźnik poprzedniej pozycji w buforze i wskazuje, czy została pomyślnie przeniesiona. Zawsze zwraca program obsługi wyjątku `false`.  
  
-   <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> Właściwość, która wskazuje liczbę pozostałych znaków do zwrócenia do kodera. Program obsługi wyjątku rezerwowy zawsze zwraca zero.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.EncoderFallback" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EncoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EncoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.EncoderFallbackBuffer" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy ciąg zastępczy jest dostępny, gdy oryginalne dane wejściowe nie może zostać zakodowany, czy oryginalne dane wejściowe powinny być ignorowane.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknown, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown">Znak wejściowy.</param>
        <param name="index">Indeks znaku w buforze wejściowym.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, przygotowuje buforze rezerwowym obsłużyć określony znak wejściowy.</summary>
        <returns>
          <see langword="true" /> Jeśli w buforze rezerwowym może przetwarzać <paramref name="charUnknown" />; <see langword="false" /> Jeśli ignoruje buforze rezerwowym <paramref name="charUnknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> i <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> wywołania metody <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> w momencie napotkania nieznany znak wejściowy, który nie może zostać zakodowany. Zwracana wartość `true` wskazuje, że w buforze rezerwowym może przetwarzać wprowadzany znak, co powoduje, że wywołanie metody do wywołania <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metodę, aby uzyskać każdego znaku w buforze rezerwowym. Ponieważ nie przetwarza poszczególnych znaków <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metody rezerwowej program obsługi wyjątku zgłasza wyjątek.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh">Zastępczym wysokiego poziomu wejściowego pary.</param>
        <param name="charUnknownLow">Dwuskładnikowego pary wejściowego.</param>
        <param name="index">Indeks para zastępcza w buforze wejściowym.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, przygotowuje buforze rezerwowym do obsługi para zastępcza określony.</summary>
        <returns>
          <see langword="true" /> Jeśli w buforze rezerwowym może przetwarzać <paramref name="charUnknownHigh" /> i <paramref name="charUnknownLow" />; <see langword="false" /> Jeśli para zastępcza ignoruje buforze rezerwowym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> i <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> wywołania metody <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> w momencie napotkania para zastępcza w danych wejściowych. Zwracana wartość `true` wskazuje, że w buforze rezerwowym może przetwarzać para zastępcza, co powoduje, że wywołanie metody do wywołania <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metodę, aby uzyskać każdego znaku w buforze rezerwowym.  Ponieważ nie przetwarza poszczególnych znaków <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metody rezerwowej program obsługi wyjątku zgłasza wyjątek.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej pobiera następny znak w buforze rezerwowym.</summary>
        <returns>Następny znak w buforze rezerwowym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołuje operację kodowania <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metody, jeśli operacja napotkał nieznany znak lub para zastępcza w danych wejściowych. Na przykład w przypadku z rezerwowego, jeśli zastąpienie <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metoda zwraca `true`, ciąg zastępczy istnieje, która może zostać zakodowany zamiast wprowadzania nieznany. Kodowania wywołania operacji <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metody wielokrotnie i uzyskuje ciąg zastępczy o jeden znak w czasie. W przypadku wszystkich znaków w buforze rezerwowym zostały zwrócone do kodera, <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metoda powinna zwrócić 0000 U +.  
  
 Do obsługi rezerwowego wyjątków <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metoda powinna zwrócić 0000 U +.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, powoduje, że następne wywołanie <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> metodę dostępu pozycji znaku buforu danych, która jest przed bieżącego położenia znaku.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> operacja zakończyła się pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rezerwowy program obsługi wyjątku powinien zwrócić `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej pobiera liczbę znaków w bieżącym <see cref="T:System.Text.EncoderFallbackBuffer" /> obiekt, który ma być przetwarzane.</summary>
        <value>Liczba znaków w bieżącym buforze rezerwowym, które nie zostały przetworzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Metoda zwraca `true` Jeśli <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> ma wartość niezerową.  
  
 Do obsługi rezerwowego wyjątków <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> metoda powinna zwracać zera.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje wszystkie dane i stan informacje dotyczące tego buforze rezerwowym.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Po wywołaniu <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> metody <see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> właściwość powinna zwrócić 0, <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> metoda powinna zwrócić U + 0000 i <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> metoda powinna zwrócić <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>