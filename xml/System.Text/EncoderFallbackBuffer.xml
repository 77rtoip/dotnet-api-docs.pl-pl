<Type Name="EncoderFallbackBuffer" FullName="System.Text.EncoderFallbackBuffer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1db99dfdff0b87f276d144f15d72d2729b0e691" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37548802" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderFallbackBuffer abstract" />
  <TypeSignature Language="F#" Value="type EncoderFallbackBuffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia bufor, umożliwiająca rezerwowego obsługi do zwrócenia ciągu alternatywne do kodera, jeśli go nie można zakodować wprowadzanych znaków.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie definiuje mapowanie między znaków Unicode i zakodowany sekwencji bajtów. Kodowanie operacji, która konwertuje wprowadzanych znaków do sekwencji bajtów danych wyjściowych, kończy się niepowodzeniem, jeśli nie zdefiniowano żadnego mapowania dla określonego znaku.  
  
 .NET Framework zawiera błąd obsługi mechanizmu, o nazwie rezerwowe, jeśli nie można wykonać konwersji. Wszystkie programy obsługi rezerwowego kodera należy zaimplementować następujące czynności:  
  
-   Koder rezerwowy, który jest reprezentowany przez klasę pochodną <xref:System.Text.EncoderFallback> klasy.  
  
-   Koder bufora rezerwowy, która jest reprezentowana przez typ pochodzący od <xref:System.Text.EncoderFallbackBuffer> klasę, która może zwracać ciąg do operacji konwersji.  
  
 Planów awaryjnych służą trzy strategie do obsługi błędów konwersji:  
  
-   Mapowanie najlepszego dopasowania. Bufora rezerwowy kodera może zwracać ciąg reprezentujący bliskie zbliżenia do wprowadzanych znaków. .NET Framework nie udostępnia publiczny najlepszego dopasowania <xref:System.Text.EncoderFallbackBuffer> implementacji.  
  
-   Zastąpienie. Bufora rezerwowy kodera może zwrócić ciągu, takich jak znak zapytania ("?"), który wskazuje, że znak nie może być kodowany. W .NET Framework <xref:System.Text.EncoderReplacementFallback> i <xref:System.Text.EncoderReplacementFallbackBuffer> klasy zapewniają implementacji bufora rezerwowy zastąpienie publicznych. Konstruktor obiektu <xref:System.Text.EncoderReplacementFallback> klasy pozwala zdefiniować ciąg zamienny.  
  
-   Wyjątek. <xref:System.Text.EncoderFallbackBuffer> Implementacja zwraca wyjątek, który wskazuje, że znak nie może zostać zakodowany i zakończy operację kodowania. W takim przypadku należy podać obsługi rezerwowego <xref:System.Text.EncoderFallbackBuffer> implementacji, mimo że nie zwraca ciąg do kodera. W .NET Framework <xref:System.Text.EncoderExceptionFallback> i <xref:System.Text.EncoderExceptionFallbackBuffer> klasy zapewniają publicznych wyjątek implementacji rezerwowej, która zgłasza <xref:System.Text.EncoderFallbackException> po znaku nie może być zakodowany.  
  
 Bufor w <xref:System.Text.EncoderFallbackBuffer> implementacji reprezentuje cały ciąg zwracany do kodera w odpowiedzi na koder rezerwowego. Ogólnie rzecz biorąc implementacje również obejmować informacje o stanie, takie jak indeks następnego znaku, aby powrócić do kodera i liczbę pozostałych znaków, które mają zostać zwrócone. Ponieważ <xref:System.Text.EncoderFallbackBuffer> jest klasą abstrakcyjną wymaga klasy pochodne, aby zaimplementować następujące elementy Członkowskie co najmniej:  
  
-   Przeciążone <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metody, która jest wywoływana przez koder, gdy nie można zakodować, znak. Koder przekazuje informacje do implementacji rezerwowej buforu: znak lub para zastępcza, który nie może być kodowany i indeks znaku w danych wejściowych. W obsłudze wyjątków rezerwowego kodera wyjątek jest zgłaszany w przypadku tej metody. W przeciwnym razie metoda zwraca `true` zapewnia rezerwowe, lub `false` Jeśli tak nie jest.  
  
-   <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Metody, która jest wywoływana, wielokrotnie przez koder Jeśli <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metoda zwraca `true`. W kolejnych wywołaniach procedura obsługi powinna zwrócić każdego znaku w buforze jej. Gdy zostanie on zwrócony wszystkie znaki, powinien zostać zwrócony U + 0000. Program obsługi wyjątku zawsze zwraca wartość U + 0000.  
  
-   <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> Metody, która podejmuje próbę Przesuń wskaźnik do poprzedniej pozycji w buforze i wskazuje, czy przeniesienie zakończyło się pomyślnie. Zawsze zwraca program obsługi wyjątku `false`.  
  
-   <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> Właściwość, która wskazuje liczbę pozostałych znaków do zwrócenia do kodera. Do obsługi rezerwowego wyjątku zawsze zwraca wartość zero.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.EncoderFallback" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EncoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EncoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.EncoderFallbackBuffer" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy ciąg zastępczy jest dostępny, jeśli oryginalne dane wejściowe nie mogą być kodowane, czy mają być ignorowane oryginalne dane wejściowe.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknown, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown">Wprowadzanych znaków.</param>
        <param name="index">Pozycja indeksu znaku w buforze wejściowym.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, przygotowuje rezerwowego buforu do obsługi określonego wprowadzanych znaków.</summary>
        <returns>
          <see langword="true" /> Jeśli bufora rezerwowy może przetwarzać <paramref name="charUnknown" />; <see langword="false" /> Jeśli ignoruje bufora rezerwowy <paramref name="charUnknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> i <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> wywołanie metody <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> w momencie napotkania nieznany znak danych wejściowych, który nie może być zakodowany. Zwracana wartość wynosząca `true` wskazuje, że bufora rezerwowy może przetwarzać znak wejścia, co powoduje, że wywoływania metody do wywołania <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metodę, aby uzyskać każdy znak z bufora rezerwowy. Ponieważ nie przetwarza pojedyncze znaki, <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> zgłasza wyjątek, metoda w rezerwowej program obsługi wyjątków.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknownHigh, charUnknownLow, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh">Znakiem zastępczym wysokiego poziomu pary danych wejściowych.</param>
        <param name="charUnknownLow">Znak zastępczy niskiego poziomu pary danych wejściowych.</param>
        <param name="index">Pozycja indeksu Para dwuskładnikowa w buforze wejściowym.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, przygotowuje rezerwowego buforu do obsługi para zastępcza określony.</summary>
        <returns>
          <see langword="true" /> Jeśli bufora rezerwowy może przetwarzać <paramref name="charUnknownHigh" /> i <paramref name="charUnknownLow" />; <see langword="false" /> Jeśli bufora rezerwowy ignoruje para zastępcza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> i <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> wywołanie metody <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> w momencie napotkania para zastępcza w danych wejściowych. Zwracana wartość wynosząca `true` wskazuje, że bufora rezerwowy może przetwarzać para zastępcza, co powoduje, że wywoływania metody do wywołania <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metodę, aby uzyskać każdy znak z bufora rezerwowy.  Ponieważ nie przetwarza pojedyncze znaki, <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> zgłasza wyjątek, metoda w rezerwowej program obsługi wyjątków.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberSignature Language="F#" Value="abstract member GetNextChar : unit -&gt; char" Usage="encoderFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po przesłonięciu w klasie pochodnej pobiera następny znak w buforze rezerwowego.</summary>
        <returns>Następny znak w buforze rezerwowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołuje operację kodowania <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metody, jeśli operacja napotkał nieznany znak lub Para dwuskładnikowa w danych wejściowych. Na przykład w przypadku rezerwową, jeśli zastąpienie <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> metoda zwraca `true`, istnieje Zastąp ciąg, który można zakodować zamiast nieznany danych wejściowych. Kodowanie wywołania operacji <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metoda wielokrotnie i uzyskuje ciągu zastępuje jeden znak w danym momencie. W przypadku wszystkich znaków w buforze rezerwowym zostały zwrócone z koderem <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metoda powinna zwrócić U + 0000.  
  
 Do obsługi rezerwowego wyjątków <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> metoda powinna zwrócić U + 0000.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberSignature Language="F#" Value="abstract member MovePrevious : unit -&gt; bool" Usage="encoderFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, powoduje, że następne wywołanie <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> metodę, aby uzyskać dostęp pozycji znaku buforów danych, niż bieżąca pozycja znaku.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> operacja zakończyła się pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do obsługi rezerwowego wyjątku powinien zwrócić `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej pobiera liczbę znaków w bieżącym <see cref="T:System.Text.EncoderFallbackBuffer" /> obiekt, który dokończenia przetwarzania.</summary>
        <value>Liczba znaków w bieżącym buforze rezerwowy, które nie zostały jeszcze przetworzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Metoda zwraca `true` Jeśli <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> jest wartość różną od zera.  
  
 Do obsługi rezerwowego wyjątków <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> metoda powinna zwrócić zero.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="encoderFallbackBuffer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje wszystkie dane i informacje o stanie odnoszących się do tego buforu rezerwowego.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Po wywołaniu <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> metody <see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> właściwość powinna zwracać 0, <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> metoda powinna zwrócić U + 0000 i <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> metoda powinna zwrócić <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>