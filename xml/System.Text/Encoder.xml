<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Encoder.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5935e8a3f446a4bf08e1efb7afb01e36886d1cd6f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">935e8a3f446a4bf08e1efb7afb01e36886d1cd6f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.Encoder">
          <source>Converts a set of characters into a sequence of bytes.</source>
          <target state="translated">Konwertuje zestaw znaków sekwencję bajtów.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>To obtain an instance of an implementation of the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> class, the application should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method of an <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> implementation.</source>
          <target state="translated">Uzyskanie wystąpienia implementacja <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> klasy, należy użyć aplikacji <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> metody <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph> Metoda określa liczbę bajtów powoduje Kodowanie zestawu znaków Unicode i <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> metoda przeprowadza rzeczywistym kodowaniem.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>There are several versions of both of these methods available in the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> class.</source>
          <target state="translated">Wiele wersji obie te metody są dostępne w <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>A <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object maintains state information between successive calls to <ph id="ph2">`GetBytes`</ph> or <ph id="ph3">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> methods so that it can correctly encode character sequences that span blocks.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> obiekt przechowuje informacje o stanie między kolejnych wywołań <ph id="ph2">`GetBytes`</ph> lub <ph id="ph3">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> metod, którego nie można poprawnie kodowania znaków sekwencji, które obejmują bloków.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> Również zachowuje końcowe znaki na końcu bloki danych i używa znaki końcowe w następnej operacji kodowania.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</source>
          <target state="translated">Na przykład blok danych może kończyć się niedopasowane zastępczym wysokiego poziomu, a pasujące dwuskładnikowego może znajdować się w następnym bloku danych.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
          <target state="translated">W związku z tym <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> są przydatne w przypadku przesyłania w sieci i operacji na plikach, ponieważ te operacje często przeciwdziałania bloków danych zamiast strumienia pełnych danych.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>When the application is done with a stream of data it should make sure that the state information is flushed by setting the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> in the appropriate method call.</source>
          <target state="translated">Gdy aplikacja wykonuje się za pomocą strumienia danych, należy upewnić się, że informacje o stanie jest opróżniany przez ustawienie <ph id="ph1">`flush`</ph> parametr <ph id="ph2">`true`</ph> w wywołaniu odpowiedniej metody.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>If an exception occurs or if the application switches streams, it should call <ph id="ph1">&lt;xref:System.Text.Encoder.Reset%2A&gt;</ph> to clear the internal state of the <ph id="ph2">`Encoder`</ph> object.</source>
          <target state="translated">Jeśli wystąpi wyjątek lub gdy aplikacja strumieni, powinny wywoływać <ph id="ph1">&lt;xref:System.Text.Encoder.Reset%2A&gt;</ph> wyczyść wewnętrzny stan klasy <ph id="ph2">`Encoder`</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>Version Considerations</source>
          <target state="translated">Uwagi dotyczące wersji</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>A <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object can be serialized during a conversion operation.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> lub <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> można zserializować obiektu podczas operacji konwersji.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.</source>
          <target state="translated">Stan obiektu jest zachowanego, jeśli deserializowany jest w tej samej wersji programu .NET Framework, ale jeśli deserializowany jest w innej wersji.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>The following example demonstrates how to convert an array of Unicode characters into blocks of bytes using a specified encoding.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak przekonwertować tablicy znaków Unicode na bloki bajtów przy użyciu określonego kodowania.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>For comparison, the array of characters is first encoded using <ph id="ph1">&lt;xref:System.Text.UTF7Encoding&gt;</ph>.</source>
          <target state="translated">Dla porównania, tablicy znaków jest najpierw zakodowane przy użyciu <ph id="ph1">&lt;xref:System.Text.UTF7Encoding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>Next, the array of characters is encoded using an <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph>.</source>
          <target state="translated">Następnie tablicy znaków jest zakodowany przy użyciu <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoder">
          <source>When your application inherits from this class, it must override all the members.</source>
          <target state="translated">Gdy aplikacja z tej klasy, musi ono przesłonić wszystkie elementy członkowskie.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.#ctor">
          <source>To obtain an instance of an implementation of this class, the application should use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method of an <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> implementation.</source>
          <target state="translated">Uzyskanie wystąpienia implementacja tej klasy, należy używać aplikacji <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> metody <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.#ctor">
          <source>The following example demonstrates two techniques for initializing a new <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> instance.</source>
          <target state="translated">W poniższym przykładzie pokazano dwie metody inicjowania nowy <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Text.Encoder">
          <source>Converts a buffer or array of Unicode characters to an encoded byte sequence.</source>
          <target state="translated">Konwertuje buforu lub tablicy znaków Unicode do sekwencji bajtów zakodowany.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The address of a string of UTF-16 encoded characters to convert.</source>
          <target state="translated">Adres ciąg UTF-16 zakodowany znaków do konwersji.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The number of characters in <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Liczba znaków w <bpt id="p1">&lt;c&gt;</bpt>znaków<ept id="p1">&lt;/c&gt;</ept> do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The address of a buffer to store the converted bytes.</source>
          <target state="translated">Adres buforu do przechowywania przekonwertowanego bajtów.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The maximum number of bytes in <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept> to use in the conversion.</source>
          <target state="translated">Maksymalna liczba bajtów w <bpt id="p1">&lt;c&gt;</bpt>bajtów<ept id="p1">&lt;/c&gt;</ept> do użycia w konwersji.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate no further data is to be converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby wskazać żadne dodatkowe dane jest do skonwertowania; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains the number of characters from <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> that were used in the conversion.</source>
          <target state="translated">Po powrocie z tej metody zawiera liczbę znaków od <bpt id="p1">&lt;c&gt;</bpt>znaków<ept id="p1">&lt;/c&gt;</ept> które były używane w konwersji.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ten parametr jest przekazywany niezainicjowany.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains the number of bytes that were used in the conversion.</source>
          <target state="translated">Gdy metoda zwróci wartość, zawiera liczbę bajtów, które były używane w konwersji.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ten parametr jest przekazywany niezainicjowany.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains <ph id="ph1">&lt;see langword="true" /&gt;</ph> if all the characters specified by <bpt id="p1">&lt;c&gt;</bpt>charCount<ept id="p1">&lt;/c&gt;</ept> were converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Po powrocie z tej metody zawiera <ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli wszystkie znaki określony przez <bpt id="p1">&lt;c&gt;</bpt>charCount<ept id="p1">&lt;/c&gt;</ept> zostały przekonwertowane; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ten parametr jest przekazywany niezainicjowany.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.</source>
          <target state="translated">Konwertuje buforu znaków Unicode do sekwencji bajtów zakodowany i zapisuje wynik w buforze na inny.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph>.</source>
          <target state="translated">Należy pamiętać, że <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> obiektu zapisuje stan między wywołania <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
          <target state="translated">Gdy aplikacja jest wykonywana za pomocą strumienia danych, należy ustawić <ph id="ph1">`flush`</ph> parametr <ph id="ph2">`true`</ph> aby upewnić się, że informacje o stanie jest opróżniany.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
          <target state="translated">To ustawienie, koder ignoruje nieprawidłowy bajtów na końcu bloku danych i czyści buforu wewnętrznego.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</source>
          <target state="translated">Pozostałe dane przetworzonych będącej częścią jednostki logicznej, takich jak zastępczym wysokiego poziomu o para zastępcza jest konwertowana zgodnie z bieżącym przełączanie awaryjne.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`Convert`</ph> method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream.</source>
          <target state="translated"><ph id="ph1">`Convert`</ph> Metoda jest przeznaczona do użycia w pętli do kodowania dowolnego ilość danych wejściowych, takich jak dane odczytane z pliku lub strumienia.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>It stores the output of the encoding operation in a fixed-size buffer.</source>
          <target state="translated">Wynik operacji kodowania przechowuje do buforu o stałym rozmiarze.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> Zgłoś wyjątek, jeśli bufor wyjściowy jest zbyt mały, ale <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> wypełnienia tyle samo miejsca, jak to możliwe, a zwracania znaków odczytu oraz zapisanych bajtów.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Zobacz też <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> tematu więcej komentarzy.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.</source>
          <target state="translated"><ph id="ph1">`completed`</ph> Parametr wyjściowy wskazuje, czy wszystkie dane w buforze wejściowym został przekonwertować i przechowywać w buforze danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is set to <ph id="ph1">`false`</ph> if the number of characters specified by the <ph id="ph2">`charCount`</ph> parameter cannot be converted without exceeding the number of bytes specified by the <ph id="ph3">`byteCount`</ph> parameter.</source>
          <target state="translated">Ten parametr ma wartość <ph id="ph1">`false`</ph> Jeśli liczba znaków, określony przez <ph id="ph2">`charCount`</ph> nie można przekonwertować parametru bez większej niż liczba bajtów określona przez <ph id="ph3">`byteCount`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id="ph1">`chars`</ph> parameter by the number of characters specified by the <ph id="ph2">`charsUsed`</ph> parameter, then call the <ph id="ph3">`Convert`</ph> method again to process the remaining input.</source>
          <target state="translated">W takiej sytuacji aplikacji należy użyć zawartości buforu wyjściowego lub podaj nowe buforu wyjściowego, przyrost <ph id="ph1">`chars`</ph> parametru według liczby znaków określonych przez <ph id="ph2">`charsUsed`</ph> parametru wywoływać <ph id="ph3">`Convert`</ph> ponownie — metoda Aby proces pozostałe dane wejściowe.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`completed`</ph> parameter can also be set to <ph id="ph2">`false`</ph>, even though the <ph id="ph3">`charsUsed`</ph> and <ph id="ph4">`charCount`</ph> parameters are equal.</source>
          <target state="translated"><ph id="ph1">`completed`</ph> Można również ustawić parametr <ph id="ph2">`false`</ph>, nawet jeśli <ph id="ph3">`charsUsed`</ph> i <ph id="ph4">`charCount`</ph> parametry są takie same.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This situation occurs if there is still data in the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object that has not been stored in the <ph id="ph2">`chars`</ph> buffer.</source>
          <target state="translated">Ta sytuacja występuje, gdy nadal są danymi <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> obiekt, który nie była przechowywana w <ph id="ph2">`chars`</ph> buforu.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The output buffer is too small to contain any of the converted input.</source>
          <target state="translated">Bufor wyjściowy jest za mały, aby zawierać żadnego z przekonwertowanego danych wejściowych.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The output buffer should be greater than or equal to the size indicated by the <ph id="ph1">&lt;see cref="Overload:System.Text.Encoder.GetByteCount" /&gt;</ph> method.</source>
          <target state="translated">Bufor wyjściowy powinna być większa niż lub równe rozmiarowi wskazywanym przez <ph id="ph1">&lt;see cref="Overload:System.Text.Encoder.GetByteCount" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Wystąpił rezerwowe (zobacz <bpt id="p1">[</bpt>kodowania znaków w programie .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> na pełniejsze wyjaśnienie)</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>-and-</source>
          <target state="translated">- i -</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> ustawiono <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>An array of characters to convert.</source>
          <target state="translated">Tablica znaków do konwersji.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The first element of <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Pierwszy element <bpt id="p1">&lt;c&gt;</bpt>znaków<ept id="p1">&lt;/c&gt;</ept> do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Liczba elementów <bpt id="p1">&lt;c&gt;</bpt>znaków<ept id="p1">&lt;/c&gt;</ept> do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>An array where the converted bytes are stored.</source>
          <target state="translated">Tablica przechowywania przekonwertowanego bajtów.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The first element of <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept> in which data is stored.</source>
          <target state="translated">Pierwszy element <bpt id="p1">&lt;c&gt;</bpt>bajtów<ept id="p1">&lt;/c&gt;</ept> , w których dane są przechowywane.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The maximum number of elements of <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept> to use in the conversion.</source>
          <target state="translated">Maksymalna liczba elementów <bpt id="p1">&lt;c&gt;</bpt>bajtów<ept id="p1">&lt;/c&gt;</ept> do użycia w konwersji.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate no further data is to be converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby wskazać żadne dodatkowe dane jest do skonwertowania; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains the number of characters from <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> that were used in the conversion.</source>
          <target state="translated">Po powrocie z tej metody zawiera liczbę znaków od <bpt id="p1">&lt;c&gt;</bpt>znaków<ept id="p1">&lt;/c&gt;</ept> które były używane w konwersji.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ten parametr jest przekazywany niezainicjowany.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains the number of bytes that were produced by the conversion.</source>
          <target state="translated">Gdy metoda zwróci wartość, zawiera liczbę bajtów, które zostały utworzone w procesie konwersji.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ten parametr jest przekazywany niezainicjowany.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains <ph id="ph1">&lt;see langword="true" /&gt;</ph> if all the characters specified by <bpt id="p1">&lt;c&gt;</bpt>charCount<ept id="p1">&lt;/c&gt;</ept> were converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Po powrocie z tej metody zawiera <ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli wszystkie znaki określony przez <bpt id="p1">&lt;c&gt;</bpt>charCount<ept id="p1">&lt;/c&gt;</ept> zostały przekonwertowane; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ten parametr jest przekazywany niezainicjowany.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</source>
          <target state="translated">Konwertuje tablicę znaków Unicode do sekwencji bajtów zakodowany i zapisuje wynik w tablicy bajtów.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph>.</source>
          <target state="translated">Należy pamiętać, że <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> obiektu zapisuje stan między wywołania <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
          <target state="translated">Gdy aplikacja jest wykonywana za pomocą strumienia danych, należy ustawić <ph id="ph1">`flush`</ph> parametr <ph id="ph2">`true`</ph> aby upewnić się, że informacje o stanie jest opróżniany.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
          <target state="translated">To ustawienie, koder ignoruje nieprawidłowy bajtów na końcu bloku danych i czyści buforu wewnętrznego.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</source>
          <target state="translated">Pozostałe dane przetworzonych będącej częścią jednostki logicznej, takich jak zastępczym wysokiego poziomu o para zastępcza jest konwertowana zgodnie z bieżącym przełączanie awaryjne.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`Convert`</ph> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream.</source>
          <target state="translated"><ph id="ph1">`Convert`</ph> Metoda jest przeznaczona do użycia w pętli do zdekodowania dowolnego ilość danych wejściowych, takich jak dane odczytane z pliku lub strumienia.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>It stores the output of the encoding operation in a fixed-size buffer.</source>
          <target state="translated">Wynik operacji kodowania przechowuje do buforu o stałym rozmiarze.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> Zgłoś wyjątek, jeśli bufor wyjściowy jest zbyt mały, ale <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> wypełnienia tyle samo miejsca, jak to możliwe, a zwracania znaków odczytu oraz zapisanych bajtów.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Zobacz też <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> tematu więcej komentarzy.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.</source>
          <target state="translated"><ph id="ph1">`completed`</ph> Parametr wyjściowy wskazuje, czy wszystkie dane w buforze wejściowym został przekonwertować i przechowywać w buforze danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is set to <ph id="ph1">`false`</ph> if the number of characters specified by the <ph id="ph2">`charCount`</ph> parameter cannot be converted without exceeding the number of bytes specified by the <ph id="ph3">`byteCount`</ph> parameter.</source>
          <target state="translated">Ten parametr ma wartość <ph id="ph1">`false`</ph> Jeśli liczba znaków, określony przez <ph id="ph2">`charCount`</ph> nie można przekonwertować parametru bez większej niż liczba bajtów określona przez <ph id="ph3">`byteCount`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id="ph1">`chars`</ph> parameter by the number of characters specified by the <ph id="ph2">`charsUsed`</ph> parameter, then call the <ph id="ph3">`Convert`</ph> method again to process the remaining input.</source>
          <target state="translated">W takiej sytuacji aplikacji należy użyć zawartości buforu wyjściowego lub podaj nowe buforu wyjściowego, przyrost <ph id="ph1">`chars`</ph> parametru według liczby znaków określonych przez <ph id="ph2">`charsUsed`</ph> parametru wywoływać <ph id="ph3">`Convert`</ph> ponownie — metoda Aby proces pozostałe dane wejściowe.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`completed`</ph> parameter can also be set to <ph id="ph2">`false`</ph>, even though the <ph id="ph3">`charsUsed`</ph> and <ph id="ph4">`charCount`</ph> parameters are equal.</source>
          <target state="translated"><ph id="ph1">`completed`</ph> Można również ustawić parametr <ph id="ph2">`false`</ph>, nawet jeśli <ph id="ph3">`charsUsed`</ph> i <ph id="ph4">`charCount`</ph> parametry są takie same.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This situation occurs if there is still data in the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object that has not been stored in the <ph id="ph2">`chars`</ph> buffer.</source>
          <target state="translated">Ta sytuacja występuje, gdy nadal są danymi <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> obiekt, który nie była przechowywana w <ph id="ph2">`chars`</ph> buforu.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> method to convert a file of UTF-16 characters to UTF-8, then uses the <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> method to convert the UTF-8 characters back to UTF-16 characters.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> metody, aby skonwertować plik UTF-16 znaków UTF-8, a następnie używa <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> metody, aby przekonwertować znaków UTF-8 znaków UTF-16.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>, <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>, <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph>, lub <ph id="ph4">&lt;paramref name="byteCount" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The length of <ph id="ph1">&lt;paramref name="chars" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> is less than <ph id="ph4">&lt;paramref name="charCount" /&gt;</ph>.</source>
          <target state="translated">Długość <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> <ph id="ph2"> - </ph> <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> jest mniejsza niż <ph id="ph4">&lt;paramref name="charCount" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The length of <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than <ph id="ph4">&lt;paramref name="byteCount" /&gt;</ph>.</source>
          <target state="translated">Długość <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> <ph id="ph2"> - </ph> <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> jest mniejsza niż <ph id="ph4">&lt;paramref name="byteCount" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The output buffer is too small to contain any of the converted input.</source>
          <target state="translated">Bufor wyjściowy jest za mały, aby zawierać żadnego z przekonwertowanego danych wejściowych.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The output buffer should be greater than or equal to the size indicated by the <ph id="ph1">&lt;see cref="Overload:System.Text.Encoder.GetByteCount" /&gt;</ph> method.</source>
          <target state="translated">Bufor wyjściowy powinna być większa niż lub równe rozmiarowi wskazywanym przez <ph id="ph1">&lt;see cref="Overload:System.Text.Encoder.GetByteCount" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Wystąpił rezerwowe (zobacz <bpt id="p1">[</bpt>kodowania znaków w programie .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> na pełniejsze wyjaśnienie)</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>-and-</source>
          <target state="translated">- i -</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> ustawiono <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Text.Encoder.Fallback">
          <source>Gets or sets a <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallback" /&gt;</ph> object for the current <ph id="ph2">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> object.</source>
          <target state="translated">Pobiera lub ustawia <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallback" /&gt;</ph> obiektu dla bieżącej <ph id="ph2">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoder.Fallback">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallback" /&gt;</ph> object.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallback" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoder.Fallback">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> Obiekt reprezentuje program obsługi błędów, które jest wywoływane, gdy nie można przekonwertować znak sekwencji zakodowanego bajtów.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Text.Encoder.Fallback">
          <source>The value in a set operation is <ph id="ph1">&lt;see langword="null" /&gt;</ph> (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated">Wartość w operacji set jest <ph id="ph1">&lt;see langword="null" /&gt;</ph> (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Text.Encoder.Fallback">
          <source>A new value cannot be assigned in a set operation because the current <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> object contains data that has not been encoded yet.</source>
          <target state="translated">Nie można przypisać nową wartość w operacji set, ponieważ bieżący <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> obiekt zawiera dane, które nie zostały jeszcze zakodowany.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Text.Encoder.Fallback">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Wystąpił rezerwowe (zobacz <bpt id="p1">[</bpt>kodowania znaków w programie .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> na pełniejsze wyjaśnienie)</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Text.Encoder.Fallback">
          <source>-and-</source>
          <target state="translated">- i -</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Text.Encoder.Fallback">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> ustawiono <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Text.Encoder.FallbackBuffer">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> object associated with the current <ph id="ph2">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> object.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> obiekt skojarzony z bieżącym <ph id="ph2">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoder.FallbackBuffer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> object.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallbackBuffer" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoder.FallbackBuffer">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.FallbackBuffer%2A&gt;</ph> object represents data used by the <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.FallbackBuffer%2A&gt;</ph> Obiekt reprezentuje dane używane przez <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoder.FallbackBuffer">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> Obiekt reprezentuje program obsługi błędów, które jest wywoływane, gdy nie można przekonwertować znak sekwencji zakodowanego bajtów.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="T:System.Text.Encoder">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, oblicza liczbę bajtów wyprodukowanych przez kodowanie zestawu znaków.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>A pointer to the first character to encode.</source>
          <target state="translated">Wskaźnik do pierwszego znaku do kodowania.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>The number of characters to encode.</source>
          <target state="translated">Liczba znaków do kodowania.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby symulować, czyszcząc stan wewnętrzny kodera po obliczeniu; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, oblicza liczbę bajtów wyprodukowanych przez kodowanie zestawu znaków, zaczynając od wskaźnika określony znak.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>A parameter indicates whether to clear the internal state of the encoder after the calculation.</source>
          <target state="translated">Parametr wskazuje, czy po zakończeniu obliczania Wyczyść stan wewnętrzny kodera.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</source>
          <target state="translated">Liczba bajtów wyprodukowanych przez kodowanie określonych znaków i wszystkie znaki w buforu wewnętrznego.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>This method does not affect the state of the encoder.</source>
          <target state="translated">Ta metoda nie ma wpływu na stan kodera.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> requires to store the resulting bytes, the application should use <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">Do obliczenia dokładne tablicy rozmiaru <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> wymaga, aby wynikowy bajtów, należy użyć aplikacji <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`GetBytes`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation.</source>
          <target state="translated">Jeśli <ph id="ph1">`GetBytes`</ph> jest wywoływana z <ph id="ph2">`flush`</ph> ustawioną <ph id="ph3">`false`</ph>, koder przechowuje znakami na końcu bloku danych w bufor wewnętrzny i użycie ich w następnej operacji kodowania.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>The application should call <ph id="ph1">`GetByteCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.</source>
          <target state="translated">Aplikacja powinna wywołać <ph id="ph1">`GetByteCount`</ph> w bloku danych bezpośrednio przed wywołaniem <ph id="ph2">`GetBytes`</ph> na tym samym bloku, aby wszelkie końcowe znaki z poprzedniego bloku są uwzględniane w obliczeniach.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic .NET).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> w języku Visual Basic .NET).</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Wystąpił rezerwowe (zobacz <bpt id="p1">[</bpt>kodowania znaków w programie .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> na pełniejsze wyjaśnienie)</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>-and-</source>
          <target state="translated">- i -</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> ustawiono <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>The character array containing the set of characters to encode.</source>
          <target state="translated">Tablica znaków zawierający zestaw znaków kodowania.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>The index of the first character to encode.</source>
          <target state="translated">Indeks pierwszego znaku w celu kodowania.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>The number of characters to encode.</source>
          <target state="translated">Liczba znaków do kodowania.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby symulować, czyszcząc stan wewnętrzny kodera po obliczeniu; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, oblicza liczbę bajtów utworzonego przez zestaw znaków z określoną tablicę znaków kodowania.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>A parameter indicates whether to clear the internal state of the encoder after the calculation.</source>
          <target state="translated">Parametr wskazuje, czy po zakończeniu obliczania Wyczyść stan wewnętrzny kodera.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</source>
          <target state="translated">Liczba bajtów wyprodukowanych przez kodowanie określonych znaków i wszystkie znaki w buforu wewnętrznego.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>This method does not affect the state of the encoder.</source>
          <target state="translated">Ta metoda nie ma wpływu na stan kodera.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> requires to store the resulting bytes, the application should use <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">Do obliczenia dokładne tablicy rozmiaru <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> wymaga, aby wynikowy bajtów, należy użyć aplikacji <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`GetBytes`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation.</source>
          <target state="translated">Jeśli <ph id="ph1">`GetBytes`</ph> jest wywoływana z <ph id="ph2">`flush`</ph> ustawioną <ph id="ph3">`false`</ph>, koder przechowuje znakami na końcu bloku danych w bufor wewnętrzny i użycie ich w następnej operacji kodowania.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>The application should call <ph id="ph1">`GetByteCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.</source>
          <target state="translated">Aplikacja powinna wywołać <ph id="ph1">`GetByteCount`</ph> w bloku danych bezpośrednio przed wywołaniem <ph id="ph2">`GetBytes`</ph> na tym samym bloku, aby wszelkie końcowe znaki z poprzedniego bloku są uwzględniane w obliczeniach.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph> method to return the number of bytes required to encode an array of characters using a Unicode <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph>.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób użycia <ph id="ph1">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph> metoda zwraca liczbę bajtów wymaganą do kodowania tablicy znaków Unicode <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> i <ph id="ph2">&lt;paramref name="count" /&gt;</ph> określa nieprawidłowy zakres w <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Wystąpił rezerwowe (zobacz <bpt id="p1">[</bpt>kodowania znaków w programie .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> na pełniejsze wyjaśnienie)</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source>-and-</source>
          <target state="translated">- i -</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> ustawiono <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="T:System.Text.Encoder">
          <source>When overridden in a derived class, encodes a set of characters into a sequence of bytes.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, koduje zestaw znaków w kolejności bajtów.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>A pointer to the first character to encode.</source>
          <target state="translated">Wskaźnik do pierwszego znaku do kodowania.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>The number of characters to encode.</source>
          <target state="translated">Liczba znaków do kodowania.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>A pointer to the location at which to start writing the resulting sequence of bytes.</source>
          <target state="translated">Wskaźnik do lokalizacji, w którym należy rozpocząć pisanie wynikowa sekwencja bajtów.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Maksymalna liczba bajtów do zapisania.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to clear the internal state of the encoder after the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Wyczyść stan wewnętrzny kodera po konwersji; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, koduje zestaw znaków, zaczynając od wskaźnika określony znak i wszystkie znaki w wewnętrznego buforu do sekwencji bajtów, które są przechowywane, zaczynając od wskaźnika określonym bajcie.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>A parameter indicates whether to clear the internal state of the encoder after the conversion.</source>
          <target state="translated">Parametr wskazuje, czy Wyczyść stan wewnętrzny kodera po konwersji.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>The actual number of bytes written at the location indicated by the <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> parameter.</source>
          <target state="translated">Rzeczywista liczba bajtów zapisanych w lokalizacji wskazanej przez <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> parametru.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.</source>
          <target state="translated">Należy pamiętać, że <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> obiektu zapisuje stan między wywołania <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> in the last call to <ph id="ph3">`GetBytes`</ph> to make sure that the state information is flushed and that the encoded bytes are properly terminated.</source>
          <target state="translated">Gdy aplikacja jest wykonywana za pomocą strumienia danych, należy ustawić <ph id="ph1">`flush`</ph> parametr <ph id="ph2">`true`</ph> w ostatnim wywołaniem <ph id="ph3">`GetBytes`</ph> do upewnij się, że informacje o stanie jest opróżniany i poprawnie zakończenia zakodowanego bajtów.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.</source>
          <target state="translated">To ustawienie, koder ignoruje nieprawidłowe bajty na końcu bloku danych, takich jak niedopasowane surogatów lub sekwencje niekompletne łączenie i czyści buforu wewnętrznego.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>To calculate the exact buffer size that <ph id="ph1">`GetBytes`</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">Do obliczenia dokładne buforu rozmiaru <ph id="ph1">`GetBytes`</ph> wymaga, aby wynikowe znaki, należy użyć aplikacji <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`GetBytes`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation.</source>
          <target state="translated">Jeśli <ph id="ph1">`GetBytes`</ph> jest wywoływana z <ph id="ph2">`flush`</ph> ustawioną <ph id="ph3">`false`</ph>, koder przechowuje bajtów końcowych na końcu bloku danych w bufor wewnętrzny i użycie ich w następnej operacji kodowania.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>The application should call <ph id="ph1">`GetByteCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.</source>
          <target state="translated">Aplikacja powinna wywołać <ph id="ph1">`GetByteCount`</ph> w bloku danych bezpośrednio przed wywołaniem <ph id="ph2">`GetBytes`</ph> na tym samym bloku, aby wszelkie końcowe znaki z poprzedniego bloku są uwzględniane w obliczeniach.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>If your application is to convert many segments of an input stream, consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> method.</source>
          <target state="translated">Jeśli można przekonwertować wiele segmentów strumienia wejściowego aplikacji, należy rozważyć użycie <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> Zgłoś wyjątek, jeśli bufor wyjściowy jest zbyt mały, ale <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> wypełnienia tyle samo miejsca, jak to możliwe, a zwracania znaków odczytu oraz zapisanych bajtów.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Zobacz też <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> tematu więcej komentarzy.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> is less than the resulting number of bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> jest mniejsza niż wynikowa liczba bajtów.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Wystąpił rezerwowe (zobacz <bpt id="p1">[</bpt>kodowania znaków w programie .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> na pełniejsze wyjaśnienie)</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>-and-</source>
          <target state="translated">- i -</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> ustawiono <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The character array containing the set of characters to encode.</source>
          <target state="translated">Tablica znaków zawierający zestaw znaków kodowania.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The index of the first character to encode.</source>
          <target state="translated">Indeks pierwszego znaku w celu kodowania.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The number of characters to encode.</source>
          <target state="translated">Liczba znaków do kodowania.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The byte array to contain the resulting sequence of bytes.</source>
          <target state="translated">Tablica bajtów do zawierają wynikowa sekwencja bajtów.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
          <target state="translated">Indeks w którym należy rozpocząć pisanie wynikowa sekwencja bajtów.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to clear the internal state of the encoder after the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Wyczyść stan wewnętrzny kodera po konwersji; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, koduje zestaw znaków z określoną tablicę znaków i wszystkie znaki w buforu wewnętrznego w określonej tablicy bajtów.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>A parameter indicates whether to clear the internal state of the encoder after the conversion.</source>
          <target state="translated">Parametr wskazuje, czy Wyczyść stan wewnętrzny kodera po konwersji.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The actual number of bytes written into <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated">Rzeczywista liczba bajtów zapisanych na <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.</source>
          <target state="translated">Należy pamiętać, że <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> obiektu zapisuje stan między wywołania <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> in the last call to <ph id="ph3">`GetBytes`</ph> to make sure that the state information is flushed and that the encoded bytes are properly terminated.</source>
          <target state="translated">Gdy aplikacja jest wykonywana za pomocą strumienia danych, należy ustawić <ph id="ph1">`flush`</ph> parametr <ph id="ph2">`true`</ph> w ostatnim wywołaniem <ph id="ph3">`GetBytes`</ph> do upewnij się, że informacje o stanie jest opróżniany i poprawnie zakończenia zakodowanego bajtów.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.</source>
          <target state="translated">To ustawienie, koder ignoruje nieprawidłowe bajty na końcu bloku danych, takich jak niedopasowane surogatów lub sekwencje niekompletne łączenie i czyści buforu wewnętrznego.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>To calculate the exact buffer size that <ph id="ph1">`GetBytes`</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">Do obliczenia dokładne buforu rozmiaru <ph id="ph1">`GetBytes`</ph> wymaga, aby wynikowe znaki, należy użyć aplikacji <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`GetBytes`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation.</source>
          <target state="translated">Jeśli <ph id="ph1">`GetBytes`</ph> jest wywoływana z <ph id="ph2">`flush`</ph> ustawioną <ph id="ph3">`false`</ph>, koder przechowuje bajtów końcowych na końcu bloku danych w bufor wewnętrzny i użycie ich w następnej operacji kodowania.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The application should call <ph id="ph1">`GetByteCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.</source>
          <target state="translated">Aplikacja powinna wywołać <ph id="ph1">`GetByteCount`</ph> w bloku danych bezpośrednio przed wywołaniem <ph id="ph2">`GetBytes`</ph> na tym samym bloku, aby wszelkie końcowe znaki z poprzedniego bloku są uwzględniane w obliczeniach.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>If your application is to convert many segments of an input stream, consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> method.</source>
          <target state="translated">Jeśli można przekonwertować wiele segmentów strumienia wejściowego aplikacji, należy rozważyć użycie <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> Zgłoś wyjątek, jeśli bufor wyjściowy jest zbyt mały, ale <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> wypełnienia tyle samo miejsca, jak to możliwe, a zwracania znaków odczytu oraz zapisanych bajtów.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Zobacz też <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> tematu więcej komentarzy.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The following example demonstrates how to encode a range of elements from a character array and store the encoded bytes in a range of elements in a byte array.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób kodowania zakresu elementów z tablicy znaków i przechowywania zakodowanego bajtów w zakresie elementów w tablicy bajtów.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph> method is used to determine the size of the array required by <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph> Metoda jest używana do określenia rozmiaru tablicy wymagane przez <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> lub <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> i <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> określa nieprawidłowy zakres w <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> nie jest prawidłowym indeksem w <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> nie ma wystarczającej wydajności z <ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> do końca tablicy, tak aby pomieścić wynikowy bajtów.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Wystąpił rezerwowe (zobacz <bpt id="p1">[</bpt>kodowania znaków w programie .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> na pełniejsze wyjaśnienie)</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source>-and-</source>
          <target state="translated">- i -</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoder.Fallback" /&gt;</ph> ustawiono <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Text.Encoder.Reset">
          <source>When overridden in a derived class, sets the encoder back to its initial state.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, ustawia koder do stanu początkowego.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Reset">
          <source>This method clears the internal state of the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object.</source>
          <target state="translated">Ta metoda usuwa wewnętrzny stan klasy <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Reset">
          <source>The method clears any state information preserved from a previous call to <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.</source>
          <target state="translated">Metoda usuwa żadnych informacji o stanie zachowywane z poprzedniego wywołania <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, w tym końcowe znaki na końcu poprzedniego bloku danych, takich jak niedopasowane zastępczym wysokiego poziomu.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoder.Reset">
          <source>Your application should call the <ph id="ph1">`Reset`</ph> method if it wants to reuse the same encoder even after an exception is thrown by <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>, or if the application switches streams.</source>
          <target state="translated">Aplikacja powinna wywołać <ph id="ph1">`Reset`</ph> metodę, jeśli chce ponownie użyć tego samego kodera, nawet po wyjątku przez <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>, lub gdy aplikacja strumieni.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>