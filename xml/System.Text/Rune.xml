<Type Name="Rune" FullName="System.Text.Rune">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7c2bf7765ad217a8637dbea7697b257d2f47d4f" /><Meta Name="ms.sourcegitcommit" Value="08fc3691deb7adaf0dfd751b9d9d0b23a3d3a7b8" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/09/2019" /><Meta Name="ms.locfileid" Value="68901424" /></Metadata><TypeSignature Language="C#" Value="public struct Rune : IComparable&lt;System.Text.Rune&gt;, IEquatable&lt;System.Text.Rune&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Rune extends System.ValueType implements class System.IComparable`1&lt;valuetype System.Text.Rune&gt;, class System.IEquatable`1&lt;valuetype System.Text.Rune&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Text.Rune" />
  <TypeSignature Language="VB.NET" Value="Public Structure Rune&#xA;Implements IComparable(Of Rune), IEquatable(Of Rune)" />
  <TypeSignature Language="C++ CLI" Value="public value class Rune : IComparable&lt;System::Text::Rune&gt;, IEquatable&lt;System::Text::Rune&gt;" />
  <TypeSignature Language="F#" Value="type Rune = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Text.Rune&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Text.Rune&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e744e-101">Reprezentuje wartość skalarną Unicode ([U + 0000.. U + D7FF], włącznie; lub [U + E000.. U + 10FFFF], włącznie).</span><span class="sxs-lookup"><span data-stu-id="e744e-101">Represents a Unicode scalar value ([ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-102">Konstruktory tego typu i operatory konwersji sprawdzają poprawność danych wejściowych, dzięki czemu klienci mogą wywoływać <xref:System.Text.Rune> interfejsy API przy założeniu, że wystąpienie bazowe jest poprawnie sformułowane.</span><span class="sxs-lookup"><span data-stu-id="e744e-102">This type's constructors and conversion operators validate the input, so consumers can call the APIs assuming that the underlying <xref:System.Text.Rune> instance is well-formed.</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rune (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rune(char ch);" />
      <MemberSignature Language="F#" Value="new System.Text.Rune : char -&gt; System.Text.Rune" Usage="new System.Text.Rune ch" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="e744e-103">Jednostka kodu UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-103">A UTF-16 code unit.</span></span></param>
        <summary><span data-ttu-id="e744e-104"><see cref="T:System.Text.Rune" /> Tworzy z dostarczonej jednostki kodu UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-104">Creates a <see cref="T:System.Text.Rune" /> from the provided UTF-16 code unit.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-105"><paramref name="ch" />reprezentuje punkt kodu wieloskładnikowego UTF-16 (U + D800.. U + DFFF, włącznie).</span><span class="sxs-lookup"><span data-stu-id="e744e-105"><paramref name="ch" /> represents a UTF-16 surrogate code point (U+D800..U+DFFF, inclusive).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rune (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rune(int value);" />
      <MemberSignature Language="F#" Value="new System.Text.Rune : int -&gt; System.Text.Rune" Usage="new System.Text.Rune value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-106">Wartość skalarna Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-106">A Unicode scalar value.</span></span></param>
        <summary><span data-ttu-id="e744e-107"><see cref="T:System.Text.Rune" /> Tworzy z określonej 32-bitowej liczby całkowitej, która reprezentuje wartość skalarną Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-107">Creates a <see cref="T:System.Text.Rune" /> from the specified 32-bit integer that represents a Unicode scalar value.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-108"><paramref name="value" />nie reprezentuje wartości skalarnej Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-108"><paramref name="value" /> does not represent a Unicode scalar value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rune (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.#ctor(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rune(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="new System.Text.Rune : uint32 -&gt; System.Text.Rune" Usage="new System.Text.Rune value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-109">Wartość skalarna Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-109">A Unicode scalar value.</span></span></param>
        <summary><span data-ttu-id="e744e-110"><see cref="T:System.Text.Rune" /> Tworzy z określonej 32-bitowej liczby całkowitej bez znaku, która reprezentuje wartość skalarną Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-110">Creates a <see cref="T:System.Text.Rune" /> from the specified 32-bit unsigned integer that represents a Unicode scalar value.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-111"><paramref name="value" />nie reprezentuje wartości skalarnej Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-111"><paramref name="value" /> does not represent a Unicode scalar value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rune (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.#ctor(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (highSurrogate As Char, lowSurrogate As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rune(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="new System.Text.Rune : char * char -&gt; System.Text.Rune" Usage="new System.Text.Rune (highSurrogate, lowSurrogate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="e744e-112">Górny Surogat pary dwuskładnikowej.</span><span class="sxs-lookup"><span data-stu-id="e744e-112">The high surrogate of the surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="e744e-113">Dolny Surogat pary dwuskładnikowej.</span><span class="sxs-lookup"><span data-stu-id="e744e-113">The low surrogate of the surrogate pair.</span></span></param>
        <summary><span data-ttu-id="e744e-114"><see cref="T:System.Text.Rune" /> Tworzy z podanej pary zastępczej UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-114">Creates a <see cref="T:System.Text.Rune" /> from the provided UTF-16 surrogate pair.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-115"><paramref name="highSurrogate" />nie reprezentuje wieloskładnikowego kodu w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-115"><paramref name="highSurrogate" /> does not represent a UTF-16 high surrogate code point.</span></span>
          
<span data-ttu-id="e744e-116">—lub—</span><span class="sxs-lookup"><span data-stu-id="e744e-116">-or-</span></span>

<span data-ttu-id="e744e-117"><paramref name="lowSurrogate" />nie reprezentuje dolnego punktu kodu w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-117"><paramref name="lowSurrogate" /> does not represent a UTF-16 low surrogate code point.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Text.Rune other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Text.Rune other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.CompareTo(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Rune) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Text::Rune other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Text.Rune -&gt; int&#xA;override this.CompareTo : System.Text.Rune -&gt; int" Usage="rune.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e744e-118">Wystąpienie, które ma zostać porównane z bieżącym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="e744e-118">The instance to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="e744e-119">Porównuje bieżące wystąpienie z określonym <see cref="T:System.Text.Rune" /> wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="e744e-119">Compares the current instance to the specified <see cref="T:System.Text.Rune" /> instance.</span></span></summary>
        <returns><span data-ttu-id="e744e-120">Liczba całkowita ze znakiem wskazująca pozycję tego wystąpienia w kolejności sortowania w odniesieniu do <paramref name="other" />:</span><span class="sxs-lookup"><span data-stu-id="e744e-120">A signed integer indicating the position of this instance in the sort order in relation to <paramref name="other" />:</span></span> <br /><span data-ttu-id="e744e-121">-Mniejsze od zera: To wystąpienie poprzedza <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-121">- Less than zero: This instance precedes <paramref name="other" />.</span></span> 
<br /><span data-ttu-id="e744e-122">Zer Wystąpienie ma taką samą pozycję w kolejności sortowania, jak <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-122">- Zero: The instance has the same position in the sort order as <paramref name="other" />.</span></span>
<br /><span data-ttu-id="e744e-123">-Większe niż zero: To wystąpienie jest <paramref name="other" />następujące.</span><span class="sxs-lookup"><span data-stu-id="e744e-123">- Greater than zero: This instance follows <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf16">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf16 (ReadOnlySpan&lt;char&gt; source, out System.Text.Rune result, out int charsConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf16(valuetype System.ReadOnlySpan`1&lt;char&gt; source, [out] valuetype System.Text.Rune&amp; result, [out] int32&amp; charsConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf16 (source As ReadOnlySpan(Of Char), ByRef result As Rune, ByRef charsConsumed As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeFromUtf16(ReadOnlySpan&lt;char&gt; source, [Runtime::InteropServices::Out] System::Text::Rune % result, [Runtime::InteropServices::Out] int % charsConsumed);" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf16 : ReadOnlySpan&lt;char&gt; *  *  -&gt; System.Buffers.OperationStatus" Usage="System.Text.Rune.DecodeFromUtf16 (source, result, charsConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="e744e-124">Zakres znaków UTF-16 tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e744e-124">A read-only UTF-16 character span.</span></span></param>
        <param name="result"><span data-ttu-id="e744e-125">Gdy ta metoda zwraca, zdekodowane Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-125">When this method returns, the decoded rune.</span></span></param>
        <param name="charsConsumed"><span data-ttu-id="e744e-126">Gdy ta metoda zwraca, liczba znaków odczytywanych w celu utworzenia Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-126">When this method returns, the number of characters read to create the rune.</span></span></param>
        <summary><span data-ttu-id="e744e-127">Dekoduje <see cref="T:System.Text.Rune" /> na początku dostarczonego bufora źródłowego UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-127">Decodes the <see cref="T:System.Text.Rune" /> at the beginning of the provided UTF-16 source buffer.</span></span></summary>
        <returns><span data-ttu-id="e744e-128"><see cref="F:System.Buffers.OperationStatus.Done" />Jeśli bufor źródłowy zaczyna się od prawidłowej zakodowanej wartości skalarnej UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-128"><see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-16 encoded scalar value.</span></span> <span data-ttu-id="e744e-129"><paramref name="result" />następnie zawiera zdekodowane <see cref="T:System.Text.Rune" />i <paramref name="charsConsumed" /> zawiera liczbę <see cref="T:System.Char" /> wartości <see cref="T:System.Text.Rune" />używanych w buforze wejściowym do kodowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-129"><paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.</span></span>
            
<span data-ttu-id="e744e-130"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" />Jeśli bufor źródłowy jest pusty lub zawiera tylko autonomiczny znak dwuskładnikowy UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-130"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-16 high surrogate character.</span></span> <span data-ttu-id="e744e-131"><paramref name="result" />następnie zawiera <see cref="P:System.Text.Rune.ReplacementChar" />i <paramref name="charsConsumed" /> zawiera długość buforu wejściowego.</span><span class="sxs-lookup"><span data-stu-id="e744e-131"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the length of the input buffer.</span></span>
            
<span data-ttu-id="e744e-132"><see cref="F:System.Buffers.OperationStatus.InvalidData" />Jeśli bufor źródłowy zaczyna się od nieprawidłowo sformułowanej wartości skalarnej zakodowanej w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-132"><see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-16 encoded scalar value.</span></span> <span data-ttu-id="e744e-133"><paramref name="result" />następnie zawiera <see cref="P:System.Text.Rune.ReplacementChar" />i <paramref name="charsConsumed" /> zawiera liczbę <see cref="T:System.Char" /> wartości używanych do kodowania nieprawidłowo sformułowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e744e-133"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used to encode the ill-formed sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-134">Ogólna Konwencja polega na wywołaniu tej metody w pętli, `source` oddzieleniu buforu przez `charsConsumed` elementy w każdej iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="e744e-134">The general convention is to call this method in a loop, slicing the `source` buffer by `charsConsumed` elements on each iteration of the loop.</span></span> <span data-ttu-id="e744e-135">W każdej iteracji pętli `result` zawiera rzeczywistą wartość skalarną, jeśli dane zostały pomyślnie zdekodowane, lub zawiera <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> , jeśli dane nie zostały pomyślnie zdekodowane.</span><span class="sxs-lookup"><span data-stu-id="e744e-135">On each iteration of the loop, `result` contains the real scalar value if the data was successfully decoded, or it contains <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> if the data was not successfully decoded.</span></span> <span data-ttu-id="e744e-136">Ten wzorzec zapewnia wygodne automatyczne podstawianie nieprawidłowych sekwencji U + FFFD podczas iteracji w pętli.</span><span class="sxs-lookup"><span data-stu-id="e744e-136">This pattern provides convenient automatic U+FFFD substitution of invalid sequences while iterating through the loop.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf8 (ReadOnlySpan&lt;byte&gt; source, out System.Text.Rune result, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Text.Rune&amp; result, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8 (source As ReadOnlySpan(Of Byte), ByRef result As Rune, ByRef bytesConsumed As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeFromUtf8(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::Text::Rune % result, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8 : ReadOnlySpan&lt;byte&gt; *  *  -&gt; System.Buffers.OperationStatus" Usage="System.Text.Rune.DecodeFromUtf8 (source, result, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="e744e-137">Zakres bajtów szyfrowany tylko do odczytu UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-137">A read-only UTF-8 encoded byte span.</span></span></param>
        <param name="result"><span data-ttu-id="e744e-138">Gdy ta metoda zwraca, zdekodowane Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-138">When this method returns, the decoded rune.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="e744e-139">Gdy ta metoda zwraca, liczba bajtów odczytywanych w celu utworzenia Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-139">When this method returns, the number of bytes read to create the rune.</span></span></param>
        <summary><span data-ttu-id="e744e-140">Dekoduje <see cref="T:System.Text.Rune" /> na początku dostarczonego bufora źródłowego UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-140">Decodes the <see cref="T:System.Text.Rune" /> at the beginning of the provided UTF-8 source buffer.</span></span></summary>
        <returns><span data-ttu-id="e744e-141"><see cref="F:System.Buffers.OperationStatus.Done" />Jeśli bufor źródłowy zaczyna się od prawidłowej zakodowanej wartości skalarnej UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-141"><see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-8 encoded scalar value.</span></span> <span data-ttu-id="e744e-142"><paramref name="result" />następnie zawiera zdekodowane <see cref="T:System.Text.Rune" />i <paramref name="bytesConsumed" /> zawiera liczbę <see cref="T:System.Byte" /> wartości <see cref="T:System.Text.Rune" />używanych w buforze wejściowym do kodowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-142"><paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.</span></span>
            
<span data-ttu-id="e744e-143"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" />Jeśli bufor źródłowy jest pusty lub zawiera tylko autonomiczny znak dwuskładnikowy UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-143"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-8 high surrogate character.</span></span> <span data-ttu-id="e744e-144"><paramref name="result" />następnie zawiera <see cref="P:System.Text.Rune.ReplacementChar" />i <paramref name="bytesConsumed" /> zawiera długość buforu wejściowego.</span><span class="sxs-lookup"><span data-stu-id="e744e-144"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the length of the input buffer.</span></span>
            
<span data-ttu-id="e744e-145"><see cref="F:System.Buffers.OperationStatus.InvalidData" />Jeśli bufor źródłowy zaczyna się od źle sformułowanej wartości skalarnej zakodowanej w formacie UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-145"><see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-8 encoded scalar value.</span></span> <span data-ttu-id="e744e-146"><paramref name="result" />następnie zawiera <see cref="P:System.Text.Rune.ReplacementChar" />i <paramref name="bytesConsumed" /> zawiera liczbę <see cref="T:System.Byte" /> wartości używanych w buforze wejściowym do kodowania nieprawidłowo sformułowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e744e-146"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the ill-formed sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-147">Ogólna Konwencja polega na wywołaniu tej metody w pętli, `source` oddzieleniu buforu przez `bytesConsumed` elementy w każdej iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="e744e-147">The general convention is to call this method in a loop, slicing the `source` buffer by `bytesConsumed` elements on each iteration of the loop.</span></span> <span data-ttu-id="e744e-148">W każdej iteracji pętli `result` zawiera rzeczywistą wartość skalarną, jeśli został pomyślnie zdekodowany lub zawiera <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> , jeśli nie można pomyślnie zdekodować danych.</span><span class="sxs-lookup"><span data-stu-id="e744e-148">On each iteration of the loop, `result` contains the real scalar value if successfully decoded, or it contains <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> if the data could not be successfully decoded.</span></span> <span data-ttu-id="e744e-149">Ten wzorzec zapewnia wygodne automatyczne podstawianie nieprawidłowych sekwencji U + FFFD podczas iteracji w pętli.</span><span class="sxs-lookup"><span data-stu-id="e744e-149">This pattern provides convenient automatic U+FFFD substitution of invalid sequences while iterating through the loop.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeLastFromUtf16">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeLastFromUtf16 (ReadOnlySpan&lt;char&gt; source, out System.Text.Rune result, out int charsConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeLastFromUtf16(valuetype System.ReadOnlySpan`1&lt;char&gt; source, [out] valuetype System.Text.Rune&amp; result, [out] int32&amp; charsConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.DecodeLastFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeLastFromUtf16 (source As ReadOnlySpan(Of Char), ByRef result As Rune, ByRef charsConsumed As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeLastFromUtf16(ReadOnlySpan&lt;char&gt; source, [Runtime::InteropServices::Out] System::Text::Rune % result, [Runtime::InteropServices::Out] int % charsConsumed);" />
      <MemberSignature Language="F#" Value="static member DecodeLastFromUtf16 : ReadOnlySpan&lt;char&gt; *  *  -&gt; System.Buffers.OperationStatus" Usage="System.Text.Rune.DecodeLastFromUtf16 (source, result, charsConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="e744e-150">Zakres znaków zakodowanych w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-150">A read-only UTF-16 encoded character span.</span></span></param>
        <param name="result"><span data-ttu-id="e744e-151">Gdy ta metoda zwraca, zdekodowane Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-151">When this method returns, the decoded rune.</span></span></param>
        <param name="charsConsumed"><span data-ttu-id="e744e-152">Gdy ta metoda zwraca, liczba bajtów odczytywanych w celu utworzenia Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-152">When this method returns, the number of bytes read to create the rune.</span></span></param>
        <summary><span data-ttu-id="e744e-153">Dekoduje <see cref="T:System.Text.Rune" /> na końcu dostarczonego bufora źródłowego UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-153">Decodes the <see cref="T:System.Text.Rune" /> at the end of the provided UTF-16 source buffer.</span></span></summary>
        <returns><span data-ttu-id="e744e-154"><see cref="F:System.Buffers.OperationStatus.Done" />Jeśli bufor źródłowy zaczyna się od prawidłowej zakodowanej wartości skalarnej UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-154"><see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-16 encoded scalar value.</span></span> <span data-ttu-id="e744e-155"><paramref name="result" />następnie zawiera zdekodowane <see cref="T:System.Text.Rune" />i <paramref name="charsConsumed" /> zawiera liczbę <see cref="T:System.Char" /> wartości <see cref="T:System.Text.Rune" />używanych w buforze wejściowym do kodowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-155"><paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.</span></span>
            
<span data-ttu-id="e744e-156"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" />Jeśli bufor źródłowy jest pusty lub zawiera tylko autonomiczny znak dwuskładnikowy UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-156"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-16 high surrogate character.</span></span> <span data-ttu-id="e744e-157"><paramref name="result" />następnie zawiera <see cref="P:System.Text.Rune.ReplacementChar" />i <paramref name="charsConsumed" /> zawiera długość buforu wejściowego.</span><span class="sxs-lookup"><span data-stu-id="e744e-157"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the length of the input buffer.</span></span>
            
<span data-ttu-id="e744e-158"><see cref="F:System.Buffers.OperationStatus.InvalidData" />Jeśli bufor źródłowy zaczyna się od nieprawidłowo sformułowanej wartości skalarnej zakodowanej w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-158"><see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-16 encoded scalar value.</span></span> <span data-ttu-id="e744e-159"><paramref name="result" />następnie zawiera <see cref="P:System.Text.Rune.ReplacementChar" />i <paramref name="charsConsumed" /> zawiera liczbę <see cref="T:System.Char" /> wartości używanych do kodowania nieprawidłowo sformułowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e744e-159"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used to encode the ill-formed sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-160">Ta metoda jest bardzo podobna do <xref:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)>, z tą różnicą, że umożliwia wywołującemu pętlę do tyłu zamiast do przodu.</span><span class="sxs-lookup"><span data-stu-id="e744e-160">This method is very similar to <xref:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)>, except it allows the caller to loop backward instead of forward.</span></span> <span data-ttu-id="e744e-161">Typową konwencją wywoływania jest to, że w każdej iteracji pętli obiekt wywołujący powinien oddzielić końcowe `charsConsumed` elementy `source` buforu.</span><span class="sxs-lookup"><span data-stu-id="e744e-161">The typical calling convention is that on each iteration of the loop, the caller should slice off the final `charsConsumed` elements of the `source` buffer.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeLastFromUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeLastFromUtf8 (ReadOnlySpan&lt;byte&gt; source, out System.Text.Rune value, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeLastFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Text.Rune&amp; value, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.DecodeLastFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeLastFromUtf8 (source As ReadOnlySpan(Of Byte), ByRef value As Rune, ByRef bytesConsumed As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeLastFromUtf8(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::Text::Rune % value, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member DecodeLastFromUtf8 : ReadOnlySpan&lt;byte&gt; *  *  -&gt; System.Buffers.OperationStatus" Usage="System.Text.Rune.DecodeLastFromUtf8 (source, value, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Rune" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="e744e-162">Zakres bajtów szyfrowany tylko do odczytu UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-162">A read-only UTF-8 encoded byte span.</span></span></param>
        <param name="value"><span data-ttu-id="e744e-163">Gdy ta metoda zwraca, zdekodowane Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-163">When this method returns, the decoded rune.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="e744e-164">Gdy ta metoda zwraca, liczba bajtów odczytywanych w celu utworzenia Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-164">When this method returns, the number of bytes read to create the rune.</span></span></param>
        <summary><span data-ttu-id="e744e-165">Dekoduje <see cref="T:System.Text.Rune" /> na końcu podanego buforu źródłowego UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-165">Decodes the <see cref="T:System.Text.Rune" /> at the end of the provided UTF-8 source buffer.</span></span></summary>
        <returns><span data-ttu-id="e744e-166"><see cref="F:System.Buffers.OperationStatus.Done" />Jeśli bufor źródłowy zostanie zakończony prawidłową wartością skalarną w formacie UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-166"><see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer ends with a valid UTF-8 encoded scalar value.</span></span> <span data-ttu-id="e744e-167"><paramref name="result" />następnie zawiera zdekodowane <see cref="T:System.Text.Rune" />i <paramref name="bytesConsumed" /> zawiera liczbę <see cref="T:System.Byte" /> wartości <see cref="T:System.Text.Rune" />używanych w buforze wejściowym do kodowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-167"><paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.</span></span>
            
<span data-ttu-id="e744e-168"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" />Jeśli bufor źródłowy jest pusty lub zawiera tylko autonomiczny znak dwuskładnikowy UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-168"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-8 high surrogate character.</span></span> <span data-ttu-id="e744e-169"><paramref name="result" />następnie zawiera <see cref="P:System.Text.Rune.ReplacementChar" />i <paramref name="bytesConsumed" /> zawiera długość buforu wejściowego.</span><span class="sxs-lookup"><span data-stu-id="e744e-169"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the length of the input buffer.</span></span>
            
<span data-ttu-id="e744e-170"><see cref="F:System.Buffers.OperationStatus.InvalidData" />Jeśli bufor źródłowy zostanie zakończony nieprawidłowo sformułowaną wartością skalarną UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-170"><see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer ends with an ill-formed UTF-8 encoded scalar value.</span></span> <span data-ttu-id="e744e-171"><paramref name="result" />następnie zawiera <see cref="P:System.Text.Rune.ReplacementChar" />i <paramref name="bytesConsumed" /> zawiera liczbę <see cref="T:System.Byte" /> wartości używanych w buforze wejściowym do kodowania nieprawidłowo sformułowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e744e-171"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the ill-formed sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-172">Ta metoda jest bardzo podobna do <xref:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)>, z tą różnicą, że umożliwia wywołującemu pętlę do tyłu zamiast do przodu.</span><span class="sxs-lookup"><span data-stu-id="e744e-172">This method is very similar to <xref:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)>, except it allows the caller to loop backward instead of forward.</span></span> <span data-ttu-id="e744e-173">Typową konwencją wywoływania jest to, że w każdej iteracji pętli obiekt wywołujący powinien oddzielić końcowe `bytesConsumed` elementy `source` buforu.</span><span class="sxs-lookup"><span data-stu-id="e744e-173">The typical calling convention is that on each iteration of the loop, the caller should slice off the final `bytesConsumed` elements of the `source` buffer.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf16">
      <MemberSignature Language="C#" Value="public int EncodeToUtf16 (Span&lt;char&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EncodeToUtf16(valuetype System.Span`1&lt;char&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.EncodeToUtf16(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToUtf16 (destination As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EncodeToUtf16(Span&lt;char&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.EncodeToUtf16 : Span&lt;char&gt; -&gt; int" Usage="rune.EncodeToUtf16 destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e744e-174">Bufor, do którego ma zostać zapisana wartość w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-174">The buffer to which to write this value as UTF-16.</span></span></param>
        <summary><span data-ttu-id="e744e-175">Koduje to <see cref="T:System.Text.Rune" /> w buforze docelowym UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-175">Encodes this <see cref="T:System.Text.Rune" /> to a UTF-16 destination buffer.</span></span></summary>
        <returns><span data-ttu-id="e744e-176">Liczba <see cref="T:System.Char" /> wartości zapisywana w <paramref name="destination" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-176">The number of <see cref="T:System.Char" /> values written to <paramref name="destination" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e744e-177"><paramref name="destination" />nie jest wystarczająco duży, aby można było przechowywać dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="e744e-177"><paramref name="destination" /> is not large enough to hold the output.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8">
      <MemberSignature Language="C#" Value="public int EncodeToUtf8 (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EncodeToUtf8(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.EncodeToUtf8(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToUtf8 (destination As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EncodeToUtf8(Span&lt;System::Byte&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.EncodeToUtf8 : Span&lt;byte&gt; -&gt; int" Usage="rune.EncodeToUtf8 destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e744e-178">Bufor, do którego ma zostać zapisana wartość w formacie UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-178">The buffer to which to write this value as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e744e-179">Koduje tę <see cref="T:System.Text.Rune" /> wartość do bufora docelowego UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-179">Encodes this <see cref="T:System.Text.Rune" /> to a UTF-8 destination buffer.</span></span></summary>
        <returns><span data-ttu-id="e744e-180">Liczba <see cref="T:System.Byte" /> wartości zapisywana w <paramref name="destination" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-180">The number of <see cref="T:System.Byte" /> values written to <paramref name="destination" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e744e-181"><paramref name="destination" />nie jest wystarczająco duży, aby można było przechowywać dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="e744e-181"><paramref name="destination" /> is not large enough to hold the output.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="rune.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e744e-182">Obiekt do porównania z bieżącym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="e744e-182">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="e744e-183">Zwraca wartość wskazującą, czy bieżące wystąpienie i określony obiekt są równe.</span><span class="sxs-lookup"><span data-stu-id="e744e-183">Returns a value that indicates whether the current instance and a specified object are equal.</span></span></summary>
        <returns><span data-ttu-id="e744e-184"><see langword="true" />Jeśli <paramref name="obj" /> jest typu <see cref="T:System.Text.Rune" /> i jest równe bieżącemu wystąpieniu; w przeciwnym razie, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-184"><see langword="true" /> if <paramref name="obj" /> is of type <see cref="T:System.Text.Rune" /> and is equal to the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Text.Rune other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Text.Rune other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.Equals(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Text::Rune other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Text.Rune -&gt; bool" Usage="rune.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e744e-185">Obiekt do porównania z bieżącym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="e744e-185">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="e744e-186">Zwraca wartość wskazującą, czy bieżące wystąpienie i określone Rune są równe.</span><span class="sxs-lookup"><span data-stu-id="e744e-186">Returns a value that indicates whether the current instance and a specified rune are equal.</span></span></summary>
        <returns><span data-ttu-id="e744e-187"><see langword="true" />Jeśli bieżące wystąpienie i <paramref name="other" /> są równe; w przeciwnym razie,. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e744e-187"><see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="rune.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e744e-188">Zwraca kod skrótu dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="e744e-188">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="e744e-189">Kod skrótu dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="e744e-189">The hash code for this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.GetNumericValue(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (value As Rune) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : System.Text.Rune -&gt; double" Usage="System.Text.Rune.GetNumericValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-190">Rune, dla którego ma zostać uzyskana wartość liczbowa.</span><span class="sxs-lookup"><span data-stu-id="e744e-190">The rune for which to get the numeric value.</span></span></param>
        <summary><span data-ttu-id="e744e-191">Pobiera wartość liczbową skojarzoną z określonym Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-191">Gets the numeric value associated with the specified rune.</span></span></summary>
        <returns><span data-ttu-id="e744e-192">Wartość liczbowa skojarzona <paramref name="value" />z, lub-1 <paramref name="value" /> , jeśli nie reprezentuje znaku numerycznego.</span><span class="sxs-lookup"><span data-stu-id="e744e-192">The numeric value associated with <paramref name="value" />, or -1 if <paramref name="value" /> doesn't represent a numeric character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-193">Ta metoda ma zachowanie równoważne <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-193">This method has behavior equivalent to <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e744e-194">Aby uzyskać więcej informacji, zapoznaj się z tą dokumentacją.</span><span class="sxs-lookup"><span data-stu-id="e744e-194">Refer to that documentation for more information.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRuneAt">
      <MemberSignature Language="C#" Value="public static System.Text.Rune GetRuneAt (string input, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune GetRuneAt(string input, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.GetRuneAt(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRuneAt (input As String, index As Integer) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune GetRuneAt(System::String ^ input, int index);" />
      <MemberSignature Language="F#" Value="static member GetRuneAt : string * int -&gt; System.Text.Rune" Usage="System.Text.Rune.GetRuneAt (input, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="e744e-195">Ciąg, z którego ma zostać utworzony Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-195">The string from which to create the rune.</span></span></param>
        <param name="index"><span data-ttu-id="e744e-196">Pozycja początkowa w <paramref name="input" /> lokalizacji, w której ma zostać utworzony Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-196">The starting position in <paramref name="input" /> at which to create the rune.</span></span></param>
        <summary><span data-ttu-id="e744e-197"><see cref="T:System.Text.Rune" /> Pobiera, który rozpoczyna się od określonej pozycji w ciągu.</span><span class="sxs-lookup"><span data-stu-id="e744e-197">Gets the <see cref="T:System.Text.Rune" /> that begins at a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="e744e-198">Rune uzyskany od <paramref name="input" /> określonego. <paramref name="index" /></span><span class="sxs-lookup"><span data-stu-id="e744e-198">The rune obtained from <paramref name="input" /> at the specified <paramref name="index" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e744e-199"><paramref name="input" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-199"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e744e-200"><paramref name="index" />nie odwołuje się do początku prawidłowej wartości skalarnej <paramref name="input" />w.</span><span class="sxs-lookup"><span data-stu-id="e744e-200"><paramref name="index" /> does not reference the start of a valid scalar value in <paramref name="input" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-201"><paramref name="index" />znajduje się poza zakresem <paramref name="input" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-201"><paramref name="index" /> is outside the range of <paramref name="input" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (value As Rune) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : System.Text.Rune -&gt; System.Globalization.UnicodeCategory" Usage="System.Text.Rune.GetUnicodeCategory value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-202">Rune, dla którego ma zostać uzyskana kategoria Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-202">The rune for which to get the Unicode category.</span></span></param>
        <summary><span data-ttu-id="e744e-203">Pobiera kategorię Unicode skojarzoną z określonym Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-203">Gets the Unicode category associated with the specified rune.</span></span></summary>
        <returns><span data-ttu-id="e744e-204">Kategoria Unicode skojarzona z <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-204">The Unicode category associated with <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-205">Ta metoda ma zachowanie równoważne <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-205">This method has behavior equivalent to <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e744e-206">Aby uzyskać więcej informacji, zapoznaj się z tą dokumentacją.</span><span class="sxs-lookup"><span data-stu-id="e744e-206">Refer to that documentation for more information.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAscii">
      <MemberSignature Language="C#" Value="public bool IsAscii { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAscii" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.IsAscii" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAscii As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAscii { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAscii : bool" Usage="System.Text.Rune.IsAscii" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e744e-207">Pobiera wartość wskazującą, czy wartość skalarna skojarzona z tym <see cref="T:System.Text.Rune" /> jest w zakresie kodowania ASCII.</span><span class="sxs-lookup"><span data-stu-id="e744e-207">Gets a value that indicates whether the scalar value associated with this <see cref="T:System.Text.Rune" /> is within the ASCII encoding range.</span></span></summary>
        <value><span data-ttu-id="e744e-208"><see langword="true" />Jeśli wartość skalarna jest skojarzona z zakresem kodowania ASCII ([U + 0000.. U + 007F]) i w związku z tym zaprezentowania przez pojedynczą jednostkę kodu UTF-8; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e744e-208"><see langword="true" /> if the scalar value associated is within the ASCII encoding range ([ U+0000..U+007F ]) and therefore representable by a single UTF-8 code unit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBmp">
      <MemberSignature Language="C#" Value="public bool IsBmp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBmp" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.IsBmp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBmp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBmp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBmp : bool" Usage="System.Text.Rune.IsBmp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e744e-209">Pobiera wartość wskazującą, czy wartość skalarna skojarzona z tym <see cref="T:System.Text.Rune" /> jest w zakresie kodowania BMP.</span><span class="sxs-lookup"><span data-stu-id="e744e-209">Gets a value that indicates whether the scalar value associated with this <see cref="T:System.Text.Rune" /> is within the BMP encoding range.</span></span></summary>
        <value><span data-ttu-id="e744e-210"><see langword="true" />Jeśli wartość skalarna jest skojarzona z zakresem kodowania BMP ([U + 0000.. U + FFFF]) i w związku z tym zaprezentowania przez pojedynczą jednostkę kodu UTF-16; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e744e-210"><see langword="true" /> if the scalar value associated is within the BMP encoding range ([ U+0000..U+FFFF ]) and therefore representable by a single UTF-16 code unit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsControl(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsControl : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsControl value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-211">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-211">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-212">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako znak kontrolny.</span><span class="sxs-lookup"><span data-stu-id="e744e-212">Returns a value that indicates whether the specified rune is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="e744e-213"><see langword="true" />if <paramref name="value" /> jest znakiem kontrolnym; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e744e-213"><see langword="true" /> if <paramref name="value" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-214">Ta metoda jest równoznaczna z badaniem <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> i porównaniem <xref:System.Globalization.UnicodeCategory.Control>wyniku.</span><span class="sxs-lookup"><span data-stu-id="e744e-214">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against <xref:System.Globalization.UnicodeCategory.Control>.</span></span>

<span data-ttu-id="e744e-215">Dla [zasad stateczności Unicode](https://www.unicode.org/policies/stability_policy.html)zestaw znaków sterujących jest trwale ustalony jako związek z `[ U+0000..U+001F ]` i. `[ U+007F..U+009F ]`</span><span class="sxs-lookup"><span data-stu-id="e744e-215">Per [Unicode stability policies](https://www.unicode.org/policies/stability_policy.html), the set of control characters is permanently fixed to be the union of `[ U+0000..U+001F ]` and `[ U+007F..U+009F ]`.</span></span>

<span data-ttu-id="e744e-216">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsControl%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-216">For more information, see <xref:System.Char.IsControl%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsDigit(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsDigit : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsDigit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-217">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-217">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-218">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako cyfra dziesiętna.</span><span class="sxs-lookup"><span data-stu-id="e744e-218">Returns a value that indicates whether the specified rune is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="e744e-219"><see langword="true" />Jeśli <paramref name="value" /> jest cyfrą dziesiętną; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e744e-219"><see langword="true" /> if <paramref name="value" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-220">Ta metoda jest równoznaczna z badaniem <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> i porównaniem <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>wyniku.</span><span class="sxs-lookup"><span data-stu-id="e744e-220">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>.</span></span>

<span data-ttu-id="e744e-221">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsDigit%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-221">For more information, see <xref:System.Char.IsDigit%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsLetter(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsLetter : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsLetter value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-222">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-222">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-223">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako literę.</span><span class="sxs-lookup"><span data-stu-id="e744e-223">Returns a value that indicates whether the specified rune is categorized as a letter.</span></span></summary>
        <returns><span data-ttu-id="e744e-224"><see langword="true" />Jeśli <paramref name="value" /> jest literą; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-224"><see langword="true" /> if <paramref name="value" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-225"><xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> Ta metoda jest równoznaczna z badaniem i porównaniem wyniku z dowolnymi wartościami <xref:System.Globalization.UnicodeCategory.LowercaseLetter> <xref:System.Globalization.UnicodeCategory.UppercaseLetter>, <xref:System.Globalization.UnicodeCategory.TitlecaseLetter> <xref:System.Globalization.UnicodeCategory.ModifierLetter>,, i <xref:System.Globalization.UnicodeCategory.OtherLetter>.</span><span class="sxs-lookup"><span data-stu-id="e744e-225">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.UppercaseLetter>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter>, <xref:System.Globalization.UnicodeCategory.TitlecaseLetter>, <xref:System.Globalization.UnicodeCategory.ModifierLetter>, and <xref:System.Globalization.UnicodeCategory.OtherLetter>.</span></span>

<span data-ttu-id="e744e-226">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsLetter%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-226">For more information, see <xref:System.Char.IsLetter%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsLetterOrDigit(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsLetterOrDigit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-227">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-227">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-228">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako litera, czy cyfra dziesiętna.</span><span class="sxs-lookup"><span data-stu-id="e744e-228">Returns a value that indicates whether the specified rune is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="e744e-229"><see langword="true" />Jeśli <paramref name="value" /> jest literą lub cyfrą dziesiętną; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e744e-229"><see langword="true" /> if <paramref name="value" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-230"><xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> Ta metoda jest równoznaczna z badaniem i porównaniem wyniku z dowolnymi wartościami <xref:System.Globalization.UnicodeCategory.LowercaseLetter> <xref:System.Globalization.UnicodeCategory.UppercaseLetter>, <xref:System.Globalization.UnicodeCategory.TitlecaseLetter> <xref:System.Globalization.UnicodeCategory.ModifierLetter> <xref:System.Globalization.UnicodeCategory.OtherLetter>,,, i <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>.</span><span class="sxs-lookup"><span data-stu-id="e744e-230">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.UppercaseLetter>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter>, <xref:System.Globalization.UnicodeCategory.TitlecaseLetter>, <xref:System.Globalization.UnicodeCategory.ModifierLetter>, <xref:System.Globalization.UnicodeCategory.OtherLetter>, and <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>.</span></span>

<span data-ttu-id="e744e-231">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsLetterOrDigit%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-231">For more information, see <xref:System.Char.IsLetterOrDigit%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsLower(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsLower : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsLower value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-232">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-232">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-233">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako mała litera.</span><span class="sxs-lookup"><span data-stu-id="e744e-233">Returns a value that indicates whether the specified rune is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="e744e-234"><see langword="true" />Jeśli <paramref name="value" /> jest małą literą; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-234"><see langword="true" /> if <paramref name="value" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-235">Ta metoda jest równoznaczna z badaniem <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> i porównaniem <xref:System.Globalization.UnicodeCategory.LowercaseLetter>wyniku.</span><span class="sxs-lookup"><span data-stu-id="e744e-235">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against <xref:System.Globalization.UnicodeCategory.LowercaseLetter>.</span></span>

<span data-ttu-id="e744e-236">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsLower%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-236">For more information, see <xref:System.Char.IsLower%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsNumber(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsNumber : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsNumber value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-237">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-237">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-238">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako liczba.</span><span class="sxs-lookup"><span data-stu-id="e744e-238">Returns a value that indicates whether the specified rune is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="e744e-239"><see langword="true" />Jeśli <paramref name="value" /> jest liczbą; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e744e-239"><see langword="true" /> if <paramref name="value" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-240">Ta metoda jest równoznaczna z badaniem <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> i porównaniem wyniku z dowolnymi wartościami <xref:System.Globalization.UnicodeCategory.LetterNumber> <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>, i <xref:System.Globalization.UnicodeCategory.OtherNumber>.</span><span class="sxs-lookup"><span data-stu-id="e744e-240">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>, <xref:System.Globalization.UnicodeCategory.LetterNumber>, and <xref:System.Globalization.UnicodeCategory.OtherNumber>.</span></span>

<span data-ttu-id="e744e-241">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsNumber%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-241">For more information, see <xref:System.Char.IsNumber%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsPunctuation(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsPunctuation value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-242">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-242">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-243">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako znak interpunkcyjny.</span><span class="sxs-lookup"><span data-stu-id="e744e-243">Returns a value that indicates whether the specified rune is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="e744e-244"><see langword="true" />Jeśli <paramref name="value" /> jest znakiem interpunkcji; w <see langword="false" />przeciwnym razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-244"><see langword="true" /> if <paramref name="value" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-245"><xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> Ta metoda jest równoznaczna z badaniem i porównaniem wyniku z dowolnymi wartościami <xref:System.Globalization.UnicodeCategory.DashPunctuation> <xref:System.Globalization.UnicodeCategory.ConnectorPunctuation> <xref:System.Globalization.UnicodeCategory.OpenPunctuation> <xref:System.Globalization.UnicodeCategory.FinalQuotePunctuation>, <xref:System.Globalization.UnicodeCategory.ClosePunctuation> <xref:System.Globalization.UnicodeCategory.InitialQuotePunctuation>,,, i <xref:System.Globalization.UnicodeCategory.OtherPunctuation>.</span><span class="sxs-lookup"><span data-stu-id="e744e-245">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.ConnectorPunctuation>, <xref:System.Globalization.UnicodeCategory.DashPunctuation>, <xref:System.Globalization.UnicodeCategory.OpenPunctuation>, <xref:System.Globalization.UnicodeCategory.ClosePunctuation>, <xref:System.Globalization.UnicodeCategory.InitialQuotePunctuation>, <xref:System.Globalization.UnicodeCategory.FinalQuotePunctuation>, and <xref:System.Globalization.UnicodeCategory.OtherPunctuation>.</span></span>

<span data-ttu-id="e744e-246">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsPunctuation%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-246">For more information, see <xref:System.Char.IsPunctuation%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsSeparator(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsSeparator value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-247">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-247">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-248">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako znak separatora.</span><span class="sxs-lookup"><span data-stu-id="e744e-248">Returns a value that indicates whether the specified rune is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="e744e-249"><see langword="true" />Jeśli <paramref name="value" /> jest znakiem separatora; w <see langword="false" />przeciwnym razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-249"><see langword="true" /> if <paramref name="value" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-250">Ta metoda jest równoznaczna z badaniem <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> i porównaniem wyniku z dowolnymi wartościami <xref:System.Globalization.UnicodeCategory.LineSeparator> <xref:System.Globalization.UnicodeCategory.SpaceSeparator>, i <xref:System.Globalization.UnicodeCategory.ParagraphSeparator>.</span><span class="sxs-lookup"><span data-stu-id="e744e-250">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.SpaceSeparator>, <xref:System.Globalization.UnicodeCategory.LineSeparator>, and <xref:System.Globalization.UnicodeCategory.ParagraphSeparator>.</span></span>

<span data-ttu-id="e744e-251">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsSeparator%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-251">For more information, see <xref:System.Char.IsSeparator%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsSymbol(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsSymbol value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-252">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-252">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-253">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako znak symbolu.</span><span class="sxs-lookup"><span data-stu-id="e744e-253">Returns a value that indicates whether the specified rune is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="e744e-254"><see langword="true" />Jeśli <paramref name="value" /> jest znakiem symbolu; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-254"><see langword="true" /> if <paramref name="value" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-255">Ta metoda jest <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> równoznaczna z badaniem i porównaniem wyniku z jakąkolwiek z wartości <xref:System.Globalization.UnicodeCategory.MathSymbol>, <xref:System.Globalization.UnicodeCategory.CurrencySymbol> <xref:System.Globalization.UnicodeCategory.ModifierSymbol>, i <xref:System.Globalization.UnicodeCategory.OtherSymbol>.</span><span class="sxs-lookup"><span data-stu-id="e744e-255">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.MathSymbol>, <xref:System.Globalization.UnicodeCategory.CurrencySymbol>, <xref:System.Globalization.UnicodeCategory.ModifierSymbol>, and <xref:System.Globalization.UnicodeCategory.OtherSymbol>.</span></span>

<span data-ttu-id="e744e-256">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsSymbol%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-256">For more information, see <xref:System.Char.IsSymbol%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsUpper(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsUpper : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsUpper value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-257">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-257">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-258">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako wielką literą.</span><span class="sxs-lookup"><span data-stu-id="e744e-258">Returns a value that indicates whether the specified rune is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="e744e-259"><see langword="true" />Jeśli <paramref name="value" /> jest wielką literą; w przeciwnym<see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-259"><see langword="true" /> if <paramref name="value" /> is an uppercase letter; otherwise,<see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-260">Ta metoda jest równoznaczna z badaniem <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> i porównaniem <xref:System.Globalization.UnicodeCategory.UppercaseLetter>wyniku.</span><span class="sxs-lookup"><span data-stu-id="e744e-260">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against <xref:System.Globalization.UnicodeCategory.UppercaseLetter>.</span></span>

<span data-ttu-id="e744e-261">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsUpper%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-261">For more information, see <xref:System.Char.IsUpper%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsValid(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValid (value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(int value);" />
      <MemberSignature Language="F#" Value="static member IsValid : int -&gt; bool" Usage="System.Text.Rune.IsValid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-262">Wartość skalarna Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-262">The Unicode scalar value.</span></span></param>
        <summary><span data-ttu-id="e744e-263">Zwraca wartość wskazującą, czy 32-bitowa liczba całkowita ze znakiem reprezentuje prawidłową wartość skalarną Unicode; oznacza to, że znajduje się w zakresie [U + 0000.. U + D7FF] włącznie; lub [U + E000.. U + 10FFFF] włącznie.</span><span class="sxs-lookup"><span data-stu-id="e744e-263">Returns a value that indicates whether a 32-bit signed integer represents a valid Unicode scalar value; that is, it is in the range [ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive.</span></span></summary>
        <returns><span data-ttu-id="e744e-264"><see langword="true" />if <paramref name="value" /> jest prawidłową wartością skalarną Unicode; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e744e-264"><see langword="true" /> if <paramref name="value" /> is a valid Unicode scalar value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsValid(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValid (value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member IsValid : uint32 -&gt; bool" Usage="System.Text.Rune.IsValid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-265">Wartość skalarna Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-265">The Unicode scalar value.</span></span></param>
        <summary><span data-ttu-id="e744e-266">Zwraca wartość wskazującą, czy 32-bitowa liczba całkowita bez znaku reprezentuje prawidłową wartość skalarną Unicode; oznacza to, że znajduje się w zakresie [U + 0000.. U + D7FF], włącznie lub [U + E000.. U + 10FFFF] włącznie.</span><span class="sxs-lookup"><span data-stu-id="e744e-266">Returns a value that indicates whether a 32-bit unsigned integer represents a valid Unicode scalar value; that is, it is in the range [ U+0000..U+D7FF ], inclusive, or [ U+E000..U+10FFFF ], inclusive.</span></span></summary>
        <returns><span data-ttu-id="e744e-267"><see langword="true" />if <paramref name="value" /> jest prawidłową wartością skalarną Unicode; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e744e-267"><see langword="true" /> if <paramref name="value" /> is a valid Unicode scalar value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsWhiteSpace(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsWhiteSpace value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-268">Rune do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="e744e-268">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="e744e-269">Zwraca wartość wskazującą, czy określony Rune jest kategoryzowany jako biały znak.</span><span class="sxs-lookup"><span data-stu-id="e744e-269">Returns a value that indicates whether the specified rune is categorized as a white space character.</span></span></summary>
        <returns><span data-ttu-id="e744e-270"><see langword="true" />Jeśli <paramref name="value" /> jest znakiem odstępu; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-270"><see langword="true" /> if <paramref name="value" /> is a white space character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-271">Ta metoda jest <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> zwykle równoważna z badaniem i porównaniem wyników z jakąkolwiek z wartości <xref:System.Globalization.UnicodeCategory.SpaceSeparator>, <xref:System.Globalization.UnicodeCategory.LineSeparator>i. <xref:System.Globalization.UnicodeCategory.ParagraphSeparator></span><span class="sxs-lookup"><span data-stu-id="e744e-271">This method is generally equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.SpaceSeparator>, <xref:System.Globalization.UnicodeCategory.LineSeparator>, and <xref:System.Globalization.UnicodeCategory.ParagraphSeparator>.</span></span> <span data-ttu-id="e744e-272">Istnieją jednak pewne <xref:System.Text.Rune>elementy <xref:System.Globalization.UnicodeCategory.Control> w kategorii, które również są klasyfikowane jako znaki odstępu, a ta metoda obejmuje te wartości.</span><span class="sxs-lookup"><span data-stu-id="e744e-272">However, there are some <xref:System.Text.Rune>s in the <xref:System.Globalization.UnicodeCategory.Control> category which are also classified as white space characters, and this method accounts for those values.</span></span>

<span data-ttu-id="e744e-273">Aby uzyskać więcej informacji, zobacz <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e744e-273">For more information, see <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Equality(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e744e-274">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-274">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e744e-275">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-275">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e744e-276">Zwraca wartość wskazującą, czy dwa <see cref="T:System.Text.Rune" /> wystąpienia są równe.</span><span class="sxs-lookup"><span data-stu-id="e744e-276">Returns a value that indicates whether two <see cref="T:System.Text.Rune" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="e744e-277"><see langword="true" />Jeśli <paramref name="left" /> i <paramref name="right" /> sąrówne;<see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e744e-277"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Text.Rune (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Text.Rune op_Explicit(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Explicit(System.Char)~System.Text.Rune" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (ch As Char) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Text::Rune(char ch);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : char -&gt; System.Text.Rune" Usage="System.Text.Rune.op_Explicit ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="e744e-278">16-bitowy znak Unicode do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-278">The 16-bit Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e744e-279">Definiuje jawną konwersję 16-bitowego znaku Unicode na <see cref="T:System.Text.Rune" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-279">Defines an explicit conversion of a 16-bit Unicode character to a <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="e744e-280"><paramref name="ch" />jako 32-bitowy znak Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-280"><paramref name="ch" /> as a 32-bit Unicode character.</span></span></returns>
         <remarks>To be added.</remarks>
         <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-281"><paramref name="ch" />jest skalarną Unicode, która reprezentuje punkt kodu zastępczego.</span><span class="sxs-lookup"><span data-stu-id="e744e-281"><paramref name="ch" /> is a Unicode scalar that represents a surrogate code point.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Text.Rune (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Text.Rune op_Explicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Explicit(System.Int32)~System.Text.Rune" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Integer) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Text::Rune(int value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : int -&gt; System.Text.Rune" Usage="System.Text.Rune.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-282">32-bitowa liczba całkowita ze znakiem do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-282">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="e744e-283">Definiuje jawną konwersję 32-bitowej podpisanej liczby całkowitej na <see cref="T:System.Text.Rune" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-283">Defines an explicit conversion of a 32-bit signed integer to a <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="e744e-284"><paramref name="value" />jako 32-bitowy znak Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-284"><paramref name="value" /> as a 32-bit Unicode character.</span></span></returns>
         <remarks>To be added.</remarks>
         <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-285"><paramref name="value" />jest nieprawidłowym skalarniem Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-285"><paramref name="value" /> is an invalid Unicode scalar.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Text.Rune (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Text.Rune op_Explicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Explicit(System.UInt32)~System.Text.Rune" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As UInteger) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Text::Rune(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : uint32 -&gt; System.Text.Rune" Usage="System.Text.Rune.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-286">32-bitowa liczba całkowita ze znakiem do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-286">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="e744e-287">Definiuje jawną konwersję 32-bitowej nieoznaczonej liczby całkowitej <see cref="T:System.Text.Rune" />na.</span><span class="sxs-lookup"><span data-stu-id="e744e-287">Defines an explicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="e744e-288"><paramref name="value" />jako 32-bitowy znak Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-288"><paramref name="value" /> as a 32-bit Unicode character.</span></span></returns>
         <remarks>To be added.</remarks>
         <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-289"><paramref name="value" />jest nieprawidłowym skalarniem Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-289"><paramref name="value" /> is an invalid Unicode scalar.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_GreaterThan(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e744e-290">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-290">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e744e-291">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-291">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e744e-292">Zwraca wartość wskazującą, czy określony <see cref="T:System.Text.Rune" /> element jest większy niż określony. <see cref="T:System.Text.Rune" /></span><span class="sxs-lookup"><span data-stu-id="e744e-292">Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is greater than another specified <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="e744e-293"><see langword="true" />Jeśli <paramref name="left" /> jest większa niż <paramref name="right" />; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-293"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_GreaterThanOrEqual(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e744e-294">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-294">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e744e-295">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-295">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e744e-296">Zwraca wartość wskazującą, czy określony <see cref="T:System.Text.Rune" /> element jest większy lub równy innemu określonemu. <see cref="T:System.Text.Rune" /></span><span class="sxs-lookup"><span data-stu-id="e744e-296">Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is greater than or equal to another specified <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="e744e-297"><see langword="true" />Jeśli <paramref name="left" /> jest większe lub <paramref name="right" />równe; w przeciwnym razie, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-297"><see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Inequality(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="System.Text.Rune.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e744e-298">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-298">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e744e-299">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-299">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e744e-300">Zwraca wartość wskazującą, czy dwa <see cref="T:System.Text.Rune" /> wystąpienia mają różne wartości.</span><span class="sxs-lookup"><span data-stu-id="e744e-300">Returns a value that indicates whether two <see cref="T:System.Text.Rune" /> instances have different values.</span></span></summary>
        <returns><span data-ttu-id="e744e-301"><see langword="true" />Jeśli <paramref name="left" /> i <paramref name="right" /> niesąrówne;<see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e744e-301"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_LessThan(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e744e-302">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-302">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e744e-303">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-303">the second value to compare.</span></span></param>
        <summary><span data-ttu-id="e744e-304">Zwraca wartość wskazującą, czy określony <see cref="T:System.Text.Rune" /> element jest mniejszy od innego określonego. <see cref="T:System.Text.Rune" /></span><span class="sxs-lookup"><span data-stu-id="e744e-304">Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is less than another specified <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="e744e-305"><see langword="true" />Jeśli <paramref name="left" /> jest mniejsza niż <paramref name="right" />; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="e744e-305"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_LessThanOrEqual(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e744e-306">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-306">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e744e-307">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="e744e-307">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e744e-308">Zwraca wartość wskazującą, czy określony <see cref="T:System.Text.Rune" /> element jest mniejszy niż lub równy innemu określonemu. <see cref="T:System.Text.Rune" /></span><span class="sxs-lookup"><span data-stu-id="e744e-308">Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is less than or equal to another specified <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="e744e-309"><see langword="true" />Jeśli <paramref name="left" /> jest mniejsze lub <paramref name="right" />równe; w przeciwnym razie, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-309"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Plane">
      <MemberSignature Language="C#" Value="public int Plane { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Plane" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.Plane" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Plane As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Plane { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Plane : int" Usage="System.Text.Rune.Plane" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e744e-310">Pobiera płaszczyznę Unicode (od 0 do 16 włącznie), która zawiera tę wartość skalarną.</span><span class="sxs-lookup"><span data-stu-id="e744e-310">Gets the Unicode plane (0 to 16, inclusive) that contains this scalar.</span></span></summary>
        <value><span data-ttu-id="e744e-311">Płaszczyzna Unicode (od 0 do 16 włącznie), która zawiera tę wartość skalarną.</span><span class="sxs-lookup"><span data-stu-id="e744e-311">The Unicode plane (0 to 16, inclusive) that contains this scalar.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplacementChar">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ReplacementChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Text.Rune ReplacementChar" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.ReplacementChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ReplacementChar As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Rune ReplacementChar { System::Text::Rune get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementChar : System.Text.Rune" Usage="System.Text.Rune.ReplacementChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e744e-312"><see cref="T:System.Text.Rune" /> Pobiera wystąpienie, które reprezentuje znak zastępczy Unicode U + FFFD.</span><span class="sxs-lookup"><span data-stu-id="e744e-312">Gets a <see cref="T:System.Text.Rune" /> instance that represents the Unicode replacement character U+FFFD.</span></span></summary>
        <value><span data-ttu-id="e744e-313"><see cref="T:System.Text.Rune" /> Wystąpienie, które reprezentuje znak zastępczy Unicode U + FFFD.</span><span class="sxs-lookup"><span data-stu-id="e744e-313">A <see cref="T:System.Text.Rune" /> instance that represents the Unicode replacement character U+FFFD.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ToLower (System.Text.Rune value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune ToLower(valuetype System.Text.Rune value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (value As Rune, culture As CultureInfo) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune ToLower(System::Text::Rune value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : System.Text.Rune * System.Globalization.CultureInfo -&gt; System.Text.Rune" Usage="System.Text.Rune.ToLower (value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-314">32-bitowy znak Unicode do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-314">The 32-bit Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="e744e-315">Obiekt, który dostarcza reguły dotyczące wielkości znaków z uwzględnieniem ustawień kulturowych.</span><span class="sxs-lookup"><span data-stu-id="e744e-315">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="e744e-316">Zwraca kopię określonego <see cref="T:System.Text.Rune" /> przekonwertowanej na małe litery przy użyciu reguł wielkości liter w określonej kulturze.</span><span class="sxs-lookup"><span data-stu-id="e744e-316">Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to lowercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="e744e-317">Odpowiednik małymi literami <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-317">The lowercase equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ToLowerInvariant (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune ToLowerInvariant(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToLowerInvariant(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLowerInvariant (value As Rune) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune ToLowerInvariant(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : System.Text.Rune -&gt; System.Text.Rune" Usage="System.Text.Rune.ToLowerInvariant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-318">32-bitowy znak Unicode do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-318">The 32-bit Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e744e-319">Zwraca kopię określonej <see cref="T:System.Text.Rune" /> konwersji na małe litery przy użyciu reguł wielkości liter kultury niezmiennej.</span><span class="sxs-lookup"><span data-stu-id="e744e-319">Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to lowercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="e744e-320">Odpowiednik małymi literami <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-320">The lowercase equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="rune.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e744e-321">Zwraca ciąg reprezentujący to <see cref="T:System.Text.Rune" /> wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="e744e-321">Returns the string representation of this <see cref="T:System.Text.Rune" /> instance.</span></span></summary>
        <returns><span data-ttu-id="e744e-322">Ciąg reprezentujący ten Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-322">The string representation of this rune.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ToUpper (System.Text.Rune value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune ToUpper(valuetype System.Text.Rune value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (value As Rune, culture As CultureInfo) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune ToUpper(System::Text::Rune value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : System.Text.Rune * System.Globalization.CultureInfo -&gt; System.Text.Rune" Usage="System.Text.Rune.ToUpper (value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-323">32-bitowy znak Unicode do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-323">The 32-bit Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="e744e-324">Obiekt, który dostarcza reguły dotyczące wielkości znaków z uwzględnieniem ustawień kulturowych.</span><span class="sxs-lookup"><span data-stu-id="e744e-324">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="e744e-325">Zwraca kopię określonego <see cref="T:System.Text.Rune" /> przekonwertowanego na wielkie litery przy użyciu reguł wielkości liter w określonej kulturze.</span><span class="sxs-lookup"><span data-stu-id="e744e-325">Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to uppercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="e744e-326">Wielkie litery <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-326">The uppercase equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ToUpperInvariant (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune ToUpperInvariant(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToUpperInvariant(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpperInvariant (value As Rune) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune ToUpperInvariant(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : System.Text.Rune -&gt; System.Text.Rune" Usage="System.Text.Rune.ToUpperInvariant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-327">32-bitowy znak Unicode do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e744e-327">The 32-bit Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e744e-328">Zwraca kopię określonego <see cref="T:System.Text.Rune" /> przekonwertowanego na wielkie litery przy użyciu reguł wielkości liter w kulturze niezmiennej.</span><span class="sxs-lookup"><span data-stu-id="e744e-328">Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to uppercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="e744e-329">Wielkie litery <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-329">The uppercase equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (char ch, out System.Text.Rune result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(char ch, [out] valuetype System.Text.Rune&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryCreate(System.Char,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (ch As Char, ByRef result As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(char ch, [Runtime::InteropServices::Out] System::Text::Rune % result);" />
      <MemberSignature Language="F#" Value="static member TryCreate : char *  -&gt; bool" Usage="System.Text.Rune.TryCreate (ch, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="e744e-330">Znak, z którego ma zostać utworzony Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-330">The character from which to create the rune.</span></span></param>
        <param name="result"><span data-ttu-id="e744e-331">Gdy ta metoda zwraca, Rune odpowiada <paramref name="ch" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-331">When this method returns, the rune that corresponds to <paramref name="ch" />.</span></span></param>
        <summary><span data-ttu-id="e744e-332">Próbuje utworzyć <see cref="T:System.Text.Rune" /> od określonego znaku i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="e744e-332">Attempts to create a <see cref="T:System.Text.Rune" /> from a specified character and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="e744e-333"><see langword="true" />Jeśli metoda zakończyła się pomyślnie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e744e-333"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (int value, out System.Text.Rune result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(int32 value, [out] valuetype System.Text.Rune&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryCreate(System.Int32,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (value As Integer, ByRef result As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(int value, [Runtime::InteropServices::Out] System::Text::Rune % result);" />
      <MemberSignature Language="F#" Value="static member TryCreate : int *  -&gt; bool" Usage="System.Text.Rune.TryCreate (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-334">Wartość skalarna Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-334">The Unicode scalar value.</span></span></param>
        <param name="result"><span data-ttu-id="e744e-335">Gdy ta metoda zwraca, Rune odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-335">When this method returns, the rune that corresponds to <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="e744e-336">Próbuje utworzyć <see cref="T:System.Text.Rune" /> z określonej liczby całkowitej ze znakiem, która reprezentuje wartość skalarną Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-336">Attempts to create a <see cref="T:System.Text.Rune" /> from a specified signed integer that represents a Unicode scalar value.</span></span></summary>
        <returns><span data-ttu-id="e744e-337"><see langword="true" />Jeśli metoda zakończyła się pomyślnie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e744e-337"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (uint value, out System.Text.Rune result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(unsigned int32 value, [out] valuetype System.Text.Rune&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryCreate(System.UInt32,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (value As UInteger, ByRef result As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(System::UInt32 value, [Runtime::InteropServices::Out] System::Text::Rune % result);" />
      <MemberSignature Language="F#" Value="static member TryCreate : uint32 *  -&gt; bool" Usage="System.Text.Rune.TryCreate (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e744e-338">Wartość skalarna Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-338">The Unicode scalar value.</span></span></param>
        <param name="result"><span data-ttu-id="e744e-339">Gdy ta metoda zwraca, Rune odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-339">When this method returns, the rune that corresponds to <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="e744e-340">Próbuje utworzyć <see cref="T:System.Text.Rune" /> z określoną 32-bitową liczbę całkowitą bez znaku, która reprezentuje wartość skalarną Unicode.</span><span class="sxs-lookup"><span data-stu-id="e744e-340">Attempts to create a <see cref="T:System.Text.Rune" /> from the specified 32-bit unsigned integer that represents a Unicode scalar value.</span></span></summary>
        <returns><span data-ttu-id="e744e-341"><see langword="true" />Jeśli metoda zakończyła się pomyślnie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e744e-341"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (char highSurrogate, char lowSurrogate, out System.Text.Rune result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(char highSurrogate, char lowSurrogate, [out] valuetype System.Text.Rune&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryCreate(System.Char,System.Char,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (highSurrogate As Char, lowSurrogate As Char, ByRef result As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(char highSurrogate, char lowSurrogate, [Runtime::InteropServices::Out] System::Text::Rune % result);" />
      <MemberSignature Language="F#" Value="static member TryCreate : char * char *  -&gt; bool" Usage="System.Text.Rune.TryCreate (highSurrogate, lowSurrogate, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="e744e-342">Górny Surogat pary dwuskładnikowej.</span><span class="sxs-lookup"><span data-stu-id="e744e-342">The high surrogate of the surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="e744e-343">Dolny Surogat pary dwuskładnikowej.</span><span class="sxs-lookup"><span data-stu-id="e744e-343">The low surrogate of the surrogate pair.</span></span></param>
        <param name="result"><span data-ttu-id="e744e-344">Rune, który odpowiada określonej parze surogatu.</span><span class="sxs-lookup"><span data-stu-id="e744e-344">The rune that corresponds to the specified surrogate pair.</span></span></param>
        <summary><span data-ttu-id="e744e-345">Próbuje utworzyć <see cref="T:System.Text.Rune" /> z określonej pary zastępczej UTF-16 i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="e744e-345">Attempts to create a <see cref="T:System.Text.Rune" /> from the specified UTF-16 surrogate pair and returns a value that indicates whether the operation was successful.</span></span></summary>
        <returns><span data-ttu-id="e744e-346"><see langword="true" />Jeśli operacja zakończyła się pomyślnie; <see langword="false" /> Jeśli wartości wejściowe nie reprezentują poprawnie sformułowanej pary zastępczej UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-346"><see langword="true" /> if the operation succeeded; <see langword="false" /> if the input values don't represent a well-formed UTF-16 surrogate pair.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncodeToUtf16">
      <MemberSignature Language="C#" Value="public bool TryEncodeToUtf16 (Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncodeToUtf16(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryEncodeToUtf16(System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncodeToUtf16 (destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncodeToUtf16(Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncodeToUtf16 : Span&lt;char&gt; *  -&gt; bool" Usage="rune.TryEncodeToUtf16 (destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e744e-347">Bufor, do którego ma zostać zapisana wartość zakodowana w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-347">The buffer to which to write this value as UTF-16 encoded value.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="e744e-348">Liczba <see cref="T:System.Char" /> wartości zapisywana w <paramref name="destination" />lub 0, jeśli bufor docelowy nie jest wystarczająco duży, aby można było zawierać dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="e744e-348">The number of <see cref="T:System.Char" /> values written to <paramref name="destination" />, or 0 if the destination buffer is not large enough to contain the output.</span></span></param>
        <summary><span data-ttu-id="e744e-349">Koduje to <see cref="T:System.Text.Rune" /> w buforze docelowym zakodowanym w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="e744e-349">Encodes this <see cref="T:System.Text.Rune" /> to a UTF-16 encoded destination buffer.</span></span></summary>
        <returns><span data-ttu-id="e744e-350"><see langword="true" />Jeśli wartość została zapisywana w buforze; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e744e-350"><see langword="true" /> if the value was written to the buffer; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
## Remarks

<span data-ttu-id="e744e-351">Przed określeniem wymaganego rozmiaru `destination` buforu można wykonać zapytanie o Właściwośćprzedczasem.<xref:System.Text.Rune.Utf16SequenceLength></span><span class="sxs-lookup"><span data-stu-id="e744e-351">The <xref:System.Text.Rune.Utf16SequenceLength> property can be queried ahead of time to determine the required size of the `destination` buffer.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncodeToUtf8">
      <MemberSignature Language="C#" Value="public bool TryEncodeToUtf8 (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncodeToUtf8(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryEncodeToUtf8(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncodeToUtf8 (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncodeToUtf8(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncodeToUtf8 : Span&lt;byte&gt; *  -&gt; bool" Usage="rune.TryEncodeToUtf8 (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e744e-352">Bufor, do którego ma zostać zapisana zakodowana wartość UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-352">The buffer to which to write the UTF-8 encoded value.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="e744e-353">Liczba <see cref="T:System.Byte" /> wartości zapisywana w <paramref name="destination" />lub 0, jeśli bufor docelowy nie jest wystarczająco duży, aby można było zawierać dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="e744e-353">The number of <see cref="T:System.Byte" /> values written to <paramref name="destination" />, or 0 if the destination buffer is not large enough to contain the output.</span></span></param>
        <summary><span data-ttu-id="e744e-354">Koduje to <see cref="T:System.Text.Rune" /> w buforze docelowym zakodowanym przy użyciu kodowania UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e744e-354">Encodes this <see cref="T:System.Text.Rune" /> to a UTF-8 encoded destination buffer.</span></span></summary>
        <returns><span data-ttu-id="e744e-355"><see langword="true" />Jeśli wartość została zapisywana w buforze; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e744e-355"><see langword="true" /> if the value was written to the buffer; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
## Remarks

<span data-ttu-id="e744e-356">Przed określeniem wymaganego rozmiaru `destination` buforu można wykonać zapytanie o Właściwośćprzedczasem.<xref:System.Text.Rune.Utf8SequenceLength></span><span class="sxs-lookup"><span data-stu-id="e744e-356">The <xref:System.Text.Rune.Utf8SequenceLength> property can be queried ahead of time to determine the required size of the `destination` buffer.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetRuneAt">
      <MemberSignature Language="C#" Value="public static bool TryGetRuneAt (string input, int index, out System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetRuneAt(string input, int32 index, [out] valuetype System.Text.Rune&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryGetRuneAt(System.String,System.Int32,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetRuneAt (input As String, index As Integer, ByRef value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetRuneAt(System::String ^ input, int index, [Runtime::InteropServices::Out] System::Text::Rune % value);" />
      <MemberSignature Language="F#" Value="static member TryGetRuneAt : string * int *  -&gt; bool" Usage="System.Text.Rune.TryGetRuneAt (input, index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="e744e-357">Ciąg, z którego ma zostać wyodrębniony Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-357">The string from which to extract the rune.</span></span></param>
        <param name="index"><span data-ttu-id="e744e-358">Indeks (liczony od zera), z którego ma zostać wyodrębniony Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-358">The zero-based index from which to extract the rune.</span></span></param>
        <param name="value"><span data-ttu-id="e744e-359">Gdy ta metoda zwraca, zdekodowane Rune.</span><span class="sxs-lookup"><span data-stu-id="e744e-359">When this method returns, the decoded rune.</span></span></param>
        <summary><span data-ttu-id="e744e-360">Próbuje uzyskać <see cref="T:System.Text.Rune" /> , który rozpoczyna się w określonej pozycji w ciągu, i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="e744e-360">Attempts to get the <see cref="T:System.Text.Rune" /> that begins at a specified position in a string, and return a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="e744e-361"><see langword="true" />Jeśli wartość skalarna została pomyślnie wyodrębniona z określonego indeksu; <see langword="false" /> Jeśli nie można wyodrębnić wartości z powodu nieprawidłowych danych.</span><span class="sxs-lookup"><span data-stu-id="e744e-361"><see langword="true" /> if a scalar value was successfully extracted from the specified index; <see langword="false" /> if a value could not be extracted because of invalid data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e744e-362"><paramref name="input" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-362"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e744e-363"><paramref name="index" />jest poza zakresem <paramref name="input" />.</span><span class="sxs-lookup"><span data-stu-id="e744e-363"><paramref name="index" /> is out of the range of <paramref name="input" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Utf16SequenceLength">
      <MemberSignature Language="C#" Value="public int Utf16SequenceLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Utf16SequenceLength" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.Utf16SequenceLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Utf16SequenceLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Utf16SequenceLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Utf16SequenceLength : int" Usage="System.Text.Rune.Utf16SequenceLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e744e-364">Pobiera długość w jednostkach kodu (<see cref="T:System.Char" />) sekwencji UTF-16 wymaganych do reprezentowania tej wartości skalarnej.</span><span class="sxs-lookup"><span data-stu-id="e744e-364">Gets the length in code units (<see cref="T:System.Char" />) of the UTF-16 sequence required to represent this scalar value.</span></span></summary>
        <value><span data-ttu-id="e744e-365">Długość w jednostkach kodu (<see cref="T:System.Char" />) sekwencji UTF-16 wymagana do reprezentowania tej wartości skalarnej.</span><span class="sxs-lookup"><span data-stu-id="e744e-365">The length in code units (<see cref="T:System.Char" />) of the UTF-16 sequence required to represent this scalar value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-366">Wartość zwracana będzie równa 1 lub 2.</span><span class="sxs-lookup"><span data-stu-id="e744e-366">The return value will be 1 or 2.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utf8SequenceLength">
      <MemberSignature Language="C#" Value="public int Utf8SequenceLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Utf8SequenceLength" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.Utf8SequenceLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Utf8SequenceLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Utf8SequenceLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Utf8SequenceLength : int" Usage="System.Text.Rune.Utf8SequenceLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e744e-367">Pobiera długość w jednostkach kodu sekwencji UTF-8 wymaganych do reprezentowania tej wartości skalarnej.</span><span class="sxs-lookup"><span data-stu-id="e744e-367">Gets the length in code units of the UTF-8 sequence required to represent this scalar value.</span></span></summary>
        <value><span data-ttu-id="e744e-368">Długość w jednostkach kodu sekwencji UTF-8 wymagana do reprezentowania tej wartości skalarnej.</span><span class="sxs-lookup"><span data-stu-id="e744e-368">The length in code units of the UTF-8 sequence required to represent this scalar value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e744e-369">Wartość zwracana będzie wynosić od 1 do 4 włącznie.</span><span class="sxs-lookup"><span data-stu-id="e744e-369">The return value will be 1 through 4, inclusive.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public int Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Value { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : int" Usage="System.Text.Rune.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e744e-370">Pobiera wartość skalarną Unicode jako liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="e744e-370">Gets the Unicode scalar value as an integer.</span></span></summary>
        <value><span data-ttu-id="e744e-371">Wartość skalarna Unicode jako liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="e744e-371">The Unicode scalar value as an integer.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
