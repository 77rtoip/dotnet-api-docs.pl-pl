<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c8e57c657181c6bd8299235a19acbed251bbf103" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48762810" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia klasę bazową dla dostawcy kodowania, który dostarcza kodowania, które są niedostępne na konkretnej platformie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawcę kodowania dostarcza kodowania, które nie są dostępne na platformie określonego celu.  
  
 Program .NET Framework na pulpicie Windows obsługuje dużą liczbę znaków kodowania i kodu strony. Pełna lista kodowań dostępnych w programie .NET Framework można uzyskać na pulpicie Windows, wywołując <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> metody. Program .NET core, z drugiej strony, domyślnie obsługuje tylko formie następującego kodowania:  
  
-   ASCII (strona kodowa 20127), która jest zwracana przez <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> właściwości.  
  
-   ISO-8859-1 (strona kodowa 28591).  
  
-   UTF-7 (strona kodowa 65000), która jest zwracana przez <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> właściwości.  
  
-   UTF-8 (strona kodowa 65001), która jest zwracana przez <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> właściwości.  
  
-   UTF-16 i UTF-16LE (strona kodowa 1200), która jest zwracana przez <xref:System.Text.Encoding.Unicode%2A> właściwości.  
  
-   UTF-16BE (strona kodowa 1201), który zostanie uruchomiony, wywołując <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> lub <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> konstruktora z `bigEndian` wartość `true`.  
  
-   UTF-32 i UTF-32LE (strona kodowa 12000), która jest zwracana przez <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> właściwości.  
  
-   UTF-32BE (strona kodowa 12001), który zostanie uruchomiony, wywołując <xref:System.Text.UTF32Encoding> konstruktora, który ma `bigEndian` parametru i podając wartości `true` w wywołaniu metody.  
  
 Począwszy od programu .NET Framework 4.6 <xref:System.Text.EncodingProvider> jest klasą bazową, która powoduje, że w przeciwnym razie kodowania dostępne dla programu .NET Framework. Obejmuje to następujące czynności:  
  
1.  Zdefiniuj podklasą <xref:System.Text.EncodingProvider> , zastępuje dwóch abstrakcyjny <xref:System.Text.EncodingProvider.GetEncoding%2A> przeciążeń, <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> i <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>. Taka przeciążona funkcja sprawdza zwrotu w przeciwnym razie nieobsługiwany kodowania przez identyfikator strony kodu i według nazwy. Należy zauważyć, że możesz również zwrócić domyślnego kodowania, jeśli <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> metoda jest wywoływana z argumentem 0.  
  
2.  Opcjonalnie możesz zastąpić wirtualnego <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> i <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> metody. W większości przypadków nie jest to konieczne, ponieważ klasa bazowa udostępnia domyślną implementację interfejsu.  
  
3.  Przekaż <xref:System.Text.EncodingProvider> wystąpienia do <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> metody kodowania, dostarczone przez <xref:System.Text.EncodingProvider> obiektu dostępne dla środowiska uruchomieniowego języka wspólnego.  
  
4.  Wywołaj <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> przeciążenie, można pobrać kodowania. <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> Metoda wywoła odpowiadający <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> do określenia, czy go podać żądanego kodowania.  
  
 Biblioteka klas programu .NET Framework zapewnia jedną właściwość statyczna, <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>, która zwraca <xref:System.Text.EncodingProvider> obiekt, który udostępnia pełen zestaw kodowania dostępne na pulpicie Biblioteka klas programu .NET Framework [!INCLUDE[net_core](~/includes/net-core-md.md)] aplikacji. Ponadto może pochodzić z <xref:System.Text.EncodingProvider> klasy, aby udostępnić własne kodowania.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/system.text.codepagesencodingprovider.instance(v=vs.110).aspx">Właściwość CodePagesEncodingProvider.Instance</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.EncodingProvider" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kodowanie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">Identyfikator strony kodu żądanego kodowania.</param>
        <summary>Zwraca kodowanie skojarzony identyfikator strony określonego kodu.</summary>
        <returns>Kodowanie, który jest skojarzony z określonej strony kodowej, lub <see langword="null" /> Jeśli <see cref="T:System.Text.EncodingProvider" /> nie może zwracać zakodowany odpowiadający <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>Uwagi dotyczące obiektów dziedziczących

Możesz zastąpić [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) metoda zwraca kodowanie lub kodowania obsługiwane przez Twoje <xref:System.Text.EncodingProvider> podklasę. Gdy kod użytkownika podejmie próbę pobrania, kodowania, wywołując [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) metoda, metoda przekazuje `codepage` identyfikator do każdego zarejestrowanego dostawcy kodowania, dopóki jeden zwróci zakodowany. Jeśli żadna zwraca prawidłową kodowanie [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) metoda próbuje pobrać kodowanie pamięci podręcznej, którego identyfikator strony kodu jest `codepage`. W związku z tym jeśli `codepage` nie jest kod strony identyfikator kodowania, obsługujesz, metoda powinna zwrócić `null`; nie należy nigdy nie zgłaszają wyjątek.
        
Należy zauważyć, że możesz również zwraca domyślną stronę kodową, jeśli wartość `codepage` argument ma wartość 0.

## <a name="notes-to-callers"></a>Uwagi dotyczące wywoływania
        
Ta metoda jest wywoływana [Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) metody. Bezpośrednio z kodu użytkownika nie należy wywołać go.

        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Możesz zastąpić <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> metoda zwraca kodowanie lub kodowania obsługiwane przez Twoje <see cref="T:System.Text.EncodingProvider" /> podklasę. Gdy kod użytkownika podejmie próbę pobrania, kodowania, wywołując <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metoda, metoda przekazuje <paramref name="codepage" /> identyfikator do każdego zarejestrowanego dostawcy kodowania, dopóki jeden zwróci zakodowany. Jeśli żadna zwraca prawidłową kodowanie <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metoda próbuje pobrać kodowanie pamięci podręcznej, którego identyfikator strony kodu jest <paramref name="codepage" />. W związku z tym jeśli <paramref name="codepage" /> nie jest kod strony identyfikator kodowania, obsługujesz, metoda powinna zwrócić <see langword="null" />; nie należy nigdy nie zgłaszają wyjątek.</para>
        </block>
        <block subset="none" type="usage">
          <para>Ta metoda jest wywoływana <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metody. Bezpośrednio z kodu użytkownika nie należy wywołać go.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa żądanego kodowania.</param>
        <summary>Zwraca kodowanie o określonej nazwie.</summary>
        <returns>Oznacza to kodowanie skojarzone z określoną nazwą, lub <see langword="null" /> Jeśli <see cref="T:System.Text.EncodingProvider" /> nie może zwracać zakodowany odpowiadający <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>Uwagi dotyczące obiektów dziedziczących 
                  
Możesz zastąpić [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) metoda zwraca kodowanie lub kodowania obsługiwane przez Twoje <xref:System.Text.EncodingProvider> podklasę. Gdy kod użytkownika podejmie próbę pobrania, kodowania, wywołując [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) metoda, metoda przekazuje `name` argument dla każdego zarejestrowanego dostawcy kodowania, dopóki jeden zwróci zakodowany. Jeśli żadna zwraca prawidłową kodowanie [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) metoda próbuje pobrać kodowanie pamięci podręcznej, której nazwa to `name`. W związku z tym jeśli `name` nie jest nazwą kodowania, które obsługujesz, metoda powinna zwrócić `null`. Jest tylko wówczas, w której metody należy zgłosić wyjątek, jeśli `name` jest `null`.

## <a name="notes-to-callers"></a>Uwagi dotyczące wywoływania

Ta metoda jest wywoływana [Encoding.GetEncoding(String)](<xref:System.Text.Encoding.GetEncoding(System.String)>) metody. Bezpośrednio z kodu użytkownika nie należy wywołać go.
        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Możesz zastąpić <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> metoda zwraca kodowanie lub kodowania obsługiwane przez Twoje <see cref="T:System.Text.EncodingProvider" /> podklasę. Gdy kod użytkownika podejmie próbę pobrania, kodowania, wywołując <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> metoda, metoda przekazuje <paramref name="name" /> argument dla każdego zarejestrowanego dostawcy kodowania, dopóki jeden zwróci zakodowany. Jeśli żadna zwraca prawidłową kodowanie <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> metoda próbuje pobrać kodowanie pamięci podręcznej, której nazwa to <paramref name="name" />. W związku z tym jeśli <paramref name="name" /> nie jest nazwą kodowania, które obsługujesz, metoda powinna zwrócić <see langword="null" />. Jest tylko wówczas, w której metody należy zgłosić wyjątek, jeśli <paramref name="name" /> jest <see langword="null" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Ta metoda jest wywoływana <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> metody. Bezpośrednio z kodu użytkownika nie należy wywołać go.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">Identyfikator strony kodu żądanego kodowania.</param>
        <param name="encoderFallback">Obiekt, który zawiera procedurę obsługi błędów, gdy znak nie może zostać zakodowana przy użyciu tego kodowania.</param>
        <param name="decoderFallback">Obiekt, który zapewnia procedurę obsługi błędów, gdy nie mogą zostać zdekodowane sekwencja bajtów to kodowanie.</param>
        <summary>Zwraca kodowanie skojarzony identyfikator strony określonego kodu. Parametry określają procedurę obsługi błędów dla znaków, które nie może zostać zakodowany i sekwencje bajtów, które nie mogą zostać zdekodowane.</summary>
        <returns>Kodowanie, który jest skojarzony z określonej strony kodowej, lub <see langword="null" /> Jeśli <see cref="T:System.Text.EncodingProvider" /> nie może zwracać zakodowany odpowiadający <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback` i `decoderFallback` parametry są obiekty, które definiują strategia rezerwowa używane w przypadku gdy kodera nie konwersji znaków do sekwencji bajtów lub dekodera nie można przekonwertować sekwencji bajtów na znak. Program .NET Framework zawiera następujące mechanizmy rezerwowego:  
  
-   Wyjątek rezerwowego. Jeśli `encoderFallback` argument jest wystąpieniem <xref:System.Text.EncoderExceptionFallback>, lub `decoderExceptionFallback` argument jest wystąpieniem <xref:System.Text.DecoderExceptionFallback>, metodę kodowania zgłasza wyjątek, jeśli nie może zostać zakodowana znaków i dekodowania metoda zgłasza wyjątek, jeśli bajt Nie można dekodować sekwencji.  
  
-   Zastąpienie rezerwowego. Jeśli `encoderFallback` argument jest wystąpieniem <xref:System.Text.EncoderReplacementFallback>, lub `decoderExceptionFallback` argument jest wystąpieniem <xref:System.Text.DecoderReplacementFallback>, kodowania i dekodowania metody Zastąp ciąg zastępujący dla znaków, które nie może zostać zakodowany i nie może być sekwencji bajtów odczytany. Jeśli obiekt rezerwowego zastąpienia są tworzone przez wywołanie konstruktora domyślnego, znakiem zastępującym jest "?". Jeśli wywołasz <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> lub <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora, można określić w ciągu zamiennym.  
  
-   Rezerwa najlepszego dopasowania. Może pochodzić z <xref:System.Text.EncoderFallback> lub <xref:System.Text.DecoderFallback> klasy, aby zaimplementować mechanizm wymiany najlepszego dopasowania.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ponieważ wywołania tej metody używają implementacji <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> metody, nie trzeba go zastąpić. Gdy kod użytkownika podejmie próbę pobrania, kodowania, wywołując <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metoda, metoda przekazuje <paramref name="codepage" /> identyfikator do każdego zarejestrowanego dostawcy kodowania, dopóki jeden zwróci zakodowany. Jeśli żadna zwraca prawidłową kodowanie <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metoda próbuje pobrać kodowanie pamięci podręcznej, którego identyfikator strony kodu jest <paramref name="codepage" />. W związku z tym jeśli chcesz przesłonić <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> przesłonięcia metody, powinna zwrócić <see langword="null" /> Jeśli <paramref name="codepage" /> nie jest identyfikatorem stronę kodu kodowania czy obsługujesz; nie należy nigdy nie zgłaszają wyjątek.</para>
        </block>
        <block subset="none" type="usage">
          <para>Ta metoda jest wywoływana <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metody. Bezpośrednio z kodu użytkownika nie należy wywołać go.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa preferowaną metodę kodowania.</param>
        <param name="encoderFallback">Obiekt, który zawiera procedurę obsługi błędów, gdy znak nie może zostać zakodowana przy użyciu tego kodowania.</param>
        <param name="decoderFallback">Obiekt, który udostępnia procedurę obsługi błędów podczas sekwencja bajtów nie może zostać zdekodowany przy użyciu bieżącego kodowania.</param>
        <summary>Zwraca wartość skojarzoną z kodowania o określonej nazwie. Parametry określają procedurę obsługi błędów dla znaków, które nie może zostać zakodowany i sekwencje bajtów, które nie mogą zostać zdekodowane.</summary>
        <returns>Oznacza to kodowanie skojarzone z określoną nazwą, lub <see langword="null" /> Jeśli <see cref="T:System.Text.EncodingProvider" /> nie może zwracać zakodowany odpowiadający <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback` i `decoderFallback` parametry są obiekty, które definiują strategia rezerwowa używane w przypadku gdy kodera nie konwersji znaków do sekwencji bajtów lub dekodera nie można przekonwertować sekwencji bajtów na znak. Program .NET Framework zawiera następujące mechanizmy rezerwowego:  
  
-   Wyjątek rezerwowego. Jeśli `encoderFallback` argument jest wystąpieniem <xref:System.Text.EncoderExceptionFallback>, lub `decoderExceptionFallback` argument jest wystąpieniem <xref:System.Text.DecoderExceptionFallback>, metodę kodowania zgłasza wyjątek, jeśli nie może zostać zakodowana znaków i dekodowania metoda zgłasza wyjątek, jeśli bajt Nie można dekodować sekwencji.  
  
-   Zastąpienie rezerwowego. Jeśli `encoderFallback` argument jest wystąpieniem <xref:System.Text.EncoderReplacementFallback>, lub `decoderExceptionFallback` argument jest wystąpieniem <xref:System.Text.DecoderReplacementFallback>, kodowania i dekodowania metody Zastąp ciąg zastępujący dla znaków, które nie może zostać zakodowany i nie może być sekwencji bajtów odczytany. Jeśli obiekt rezerwowego zastąpienia są tworzone przez wywołanie konstruktora domyślnego, znakiem zastępującym jest "?". Jeśli wywołasz <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> lub <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora, można określić w ciągu zamiennym.  
  
-   Rezerwa najlepszego dopasowania. Może pochodzić z <xref:System.Text.EncoderFallback> lub <xref:System.Text.DecoderFallback> klasy, aby zaimplementować mechanizm wymiany najlepszego dopasowania.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ponieważ wywołania tej metody używają implementacji <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> metody, nie trzeba go zastąpić. Gdy kod użytkownika podejmie próbę pobrania, kodowania, wywołując <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metoda, metoda przekazuje <paramref name="codepage" /> identyfikator do każdego zarejestrowanego dostawcy kodowania, dopóki jeden zwróci zakodowany. Jeśli żadna zwraca prawidłową kodowanie <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metoda próbuje pobrać kodowanie pamięci podręcznej, którego identyfikator strony kodu jest <paramref name="codepage" />. W związku z tym jeśli chcesz przesłonić <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> przesłonięcia metody, powinna zwrócić <see langword="null" /> Jeśli <paramref name="codepage" /> nie jest identyfikatorem stronę kodu kodowania czy obsługujesz; nie należy nigdy nie zgłaszają wyjątek.</para>
        </block>
        <block subset="none" type="usage">
          <para>Ta metoda jest wywoływana <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metody. Bezpośrednio z kodu użytkownika nie należy wywołać go.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>