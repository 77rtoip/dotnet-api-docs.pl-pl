<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9a415f3bf769bf30bcf72c81f4be066edba8c809" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68393598" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dostarcza klasę bazową dla dostawcy kodowania, która dostarcza kodowania, które są niedostępne na określonej platformie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawca kodowania dostarcza kodowania, które nie są inaczej dostępne na określonej platformie docelowej.  
  
 .NET Framework na pulpicie systemu Windows obsługuje dużą liczbę kodowań znaków i stron kodowych. Aby uzyskać pełną listę kodowań dostępnych w .NET Framework na pulpicie systemu Windows, należy wywołać <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> metodę. Z drugiej strony program .NET Core domyślnie obsługuje tylko następujące kodowania:  
  
-   ASCII (strona kodowa 20127), która jest zwracana przez <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> właściwość.  
  
-   ISO-8859-1 (strona kodowa 28591).  
  
-   UTF-7 (strona kodowa 65000), która jest zwracana przez <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> właściwość.  
  
-   UTF-8 (strona kodowa 65001), która jest zwracana przez <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> właściwość.  
  
-   UTF-16 i UTF-16LE (strona kodowa 1200), która jest zwracana przez <xref:System.Text.Encoding.Unicode%2A> właściwość.  
  
-   UTF-16BE (strona kodowa 1201), która jest tworzona przez <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> wywołanie `true`konstruktora or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> lub z `bigEndian` wartością.  
  
-   UTF-32 i UTF-32LE (strona kodowa 12000), która jest zwracana przez <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> właściwość.  
  
-   UTF-32BE (strona kodowa 12001), która jest tworzona przez wywołanie <xref:System.Text.UTF32Encoding> konstruktora, który `bigEndian` ma parametr `true` i podanie wartości w wywołaniu metody.  
  
 Począwszy od .NET Framework 4,6, <xref:System.Text.EncodingProvider> jest klasą bazową, która sprawia, że w przeciwnym razie niedostępne są kodowania dla .NET Framework. Obejmuje to następujące czynności:  
  
1.  Zdefiniuj podklasę <xref:System.Text.EncodingProvider> , która zastępuje dwa przeciążenia <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> abstrakcyjne <xref:System.Text.EncodingProvider.GetEncoding%2A> i <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>. Te przeciążenia zwracają inne nieobsługiwane kodowanie przez identyfikator strony kodowej i według nazwy. Należy zauważyć, że można także wybrać opcję zwrócenia domyślnego kodowania, jeśli <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> Metoda jest wywoływana z argumentem równym 0.  
  
2.  Opcjonalnie możesz przesłonić wirtualne <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> i <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> metody. W większości przypadków nie jest to konieczne, ponieważ klasa bazowa zapewnia implementację domyślną.  
  
3.  Przekaż wystąpienie do metody, aby umożliwić dostęp do <xref:System.Text.EncodingProvider> kodowania dostarczonych przez obiekt dla środowiska uruchomieniowego języka wspólnego. <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> <xref:System.Text.EncodingProvider>  
  
4.  Wywołaj <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> Przeciążenie, aby pobrać kodowanie. Metoda wywoła odpowiednie <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> wywołanie, aby określić, czy może podać żądane kodowanie. <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>  
  
 Biblioteka klas .NET Framework zawiera jedną właściwość <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>statyczną, która <xref:System.Text.EncodingProvider> zwraca obiekt, który powoduje, że pełny zestaw kodowań dostępnych na pulpicie .NET Framework biblioteki klas jest dostępny dla [!INCLUDE[net_core](~/includes/net-core-md.md)] aplikacji. Ponadto można utworzyć pochodne z <xref:System.Text.EncodingProvider> klasy, aby udostępnić własne kodowanie.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/system.text.codepagesencodingprovider.instance(v=vs.110).aspx">Dostawcę CodePagesEncodingProvider. Instance — Właściwość</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.EncodingProvider" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kodowanie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">Identyfikator strony kodowej żądanego kodowania.</param>
        <summary>Zwraca kodowanie skojarzone z określonym identyfikatorem strony kodowej.</summary>
        <returns>Kodowanie, które jest skojarzone z określoną stroną kodową lub <see langword="null" /> <see cref="T:System.Text.EncodingProvider" /> nie może zwrócić prawidłowego kodowania, które odnosi się do <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>Uwagi dotyczące dziedziczenia

Metoda GetEncoding [(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) zostanie zastąpiona w celu zwrócenia kodowania lub kodowania obsługiwanego przez <xref:System.Text.EncodingProvider> podklasę. Gdy kod użytkownika próbuje pobrać kodowanie przez wywołanie metody GetEncoding [(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) , metoda przekazuje `codepage` identyfikator do każdego zarejestrowanego dostawcy kodowania do momentu, gdy jeden zwraca prawidłowe kodowanie. Jeśli żaden nie zwraca prawidłowego kodowania, Metoda [GetEncoding (Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) próbuje pobrać zakodowane kodowanie, którego identyfikator strony kodowej `codepage`to. W związku z tym, `codepage` Jeśli nie jest identyfikatorem strony kodowej obsługiwanego kodowania, metoda powinna zostać zwrócona `null`; nigdy nie powinna zgłosić wyjątku.
        
Należy zauważyć, że można również zwrócić domyślną stronę kodową, jeśli wartość `codepage` argumentu jest równa 0.

## <a name="notes-to-callers"></a>Uwagi dotyczące obiektów wywołujących
        
Ta metoda jest wywoływana przez metodę [Encoding. GetEncoding (Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) . Nie należy wywoływać go bezpośrednio z kodu użytkownika.

        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zastąp <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> metodę w celu zwrócenia kodowania lub kodowania obsługiwanego <see cref="T:System.Text.EncodingProvider" /> przez podklasę. Gdy kod użytkownika próbuje pobrać kodowanie przez wywołanie <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metody, Metoda <paramref name="codepage" /> przekazuje identyfikator do każdego zarejestrowanego dostawcy kodowania do momentu, gdy jeden zwraca prawidłowe kodowanie. Jeśli żaden nie zwraca prawidłowego kodowania, <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Metoda próbuje pobrać buforowane kodowanie, którego identyfikator strony kodowej to. <paramref name="codepage" /> W związku z tym, <paramref name="codepage" /> Jeśli nie jest identyfikatorem strony kodowej obsługiwanego kodowania, metoda powinna zostać zwrócona <see langword="null" />; nigdy nie powinna zgłosić wyjątku.</para></block>
        <block subset="none" type="usage"><para>Ta metoda jest wywoływana przez <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metodę. Nie należy wywoływać go bezpośrednio z kodu użytkownika.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa żądanego kodowania.</param>
        <summary>Zwraca kodowanie o podanej nazwie.</summary>
        <returns>Kodowanie, które jest skojarzone z określoną nazwą lub <see langword="null" /> <see cref="T:System.Text.EncodingProvider" /> Jeśli nie może zwrócić prawidłowego <paramref name="name" />kodowania, które odpowiada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>Uwagi dotyczące dziedziczenia 
                  
Metoda GetEncoding [(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) zastępuje kodowanie lub kodowanie obsługiwane przez <xref:System.Text.EncodingProvider> podklasę. Gdy kod użytkownika próbuje pobrać kodowanie przez wywołanie metody GetEncoding [(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) , metoda przekazuje `name` argument do każdego zarejestrowanego dostawcy kodowania do momentu, gdy jeden zwraca prawidłowe kodowanie. Jeśli żaden nie zwraca prawidłowego kodowania, Metoda [GetEncoding (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) próbuje pobrać zakodowane kodowanie, którego nazwa to `name`. W związku z tym, `name` Jeśli nie jest nazwą obsługiwanego kodowania, metoda powinna zwracać. `null` Jedynym przypadkiem, w którym metoda powinna zgłosić wyjątek, jest if `name`. `null`

## <a name="notes-to-callers"></a>Uwagi dotyczące obiektów wywołujących

Ta metoda jest wywoływana przez metodę [Encoding. GetEncoding (String)](<xref:System.Text.Encoding.GetEncoding(System.String)>) . Nie należy wywoływać go bezpośrednio z kodu użytkownika.
        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zastąp <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> metodę w celu zwrócenia kodowania lub kodowania obsługiwanego <see cref="T:System.Text.EncodingProvider" /> przez podklasę. Gdy kod użytkownika próbuje pobrać kodowanie przez wywołanie <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> metody, Metoda <paramref name="name" /> przekazuje argument do każdego zarejestrowanego dostawcy kodowania do momentu, gdy jeden zwraca prawidłowe kodowanie. Jeśli żaden nie zwraca prawidłowego kodowania, <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> Metoda próbuje pobrać zakodowane kodowanie, którego nazwa to. <paramref name="name" /> W związku z tym, <paramref name="name" /> Jeśli nie jest nazwą obsługiwanego kodowania, metoda powinna zwracać. <see langword="null" /> Jedynym przypadkiem, w którym metoda powinna zgłosić wyjątek, jest if <paramref name="name" />. <see langword="null" /></para></block>
        <block subset="none" type="usage"><para>Ta metoda jest wywoływana przez <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> metodę. Nie należy wywoływać go bezpośrednio z kodu użytkownika.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">Identyfikator strony kodowej żądanego kodowania.</param>
        <param name="encoderFallback">Obiekt, który dostarcza procedurę obsługi błędów, gdy nie można zakodować znaku przy użyciu tego kodowania.</param>
        <param name="decoderFallback">Obiekt, który dostarcza procedurę obsługi błędów, gdy nie można zdekodować sekwencji bajtów przy użyciu tego kodowania.</param>
        <summary>Zwraca kodowanie skojarzone z określonym identyfikatorem strony kodowej. Parametry określają procedurę obsługi błędów dla znaków, które nie mogą być zakodowane i sekwencje bajtów, których nie można zdekodować.</summary>
        <returns>Kodowanie, które jest skojarzone z określoną stroną kodową lub <see langword="null" /> <see cref="T:System.Text.EncodingProvider" /> nie może zwrócić prawidłowego kodowania, które odnosi się do <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `encoderFallback` i`decoderFallback` to obiekty, które definiują strategię rezerwową używaną w przypadku, gdy koder nie może skonwertować znaku na sekwencję bajtów lub dekoder nie może skonwertować sekwencji bajtów na znak. .NET Framework zapewnia następujące mechanizmy powrotu:  
  
-   Rezerwowy wyjątek. Jeśli argument jest <xref:System.Text.EncoderExceptionFallback>wystąpieniem lub `decoderExceptionFallback` argument jest wystąpieniem <xref:System.Text.DecoderExceptionFallback>, metoda kodowania zgłasza wyjątek, jeśli nie można zakodować znaków, a metoda dekodowania zgłasza wyjątek, jeśli bajt `encoderFallback` nie można zdekodować sekwencji.  
  
-   Alternatywa wymiany. Jeśli argument jest <xref:System.Text.EncoderReplacementFallback>wystąpieniem lub `decoderExceptionFallback` argument jest wystąpieniem <xref:System.Text.DecoderReplacementFallback>, metody kodowania i dekodowania zastępuje ciąg zamienny dla znaków, których nie można zakodować, a sekwencje bajtów nie mogą być `encoderFallback` zdekodowany. Jeśli utworzysz wystąpienie zastępczego obiektu rezerwowego przez wywołanie konstruktora bez parametrów, znak zastępczy jest "?". Jeśli wywołujesz <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora or <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> , możesz określić ciąg zastępczy.  
  
-   Najlepsze dopasowanie powrotu. Można utworzyć z <xref:System.Text.EncoderFallback> klasy lub <xref:System.Text.DecoderFallback> , aby zaimplementować optymalny mechanizm wymiany.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Ponieważ wywołania tej metody używają implementacji <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> metody, nie trzeba jej przesłonić. Gdy kod użytkownika próbuje pobrać kodowanie przez wywołanie <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metody, Metoda <paramref name="codepage" /> przekazuje identyfikator do każdego zarejestrowanego dostawcy kodowania do momentu, gdy jeden zwraca prawidłowe kodowanie. Jeśli żaden nie zwraca prawidłowego kodowania, <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Metoda próbuje pobrać buforowane kodowanie, którego identyfikator strony kodowej to. <paramref name="codepage" /> W związku z tym, jeśli zdecydujesz się zastąpić <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodę, przesłonięcie powinno zwrócić <see langword="null" /> , jeśli <paramref name="codepage" /> nie jest identyfikatorem strony kodowej obsługiwanego kodowania; nigdy nie powinien zgłosić wyjątku.</para></block>
        <block subset="none" type="usage"><para>Ta metoda jest wywoływana przez <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodę. Nie należy wywoływać go bezpośrednio z kodu użytkownika.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa preferowanego kodowania.</param>
        <param name="encoderFallback">Obiekt, który dostarcza procedurę obsługi błędów, gdy nie można zakodować znaku przy użyciu tego kodowania.</param>
        <param name="decoderFallback">Obiekt, który dostarcza procedurę obsługi błędów, gdy nie można zdekodować sekwencji bajtów z bieżącym kodowaniem.</param>
        <summary>Zwraca kodowanie skojarzone z określoną nazwą. Parametry określają procedurę obsługi błędów dla znaków, które nie mogą być zakodowane i sekwencje bajtów, których nie można zdekodować.</summary>
        <returns>Kodowanie, które jest skojarzone z określoną nazwą lub <see langword="null" /> <see cref="T:System.Text.EncodingProvider" /> Jeśli nie może zwrócić prawidłowego <paramref name="name" />kodowania, które odpowiada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `encoderFallback` i`decoderFallback` to obiekty, które definiują strategię rezerwową używaną w przypadku, gdy koder nie może skonwertować znaku na sekwencję bajtów lub dekoder nie może skonwertować sekwencji bajtów na znak. .NET Framework zapewnia następujące mechanizmy powrotu:  
  
-   Rezerwowy wyjątek. Jeśli argument jest <xref:System.Text.EncoderExceptionFallback>wystąpieniem lub `decoderExceptionFallback` argument jest wystąpieniem <xref:System.Text.DecoderExceptionFallback>, metoda kodowania zgłasza wyjątek, jeśli nie można zakodować znaków, a metoda dekodowania zgłasza wyjątek, jeśli bajt `encoderFallback` nie można zdekodować sekwencji.  
  
-   Alternatywa wymiany. Jeśli argument jest <xref:System.Text.EncoderReplacementFallback>wystąpieniem lub `decoderExceptionFallback` argument jest wystąpieniem <xref:System.Text.DecoderReplacementFallback>, metody kodowania i dekodowania zastępuje ciąg zamienny dla znaków, których nie można zakodować, a sekwencje bajtów nie mogą być `encoderFallback` zdekodowany. Jeśli utworzysz wystąpienie zastępczego obiektu rezerwowego przez wywołanie konstruktora bez parametrów, znak zastępczy jest "?". Jeśli wywołujesz <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora or <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> , możesz określić ciąg zastępczy.  
  
-   Najlepsze dopasowanie powrotu. Można utworzyć z <xref:System.Text.EncoderFallback> klasy lub <xref:System.Text.DecoderFallback> , aby zaimplementować optymalny mechanizm wymiany.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Ponieważ wywołania tej metody używają implementacji <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> metody, nie trzeba jej przesłonić. Gdy kod użytkownika próbuje pobrać kodowanie przez wywołanie <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metody, Metoda <paramref name="codepage" /> przekazuje identyfikator do każdego zarejestrowanego dostawcy kodowania do momentu, gdy jeden zwraca prawidłowe kodowanie. Jeśli żaden nie zwraca prawidłowego kodowania, <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Metoda próbuje pobrać buforowane kodowanie, którego identyfikator strony kodowej to. <paramref name="codepage" /> W związku z tym, jeśli zdecydujesz się zastąpić <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodę, przesłonięcie powinno zwrócić <see langword="null" /> , jeśli <paramref name="codepage" /> nie jest identyfikatorem strony kodowej obsługiwanego kodowania; nigdy nie powinien zgłosić wyjątku.</para></block>
        <block subset="none" type="usage"><para>Ta metoda jest wywoływana przez <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodę. Nie należy wywoływać go bezpośrednio z kodu użytkownika.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>