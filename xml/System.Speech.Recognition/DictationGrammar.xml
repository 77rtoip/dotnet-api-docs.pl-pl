<Type Name="DictationGrammar" FullName="System.Speech.Recognition.DictationGrammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a9cab1c5d410240a3a4cc63fcbf44fab1b4ea11" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36608548" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DictationGrammar : System.Speech.Recognition.Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DictationGrammar extends System.Speech.Recognition.Grammar" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.DictationGrammar" />
  <TypeSignature Language="VB.NET" Value="Public Class DictationGrammar&#xA;Inherits Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictationGrammar : System::Speech::Recognition::Grammar" />
  <TypeSignature Language="F#" Value="type DictationGrammar = class&#xA;    inherit Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.Grammar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje używany dla niezależnych dyktowania gramatyki rozpoznawania mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa udostępnia aplikacji z modelem wstępnie zdefiniowanych języka, który może przetworzyć danych wejściowych użytkownika rozmowy na tekst. Ta klasa obsługuje domyślnych i niestandardowych <xref:System.Speech.Recognition.DictationGrammar> obiektów. Aby uzyskać informacje o wybieraniu gramatyki dyktowania, zobacz <xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29> konstruktora.  
  
 Domyślnie <xref:System.Speech.Recognition.DictationGrammar> model języka jest bezpłatna kontekstu. Nie powoduje użycie słów i word, aby zidentyfikować i interpretować wejście audio. Aby dodać kontekstu do gramatyki dyktowania, użyj <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> metody.  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.DictationGrammar> obiekty nie obsługują <xref:System.Speech.Recognition.Grammar.Priority%2A> właściwości. <xref:System.Speech.Recognition.DictationGrammar> zgłasza wyjątek <xref:System.NotSupportedException> Jeśli <xref:System.Speech.Recognition.Grammar.Priority%2A> jest ustawiona.  
  
   
  
## Examples  
 Poniższy przykład tworzy trzy dyktowania gramatyki, dodaje je do nowego <xref:System.Speech.Recognition.SpeechRecognitionEngine> obiektu i zwraca nowy obiekt. Pierwszy gramatyki jest gramatyki dyktowania domyślne. Drugi gramatyki jest gramatyki dyktowania pisowni. Trzeci gramatyki jest gramatyki dyktowania domyślna, która zawiera frazę kontekstu. <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> Metoda jest używana do skojarzenia z gramatyki dyktowania frazy kontekstu, po załadowaniu do <xref:System.Speech.Recognition.SpeechRecognitionEngine> obiektu.  
  
```csharp  
  
private SpeechRecognitionEngine LoadDictationGrammars()  
{  
  
  // Create a default dictation grammar.  
  DictationGrammar defaultDictationGrammar = new DictationGrammar();  
  defaultDictationGrammar.Name = "default dictation";  
  defaultDictationGrammar.Enabled = true;  
  
  // Create the spelling dictation grammar.  
  DictationGrammar spellingDictationGrammar =  
    new DictationGrammar("grammar:dictation#spelling");  
  spellingDictationGrammar.Name = "spelling dictation";  
  spellingDictationGrammar.Enabled = true;  
  
  // Create the question dictation grammar.  
  DictationGrammar customDictationGrammar =  
    new DictationGrammar("grammar:dictation");  
  customDictationGrammar.Name = "question dictation";  
  customDictationGrammar.Enabled = true;  
  
  // Create a SpeechRecognitionEngine object and add the grammars to it.  
  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  
  recoEngine.LoadGrammar(defaultDictationGrammar);  
  recoEngine.LoadGrammar(spellingDictationGrammar);  
  recoEngine.LoadGrammar(customDictationGrammar);  
  
  // Add a context to customDictationGrammar.  
  customDictationGrammar.SetDictationContext("How do you", null);  
  
  return recoEngine;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.DictationGrammar" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.DictationGrammar" /> klasy dla gramatyki dyktowania domyślne zapewniany przez technologię mowy pulpitu systemu Windows.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gramatyka dyktowania domyślne emuluje praktyki dyktowania standardowe, w tym znaków interpunkcyjnych. Nie obsługuje pisownię wyrazu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar (string topic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string topic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topic As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar(System::String ^ topic);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.DictationGrammar : string -&gt; System.Speech.Recognition.DictationGrammar" Usage="new System.Speech.Recognition.DictationGrammar topic" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topic" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topic">XML zgodne uniwersalnych zasobów identyfikator (URI), który określa gramatyki dyktowania albo <c>gramatyka: dyktowanie</c> lub <c>gramatyka: dyktowanie #spelling</c>.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.DictationGrammar" /> gramatyki dyktowania określonej klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Platformy mowy używa specjalne składni identyfikatora URI w celu zdefiniowania dyktowania niestandardowe gramatyki. Wartość `grammar:dictation` wskazuje gramatyki dyktowania domyślne. Wartość `grammar:dictation#spelling` wskazuje gramatyki dyktowania pisowni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictationContext">
      <MemberSignature Language="C#" Value="public void SetDictationContext (string precedingText, string subsequentText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictationContext(string precedingText, string subsequentText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDictationContext (precedingText As String, subsequentText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDictationContext(System::String ^ precedingText, System::String ^ subsequentText);" />
      <MemberSignature Language="F#" Value="member this.SetDictationContext : string * string -&gt; unit" Usage="dictationGrammar.SetDictationContext (precedingText, subsequentText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingText" Type="System.String" />
        <Parameter Name="subsequentText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="precedingText">Tekst, który wskazuje początek kontekstu dyktowania.</param>
        <param name="subsequentText">Tekst, który wskazuje koniec kontekstu dyktowania.</param>
        <summary>Dodaje kontekst do gramatyki dyktowania, która została załadowana przez <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> lub <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie gramatyki dyktowania nie powoduje użycie słów i word, aby zidentyfikować i interpretować wejście audio. W przypadku kontekst jest dodawany do gramatyki dyktowania, korzysta z aparatu rozpoznawania `precedingText` i `subsequentText` do identyfikacji podczas interpretacji mowy jako dyktowania.  
  
> [!NOTE]
>  Gramatyka dyktowania muszą zostać załadowane przez <xref:System.Speech.Recognition.SpeechRecognizer> lub <xref:System.Speech.Recognition.SpeechRecognitionEngine> obiekt przed użyciem <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> można dodać kontekstu.  
  
 W poniższej tabeli opisano, jak aparat rozpoznawania ustalenie, kiedy należy używać gramatyki dyktowania używa dwóch parametrów.  
  
|`precedingText`|`subsequentText`|Opis|  
|---------------------|----------------------|-----------------|  
|Nie `null`|Nie `null`|Aparat rozpoznawania nawiasów fraz kandydujących możliwe na podstawie warunków.|  
|`null`|Nie `null`|Korzysta z aparatu rozpoznawania `subsequentText` na zakończenie dyktowania.|  
|Nie `null`|`null`|Korzysta z aparatu rozpoznawania `precedingText` uruchomić dyktowania.|  
|`null`|`null`|Aparat rozpoznawania nie używać kontekstu za pomocą dyktowania gramatyki.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
  </Members>
</Type>