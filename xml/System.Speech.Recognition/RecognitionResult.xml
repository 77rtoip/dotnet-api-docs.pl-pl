<Type Name="RecognitionResult" FullName="System.Speech.Recognition.RecognitionResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="65b6c7b5ff0bb1cf40dbb5784aedfc69d84e0a2e" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52346436" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RecognitionResult : System.Speech.Recognition.RecognizedPhrase, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit RecognitionResult extends System.Speech.Recognition.RecognizedPhrase implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognitionResult" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RecognitionResult&#xA;Inherits RecognizedPhrase&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognitionResult sealed : System::Speech::Recognition::RecognizedPhrase, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type RecognitionResult = class&#xA;    inherit RecognizedPhrase&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.RecognizedPhrase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3d8ce-101">Zawiera szczegółowe informacje dotyczące danych wejściowych, który został rozpoznany przez wystąpienia <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> lub <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3d8ce-101">Contains detailed information about input that was recognized by instances of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> or <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d8ce-102">Ta klasa jest pochodną <xref:System.Speech.Recognition.RecognizedPhrase> i udostępnia szczegółowe informacje na temat rozpoznawanie mowy, w tym następujące:</span><span class="sxs-lookup"><span data-stu-id="3d8ce-102">This class derives from <xref:System.Speech.Recognition.RecognizedPhrase> and provides detailed information about speech recognition, including the following:</span></span>  
  
-   <span data-ttu-id="3d8ce-103"><xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> Odwołania do właściwości <xref:System.Speech.Recognition.Grammar> , aparat rozpoznawania używany do identyfikowania mowy.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-103">The <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> property references the <xref:System.Speech.Recognition.Grammar> that the recognizer used to identify the speech.</span></span>  
  
-   <span data-ttu-id="3d8ce-104"><xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> Właściwość zawiera tekst znormalizowane frazy.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-104">The <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> property contains the normalized text for the phrase.</span></span> <span data-ttu-id="3d8ce-105">Aby uzyskać więcej informacji na temat normalizacji tekstu zobacz <xref:System.Speech.Recognition.ReplacementText>.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-105">For more information about text normalization, see <xref:System.Speech.Recognition.ReplacementText>.</span></span>  
  
-   <span data-ttu-id="3d8ce-106"><xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Semantycznego informacji zawartych w wyniku odwołuje się do właściwości.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-106">The <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property references the semantic information contained in the result.</span></span> <span data-ttu-id="3d8ce-107">Informacje semantyczne jest słownik nazw kluczy i skojarzone dane semantycznego.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-107">The semantic information is a dictionary of the key names and associated semantic data.</span></span>  
  
-   <span data-ttu-id="3d8ce-108"><xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Właściwość zawiera zbiór <xref:System.Speech.Recognition.RecognizedPhrase> obiekty reprezentujące interpretacji inne Release candidate wejścia audio.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-108">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property contains a collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent other candidate interpretations of the audio input.</span></span> <span data-ttu-id="3d8ce-109">Zobacz <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Aby uzyskać dodatkowe informacje.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-109">See <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> for additional information.</span></span>  
  
-   <span data-ttu-id="3d8ce-110"><xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Właściwość zawiera uporządkowany zbiór <xref:System.Speech.Recognition.RecognizedWordUnit> obiekty reprezentujące każdego rozpoznane słowa w danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-110">The <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property contains an ordered collection of <xref:System.Speech.Recognition.RecognizedWordUnit> objects that represent each recognized word in the input.</span></span> <span data-ttu-id="3d8ce-111">Każdy <xref:System.Speech.Recognition.RecognizedWordUnit> zawiera format wyświetlania, format leksykalne i informacje Wymowa dla odpowiedniego programu word.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-111">Each <xref:System.Speech.Recognition.RecognizedWordUnit> contains display format, lexical format, and pronunciation information for the corresponding word.</span></span>  
  
 <span data-ttu-id="3d8ce-112">Niektórych członków <xref:System.Speech.Recognition.SpeechRecognitionEngine>, <xref:System.Speech.Recognition.SpeechRecognizer>, i <xref:System.Speech.Recognition.Grammar> można wygenerować klas <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-112">Certain members of the <xref:System.Speech.Recognition.SpeechRecognitionEngine>, <xref:System.Speech.Recognition.SpeechRecognizer>, and <xref:System.Speech.Recognition.Grammar> classes can generate a <xref:System.Speech.Recognition.RecognitionResult>.</span></span> <span data-ttu-id="3d8ce-113">Aby uzyskać więcej informacji zobacz następujące metody i zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-113">For more information, see the following methods and events.</span></span>  
  
-   <span data-ttu-id="3d8ce-114">Metody i zdarzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine> klasy:</span><span class="sxs-lookup"><span data-stu-id="3d8ce-114">Methods and events of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class:</span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>  
  
-   <span data-ttu-id="3d8ce-115">Metody i zdarzenia <xref:System.Speech.Recognition.SpeechRecognizer> klasy:</span><span class="sxs-lookup"><span data-stu-id="3d8ce-115">Methods and events of the <xref:System.Speech.Recognition.SpeechRecognizer> class:</span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>  
  
-   <span data-ttu-id="3d8ce-116"><xref:System.Speech.Recognition.Grammar.SpeechRecognized> Zdarzenia <xref:System.Speech.Recognition.Grammar> klasy.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-116">The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event of the <xref:System.Speech.Recognition.Grammar> class.</span></span>  
  
 <span data-ttu-id="3d8ce-117">Aby uzyskać więcej informacji na temat rozpoznawania zdarzeń, zobacz [przy użyciu zdarzenia rozpoznawania mowy](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span><span class="sxs-lookup"><span data-stu-id="3d8ce-117">For more information about recognition events, see [Using Speech Recognition Events](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d8ce-118">W poniższym przykładzie pokazano program obsługi `SpeechRecognized` zdarzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine> lub <xref:System.Speech.Recognition.SpeechRecognizer> obiektu, a niektóre informacje na temat skojarzonego <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-118">The following example shows a handler for the `SpeechRecognized` event of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> or <xref:System.Speech.Recognition.SpeechRecognizer> object, and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Grammar({0}), {1}: {2}",  
    e.Result.Grammar.Name, e.Result.Audio.Duration, e.Result.Text);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
  </Docs>
  <Members>
    <Member MemberName="Alternates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Alternates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Alternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognitionResult.Alternates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Alternates As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Alternates { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Alternates : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;" Usage="System.Speech.Recognition.RecognitionResult.Alternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d8ce-119">Pobiera kolekcję możliwych dopasowań dla danych wejściowych do rozpoznawania mowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-119">Gets the collection of possible matches for input to the speech recognizer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d8ce-120">Kolekcja tylko do odczytu alternatyw rozpoznawania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-120">A read-only collection of the recognition alternates.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d8ce-121">Rozpoznawanie <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> są uporządkowane według wartości ich <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-121">Recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> are ordered by the values of their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> properties.</span></span> <span data-ttu-id="3d8ce-122">Wartość ufności danej frazy oznacza prawdopodobieństwo, że frazę odpowiada danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-122">The confidence value of a given phrase indicates the probability that the phrase matches the input.</span></span> <span data-ttu-id="3d8ce-123">Wyrażenie o najwyższej wartości zaufania jest frazę, która najprawdopodobniej dopasowuje dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-123">The phrase with the highest confidence value is the phrase that most likely matches the input.</span></span>  
  
 <span data-ttu-id="3d8ce-124">Każdy <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> wartość powinna być oceniana indywidualnie i bez odwołania do wartości ufności innych <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-124">Each <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> value should be evaluated individually and without reference to the confidence values of other <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>.</span></span> <span data-ttu-id="3d8ce-125">Właściwości, <xref:System.Speech.Recognition.RecognitionResult> dziedziczy <xref:System.Speech.Recognition.RecognizedPhrase> zawierają szczegółowe informacje o zwrot z najwyższym wynikiem zaufania.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-125">The properties that the <xref:System.Speech.Recognition.RecognitionResult> inherits from <xref:System.Speech.Recognition.RecognizedPhrase> provide detailed information about the phrase with the highest confidence score.</span></span>  
  
 <span data-ttu-id="3d8ce-126">Jednym z zastosowań <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> kolekcja jest do korekcji błędów automatycznych.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-126">One use for the <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> collection is for automated error correction.</span></span> <span data-ttu-id="3d8ce-127">Na przykład podczas projektowania okna dialogowego katalogu, aplikacja może monitować użytkownika do sprawdzania, jeśli aplikacja ma poprawne informacje ze zdarzenia rozpoznawania, na przykład "wyjaśnić, co znaczy"Anna"?" Jeśli użytkownik jest wyświetlany komunikat "nie", a następnie aplikacja może wysłać zapytania do użytkownika o zastępców, które miały wystarczająco wysokiego <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> wynik.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-127">For example, when designing a directory dialog, an application could prompt the user to check if the application has the correct information from a recognition event, as in, "Did you say 'Anna'?" If the user says "no", then the application could query the user about any alternates that had a high enough <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> score.</span></span>  
  
 <span data-ttu-id="3d8ce-128">Aby uzyskać więcej informacji na temat rozpoznawanie mowy i wykorzystania zastępców rozpoznawania zobacz [rozpoznawania mowy](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) i [przy użyciu zdarzenia rozpoznawania mowy](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span><span class="sxs-lookup"><span data-stu-id="3d8ce-128">For more information about speech recognition and the use of recognition alternates, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) and [Using Speech Recognition Events](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d8ce-129">W poniższym przykładzie pokazano program obsługi `SpeechRecognized` zdarzeń, a niektóre informacje na temat skojarzonego <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-129">The following example shows a handler for the `SpeechRecognized` event and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Grammar({0}), {1}: {2}",  
    e.Result.Grammar.Name, e.Result.Audio.Duration, e.Result.Text);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
      </Docs>
    </Member>
    <Member MemberName="Audio">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio Audio { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizedAudio Audio" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognitionResult.Audio" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Audio As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizedAudio ^ Audio { System::Speech::Recognition::RecognizedAudio ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Audio : System.Speech.Recognition.RecognizedAudio" Usage="System.Speech.Recognition.RecognitionResult.Audio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d8ce-130">Pobiera dźwięk skojarzonego z wynikiem rozpoznawania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-130">Gets the audio associated with the recognition result.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d8ce-131">Dźwięk skojarzonego z wynikiem rozpoznawanie lub <see langword="null" /> Jeśli aparat rozpoznawania generowany wynik po wywołaniu <see langword="EmulateRecognize" /> lub <see langword="EmulateRecognizeAsync" /> metody <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> lub <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-131">The audio associated with the recognition result or <see langword="null" /> if the recognizer generated the result from a call to the <see langword="EmulateRecognize" /> or <see langword="EmulateRecognizeAsync" /> methods of a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> or <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d8ce-132">Aby uzyskać części dźwięk, który jest skojarzony z określonego zakresu słów w wyniku rozpoznawania, użyj <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-132">To get a section of the audio that is associated with a specific range of words in the recognition result, use the <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d8ce-133">W poniższym przykładzie pokazano program obsługi **SpeechRecognized** zdarzeń, a niektóre informacje na temat skojarzonego <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-133">The following example shows a handler for the **SpeechRecognized** event and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
      Console.WriteLine("Audio for result:");  
      Console.WriteLine("  Start time: "+ e.Result.Audio.StartTime);  
      Console.WriteLine("  Duration: " + e.Result.Audio.Duration);  
      Console.WriteLine("  Format: " + e.Result.Audio.Format.EncodingFormat);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
        <altmember cref="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
      </Docs>
    </Member>
    <Member MemberName="GetAudioForWordRange">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio GetAudioForWordRange (System.Speech.Recognition.RecognizedWordUnit firstWord, System.Speech.Recognition.RecognizedWordUnit lastWord);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognizedAudio GetAudioForWordRange(class System.Speech.Recognition.RecognizedWordUnit firstWord, class System.Speech.Recognition.RecognizedWordUnit lastWord) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAudioForWordRange (firstWord As RecognizedWordUnit, lastWord As RecognizedWordUnit) As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognizedAudio ^ GetAudioForWordRange(System::Speech::Recognition::RecognizedWordUnit ^ firstWord, System::Speech::Recognition::RecognizedWordUnit ^ lastWord);" />
      <MemberSignature Language="F#" Value="member this.GetAudioForWordRange : System.Speech.Recognition.RecognizedWordUnit * System.Speech.Recognition.RecognizedWordUnit -&gt; System.Speech.Recognition.RecognizedAudio" Usage="recognitionResult.GetAudioForWordRange (firstWord, lastWord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstWord" Type="System.Speech.Recognition.RecognizedWordUnit" />
        <Parameter Name="lastWord" Type="System.Speech.Recognition.RecognizedWordUnit" />
      </Parameters>
      <Docs>
        <param name="firstWord">
          <span data-ttu-id="3d8ce-134">Pierwszy wyraz w zakresie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-134">The first word in the range.</span>
          </span>
        </param>
        <param name="lastWord">
          <span data-ttu-id="3d8ce-135">Ostatni wyraz w zakresie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-135">The last word in the range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d8ce-136">Pobiera część dźwięk, który jest skojarzony z określonego zakresu słów w wyniku rozpoznawania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-136">Gets a section of the audio that is associated with a specific range of words in the recognition result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d8ce-137">Część audio, związanych z zakresu programu word.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-137">The section of audio associated with the word range.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d8ce-138">Aby uzyskać pełną dźwięk skojarzonego z wynik rozpoznawania, użyj <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-138">To get the complete audio associated with the recognition result, use the <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d8ce-139">Poniższy przykład tworzy gramatyki do przyjmowania danych wejściowych nazwy i dołącza do niej obsługi dla `SpeechRecognized` zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-139">The following example creates a grammar to accept name input and attaches to it a handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="3d8ce-140">Gramatyka używa symbolu wieloznacznego elementu name frazy.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-140">The grammar uses a wildcard for the name element of the phrase.</span></span> <span data-ttu-id="3d8ce-141">Obsługa zdarzeń używa audio z symbolu wieloznacznego do tworzenia i Odtwórz wiersza pozdrowienia.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-141">The event handler uses the audio from the wildcard to create and play a greeting prompt.</span></span>  
  
```csharp  
  
private Grammar CreateNameInputGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey nameKey =  
    new SemanticResultKey("Name", wildcardBuilder);  
  
  GrammarBuilder nameBuilder =  
    new GrammarBuilder("My name is");  
  nameBuilder.Append(nameKey);  
  
  Grammar nameGrammar = new Grammar(nameBuilder);  
  nameGrammar.Name = "Name input";  
  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameInputHandler);  
  
  return nameGrammar;  
}  
  
// Handle the SpeechRecognized event for the name grammar.  
private void NameInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Name"))  
  {  
    RecognizedAudio nameAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    // Save the audio. Create a directory and file as necessary.  
    FileInfo fi = new FileInfo(@"C:\temp\temp.wav");  
    if (!fi.Directory.Exists)  
    {  
      fi.Directory.Create();  
    }  
    FileStream stream = new FileStream(fi.FullName, FileMode.Create);  
    nameAudio.WriteToWaveStream(stream);  
    stream.Close();  
  
    // Greet the person using the saved audio.  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(fi.FullName);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="3d8ce-142">Aparat rozpoznawania generowany wynik po wywołaniu <see langword="EmulateRecognize" /> lub <see langword="EmulateRecognizeAsync" /> metody <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> lub <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-142">The recognizer generated the result from a call to <see langword="EmulateRecognize" /> or <see langword="EmulateRecognizeAsync" /> methods of the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> or <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> objects.</span>
          </span>
        </exception>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Audio" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognitionResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="3d8ce-143">Obiekt używany do wypełniania danymi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-143">The object to populate with data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="3d8ce-144">Miejsce docelowe dla serializacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-144">The destination for the serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d8ce-145">Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> wystąpienia dane potrzebne do zserializowania obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d8ce-145">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d8ce-146">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-146">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3d8ce-147">Mogą być używane tylko wtedy, gdy <xref:System.Speech.Recognition.RecognitionResult> wystąpienia jest rzutowany na <xref:System.Runtime.Serialization.ISerializable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3d8ce-147">It can be used only when the <xref:System.Speech.Recognition.RecognitionResult> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
  </Members>
</Type>