<Type Name="SpeechRecognizedEventArgs" FullName="System.Speech.Recognition.SpeechRecognizedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa5b259a0d2e2ccfcc58b769644eeecb18968be8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37755866" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechRecognizedEventArgs : System.Speech.Recognition.RecognitionEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SpeechRecognizedEventArgs extends System.Speech.Recognition.RecognitionEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognizedEventArgs&#xA;Inherits RecognitionEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognizedEventArgs : System::Speech::Recognition::RecognitionEventArgs" />
  <TypeSignature Language="F#" Value="type SpeechRecognizedEventArgs = class&#xA;    inherit RecognitionEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.RecognitionEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8d8c3-101">Informacje dotyczące <see cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />, <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />, i <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" /> zdarzenia.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8d8c3-101">Provides information for the <see cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />, <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />, and <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" /> events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d8c3-102">A `SpeechRecognized` wydarzenie jest podniesione przez <xref:System.Speech.Recognition.Grammar>, <xref:System.Speech.Recognition.SpeechRecognizer> i <xref:System.Speech.Recognition.SpeechRecognitionEngine> klasy.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-102">A `SpeechRecognized` event is raised by the <xref:System.Speech.Recognition.Grammar>, <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.</span></span>  
  
 <span data-ttu-id="8d8c3-103">`SpeechRecognized` zdarzenia są generowane, gdy co najmniej jeden alternatyw z operacją rozpoznawania współczynnik ufności wystarczająco wysoka, należy zaakceptować.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-103">`SpeechRecognized` events are generated when one or more of the alternates from a recognition operation have a high enough confidence score to be accepted.</span></span> <span data-ttu-id="8d8c3-104">Aby uzyskać szczegółowe informacje na temat rozpoznawanym frazy, dostęp do <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> właściwości programu obsługi zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-104">To obtain detailed information about a recognized phrase, access the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the handler for the event.</span></span>  
  
 <span data-ttu-id="8d8c3-105">`SpeechRecognizedEventArgs` pochodzi od klasy <xref:System.Speech.Recognition.RecognitionEventArgs> klasy.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-105">`SpeechRecognizedEventArgs` derives from the <xref:System.Speech.Recognition.RecognitionEventArgs> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d8c3-106">Poniższy przykład jest częścią aplikację konsolową która ładuje gramatyki rozpoznawania mowy i pokazuje dane wejściowe mowy udostępniony aparat rozpoznawania, wyniki rozpoznawania skojarzone i powiązanych zdarzeń wywołanych przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-106">The following example is part of a console application that loads a speech recognition grammar and demonstrates speech input to the shared recognizer, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="8d8c3-107">Jeśli usługa rozpoznawania mowy Windows nie jest uruchomiona, następnie uruchamianie tej aplikacji będzie również uruchomić rozpoznawanie mowy Windows.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-107">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span>  
  
 <span data-ttu-id="8d8c3-108">Wypowiadane dane wejściowe, takie jak "Chcę się z Chicago do Warszawa" spowoduje wyzwolenie <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-108">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span> <span data-ttu-id="8d8c3-109">Nie wywoła wypowiedzi frazę "Podnoszenia me z Houston do Chicago" <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-109">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="8d8c3-110">W przykładzie użyto procedury obsługi dla <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> zdarzenie, aby wyświetlić pomyślnie rozpoznane fraz i semantyka zawierają one w konsoli.</span><span class="sxs-lookup"><span data-stu-id="8d8c3-110">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
    <altmember cref="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
  </Docs>
  <Members />
</Type>