<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6cbbe3909419d30ad3e43d1c50969f279a64d30" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37755970" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c3c05-101">Udostępnia niepodzielnego rozpoznawanym mowy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c3c05-101">Provides the atomic unit of recognized speech.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3c05-102">Wszystkie wyniki zwrócone przez aparat rozpoznawania są zbudowane z <xref:System.Speech.Recognition.RecognizedWordUnit> obiektów.</span><span class="sxs-lookup"><span data-stu-id="c3c05-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="c3c05-103">Tablica <xref:System.Speech.Recognition.RecognizedWordUnit> obiektów jest dostępny dla każdej operacji uznanie za pośrednictwem <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="c3c05-104">Oprócz zapewniania miary pewności rozpoznawania (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) <xref:System.Speech.Recognition.RecognizedWordUnit> wystąpienie zapewnia:</span><span class="sxs-lookup"><span data-stu-id="c3c05-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="c3c05-105">Znormalizowana i dokładne (lub leksykalne) tekstowa reprezentacja rozpoznawanym wyrazu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="c3c05-106">Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, i <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span><span class="sxs-lookup"><span data-stu-id="c3c05-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="c3c05-107">Informacje o Wymowa przy użyciu znaków z obsługiwanych alfabet fonetyczny, takich jak międzynarodowy alfabet fonetyczny (IPA) lub uniwersalnych telefonu Ustaw (UPS).</span><span class="sxs-lookup"><span data-stu-id="c3c05-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="c3c05-108">Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span><span class="sxs-lookup"><span data-stu-id="c3c05-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="c3c05-109">Formatowanie drukowania.</span><span class="sxs-lookup"><span data-stu-id="c3c05-109">Formatting for printing.</span></span> <span data-ttu-id="c3c05-110">Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.DisplayAttributes> klasy i jego <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="c3c05-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3c05-111">W poniższym przykładzie przedstawiono procedury narzędzie (`stringFromWordArray`) generujący ciągów.</span><span class="sxs-lookup"><span data-stu-id="c3c05-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="c3c05-112">Ciągi zawierają dane wyjściowe leksykalne (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), znormalizowane tekstu (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), lub fonetycznych znaków z międzynarodowy alfabet fonetyczny (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3c05-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="c3c05-113">Ciągi są formatowane przy użyciu <xref:System.Speech.Recognition.DisplayAttributes> obiektów uzyskany z <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> właściwość <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> z <xref:System.Speech.Recognition.RecognizedWordUnit> obiektów.</span><span class="sxs-lookup"><span data-stu-id="c3c05-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="c3c05-114"><xref:System.Speech.Recognition.RecognizedWordUnit> Obiekty są uzyskiwane z <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="c3c05-115">Znormalizowana tekst rozpoznany wyraz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-115">The normalized text for a recognized word.</span>
          </span>
          <span data-ttu-id="c3c05-116">Ta wartość może być <see langword="null" />, "", lub <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="confidence">
          <span data-ttu-id="c3c05-117">A <see langword="float" /> wartość od 0,0 do 1,0, wskazując pewności rozpoznawania wyrazów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span>
          </span>
        </param>
        <param name="pronunciation">
          <span data-ttu-id="c3c05-118">Wymowę rozpoznany wyraz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-118">The phonetic spelling of a recognized word.</span>
          </span>
          <span data-ttu-id="c3c05-119">Ta wartość może być <see langword="null" />, "", lub <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="lexicalForm">
          <span data-ttu-id="c3c05-120">Tekst unnormalized rozpoznany wyraz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-120">The unnormalized text for a recognized word.</span>
          </span>
          <span data-ttu-id="c3c05-121">Ten argument jest wymagany i może nie być <see langword="null" />, "", lub <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="displayAttributes">
          <span data-ttu-id="c3c05-122">Definiuje użytkowania światło, aby wyświetlić rozpoznane słowa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-122">Defines the use of white space to display recognized words.</span>
          </span>
        </param>
        <param name="audioPosition">
          <span data-ttu-id="c3c05-123">Lokalizacja rozpoznany wyraz w strumieniu wejściowym audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-123">The location of the recognized word in the audio input stream.</span>
          </span>
          <span data-ttu-id="c3c05-124">Ta wartość może być <see cref="F:System.TimeSpan.Zero" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span>
          </span>
        </param>
        <param name="audioDuration">
          <span data-ttu-id="c3c05-125">Długość audio wejściowych odpowiadający rozpoznany wyraz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-125">The length of the audio input corresponding to the recognized word.</span>
          </span>
          <span data-ttu-id="c3c05-126">Ta wartość może być <see cref="F:System.TimeSpan.Zero" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3c05-127">Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3c05-128">Jeśli `text` lub `pronunciation` są `null`, "", lub <xref:System.String.Empty> i <xref:System.Speech.Recognition.RecognizedWordUnit> jest używany w ramach operacji rozpoznawania aparat rozpoznawania wygeneruje odpowiednie wartości w żadnych danych wyjściowych <xref:System.Speech.Recognition.RecognizedWordUnit> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c3c05-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="c3c05-129">Bezpośrednie konstrukcja <xref:System.Speech.Recognition.RecognizedWordUnit> wystąpień jest zwykle używana tylko wtedy, gdy emulowanie uznanie operacji za pomocą <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metody <xref:System.Speech.Recognition.SpeechRecognitionEngine> klasy i <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> lub <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> metody <xref:System.Speech.Recognition.SpeechRecognizer> klasy.</span><span class="sxs-lookup"><span data-stu-id="c3c05-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="c3c05-130">W przypadku aplikacji rzeczywistych nie bezpośrednio utworzyć <xref:System.Speech.Recognition.RecognizedWordUnit>, zamiast go za pośrednictwem uzyskać <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3c05-131">Poniższy przykład jest to nieco contrived test emulacji, gdzie nowych słów są generowane na podstawie danych wejściowych i przekazane do emulatora, a następnie weryfikowany.</span><span class="sxs-lookup"><span data-stu-id="c3c05-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3c05-132">Pobiera wartość przypisaną przez aparat rozpoznawania, reprezentujący prawdopodobieństwo, że rozpoznany wyraz pasuje do podanego danych wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-132">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3c05-133">Względna miara pewności poprawne rozpoznawanie wyrazu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-133">A relative measure of the certainty of correct recognition for a word.</span>
          </span>
          <span data-ttu-id="c3c05-134">Wartość jest od 0,0 do 1,0, niski wysokiego zaufania, aby uzyskać odpowiednio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-134">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3c05-135">Oceny zaufania nie wskazują na bezwzględny prawdopodobieństwo, że wyrazu została rozpoznana poprawnie.</span><span class="sxs-lookup"><span data-stu-id="c3c05-135">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="c3c05-136">Zamiast tego oceny zaufania mechanizm umożliwiający porównanie względną dokładność wiele alternatyw rozpoznawania dla danego danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="c3c05-136">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="c3c05-137">To ułatwia, zwracając najdokładniejszych wynik rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c3c05-137">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="c3c05-138">Na przykład jeśli rozpoznany wyraz ma współczynnik ufności 0,8, to oznacza, że wyraz ma szansę 80% są poprawne dopasowania dla danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="c3c05-138">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="c3c05-139">Oznacza to, że wyraz jest bardziej prawdopodobne, jako prawidłowego dopasowania dla danych wejściowych niż inne wyniki, które mają zaufanie ocenia mniejsza niż 0,8.</span><span class="sxs-lookup"><span data-stu-id="c3c05-139">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="c3c05-140">Współczynnik ufności, samodzielnie nie ma sensu, chyba że masz alternatywnych wyników, aby porównać z tej samej operacji rozpoznawania albo z poprzednich rozpoznawań tych samych danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="c3c05-140">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="c3c05-141">Wartości zwracane przez <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> dotyczą każdego aparat rozpoznawania względnych i unikatowy.</span><span class="sxs-lookup"><span data-stu-id="c3c05-141">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="c3c05-142">Jest nie definicji porównanie wartości zaufania między dwoma aparatów rozpoznawania w różnych ani jak <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> indywidualnego <xref:System.Speech.Recognition.RecognizedWordUnit> Zdefiniuj obiekty <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> z <xref:System.Speech.Recognition.RecognizedPhrase>.</span><span class="sxs-lookup"><span data-stu-id="c3c05-142">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="c3c05-143">Aparat rozpoznawania mowy może przydzielić współczynnik ufności niski prowadzone danych wejściowych z różnych powodów, takie jak zakłócenia w tle, inarticulate mowy lub nieprzewidziane słowa lub sekwencji.</span><span class="sxs-lookup"><span data-stu-id="c3c05-143">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="c3c05-144">Jeśli aplikacja wykorzystuje <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia, możesz zmodyfikować poziom ufności, w których mowy danych wejściowych jest zaakceptowane lub odrzucone z jednym z <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c3c05-144">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="c3c05-145">Progi zaufania dla udostępnionego urządzenia rozpoznającego zarządzane przez <xref:System.Speech.Recognition.SpeechRecognizer>, są skojarzone z profilem użytkownika i przechowywane w rejestrze systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="c3c05-145">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="c3c05-146">Aplikacje nie powinien zapisać zmiany w rejestrze dla właściwości udostępniony aparat rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c3c05-146">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3c05-147">Pobiera formatowanie informacje używane do tworzenia tekst wyjściowy z bieżącej <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-147">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3c05-148">Określa użycie biały znak do wyświetlania zawartości <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-148">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3c05-149"><xref:System.Speech.Recognition.DisplayAttributes> Obiektu zwróconego przez <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> właściwość określa spacje początkowe i końcowe, które ma być używany z danego wyrazu, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="c3c05-149">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="c3c05-150">Aby uzyskać więcej informacji o sposobie używania tych informacji formatowania, zobacz <xref:System.Speech.Recognition.DisplayAttributes> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="c3c05-150">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3c05-151">W poniższym przykładzie przedstawiono procedury narzędzie (`stringFromWordArray`) generujący ciąg, który jest sformatowany w jeden z trzech sposobów: leksykalnie (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), jest to znormalizowane (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), lub fonetycznie (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3c05-151">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="c3c05-152">Tekst wyjściowy jest uzyskiwana z <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> właściwość <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> z <xref:System.Speech.Recognition.RecognizedWordUnit> obiektów, które są uzyskiwane z <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-152">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3c05-153">Pobiera tekst unnormalized rozpoznane słowa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-153">Gets the unnormalized text of a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3c05-154">Zwraca <see cref="T:System.String" /> zawierający tekst rozpoznany wyraz, bez żadnych normalizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-154">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3c05-155">W większości przypadków wartości zwracanych przez <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> i <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> są identyczne.</span><span class="sxs-lookup"><span data-stu-id="c3c05-155">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="c3c05-156">Jednak aparatów rozpoznawania może używać normalizacji mowy do zwrócenia bardziej przyjazny dla użytkownika lub kolokwialne Reprezentacja tekstowa wejścia audio.</span><span class="sxs-lookup"><span data-stu-id="c3c05-156">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="c3c05-157">Normalizacja mowy polega na użyciu konstrukcje specjalne i symbole, aby express mowy na piśmie.</span><span class="sxs-lookup"><span data-stu-id="c3c05-157">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="c3c05-158">Na przykład normalizacji można zastąpić wypowiadanych słów "dolar i centów szesnastu" "$1.16" w danych wyjściowych tekst.</span><span class="sxs-lookup"><span data-stu-id="c3c05-158">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3c05-159">W poniższym przykładzie przedstawiono procedury narzędzia, która generuje tekst w jednym z trzech formatów: leksykalne (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), jest to znormalizowane (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), a fonetyczne (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3c05-159">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="c3c05-160">Tekst wyjściowy jest uzyskiwana z <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> z <xref:System.Speech.Recognition.RecognizedWordUnit> obiektów, które są uzyskiwane z <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-160">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3c05-161">Pobiera wymowę rozpoznany wyraz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-161">Gets the phonetic spelling of a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3c05-162">Ciąg znaków z obsługiwanych alfabet fonetyczny, takich jak międzynarodowy alfabet fonetyczny (IPA) lub uniwersalnych telefonu Ustaw (UPS).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-162">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3c05-163">Zawartość <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> wskazać, które Wymowa aparatu rozpoznawania mowy, używany do dopasowywania wejście mowy do jednej z jej załadować <xref:System.Speech.Recognition.Grammar> obiektów.</span><span class="sxs-lookup"><span data-stu-id="c3c05-163">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c3c05-164">Wymowy może być zdefiniowana w wewnętrznych leksykonu aparatu rozpoznawania mowy w dokumencie leksykonu, który jest połączony z gramatyki rozpoznawania w załadowaną <xref:System.Speech.Recognition.Grammar> obiektu lub bezpośrednio w gramatyki rozpoznawania w załadowaną <xref:System.Speech.Recognition.Grammar> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-164">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="c3c05-165">Aparat rozpoznawania mowy może również utworzyć wymowy nietypowe słów, których wymowy nie są zdefiniowane w leksykonu lub gramatyki, do której aparatu rozpoznawania mowy obecnie ma dostęp.</span><span class="sxs-lookup"><span data-stu-id="c3c05-165">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="c3c05-166">Wiele czcionek Unicode z systemem Windows, takich jak nowe Courier obsługują wyświetlanie ciągów IPA.</span><span class="sxs-lookup"><span data-stu-id="c3c05-166">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="c3c05-167">Aby uzyskać więcej informacji, zobacz [międzynarodowy alfabet fonetyczny](http://go.microsoft.com/fwlink/?LinkId=58363).</span><span class="sxs-lookup"><span data-stu-id="c3c05-167">For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3c05-168">W poniższym przykładzie przedstawiono procedury narzędzia, która generuje ciąg z jednej z trzech możliwych formatów: leksykalne (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), jest to znormalizowane (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), a fonetyczne (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3c05-168">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="c3c05-169">Tekst wyjściowy jest uzyskiwana z <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> z <xref:System.Speech.Recognition.RecognizedWordUnit> obiektów, które są uzyskiwane z <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-169">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3c05-170">Pobiera tekst znormalizowane rozpoznany wyraz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-170">Gets the normalized text for a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3c05-171">Ciąg, który zawiera dane wyjściowe znormalizowane tekstu dla danego wejściowego programu word.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3c05-171">A string that contains the normalized text output for a given input word.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3c05-172">W większości przypadków wartości zwracanych przez <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> i <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> jest taka sama.</span><span class="sxs-lookup"><span data-stu-id="c3c05-172">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="c3c05-173">Jednak aparatów rozpoznawania może używać normalizacji mowy do zwrócenia bardziej przyjazny dla użytkownika lub kolokwialne Reprezentacja tekstowa wejścia audio.</span><span class="sxs-lookup"><span data-stu-id="c3c05-173">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="c3c05-174">Normalizacja mowy polega na użyciu konstrukcje specjalne i symbole, aby express mowy na piśmie.</span><span class="sxs-lookup"><span data-stu-id="c3c05-174">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="c3c05-175">Na przykład normalizacji można zastąpić wypowiadanych słów "dolar i centów szesnastu" "$1.16" w danych wyjściowych tekst.</span><span class="sxs-lookup"><span data-stu-id="c3c05-175">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3c05-176">W poniższym przykładzie przedstawiono procedury narzędzia, która generuje ciąg w jednym z trzech formatów: leksykalne (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), jest to znormalizowane (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), a fonetyczne (przy użyciu <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3c05-176">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="c3c05-177">Tekst wyjściowy jest uzyskiwana z <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> z <xref:System.Speech.Recognition.RecognizedWordUnit> obiektów, które są uzyskiwane z <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3c05-177">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>