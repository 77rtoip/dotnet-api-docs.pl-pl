<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="304dfdf5fb10cc1dc216630eb487874a85a53b41" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37611385" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <TypeSignature Language="F#" Value="type Grammar = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Obiekt środowiska uruchomieniowego, który odwołuje się do gramatykę rozpoznawania mowy, które aplikacja może użyć do definiowania ograniczeń rozpoznawania mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gramatyka rozpoznawania mowy to zbiór reguł i ograniczeń, które definiują, co aparatu rozpoznawania mowy rozpoznać jako istotnych danych wejściowych. Aby uzyskać więcej informacji na temat tworzenia i używania gramatyki rozpoznawania mowy, zobacz [rozpoznawania mowy](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919), [tworzenie XML przy użyciu Gramatyk](http://msdn.microsoft.com/library/2d799487-49c6-4cc9-b42f-f71cd3824fe1), [tworzenie gramatyki przy użyciu GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae), i [tworzenie gramatyki przy użyciu SrgsGrammar](http://msdn.microsoft.com/library/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906).  
  
 Po zredagujesz gramatyki, należy wbudować go do <xref:System.Speech.Recognition.Grammar> obiektu, że można załadować aparatu rozpoznawania mowy i że aplikacja może używać w czasie wykonywania do zarządzania rozpoznawanie mowy. Możesz użyć <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Konstruktor do tworzenia <xref:System.Speech.Recognition.Grammar> wystąpienia z <xref:System.Speech.Recognition.GrammarBuilder> lub <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu, lub z pliku lub <xref:System.IO.Stream> zawierający opis gramatyki w obsługiwanym formacie. Obsługiwane formaty są następujące:  
  
-   Pliki w formacie XML, które odpowiadają W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku cfg  
  
 Konstruktory gramatyki, które akceptują pliki gramatyki formatu XML w ich argumentów kompilacji gramatyki XML na format binarny, aby zoptymalizować je ładowanie i użycia przez aparat rozpoznawania mowy. Można zmniejszyć ilość czasu potrzebną do konstruowania <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki XML format przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Aplikacja rozpoznawania mowy, jako zarządzany przez <xref:System.Speech.Recognition.SpeechRecognizer> lub <xref:System.Speech.Recognition.SpeechRecognitionEngine> obiektów, można załadować wiele gramatyki rozpoznawania mowy. Aplikacja niezależnie włączyć lub wyłączyć poszczególne gramatyki, ustawiając <xref:System.Speech.Recognition.Grammar.Enabled%2A> właściwości i modyfikowanie zachowania uznanie za pośrednictwem <xref:System.Speech.Recognition.Grammar> właściwości, takie jak <xref:System.Speech.Recognition.Grammar.Priority%2A> i <xref:System.Speech.Recognition.Grammar.Weight%2A> właściwości.  
  
 Gramatyka <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenie jest zgłaszane w przypadku danych wejściowych odpowiada ścieżce za pośrednictwem gramatyki.  
  
> [!NOTE]
>  Jest najlepszym rozwiązaniem, aby sprawdzić, bezpieczeństwa ani identyfikator URI używany do tworzenia biblioteki DLL <xref:System.Speech.Recognition.Grammar> obiektu.  
>   
>  Windows i platform mowy zapewnienia bezpieczeństwa dla aplikacji konstruowanie <xref:System.Speech.Recognition.Grammar> wystąpienia z biblioteki DLL lub gramatyki, który obsługuje wykonywanie skryptów.  
>   
>  Skrypty w <xref:System.Speech.Recognition.Grammar> obiekty są zawsze uruchamiane tak, jakby pobrane ze strony sieci web w `Internet Zone`. Środowisko uruchomieniowe języka wspólnego (CLR) izoluje każdej biblioteki DLL ładowane do uzyskania definicji gramatyki.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki rozpoznawania mowy, zdefiniowanego w pliku XML (cities.xml). Zawartość pliku cities.xml pojawia się w następującym przykładzie XML.  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Konstruktor do tworzenia <xref:System.Speech.Recognition.Grammar> wystąpienia z <xref:System.Speech.Recognition.GrammarBuilder> lub <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu, lub z pliku lub <xref:System.IO.Stream> zawierający opis gramatyki w obsługiwanym formacie. Obsługiwane formaty są następujące:  
  
-   Pliki w formacie XML, które odpowiadają W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku cfg  
  
 Konstruktory gramatyki, które akceptują pliki gramatyki formatu XML w ich argumentów kompilacji gramatyki XML na format binarny, aby zoptymalizować je ładowanie i użycia przez aparat rozpoznawania mowy. Można zmniejszyć ilość czasu potrzebną do konstruowania <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki XML format przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Gramatyka rozpoznawania mowy, można zdefiniować reguły głównego. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa reguły, które do użycia jako regułę jego katalogu głównego, użyty Konstruktor, który akceptuje `ruleName` parametru.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa podstawowy identyfikator URI, można rozpoznać odwołania do reguły względną, użyj Konstruktora przyjmującego `baseUri` parametru.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opisu nie powinna definiować obsługi inicjowania, które wymaga argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które odpowiadają W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku cfg  
  
 Ten konstruktor kompiluje pliki gramatyki formatu XML na format binarny, aby zoptymalizować je ładowanie i użycia przez aparat rozpoznawania mowy. Można zmniejszyć ilość czasu potrzebną do konstruowania <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki XML format przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Gramatyka SRGS można zdefiniować reguły głównego. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiektów ze strumienia i określić reguły głównej, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> lub <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiektów ze strumienia i określić podstawowy identyfikator URI na potrzeby rozpoznawania względnych reguły odwołań, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawania mowy z lokalnego pliku SRGS (cities.xml) przy użyciu strumienia pliku. Zawartość pliku cities.xml pojawia się następujący przykład C#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> w tym artykule opisano gramatykę, który nie zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowy opis gramatyki lub opis gramatyki, który zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Wystąpienie <see cref="T:System.Speech.Recognition.GrammarBuilder" /> zawierający ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o korzystaniu z <xref:System.Speech.Recognition.GrammarBuilder> klasy, aby zdefiniować gramatyki, zobacz [tworzenie GrammarBuilder przy użyciu Gramatyk](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 Poniższy przykład tworzy użyciu gramatyka rozpoznawania mowy <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiektów. <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Konstruktor tworzy <xref:System.Speech.Recognition.Grammar> obiektu z <xref:System.Speech.Recognition.GrammarBuilder> obiektu.  
  
```csharp  
  
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar srgsDocument" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi, a <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie może zawierać do obsługi inicjowania, które wymaga argumentów.  
  
 Element <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> może mieć reguły głównego. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa reguły głównej, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> lub <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
 Aby utworzyć rozpoznawania mowy <xref:System.Speech.Recognition.Grammar> z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> i określić podstawowy identyfikator URI na potrzeby rozpoznawania względnych reguły odwołań, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawania mowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia, które są następnie używane do konstruowania <xref:System.Speech.Recognition.Grammar> obiektu.  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="srgsDocument" /> zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka pliku, który opisuje gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opisu nie powinna definiować obsługi inicjowania, które wymaga argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które odpowiadają W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku cfg  
  
 Ten konstruktor kompiluje pliki gramatyki formatu XML na format binarny, aby zoptymalizować je ładowanie i użycia przez aparat rozpoznawania mowy. Można zmniejszyć ilość czasu potrzebną do konstruowania <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki XML format przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Gramatyka SRGS można zdefiniować reguły głównego. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt z ciągu i określić reguły głównej, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa podstawowy identyfikator URI na potrzeby rozpoznawania względnych reguły odwołań, otwórz plik w strumienia pliku i używania <xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład ładuje gramatyki rozpoznawania mowy z lokalnego pliku SRGS w celu utworzenia <xref:System.Speech.Recognition.Grammar> obiektu. Zawartość pliku cities.xml pojawia się w przykładowym kodzie XML, znajdujący się na przykład C#.  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> zawiera pusty ciąg (""), lub plik w tym artykule opisano gramatykę, który nie zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Plik nie zawiera prawidłowy opis lub opis gramatyki, który zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.IO.Stream" /> i określa reguły głównego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opisu nie powinna definiować obsługi inicjowania, które wymaga argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które odpowiadają W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku cfg  
  
 Ten konstruktor kompiluje pliki gramatyki formatu XML na format binarny, aby zoptymalizować je ładowanie i użycia przez aparat rozpoznawania mowy. Można zmniejszyć ilość czasu potrzebną do konstruowania <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki XML format przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> ze strumienia i określić podstawowy identyfikator URI na potrzeby rozpoznawania względnych reguły odwołań, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład ładuje plik lokalny SRGS (cities.xml) ze strumienia pliku i określa reguły do użycia jako główny gramatyki. Zawartość pliku cities.xml pojawia się w przykładowym kodzie XML, znajdujący się na przykład C#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać lub nie jest publiczna, lub <paramref name="ruleName" /> jest <see langword="null" /> i opis gramatyki nie definiuje reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowy opis lub opis gramatyki, który zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> używać domyślnej reguły głównego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu i określa reguły głównego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi, a <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie może zawierać do obsługi inicjowania, które wymaga argumentów.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiektu z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> i określić podstawowy identyfikator URI na potrzeby rozpoznawania względnych reguły odwołań, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawania mowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia i określa reguły do użycia jako regułę głównego elementu gramatyki. Przykład tworzy <xref:System.Speech.Recognition.Grammar> obiektu z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia i ładuje je do aparatu rozpoznawania mowy.  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting aynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać lub nie jest publiczna, lub <paramref name="ruleName" /> jest <see langword="null" /> i <paramref name="srgsDocument" /> nie zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka pliku, który opisuje gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z pliku i określa reguły głównego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opisu nie powinna definiować obsługi inicjowania, które wymaga argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które odpowiadają W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku cfg  
  
 Ten konstruktor kompiluje pliki gramatyki formatu XML na format binarny, aby zoptymalizować je ładowanie i użycia przez aparat rozpoznawania mowy. Można zmniejszyć ilość czasu potrzebną do konstruowania <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki XML format przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> określająca podstawowy identyfikator URI na potrzeby rozpoznawania względnych reguły odwołań, otworzyć strumienia pliku dla pliku i użyć <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład ładuje plik lokalny SRGS (cities.xml) z pliku i określa reguły do użycia jako główny gramatyki. Zawartość pliku cities.xml pojawia się w przykładowym kodzie XML, znajdujący się na przykład C#.  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać lub nie jest publiczna, <paramref name="path" /> jest pustym ciągiem (""), lub <paramref name="ruleName" /> jest <see langword="null" /> i opis gramatyki nie definiuje reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Plik nie zawiera prawidłowy opis lub opis gramatyki, który zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> połączony obiekt wejścia/wyjścia (w tym pliki, zasoby programu Visual Studio i bibliotek DLL), który zawiera specyfikację gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="parameters">Parametry do przekazania do narzędzia obsługi inicjowania określonej przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub reguły głównego <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.IO.Stream" /> i określa reguły głównego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry procedury inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> jest podłączony do gramatyki,:-nie zawiera reguły określone w <paramref name="ruleName" /> -wymaga parametrów inicjowanie różne od tych określonych w <paramref name="parameters" /> — zawiera odwołanie względne reguła, której nie można rozwiązać przez domyślna podstawa <see cref="T:System.Uri" />reguły dla gramatyki</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia rozpoznania dowolnego odwołania do reguły względne w opisie gramatyki lub <see langword="null" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy ze strumienia, określa reguły głównego i definiuje podstawowych zasobów identyfikator URI (Uniform) można rozpoznać odwołania do reguły względnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opisu nie powinna definiować obsługi inicjowania, które wymaga argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które odpowiadają W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku cfg  
  
 Ten konstruktor kompiluje pliki gramatyki formatu XML na format binarny, aby zoptymalizować je ładowanie i użycia przez aparat rozpoznawania mowy. Można zmniejszyć ilość czasu potrzebną do konstruowania <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki XML format przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Nie można zweryfikować tego konstruktora `baseUri`. Jednak `LoadGrammar` metody <xref:System.Speech.Recognition.SpeechRecognitionEngine> lub <xref:System.Speech.Recognition.SpeechRecognizer> obiektu zgłasza wyjątek, jeśli nie można rozpoznać wszystkie odwołania do reguły w opisie gramatyki. Jeśli `baseUri` nie `null`, `LoadGrammar` metoda używa identyfikatora URI do rozpoznawania odwołań do reguły, które w przeciwnym razie nie można rozpoznać. Jeśli `baseUri` reprezentuje plik, a następnie `LoadGrammar` używa zarówno wyznaczonym plików i katalogów plików podczas próby rozpoznania odwołania do reguły względnych.  
  
   
  
## Examples  
 Poniższy przykład ładuje plik lokalny SRGS (shuttle.xml) ze strumienia pliku. Plik zawiera odwołanie względne reguły reguły w pliku cities.xml i określa podstawowy identyfikator URI do użycia rozpoznać odwołania do reguły. Zawartość plików shuttle.xml i cities.xml pojawia się w przykładach XML przykład C#.  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać lub nie jest publiczna, lub <paramref name="ruleName" /> jest <see langword="null" /> i opis gramatyki nie definiuje reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowy opis lub opis gramatyki, który zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> zawierający ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="parameters">Parametry do przekazania do narzędzia obsługi inicjowania określonej przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub reguły głównego <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z wystąpienia <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />i określa nazwę reguły jako punkt wejścia do gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry procedury inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Dowolny z parametrów zawiera nieprawidłową wartość.  <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> Określony przez <paramref name="srgsDocument" /> nie zawiera reguły, określone przez <paramref name="ruleName" />.  -Zawartość parametry tablicy nie są zgodne z argumentów zasady inicjowania obsługi.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> używać domyślnej reguły głównego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia rozpoznania dowolnego odwołania do reguły względne w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, lub <see langword="null" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu określa reguły głównego i definiuje podstawowych zasobów identyfikator URI (Uniform) można rozpoznać odwołania do reguły względnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi, a <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie może zawierać do obsługi inicjowania, które wymaga argumentów.  
  
 Nie można zweryfikować tego konstruktora `baseUri`. Jednak `LoadGrammar` metody <xref:System.Speech.Recognition.SpeechRecognitionEngine> lub <xref:System.Speech.Recognition.SpeechRecognizer> obiektu zgłasza wyjątek, jeśli nie można rozpoznać wszystkie odwołania do reguły w opisie gramatyki. Jeśli `baseUri` nie `null`, `LoadGrammar` metoda używa identyfikatora URI do rozpoznawania odwołań do reguły, które w przeciwnym razie nie można rozpoznać. Jeśli `baseUri` reprezentuje plik, a następnie `LoadGrammar` metoda używa zarówno wyznaczonym plików i katalogów tego pliku, podczas próby rozpoznania odwołania do reguły względnych.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawania mowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> zawiera odwołanie reguły względna do pliku cities.xml i określa identyfikator URI do użycia rozpoznania odwołania reguły. Zawartość pliku cities.xml pojawia się w przykładowym kodzie XML, znajdujący się na przykład C#.  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać lub nie jest publiczna, lub <paramref name="ruleName" /> jest <see langword="null" /> i <paramref name="srgsDocument" /> nie zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do pliku, w tym plikami dll, zawierający specyfikacji gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="parameters">Parametry do przekazania do narzędzia obsługi inicjowania określonej przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub reguły głównego <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z pliku, który zawiera definicję gramatyki i określa nazwę reguły jako punkt wejścia do gramatyki...</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry procedury inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Dowolny z parametrów zawiera nieprawidłową wartość.  — W pliku określonym przez <paramref name="path" /> nie zawiera nieprawidłowy gramatyki lub reguły określone w <paramref name="ruleName" />.  -Zawartość parametry tablicy nie są zgodne z argumentów zasady inicjowania obsługi.  Gramatyka ma odwołanie do względne reguły, której nie można rozwiązać przez domyślna podstawa <see cref="T:System.Uri" /> reguły dla gramatyki.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> połączony obiekt wejścia/wyjścia (w tym pliki, zasoby programu Visual Studio i bibliotek DLL), który zawiera specyfikację gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia rozpoznania dowolnego odwołania do reguły względne w opisie gramatyki lub <see langword="null" />.</param>
        <param name="parameters">Parametry do przekazania do narzędzia obsługi inicjowania określonej przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub reguły głównego <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.IO.Stream" /> i Określa regułę głównego i podstawowy identyfikator URI do rozpoznawania względnych odwołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry procedury inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Dowolny z parametrów zawiera nieprawidłową wartość.  <paramref name="stream" /> Jest podłączony do gramatyki, który nie zawiera reguły, określone przez <paramref name="ruleName" />.  -Zawartość parametry tablicy nie są zgodne z argumentów zasady inicjowania obsługi.  Gramatyka zawiera odwołanie względne reguły, której nie można rozwiązać przez domyślna podstawa <see cref="T:System.Uri" /> reguły gramatyki lub podany przez identyfikator URI <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> zawierający ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatykę rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia rozpoznania dowolnego odwołania do reguły względne w opisie gramatyki lub <see langword="null" />.</param>
        <param name="parameters">Parametry do przekazania do narzędzia obsługi inicjowania określonej przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub reguły głównego <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Ten parametr może mieć wartości null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z wystąpienia <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />i określa nazwę reguła ma być punktem wejścia do podstawowego identyfikatora URI do rozpoznawania względnych odwołań i gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry procedury inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Dowolny z parametrów zawiera nieprawidłową wartość.  <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> Określony przez <paramref name="srgsDocument" /> nie zawiera reguły określone w <paramref name="ruleName" />.  -Zawartość parametry tablicy nie są zgodne z argumentów zasady inicjowania obsługi.  Gramatyka ma odwołanie do względne reguły, której nie można rozwiązać przez domyślna podstawa <see cref="T:System.Uri" /> reguły gramatyki lub podany przez identyfikator URI <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Speech.Recognition.Grammar.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która kontroluje, czy <see cref="T:System.Speech.Recognition.Grammar" /> rozpoznawania mowy można przeprowadzić rozpoznawania.</summary>
        <value>
          <see langword="Enabled" /> Właściwość zwraca <see langword="true" /> Jeśli rozpoznawania mowy, można wykonać rozpoznawanie przy użyciu gramatyka rozpoznawania mowy; w przeciwnym razie właściwość ta zwraca <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie <xref:System.Speech.Recognition.Grammar> mogą włączać lub wyłączać niezależnie od ładowany przez aparat rozpoznawania mowy.  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje na temat <xref:System.Speech.Recognition.Grammar> obiekt [konsoli](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStg : bool" Usage="System.Speech.Recognition.Grammar.IsStg" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy gramatyki zdecydowanie jest wpisane.</summary>
        <value>
          <see langword="IsStg" /> Właściwość zwraca <see langword="true" /> Jeśli gramatyki jest silnie typizowaną; w przeciwnym razie właściwość ta zwraca <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Silnie typizowanego <xref:System.Speech.Recognition.Grammar> obiektu (`IsStg` jest równa `true`) może zwrócić wyniki silnie typizowane (obiektów, a nie nieprzetworzony tekst) do aplikacji klienta. Na przykład może zwrócić gramatyki silnie typizowane <xref:System.DateTime> obiekty zamiast nieprzetworzone dane wejściowe rozpoznane.  
  
 Możesz zaimplementować silnie typizowane gramatyki, dołączając kod do reguły gramatyki. Jak aparat rozpoznawania przetwarza danej reguły, pobierania jako danych wejściowych aktualne wyniki częściowe, skojarzony kod jest wykonywany i informacji tekstowych staje się zaawansowanych typów obiektów. Dzięki temu klientowi łatwiej korzystać rozszerzonego sprawdzania semantyczne, obsługa wielu kultur i logika gramatyka wewnętrznego.  
  
 Wystąpienia elementu silnie typizowane <xref:System.Speech.Recognition.Grammar> obiekty są zazwyczaj uzyskiwane z zasobów w zestawie jako <xref:System.Type> z środowiska uruchomieniowego języka wspólnego (CLR). Zlokalizowane typy używane do włączenia obsługi różnych języków przedstawiono przykłady takich <xref:System.Speech.Recognition.Grammar> obiektów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Silnie typizowane gramatyki dziedziczenie z <see cref="T:System.Speech.Recognition.Grammar" /> trzeba zastąpić domyślne zachowanie <see langword="IsStg" />, które ma zwrócić <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Loaded : bool" Usage="System.Speech.Recognition.Grammar.Loaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy <see cref="T:System.Speech.Recognition.Grammar" /> został załadowany przez aparat rozpoznawania mowy.</summary>
        <value>
          <see langword="Loaded" /> Właściwość zwraca <see langword="true" /> Jeśli gramatyki rozpoznawania mowy odwołania jest aktualnie załadowana w aparatu rozpoznawania mowy; w przeciwnym razie właściwość ta zwraca <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Speech.Recognition.Grammar> został załadowany, wartości <xref:System.Speech.Recognition.Grammar.Weight%2A>, i <xref:System.Speech.Recognition.Grammar.Priority%2A> nie można jej zmienić.  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje na temat <xref:System.Speech.Recognition.Grammar> obiekt [konsoli](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberSignature Language="F#" Value="static member LoadLocalizedGrammarFromType : Type * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType (type, onInitParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">W zestawie <see cref="T:System.Type" /> obiektu na podstawie <see cref="T:System.Speech.Recognition.Grammar" />.</param>
        <param name="onInitParameters">Na podstawie parametrów, które zostaną przekazane do metody inicjowania localizedobject <see cref="T:System.Speech.Recognition.Grammar" />. Parametr może mieć wartość null.</param>
        <summary>
          <see langword="LoadLocalizedGrammarFromType" /> Metoda zwraca zlokalizowany wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> pochodną obiektu <see cref="T:System.Type" />.</summary>
        <returns>
          <see langword="LoadLocalizedGrammarFromType" /> Metoda zwraca prawidłowy obiekt na podstawie <see cref="T:System.Speech.Recognition.Grammar" />, lub <see langword="null" /> , jeśli został błąd.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zlokalizowane gramatyki otrzymany wraz z `LoadLocalizedGrammarFromType` są zazwyczaj silnie typizowaną (zobacz <xref:System.Speech.Recognition.Grammar.IsStg%2A> uzyskać więcej informacji dotyczących gramatyki silnie typizowane). Jeśli `onInitParameters` jest odwołaniem do wartości null (Nothing w języku Visual Basic) zlokalizowany gramatyki powinny mieć żadnej metody inicjowania lub metody, która nie przyjmuje żadnych argumentów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Speech.Recognition.Grammar.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>
          <see langword="Name" /> Właściwość zwraca nazwę <see cref="T:System.Speech.Recognition.Grammar" /> obiektu. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy dwie <xref:System.Speech.Recognition.Grammar> obiektów: jeden dla cyfr, a drugi dla ułamków. Obiekty gramatyki są przypisane nazwy i względnych wag i priorytety i ładowane przez aparat rozpoznawania mowy w procesie. `CreateDigitsGrammar`, `CreateFractionsGrammar`, I `recognizer_SpeechRecognized` metod nie są wyświetlane w tym miejscu.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Speech.Recognition.Grammar.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość priorytetu <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>
          <see langword="Priority" /> Właściwość zwraca wartość całkowitą, która reprezentuje względny priorytet określonego <see cref="T:System.Speech.Recognition.Grammar" />. Zakres obejmuje adresy od -128 do 127 znaków włącznie. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Priority` Właściwość jest używany do wybierania gramatyki, gdy więcej niż jeden gramatyki dadzą wynik rozpoznawania identyczne. Jeśli rozpoznawania mowy ma więcej niż jeden mowy rozpoznawania gramatyki załadowane i włączone spełniającej danych wejściowych, i dopasowanie najlepszych wyników z aparatu rozpoznawania, wówczas aparat rozpoznawania używa gramatyki, który ma największe `Priority`. Jeśli gramatyki, które tworzą wynik rozpoznawania identyczne również mają taką samą `Priority` wartości, a następnie gramatyki, która używa aparatu rozpoznawania jest niezdefiniowana.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwie <xref:System.Speech.Recognition.Grammar> obiektów: jeden dla cyfr, a drugi dla ułamków. <xref:System.Speech.Recognition.Grammar> Obiekty są przypisane nazwy i względnych wag i priorytety i ładowany przez aparat rozpoznawania mowy w procesie. `CreateDigitsGrammar`, `CreateFractionsGrammar`, I `recognizer_SpeechRecognized` metod nie są wyświetlane w tym miejscu.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResourceName : string with get, set" Usage="System.Speech.Recognition.Grammar.ResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość o nazwie zasób binarny, który został użyty do załadowania bieżącego <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>
          <see langword="ResourceName" /> Właściwość zwraca nazwę zasobu binarnego, z którym posługują się gramatyki silnie typizowane <see cref="T:System.Speech.Recognition.Grammar" />, został załadowany.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RuleName : string" Usage="System.Speech.Recognition.Grammar.RuleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę elementu głównego reguły lub wpis punktu <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>
          <see langword="RuleName" /> Właściwość zwraca identyfikator reguły głównego gramatycznych rozpoznawania mowy do którego istnieje odwołanie. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do konstruowania <xref:System.Speech.Recognition.Grammar> obiektu i ustaw nazwę reguły jego katalogu głównego, użyj jednej z <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktorów, które przyjmuje `ruleName` parametru.  
  
 Jeśli reguły głównego <xref:System.Speech.Recognition.Grammar> nie ma nazwy, właściwości zwracają `null`.  
  
 Reguły głównego <xref:System.Speech.Recognition.Grammar> wystąpień skonstruowany na podstawie <xref:System.Speech.Recognition.GrammarBuilder> obiektów zwykle nie mieć nazwy, dlatego <xref:System.Speech.Recognition.Grammar.RuleName%2A> zwraca `null`.  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje na temat <xref:System.Speech.Recognition.Grammar> obiekt [konsoli](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wywoływane, gdy aparat rozpoznawania mowy wykonuje rozpoznawanie przy użyciu <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat rozpoznawania mowy wywołuje również `SpeechRecognized` zdarzenie, kiedy rozpoznaje dane wejściowe. <xref:System.Speech.Recognition.Grammar> Obiektu <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenie jest wywoływane przed aparatu rozpoznawania mowy `SpeechRecognized` zdarzeń. Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, i <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> zdarzenia.  
  
 Wszystkie zadania, które są specyficzne dla danego gramatyki, zawsze powinno zostać obsłużone przez programy obsługi dla <xref:System.Speech.Recognition.Grammar> obiektu <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład pokazuje użycie programu obsługi zdarzeń dla <xref:System.Speech.Recognition.Grammar> obiektu <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzeń. Wyświetla wyniki rozpoznawania [konsoli](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.StgInit : obj[] -&gt; unit" Usage="grammar.StgInit parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">Parametry do przekazania do zainicjowania gramatyki silnie typizowane. Ten parametr może mieć wartości null.</param>
        <summary>
          <see langword="StgInit" /> Metoda inicjuje gramatyki silnie typizowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Silnie typizowanego <xref:System.Speech.Recognition.Grammar> obiektu (`IsStg` jest równa `true`) może zwrócić wyniki silnie typizowane (obiektów, a nie nieprzetworzony tekst) do aplikacji klienta. Na przykład może zwrócić gramatyki silnie typizowane <xref:System.DateTime> obiekty zamiast nieprzetworzone dane wejściowe rozpoznane.  
  
 Możesz zaimplementować silnie typizowane gramatyki, dołączając kod do reguły gramatyki. Jak aparat rozpoznawania przetwarza danej reguły, pobierania jako danych wejściowych aktualne wyniki częściowe, skojarzony kod jest wykonywany i informacji tekstowych staje się zaawansowanych typów obiektów. Dzięki temu klientowi łatwiej korzystać rozszerzonego sprawdzania semantyczne, obsługa wielu kultur i logika gramatyka wewnętrznego.  
  
 Wystąpienia elementu silnie typizowane <xref:System.Speech.Recognition.Grammar> obiekty są zazwyczaj uzyskiwane z zasobów w zestawie jako <xref:System.Type> z środowiska uruchomieniowego języka wspólnego (CLR). Zlokalizowane typy używane do włączenia obsługi różnych języków przedstawiono przykłady takich <xref:System.Speech.Recognition.Grammar> obiektów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli gramatyki silnie typizowane wymaga inicjowania <see langword="StgInit" /> powinna być wywoływana w konstruktorze lub metodę inicjalizacji.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Weight : single with get, set" Usage="System.Speech.Recognition.Grammar.Weight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wagi <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>
          <see langword="Weight" /> Właściwość zwraca zmiennoprzecinkowa wartość wskazującą względną wagę, które wystąpienie aparatu rozpoznawania należy przypisać gramatyki podczas przetwarzania mowy. Zakres obejmuje adresy od 0.0 do 1.0 włącznie. Wartość domyślna to 1.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ze względu na złożoność Użycie aparatu rozpoznawania **wagi**, jego wpływ na wydajność określonego gramatyki nie jest za bezpośrednio przewidywalne, jak w przypadku <xref:System.Speech.Recognition.Grammar.Priority%2A>.  
  
 Rozpoznawanie mowy jest ważony systemu. Ocenia wszystkie ścieżki możliwe rozpoznawania oparte na kombinacji wagę gramatyki, wagi zdefiniowane dla alternatywy w gramatyce i prawdopodobieństwa zdefiniowane przez modele mowy. Aparat rozpoznawania mowy używa kombinacji tych wagi i prawdopodobieństwa do rangi potencjalne rozpoznawań alternatywne. Gramatiky wyższe wagi przyczyni się więcej na temat klasyfikacji alternatywy rozpoznawania niż gramatiky niższe wagi.  
  
 Efekt <xref:System.Speech.Recognition.Grammar.Weight%2A> właściwość rozpoznawania mowy jest zależna od implementacji aparat rozpoznawania. Mimo że <xref:System.Speech.Recognition.Grammar.Weight%2A> właściwości mogą być używane w celu dostrojenia dokładności rozpoznawania mowy w ramach aplikacji, powinno być używane tylko po kontrolowane badania diagnostyczne rozpoznawanie konkretnego środowiska i pełne informacje na temat aparatu rozpoznawania w obszarze użycie.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwie <xref:System.Speech.Recognition.Grammar> obiektów: jeden dla cyfr, a drugi dla ułamków. <xref:System.Speech.Recognition.Grammar> Obiekty są przypisane nazwy i względnych wag i priorytety i ładowany przez aparat rozpoznawania mowy w procesie. `CreateDigitsGrammar`, `CreateFractionsGrammar`, I `recognizer_SpeechRecognized` metod nie są wyświetlane w tym miejscu.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>