<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4f37b1d06489a307c18e0ee456bb1ba25c871fbd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69145918" /></Metadata><TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <TypeSignature Language="F#" Value="type Grammar = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Obiekt środowiska uruchomieniowego, który odwołuje się do gramatyki rozpoznawania mowy, której aplikacja może użyć do zdefiniowania ograniczeń rozpoznawania mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gramatyka rozpoznawania mowy to zestaw reguł lub ograniczeń, które definiują, co aparat rozpoznawania mowy może rozpoznać jako zrozumiałe dane wejściowe. Aby uzyskać więcej informacji na temat tworzenia i używania gramatyki rozpoznawania mowy, zobacz [rozpoznawanie mowy](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)), [Tworzenie gramatyki przy użyciu kodu XML](https://msdn.microsoft.com/library/2d799487-49c6-4cc9-b42f-f71cd3824fe1), [Tworzenie gramatyki przy użyciu GrammarBuilder](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)i [Tworzenie gramatyki przy użyciu SrgsGrammar](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)).  
  
 Po utworzeniu gramatyki należy skompilować ją do <xref:System.Speech.Recognition.Grammar> obiektu, który aparat rozpoznawania mowy może załadować i który może być używany przez aplikację w czasie wykonywania w celu zarządzania rozpoznawaniem mowy. <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Można użyć <xref:System.IO.Stream> konstruktora, <xref:System.Speech.Recognition.Grammar> aby <xref:System.Speech.Recognition.GrammarBuilder> utworzyć<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienie z lub obiektu lub z pliku lub zawierającego opis gramatyki w obsługiwanym formacie. Obsługiwane są następujące formaty:  
  
-   Pliki w formacie XML, które są zgodne ze [specyfikacją SRGS (devisioning Speech Recognition) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem. cfg  
  
 Konstruktory gramatyki, które akceptują pliki gramatyki w formacie XML w ich argumentach kompilują gramatyki XML w formacie binarnym, aby zoptymalizować je do ładowania i użycia przez aparat rozpoznawania mowy. Można skrócić czas wymagany do skonstruowania <xref:System.Speech.Recognition.Grammar> obiektu na podstawie gramatyki w formacie XML przez skompilowanie gramatyki z góry przy użyciu jednej <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> z metod.  
  
 Aparat rozpoznawania mowy aplikacji, zarządzany przez <xref:System.Speech.Recognition.SpeechRecognizer> obiekt lub <xref:System.Speech.Recognition.SpeechRecognitionEngine> , może ładować wiele gramatyki rozpoznawania mowy. Aplikacja może niezależnie włączać lub wyłączać poszczególne gramatyki, <xref:System.Speech.Recognition.Grammar.Enabled%2A> ustawiając właściwość i modyfikując zachowanie rozpoznawania przy <xref:System.Speech.Recognition.Grammar> użyciu <xref:System.Speech.Recognition.Grammar.Priority%2A> właściwości, takich jak właściwości <xref:System.Speech.Recognition.Grammar.Weight%2A> i.  
  
 <xref:System.Speech.Recognition.Grammar.SpeechRecognized> Zdarzenie gramatyczne jest wywoływane, gdy dane wejściowe są zgodne ze ścieżką przez gramatykę.  
  
> [!NOTE]
>  Najlepszym rozwiązaniem jest zweryfikowanie bezpieczeństwa dowolnego identyfikatora URI lub biblioteki DLL użytej do skompilowania <xref:System.Speech.Recognition.Grammar> obiektu.  
>   
>  System Windows i platforma mowy zapewniają zabezpieczenia dla aplikacji tworzących <xref:System.Speech.Recognition.Grammar> wystąpienie z biblioteki DLL lub z gramatyki obsługującej skrypty.  
>   
>  Skrypty w <xref:System.Speech.Recognition.Grammar> obiektach są zawsze uruchamiane tak, jakby były pobierane ze strony sieci `Internet Zone`Web w. Środowisko uruchomieniowe języka wspólnego (CLR) izoluje wszystkie biblioteki DLL ładowane w celu uzyskania definicji gramatyki.  
  
   
  
## Examples  
 Poniższy przykład konstruuje <xref:System.Speech.Recognition.Grammar> obiekt z gramatyki rozpoznawania mowy zdefiniowanej w pliku XML (miejscowości. xml). Zawartość pliku miejscowościs. XML jest wyświetlana w poniższym przykładzie kodu XML.  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można <xref:System.Speech.Recognition.Grammar.%23ctor%2A> użyć konstruktora, aby <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Grammar> utworzyć wystąpienie z obiektu lub <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> lub z pliku lub <xref:System.IO.Stream> zawierającego opis gramatyki w obsługiwanym formacie. Obsługiwane są następujące formaty:  
  
-   Pliki w formacie XML, które są zgodne ze [specyfikacją SRGS (devisioning Speech Recognition) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem. cfg  
  
 Konstruktory gramatyki, które akceptują pliki gramatyki w formacie XML w ich argumentach kompilują gramatyki XML w formacie binarnym, aby zoptymalizować je do ładowania i użycia przez aparat rozpoznawania mowy. Można skrócić czas wymagany do skonstruowania <xref:System.Speech.Recognition.Grammar> obiektu na podstawie gramatyki w formacie XML przez skompilowanie gramatyki z góry przy użyciu jednej <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> z metod.  
  
 Gramatyka rozpoznawania mowy może definiować główną regułę. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa regułę, która ma być używana jako główna reguła, użyj konstruktora, który `ruleName` akceptuje parametr.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa podstawowy identyfikator URI do rozpoznawania odwołań reguły względnej, użyj konstruktora, który `baseUri` pobiera parametr.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.IO.Stream" />z.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przekazuje żadnych parametrów do procedury obsługi inicjowania, a opis nie powinien definiować procedury obsługi inicjowania wymagającej argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które są zgodne ze [specyfikacją SRGS (devisioning Speech Recognition) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem. cfg  
  
 Ten konstruktor kompiluje pliki gramatyki w formacie XML do formatu binarnego w celu zoptymalizowania ich pod kątem ładowania i użycia przez aparat rozpoznawania mowy. Można skrócić czas wymagany do skonstruowania <xref:System.Speech.Recognition.Grammar> obiektu na podstawie gramatyki w formacie XML przez skompilowanie gramatyki z góry przy użyciu jednej <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> z metod.  
  
 Gramatyka SRGS może definiować główną regułę. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt ze strumienia i określić regułę główną, <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Użyj konstruktora or <xref:System.Speech.Recognition.Grammar.%23ctor%2A> .  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt ze strumienia i określić podstawowy identyfikator URI do użycia w celu rozpoznania odwołań do reguły względnej, <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Użyj konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatykę rozpoznawania mowy z lokalnego pliku SRGS (miejscowości. xml) przy użyciu strumienia pliku. Zawartość pliku miasto. XML pojawia się na poniższym C# przykładzie.  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stream" />Opisuje gramatykę, która nie zawiera głównej reguły.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowego opisu gramatyki lub zawiera opis gramatyki zawierającej odwołanie do reguły, której nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Wystąpienie <see cref="T:System.Speech.Recognition.GrammarBuilder" /> , które zawiera ograniczenia dotyczące gramatyki rozpoznawania mowy.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.Speech.Recognition.GrammarBuilder" /> z obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o używaniu <xref:System.Speech.Recognition.GrammarBuilder> klasy do definiowania gramatyki, zobacz [Tworzenie gramatyki przy użyciu GrammarBuilder](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatykę rozpoznawania mowy przy użyciu <xref:System.Speech.Recognition.Choices> obiektów <xref:System.Speech.Recognition.GrammarBuilder> i. Konstruktor tworzy obiekt z<xref:System.Speech.Recognition.GrammarBuilder>obiektu. <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.Grammar.%23ctor%2A>  
  
```csharp  
  
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar srgsDocument" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dotyczące gramatyki rozpoznawania mowy.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> z obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przekazuje żadnych parametrów do procedury obsługi inicjowania i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie powinien zawierać procedury obsługi inicjowania wymagającej argumentów.  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Może mieć regułę główną. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa regułę główną, <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Użyj konstruktora or <xref:System.Speech.Recognition.Grammar.%23ctor%2A> .  
  
 Aby utworzyć rozpoznawanie <xref:System.Speech.Recognition.Grammar> mowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z i określić podstawowy identyfikator URI do użycia w celu rozpoznania odwołań do <xref:System.Speech.Recognition.Grammar.%23ctor%2A> reguły względnej, użyj konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatykę rozpoznawania mowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpieniu, która jest następnie używana do <xref:System.Speech.Recognition.Grammar> konstruowania obiektu.  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="srgsDocument" />nie zawiera głównej reguły.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" />zawiera odwołanie do reguły, którego nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka pliku opisującego gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy z pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przekazuje żadnych parametrów do procedury obsługi inicjowania, a opis nie powinien definiować procedury obsługi inicjowania wymagającej argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które są zgodne ze [specyfikacją SRGS (devisioning Speech Recognition) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem. cfg  
  
 Ten konstruktor kompiluje pliki gramatyki w formacie XML do formatu binarnego w celu zoptymalizowania ich pod kątem ładowania i użycia przez aparat rozpoznawania mowy. Można skrócić czas wymagany do skonstruowania <xref:System.Speech.Recognition.Grammar> obiektu na podstawie gramatyki w formacie XML przez skompilowanie gramatyki z góry przy użyciu jednej <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> z metod.  
  
 Gramatyka SRGS może definiować główną regułę. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt z ciągu i określić regułę główną, <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Użyj konstruktora.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa podstawowy identyfikator URI do użycia w celu rozpoznania odwołań do względnych reguł, Otwórz plik w strumieniu pliku <xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType> i użyj konstruktora.  
  
   
  
## Examples  
 Poniższy przykład ładuje gramatykę rozpoznawania mowy z lokalnego pliku SRGS do skompilowania <xref:System.Speech.Recognition.Grammar> obiektu. Zawartość pliku miasto. XML jest wyświetlana w przykładowym kodzie XML, który następuje po C# przykładzie.  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" />zawiera pusty ciąg ("") lub plik zawiera opis gramatyki, która nie zawiera głównej reguły.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Plik nie zawiera prawidłowego opisu lub zawiera opis gramatyki zawierającej odwołanie do reguły, której nie można rozpoznać.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły głównej opisu gramatyki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.IO.Stream" /> z i określa główną regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przekazuje żadnych parametrów do procedury obsługi inicjowania, a opis nie powinien definiować procedury obsługi inicjowania wymagającej argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które są zgodne ze [specyfikacją SRGS (devisioning Speech Recognition) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem. cfg  
  
 Ten konstruktor kompiluje pliki gramatyki w formacie XML do formatu binarnego w celu zoptymalizowania ich pod kątem ładowania i użycia przez aparat rozpoznawania mowy. Można skrócić czas wymagany do skonstruowania <xref:System.Speech.Recognition.Grammar> obiektu na podstawie gramatyki w formacie XML przez skompilowanie gramatyki z góry przy użyciu jednej <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> z metod.  
  
 Aby utworzyć obiekt <xref:System.Speech.Recognition.Grammar> ze strumienia i określić podstawowy identyfikator URI do użycia w celu rozpoznania odwołań do reguły względnej <xref:System.Speech.Recognition.Grammar.%23ctor%2A> , użyj konstruktora.  
  
   
  
## Examples  
 Poniższy przykład ładuje lokalny plik SRGS (miejscowości. xml) ze strumienia plików i Określa regułę, która ma być używana jako element główny gramatyki. Zawartość pliku miasto. XML jest wyświetlana w przykładowym kodzie XML, który następuje po C# przykładzie.  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" />nie można rozpoznać lub nie jest publiczna lub <paramref name="ruleName" /> jest <see langword="null" /> , a opis gramatyki nie definiuje głównej reguły.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowego opisu lub zawiera opis gramatyki zawierającej odwołanie do reguły, której nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dotyczące gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły używany jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />głównej.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> z obiektu i określa główną regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przekazuje żadnych parametrów do procedury obsługi inicjowania i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie powinien zawierać procedury obsługi inicjowania wymagającej argumentów.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z i określić podstawowy identyfikator URI do użycia w celu rozpoznania odwołań do <xref:System.Speech.Recognition.Grammar.%23ctor%2A> reguły względnej, użyj konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatykę rozpoznawania mowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpieniu i Określa regułę do użycia jako główną regułę gramatyki. Przykład tworzy <xref:System.Speech.Recognition.Grammar> obiekt <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z wystąpienia i ładuje go do aparatu rozpoznawania mowy.  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" />nie można rozpoznać elementu lub nie jest on publiczny <paramref name="ruleName" /> <see langword="null" /> <paramref name="srgsDocument" /> lub nie zawiera reguły głównej.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" />zawiera odwołanie do reguły, którego nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka pliku opisującego gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły głównej opisu gramatyki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy z pliku i określa główną regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przekazuje żadnych parametrów do procedury obsługi inicjowania, a opis nie powinien definiować procedury obsługi inicjowania wymagającej argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które są zgodne ze [specyfikacją SRGS (devisioning Speech Recognition) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem. cfg  
  
 Ten konstruktor kompiluje pliki gramatyki w formacie XML do formatu binarnego w celu zoptymalizowania ich pod kątem ładowania i użycia przez aparat rozpoznawania mowy. Można skrócić czas wymagany do skonstruowania <xref:System.Speech.Recognition.Grammar> obiektu na podstawie gramatyki w formacie XML przez skompilowanie gramatyki z góry przy użyciu jednej <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> z metod.  
  
 Aby utworzyć obiekt <xref:System.Speech.Recognition.Grammar> , który określa podstawowy identyfikator URI do użycia w celu rozpoznania odwołań do względnych reguł, Otwórz strumień pliku dla pliku <xref:System.Speech.Recognition.Grammar.%23ctor%2A> i użyj konstruktora.  
  
   
  
## Examples  
 Poniższy przykład ładuje lokalny plik SRGS (miejscowości. xml) z pliku i Określa regułę, która ma być używana jako element główny gramatyki. Zawartość pliku miasto. XML jest wyświetlana w przykładowym kodzie XML, który następuje po C# przykładzie.  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" />nie można rozpoznać lub nie jest publiczna <paramref name="path" /> , jest ciągiem pustym ("") lub <paramref name="ruleName" /> jest <see langword="null" /> , a opis gramatyki nie definiuje głównej reguły.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Plik nie zawiera prawidłowego opisu lub zawiera opis gramatyki zawierającej odwołanie do reguły, której nie można rozpoznać.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> Połączony z obiektem danych wejściowych/wyjściowych (w tym plików, zasobów VisualStudio i bibliotek DLL), które zawiera specyfikację gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły głównej opisu gramatyki.</param>
        <param name="parameters">Parametry, które mają zostać przesłane do procedury obsługi inicjowania określonej <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> przez właściwość dla punktu wejścia lub dla reguły <see cref="T:System.Speech.Recognition.Grammar" /> głównej elementu do utworzenia. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.IO.Stream" /> z i określa główną regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również określić parametry dla programu obsługi inicjowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stream" />jest podłączony do gramatyki, która: 
-Nie zawiera reguły określonej w<paramref name="ruleName" />  
  
-Wymaga parametrów inicjalizacji innych niż określone w<paramref name="parameters" />  
  
-Zawiera odwołanie do reguły względnej, które nie może zostać rozpoznane przez <see cref="T:System.Uri" /> domyślną regułę podstawową dla gramatyki</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatykę rozpoznawania mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły głównej opisu gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia w celu rozpoznania odwołania do względnych reguł w opisie <see langword="null" />gramatyki lub.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy ze strumienia, określa główną regułę i definiuje podstawowy Uniform Resource Identifier (URI) do rozpoznawania odwołań do reguł względnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przekazuje żadnych parametrów do procedury obsługi inicjowania, a opis nie powinien definiować procedury obsługi inicjowania wymagającej argumentów.  
  
 Ten konstruktor może utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, które są zgodne ze [specyfikacją SRGS (devisioning Speech Recognition) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem. cfg  
  
 Ten konstruktor kompiluje pliki gramatyki w formacie XML do formatu binarnego w celu zoptymalizowania ich pod kątem ładowania i użycia przez aparat rozpoznawania mowy. Można skrócić czas wymagany do skonstruowania <xref:System.Speech.Recognition.Grammar> obiektu na podstawie gramatyki w formacie XML przez skompilowanie gramatyki z góry przy użyciu jednej <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> z metod.  
  
 Ten konstruktor nie sprawdza poprawności `baseUri`. `LoadGrammar` Jednak Metoda <xref:System.Speech.Recognition.SpeechRecognitionEngine> lub obiektuzgłaszawyjątek,jeśliniemożerozpoznaćwszystkichodwołańreguływopisiegramatyki.<xref:System.Speech.Recognition.SpeechRecognizer> Jeśli `baseUri` nie `null`jest ,`LoadGrammar` Metoda używa identyfikatora URI do rozwiązywania wszelkich odwołań reguły, których nie może w przeciwnym razie rozpoznać. Jeśli `baseUri` reprezentuje plik, program `LoadGrammar` używa wydanego pliku i katalogu pliku podczas próby rozpoznania odwołań do względnych reguł.  
  
   
  
## Examples  
 Poniższy przykład ładuje lokalny plik SRGS (trójdrogowy. xml) ze strumienia pliku. Plik zawiera odwołanie do reguły względnej do reguły w pliku miejscowości. XML i określa podstawowy identyfikator URI do użycia w celu rozpoznania odwołania do reguły. Zawartość plików wahadła. XML i miejscowości. XML pojawia się w przykładach XML, które są zgodne z C# przykładem.  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" />nie można rozpoznać lub nie jest publiczna lub <paramref name="ruleName" /> jest <see langword="null" /> , a opis gramatyki nie definiuje głównej reguły.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowego opisu lub zawiera opis gramatyki zawierającej odwołanie do reguły, której nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> , które zawiera ograniczenia dotyczące gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły głównej opisu gramatyki.</param>
        <param name="parameters">Parametry, które mają zostać przesłane do procedury obsługi inicjowania określonej <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> przez właściwość dla punktu wejścia lub dla reguły <see cref="T:System.Speech.Recognition.Grammar" /> głównej elementu do utworzenia. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />wystąpienia i określa nazwę reguły jako punkt wejścia do gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również określić parametry dla programu obsługi inicjowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Dowolny z parametrów zawiera nieprawidłową wartość.  
  
-Określony przez <paramref name="srgsDocument" /> nie zawiera reguły określonej przez <paramref name="ruleName" />. <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />  
  
-Zawartość parametrów tablicy nie pasuje do argumentów któregokolwiek z programów obsługi inicjalizacji reguły.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dotyczące gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły używany jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />głównej.</param>
        <param name="baseUri">Podstawowy identyfikator URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, który ma zostać użyty do rozpoznania odwołania do powiązanej <see langword="null" />reguły w lub.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> z obiektu, określa główną regułę i definiuje podstawowy Uniform Resource Identifier (URI) do rozpoznawania odwołań do reguł względnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przekazuje żadnych parametrów do procedury obsługi inicjowania i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie powinien zawierać procedury obsługi inicjowania wymagającej argumentów.  
  
 Ten konstruktor nie sprawdza poprawności `baseUri`. `LoadGrammar` Jednak Metoda <xref:System.Speech.Recognition.SpeechRecognitionEngine> lub obiektuzgłaszawyjątek,jeśliniemożerozpoznaćwszystkichodwołańreguływopisiegramatyki.<xref:System.Speech.Recognition.SpeechRecognizer> Jeśli `baseUri` nie `null`jest ,`LoadGrammar` Metoda używa identyfikatora URI do rozwiązywania wszelkich odwołań reguły, których nie może w przeciwnym razie rozpoznać. Jeśli `baseUri` reprezentuje plik, `LoadGrammar` Metoda używa zarówno wydanego pliku, jak i katalogu pliku, gdy próbuje rozpoznać odwołania do względnych reguł.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatykę rozpoznawania mowy w programie <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> , która zawiera odwołanie do pliku miasto. XML i określa identyfikator URI, który będzie używany do rozpoznawania odwołania do reguły. Zawartość pliku miasto. XML jest wyświetlana w przykładowym kodzie XML, który następuje po C# przykładzie.  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" />nie można rozpoznać elementu lub nie jest on publiczny <paramref name="ruleName" /> <see langword="null" /> <paramref name="srgsDocument" /> lub nie zawiera reguły głównej.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" />zawiera odwołanie do reguły, którego nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do pliku, łącznie z biblioteką DLL, która zawiera specyfikację gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły głównej opisu gramatyki.</param>
        <param name="parameters">Parametry, które mają zostać przesłane do procedury obsługi inicjowania określonej <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> przez właściwość dla punktu wejścia lub dla reguły <see cref="T:System.Speech.Recognition.Grammar" /> głównej elementu do utworzenia. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy z pliku, który zawiera definicję gramatyki, i określa nazwę reguły jako punkt wejścia do gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również określić parametry dla programu obsługi inicjowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Dowolny z parametrów zawiera nieprawidłową wartość.  
  
-Plik określony przez <paramref name="path" /> nie zawiera prawidłowej gramatyki lub reguły określonej w. <paramref name="ruleName" />  
  
-Zawartość parametrów tablicy nie pasuje do argumentów któregokolwiek z programów obsługi inicjalizacji reguły.  
  
-Gramatyka zawiera odwołanie do reguły względnej, które nie może zostać rozpoznane przez <see cref="T:System.Uri" /> domyślną regułę podstawową dla gramatyki.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> Połączony z obiektem danych wejściowych/wyjściowych (w tym plików, zasobów VisualStudio i bibliotek DLL), które zawiera specyfikację gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły głównej opisu gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia w celu rozpoznania odwołania do względnych reguł w opisie <see langword="null" />gramatyki lub.</param>
        <param name="parameters">Parametry, które mają zostać przesłane do procedury obsługi inicjowania określonej <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> przez właściwość dla punktu wejścia lub dla reguły <see cref="T:System.Speech.Recognition.Grammar" /> głównej elementu do utworzenia. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy a <see cref="T:System.IO.Stream" /> i Określa regułę główną oraz podstawowy identyfikator URI do rozpoznawania odwołań względnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również określić parametry dla programu obsługi inicjowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Dowolny z parametrów zawiera nieprawidłową wartość.  
  
-Jest połączony z gramatyką, która nie zawiera reguły określonej przez <paramref name="ruleName" />. <paramref name="stream" />  
  
-Zawartość parametrów tablicy nie pasuje do argumentów któregokolwiek z programów obsługi inicjalizacji reguły.  
  
-Gramatyka zawiera odwołanie do reguły względnej, które nie może zostać rozpoznane przez <see cref="T:System.Uri" /> domyślną regułę bazową dla gramatyki lub identyfikatora <paramref name="baseUri" />URI dostarczonego przez.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> , które zawiera ograniczenia dotyczące gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy lub <see langword="null" /> do użycia domyślnej reguły głównej opisu gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia w celu rozpoznania odwołania do względnych reguł w opisie <see langword="null" />gramatyki lub.</param>
        <param name="parameters">Parametry, które mają zostać przesłane do procedury obsługi inicjowania określonej <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> przez właściwość dla punktu wejścia lub dla reguły <see cref="T:System.Speech.Recognition.Grammar" /> głównej elementu do utworzenia. Ten parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> klasy z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />wystąpienia i określa nazwę reguły jako punkt wejścia do gramatyki i podstawowy identyfikator URI do rozpoznawania odwołań względnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również określić parametry dla programu obsługi inicjowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Dowolny z parametrów zawiera nieprawidłową wartość.  
  
-Określony przez <paramref name="srgsDocument" /> nie zawiera reguły określonej w <paramref name="ruleName" />. <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />  
  
-Zawartość parametrów tablicy nie pasuje do argumentów któregokolwiek z programów obsługi inicjalizacji reguły.  
  
-Gramatyka zawiera odwołanie do reguły względnej, które nie może zostać rozpoznane przez <see cref="T:System.Uri" /> domyślną regułę bazową dla gramatyki lub identyfikatora <paramref name="baseUri" />URI dostarczonego przez.</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Speech.Recognition.Grammar.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy <see cref="T:System.Speech.Recognition.Grammar" /> może być używana przez aparat rozpoznawania mowy do przeprowadzenia rozpoznawania.</summary>
        <value>Właściwość <see langword="Enabled" /> zwraca <see langword="true" /> , jeśli aparat rozpoznawania mowy może przeprowadzić rozpoznawanie przy użyciu gramatyki rozpoznawania mowy; w przeciwnym razie <see langword="false" />Właściwość zwraca. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie <xref:System.Speech.Recognition.Grammar> może być włączone lub wyłączone niezależnie od ładowania przez aparat rozpoznawania mowy.  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje o <xref:System.Speech.Recognition.Grammar> obiekcie w [konsoli](https://go.microsoft.com/fwlink/?LinkId=159613)programu.  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy</related>
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStg : bool" Usage="System.Speech.Recognition.Grammar.IsStg" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy Gramatyka jest silnie wpisana.</summary>
        <value>Właściwość zwraca <see langword="true" /> , jeśli Gramatyka jest silnie wpisana; w przeciwnym razie Właściwość <see langword="false" />zwraca. <see langword="IsStg" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt o jednoznacznie określonym <xref:System.Speech.Recognition.Grammar> typie (`IsStg` Equals `true`) może zwracać w aplikacji klienckiej jednoznacznie wpisane wyniki (obiekty, a nie tekst nieprzetworzony). Na przykład Gramatyka o jednoznacznie określonym typie może zwracać <xref:System.DateTime> obiekty zamiast nieprzetworzonych danych wejściowych.  
  
 Można zaimplementować gramatyki o jednoznacznie określonym typie przez dołączenie kodu do reguł gramatyki. Ponieważ aparat rozpoznawania przetwarza daną regułę, pobierając jako dane wejściowe bieżące częściowe wyniki, skojarzony kod jest wykonywany, a informacje tekstowe staną się obiektami typu Rich Type. Dzięki temu Klient może łatwiej korzystać z rozszerzonego sprawdzania semantyki, obsługi wielu kultur i wewnętrznej logiki gramatycznej.  
  
 Wystąpienia obiektów o jednoznacznie określonym <xref:System.Speech.Recognition.Grammar> typie są zazwyczaj uzyskiwane z zasobów w zestawie <xref:System.Type> jako w środowisku uruchomieniowym języka wspólnego (CLR). Zlokalizowane typy używane do obsługi różnych języków to przykłady takich <xref:System.Speech.Recognition.Grammar> obiektów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Gramatyki o <see langword="IsStg" />jednoznacznie określonym typie dziedziczą <see cref="T:System.Speech.Recognition.Grammar" /> z konieczności przesłania domyślnego zachowania, które ma zostać zwrócone. <see langword="false" /></para></block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Loaded : bool" Usage="System.Speech.Recognition.Grammar.Loaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy <see cref="T:System.Speech.Recognition.Grammar" /> został załadowany przez aparat rozpoznawania mowy.</summary>
        <value>Właściwość zwraca <see langword="true" /> , jeśli odwołuje się Gramatyka rozpoznawanie mowy jest aktualnie załadowana w aparacie rozpoznawania mowy; w przeciwnym razie Właściwość zwraca <see langword="false" />. <see langword="Loaded" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po załadowaniu <xref:System.Speech.Recognition.Grammar.Weight%2A>wartości i <xref:System.Speech.Recognition.Grammar.Priority%2A> nie można zmienić. <xref:System.Speech.Recognition.Grammar>  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje o <xref:System.Speech.Recognition.Grammar> obiekcie w [konsoli](https://go.microsoft.com/fwlink/?LinkId=159613)programu.  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberSignature Language="F#" Value="static member LoadLocalizedGrammarFromType : Type * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType (type, onInitParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">W zestawie, <see cref="T:System.Type" /> obiekt na <see cref="T:System.Speech.Recognition.Grammar" />podstawie.</param>
        <param name="onInitParameters">Parametry, które mają zostać przesłane do metody inicjacji zlokalizowanego obiektu na <see cref="T:System.Speech.Recognition.Grammar" />podstawie. Parametr może mieć wartość null.</param>
        <summary>Metoda zwraca zlokalizowane wystąpienie <see cref="T:System.Speech.Recognition.Grammar" /> obiektu pochodnego od <see cref="T:System.Type" />. <see langword="LoadLocalizedGrammarFromType" /></summary>
        <returns>Metoda zwraca prawidłowy obiekt w oparciu o <see cref="T:System.Speech.Recognition.Grammar" />lub <see langword="null" /> , jeśli wystąpił błąd. <see langword="LoadLocalizedGrammarFromType" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zlokalizowane gramatyki uzyskane przy `LoadLocalizedGrammarFromType` użyciu są zwykle silnie wpisane ( <xref:System.Speech.Recognition.Grammar.IsStg%2A> Zobacz, aby uzyskać więcej informacji na temat silnie wpisanej gramatyki). Jeśli `onInitParameters` jest odwołaniem o wartości null (Nothing w Visual Basic) zlokalizowana gramatyka nie powinna mieć metody inicjującej ani metody, która nie przyjmuje argumentów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Speech.Recognition.Grammar.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>Właściwość zwraca nazwę <see cref="T:System.Speech.Recognition.Grammar" />obiektu. <see langword="Name" /> Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy dwa <xref:System.Speech.Recognition.Grammar> obiekty, jeden dla cyfr i jeden dla ułamków. Obiekty gramatyki są przypisane do nazw i wag względnych oraz priorytetów i ładowane przez aparat rozpoznawania mowy w procesie. Metody `CreateDigitsGrammar`, `CreateFractionsGrammar` i`recognizer_SpeechRecognized` nie są wyświetlane w tym miejscu.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Speech.Recognition.Grammar.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość <see cref="T:System.Speech.Recognition.Grammar" /> priorytetu obiektu.</summary>
        <value>Właściwość zwraca liczbę całkowitą reprezentującą względny priorytet określonego <see cref="T:System.Speech.Recognition.Grammar" />elementu. <see langword="Priority" /> Zakresem jest od-128 do 127 włącznie. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Priority` Właściwość służy do wybierania gramatyki, gdy więcej niż jedna Gramatyka będzie generowała identyczny wynik rozpoznawania. Jeśli aparat rozpoznawania mowy ma więcej niż jedną gramatykę rozpoznawania mowy, która jest zgodna z danymi wejściowymi, a dopasowanie jest najlepszym wynikiem aparatu rozpoznawania, aparat rozpoznawania używa gramatyki o najwyższej `Priority`. Jeśli gramatyki, które generują identyczny wynik rozpoznawania, mają również `Priority` taką samą wartość, wówczas Gramatyka użyta przez aparat rozpoznawania nie jest zdefiniowana.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwa <xref:System.Speech.Recognition.Grammar> obiekty, jeden dla cyfr i jeden dla ułamków. <xref:System.Speech.Recognition.Grammar> Obiekty są przypisane do nazw i wag względnych oraz priorytetów i ładowane przez aparat rozpoznawania mowy w procesie. Metody `CreateDigitsGrammar`, `CreateFractionsGrammar` i`recognizer_SpeechRecognized` nie są wyświetlane w tym miejscu.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResourceName : string with get, set" Usage="System.Speech.Recognition.Grammar.ResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość o nazwie zasobu binarnego, który został użyty do załadowania bieżącego <see cref="T:System.Speech.Recognition.Grammar" />elementu.</summary>
        <value>Właściwość zwraca nazwę zasobu binarnego, z którego załadowano silnie wpisaną gramatykę użytą przez <see cref="T:System.Speech.Recognition.Grammar" />. <see langword="ResourceName" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RuleName : string" Usage="System.Speech.Recognition.Grammar.RuleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę głównej reguły lub punktu <see cref="T:System.Speech.Recognition.Grammar" /> wejścia obiektu.</summary>
        <value><see langword="RuleName" /> Właściwość zwraca identyfikator głównej reguły gramatyki rozpoznawania mowy, której dotyczy odwołanie. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby skonstruować <xref:System.Speech.Recognition.Grammar> obiekt i ustawić nazwę jego głównej reguły, użyj jednego <xref:System.Speech.Recognition.Grammar.%23ctor%2A> z konstruktorów przyjmujących `ruleName` parametr.  
  
 Jeśli dla reguły głównej elementu a <xref:System.Speech.Recognition.Grammar> nie określono nazwy, właściwość zwraca. `null`  
  
 Reguły <xref:System.Speech.Recognition.Grammar> główne wystąpień skonstruowanych na podstawie <xref:System.Speech.Recognition.GrammarBuilder> obiektów zazwyczaj nie mają nazwy, dlatego <xref:System.Speech.Recognition.Grammar.RuleName%2A> zwraca `null`.  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje o <xref:System.Speech.Recognition.Grammar> obiekcie w [konsoli](https://go.microsoft.com/fwlink/?LinkId=159613)programu.  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany, gdy aparat rozpoznawania mowy wykonuje rozpoznawanie przy <see cref="T:System.Speech.Recognition.Grammar" /> użyciu obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat rozpoznawania mowy wywołuje również zdarzenie `SpeechRecognized` , gdy rozpoznaje dane wejściowe. Zdarzenie obiektu jest zgłaszane przed `SpeechRecognized` zdarzeniem aparatu rozpoznawania mowy. <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.Grammar.SpeechRecognized> Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>zdarzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, i <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> .  
  
 Wszystkie zadania specyficzne dla określonej gramatyki powinny być zawsze obsługiwane przez programy obsługi dla <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie programu obsługi zdarzeń dla <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia obiektu. Wyświetla wyniki rozpoznawania w [konsoli](https://go.microsoft.com/fwlink/?LinkId=159613)programu.  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.StgInit : obj[] -&gt; unit" Usage="grammar.StgInit parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">Parametry, które mają zostać przesłane, aby można było zainicjować gramatykę o jednoznacznie określonym typie. Ten parametr może mieć wartość null.</param>
        <summary><see langword="StgInit" /> Metoda inicjuje silnie wpisaną gramatykę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt o jednoznacznie określonym <xref:System.Speech.Recognition.Grammar> typie (`IsStg` Equals `true`) może zwracać w aplikacji klienckiej jednoznacznie wpisane wyniki (obiekty, a nie tekst nieprzetworzony). Na przykład Gramatyka o jednoznacznie określonym typie może zwracać <xref:System.DateTime> obiekty zamiast nieprzetworzonych danych wejściowych.  
  
 Można zaimplementować gramatyki o jednoznacznie określonym typie przez dołączenie kodu do reguł gramatyki. Ponieważ aparat rozpoznawania przetwarza daną regułę, pobierając jako dane wejściowe bieżące częściowe wyniki, skojarzony kod jest wykonywany, a informacje tekstowe staną się obiektami typu Rich Type. Dzięki temu Klient może łatwiej korzystać z rozszerzonego sprawdzania semantyki, obsługi wielu kultur i wewnętrznej logiki gramatycznej.  
  
 Wystąpienia obiektów o jednoznacznie określonym <xref:System.Speech.Recognition.Grammar> typie są zazwyczaj uzyskiwane z zasobów w zestawie <xref:System.Type> jako w środowisku uruchomieniowym języka wspólnego (CLR). Zlokalizowane typy używane do obsługi różnych języków to przykłady takich <xref:System.Speech.Recognition.Grammar> obiektów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Jeśli Gramatyka o jednoznacznie określonym typie wymaga inicjalizacji, <see langword="StgInit" /> należy ją wywołać w konstruktorze lub metodzie inicjacji.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Weight : single with get, set" Usage="System.Speech.Recognition.Grammar.Weight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość <see cref="T:System.Speech.Recognition.Grammar" /> wagi obiektu.</summary>
        <value><see langword="Weight" /> Właściwość zwraca wartość zmiennoprzecinkową wskazującą względną wagę, którą wystąpienie aparatu rozpoznawania powinno przypisać do gramatyki podczas przetwarzania danych wejściowych mowy. Zakresem jest od 0,0 do 1,0 włącznie. Wartość domyślna to 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ze względu na złożoność zastosowania **wagi**przez aparat rozpoznawania, jego wpływ na wydajność określonej gramatyki nie jest tak samo przewidywalny jak w przypadku programu <xref:System.Speech.Recognition.Grammar.Priority%2A>.  
  
 Rozpoznawanie mowy jest systemem ważonym. Szacuje wszystkie możliwe ścieżki rozpoznawania na podstawie kombinacji wagi gramatyki, wag zdefiniowanych dla alternatyw w gramatyce i prawdopodobieństwa zdefiniowanego przez modele mowy. Aparat rozpoznawania mowy używa kombinacji tych wag i prawdopodobieństwa, aby zaklasyfikować potencjalne alternatywne rozpoznawania. Gramatyki o większej liczbie wag zwiększy się do klasyfikacji alternatyw rozpoznawania niż gramatyki o mniejszych wagach.  
  
 Efekt <xref:System.Speech.Recognition.Grammar.Weight%2A> właściwości w aparacie rozpoznawania mowy zależy od implementacji aparatu rozpoznawania. Mimo że <xref:System.Speech.Recognition.Grammar.Weight%2A> właściwość może służyć do dostrajania dokładności rozpoznawania mowy dla aplikacji, powinna być używana tylko po kontrolowanej analizie diagnostyki określonego środowiska rozpoznawania i z pełnymi informacjami o aparacie rozpoznawania w obszarze Użyj.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwa <xref:System.Speech.Recognition.Grammar> obiekty, jeden dla cyfr i jeden dla ułamków. <xref:System.Speech.Recognition.Grammar> Obiekty są przypisane do nazw i wag względnych oraz priorytetów i ładowane przez aparat rozpoznawania mowy w procesie. Metody `CreateDigitsGrammar`, `CreateFractionsGrammar` i`recognizer_SpeechRecognized` nie są wyświetlane w tym miejscu.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>
