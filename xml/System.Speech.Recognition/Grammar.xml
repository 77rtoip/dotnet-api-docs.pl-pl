<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9cf3d24d88cd09e3d4f350359adaae897a9a8171" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36409801" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <TypeSignature Language="F#" Value="type Grammar = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Obiektu środowiska wykonawczego, który odwołuje się do gramatyki rozpoznawania mowy, którego aplikacja może użyć do definiowania ograniczeń rozpoznawania mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gramatyka rozpoznawania mowy to zestaw reguł lub ograniczenia definiujące aparat rozpoznawania mowy rozpoznał jako dane wejściowe łatwy do rozpoznania. Aby uzyskać więcej informacji na temat tworzenia i używania gramatyki rozpoznawania mowy, zobacz [rozpoznawania mowy](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919), [utworzyć gramatyki XML przy użyciu](http://msdn.microsoft.com/library/2d799487-49c6-4cc9-b42f-f71cd3824fe1), [utworzyć gramatyki przy użyciu GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae), i [utworzyć gramatyki przy użyciu SrgsGrammar](http://msdn.microsoft.com/library/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906).  
  
 Po autora gramatyki, musisz go skompilować go do <xref:System.Speech.Recognition.Grammar> obiektów, że można załadować aparatu rozpoznawania mowy i że aplikacja może używać w czasie wykonywania do zarządzania rozpoznawania mowy. Można użyć <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora w celu utworzenia <xref:System.Speech.Recognition.Grammar> wystąpienia z <xref:System.Speech.Recognition.GrammarBuilder> lub <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt, lub z pliku lub <xref:System.IO.Stream> zawierający opis gramatyki w obsługiwanym formacie. Obsługiwane formaty są następujące:  
  
-   Pliki w formacie XML, zgodnych ze standardami W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku .cfg  
  
 Konstruktory gramatyki, które akceptują pliki gramatyki formatu XML w ich argumentów kompilacji gramatyki XML do formatu binarnego w celu optymalizacji ich ładowania oraz zużycie przez aparat rozpoznawania mowy. Może skrócić czas wymagany do utworzenia <xref:System.Speech.Recognition.Grammar> obiektu z formatu XML gramatyki przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Aplikacja aparat rozpoznawania mowy jako zarządzany przez <xref:System.Speech.Recognition.SpeechRecognizer> lub <xref:System.Speech.Recognition.SpeechRecognitionEngine> obiektów, można załadować wiele gramatyk rozpoznawania mowy. Aplikacji niezależnie można włączyć lub wyłączyć poszczególne gramatyki, ustawiając <xref:System.Speech.Recognition.Grammar.Enabled%2A> właściwości i modyfikowanie zachowania uznania za pośrednictwem <xref:System.Speech.Recognition.Grammar> właściwości, takie jak <xref:System.Speech.Recognition.Grammar.Priority%2A> i <xref:System.Speech.Recognition.Grammar.Weight%2A> właściwości.  
  
 Gramatyka <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenie jest wywoływane, gdy dane wejściowe jest zgodna z ścieżkę za pośrednictwem gramatyki.  
  
> [!NOTE]
>  Jest najlepszym rozwiązaniem do sprawdzenia bezpieczeństwa ani identyfikatora URI używany do tworzenia biblioteki DLL <xref:System.Speech.Recognition.Grammar> obiektu.  
>   
>  Systemu Windows i platform mowy zabezpieczenia aplikacji konstruowania <xref:System.Speech.Recognition.Grammar> wystąpienia z biblioteki DLL lub gramatyki, która obsługuje wykonywanie skryptów.  
>   
>  Skrypty w <xref:System.Speech.Recognition.Grammar> obiekty są zawsze uruchamiane tak, jakby pobrane ze strony sieci web w `Internet Zone`. Środowisko uruchomieniowe języka wspólnego (CLR) izoluje każdej biblioteki DLL ładowane do uzyskania definicji gramatyki.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.Grammar> obiektu gramatyki rozpoznawania mowy zdefiniowanego w pliku XML (cities.xml). Zawartość pliku cities.xml jest wyświetlana w poniższym przykładowym kodzie XML.  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora w celu utworzenia <xref:System.Speech.Recognition.Grammar> wystąpienia z <xref:System.Speech.Recognition.GrammarBuilder> lub <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt, lub z pliku lub <xref:System.IO.Stream> zawierający opis gramatyki w obsługiwanym formacie. Obsługiwane formaty są następujące:  
  
-   Pliki w formacie XML, zgodnych ze standardami W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku .cfg  
  
 Konstruktory gramatyki, które akceptują pliki gramatyki formatu XML w ich argumentów kompilacji gramatyki XML do formatu binarnego w celu optymalizacji ich ładowania oraz zużycie przez aparat rozpoznawania mowy. Może skrócić czas wymagany do utworzenia <xref:System.Speech.Recognition.Grammar> obiektu z formatu XML gramatyki przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Gramatyka rozpoznawania mowy można zdefiniować reguły głównego. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa reguły, które ma być używana jako główna reguła, użyj Konstruktora akceptującego `ruleName` parametru.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa podstawowy identyfikator URI do rozpoznawania odwołań względne reguła, użyj Konstruktora przyjmującego `baseUri` parametru.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> — klasa</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatyki rozpoznawanie mowy w obsługiwanym formacie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasę z <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opis nie powinien definiować inicjowania obsługi, która wymaga argumentów.  
  
 Ten konstruktor można utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, zgodnych ze standardami W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku .cfg  
  
 Ten konstruktor kompiluje pliki gramatyki XML format do formatu binarnego w celu optymalizacji ich ładowania oraz zużycie przez aparat rozpoznawania mowy. Może skrócić czas wymagany do utworzenia <xref:System.Speech.Recognition.Grammar> obiektu z formatu XML gramatyki przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Gramatyka SRGS można zdefiniować reguły głównego. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiektów ze strumienia i określ główna reguła, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> lub <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiektów ze strumienia i określić podstawowy identyfikator URI do użycia rozpoznania odwołania względne reguła użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawanie mowy z lokalnego pliku SRGS (cities.xml) za pomocą strumienia pliku. Zawartość pliku cities.xml pojawi się następujący przykład C#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> Zawiera opis gramatyki, która nie zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowy opis gramatyki lub opis gramatyki, która zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Wystąpienie <see cref="T:System.Speech.Recognition.GrammarBuilder" /> zawierający ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasę z <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o korzystaniu z <xref:System.Speech.Recognition.GrammarBuilder> klasę, aby zdefiniować gramatyki, zobacz [utworzyć GrammarBuilder przy użyciu gramatyki](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 Poniższy przykład tworzy using gramatyki rozpoznawania mowy <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiektów. <xref:System.Speech.Recognition.Grammar.%23ctor%2A> Konstruktor tworzy <xref:System.Speech.Recognition.Grammar> obiekt z <xref:System.Speech.Recognition.GrammarBuilder> obiektu.  
  
```csharp  
  
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar srgsDocument" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasę z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie powinna zawierać inicjowania obsługi, która wymaga argumentów.  
  
 A <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> może mieć główna reguła. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa główna reguła, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> lub <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
 Aby utworzyć rozpoznawania mowy <xref:System.Speech.Recognition.Grammar> z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> i określić podstawowy identyfikator URI do użycia rozpoznania odwołania względne reguła użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawanie mowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia, która jest następnie używany do utworzenia <xref:System.Speech.Recognition.Grammar> obiektu.  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="srgsDocument" /> nie zawiera główna reguła.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka pliku, który opisuje gramatyki rozpoznawanie mowy w obsługiwanym formacie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opis nie powinien definiować inicjowania obsługi, która wymaga argumentów.  
  
 Ten konstruktor można utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, zgodnych ze standardami W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku .cfg  
  
 Ten konstruktor kompiluje pliki gramatyki XML format do formatu binarnego w celu optymalizacji ich ładowania oraz zużycie przez aparat rozpoznawania mowy. Może skrócić czas wymagany do utworzenia <xref:System.Speech.Recognition.Grammar> obiektu z formatu XML gramatyki przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Gramatyka SRGS można zdefiniować reguły głównego. Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt z ciągu i określ główna reguła, użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt, który określa podstawowy identyfikator URI do użycia rozpoznania odwołania względne reguła, otwórz plik w strumienia pliku i użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład ładuje gramatyki rozpoznawanie mowy z lokalnego pliku SRGS w celu utworzenia <xref:System.Speech.Recognition.Grammar> obiektu. Zawartość pliku cities.xml pojawia się w następującym przykładzie XML przykład C#.  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> zawiera ciąg pusty (""), lub plik zawiera opis gramatyki, która nie zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Plik nie zawiera prawidłowy opis lub opis gramatyki, która zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatyki rozpoznawanie mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasę z <see cref="T:System.IO.Stream" /> i określa główna reguła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opis nie powinien definiować inicjowania obsługi, która wymaga argumentów.  
  
 Ten konstruktor można utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, zgodnych ze standardami W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku .cfg  
  
 Ten konstruktor kompiluje pliki gramatyki XML format do formatu binarnego w celu optymalizacji ich ładowania oraz zużycie przez aparat rozpoznawania mowy. Może skrócić czas wymagany do utworzenia <xref:System.Speech.Recognition.Grammar> obiektu z formatu XML gramatyki przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> ze strumienia i określić podstawowy identyfikator URI do użycia rozpoznania odwołania względne reguła użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 W poniższym przykładzie ładuje plik lokalny SRGS (cities.xml) ze strumienia pliku i Określa regułę do użycia jako główny gramatyki. Zawartość pliku cities.xml pojawia się w następującym przykładzie XML przykład C#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać nazwy lub nie jest publiczny, lub <paramref name="ruleName" /> jest <see langword="null" /> i opis gramatyki nie definiuje główna reguła.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowy opis lub opis gramatyki, która zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasę z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu i określa główna reguła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie powinna zawierać inicjowania obsługi, która wymaga argumentów.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiekt z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> i określić podstawowy identyfikator URI do użycia rozpoznania odwołania względne reguła użyj <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawanie mowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia i umożliwia określenie reguł do użycia jako regułę głównego elementu gramatyki. Przykład tworzy <xref:System.Speech.Recognition.Grammar> obiekt z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia i ładuje go do aparatu rozpoznawania mowy.  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting aynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać nazwy lub nie jest publiczny, lub <paramref name="ruleName" /> jest <see langword="null" /> i <paramref name="srgsDocument" /> nie zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka pliku, który opisuje gramatyki rozpoznawanie mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> z pliku, określa główna reguła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opis nie powinien definiować inicjowania obsługi, która wymaga argumentów.  
  
 Ten konstruktor można utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, zgodnych ze standardami W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku .cfg  
  
 Ten konstruktor kompiluje pliki gramatyki XML format do formatu binarnego w celu optymalizacji ich ładowania oraz zużycie przez aparat rozpoznawania mowy. Może skrócić czas wymagany do utworzenia <xref:System.Speech.Recognition.Grammar> obiektu z formatu XML gramatyki przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> , który określa podstawowy identyfikator URI na potrzeby rozpoznawania odwołań względne reguła, otwórz strumień pliku dla pliku i użyć <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 W poniższym przykładzie ładuje plik lokalny SRGS (cities.xml) z pliku i Określa regułę do użycia jako główny gramatyki. Zawartość pliku cities.xml pojawia się w następującym przykładzie XML przykład C#.  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać nazwy lub nie jest publiczny, <paramref name="path" /> jest pustym ciągiem (""), lub <paramref name="ruleName" /> jest <see langword="null" /> i opis gramatyki nie definiuje główna reguła.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Plik nie zawiera prawidłowy opis lub opis gramatyki, która zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> podłączone do obiektu wejścia/wyjścia (w tym pliki, zasoby Visual Studio i bibliotek DLL), który zawiera specyfikację gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="parameters">Parametry do przekazania do inicjowania obsługi określonego przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub główna reguła z <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasę z <see cref="T:System.IO.Stream" /> i określa główna reguła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> jest podłączony do gramatyki który:-nie zawiera reguły, określona w <paramref name="ruleName" /> -wymaga parametrów inicjowania różne od tych określonych w <paramref name="parameters" /> — zawiera odwołanie względne reguła, którego nie można rozwiązać przez domyślny base <see cref="T:System.Uri" />reguła gramatyki</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który opisuje gramatyki rozpoznawanie mowy w obsługiwanym formacie.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia rozpoznania wszystkich odwołań względne reguła w opisie gramatyki lub <see langword="null" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy ze strumienia, określa główna reguła i definiuje podstawowej zasobów identyfikator URI (Uniform) do rozpoznawania odwołań względne reguła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i opis nie powinien definiować inicjowania obsługi, która wymaga argumentów.  
  
 Ten konstruktor można utworzyć <xref:System.Speech.Recognition.Grammar> wystąpienie z następujących formatów:  
  
-   Pliki w formacie XML, zgodnych ze standardami W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramatyki, które zostały skompilowane do pliku binarnego z rozszerzeniem pliku .cfg  
  
 Ten konstruktor kompiluje pliki gramatyki XML format do formatu binarnego w celu optymalizacji ich ładowania oraz zużycie przez aparat rozpoznawania mowy. Może skrócić czas wymagany do utworzenia <xref:System.Speech.Recognition.Grammar> obiektu z formatu XML gramatyki przez skompilowanie gramatyki z wyprzedzeniem, przy użyciu jednej z <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metody.  
  
 Nie można zweryfikować tego konstruktora `baseUri`. Jednak `LoadGrammar` metody <xref:System.Speech.Recognition.SpeechRecognitionEngine> lub <xref:System.Speech.Recognition.SpeechRecognizer> obiektu zgłasza wyjątek, jeśli nie można rozpoznać wszystkich odwołań do reguły w opisie gramatyki. Jeśli `baseUri` nie jest `null`, `LoadGrammar` metoda używa Rozwiąż wszelkie odwołania reguły, które w przeciwnym razie nie można rozpoznać identyfikatora URI. Jeśli `baseUri` reprezentuje plik, a następnie `LoadGrammar` używa zarówno wskazanego pliku i katalog pliku podczas próby rozpoznania odwołania względne reguła.  
  
   
  
## Examples  
 Poniższy przykład ładuje plik lokalny SRGS (shuttle.xml) ze strumienia pliku. Plik zawiera odwołanie do reguły w pliku cities.xml względne reguła i określa podstawowy identyfikator URI do użycia rozpoznania odwołania reguły. Zawartość plików shuttle.xml i cities.xml jest wyświetlana w przykładach XML, które należy wykonać w przykładzie C#.  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać nazwy lub nie jest publiczny, lub <paramref name="ruleName" /> jest <see langword="null" /> i opis gramatyki nie definiuje główna reguła.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Strumień nie zawiera prawidłowy opis lub opis gramatyki, która zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> zawierający ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="parameters">Parametry do przekazania do inicjowania obsługi określonego przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub główna reguła z <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z wystąpienia <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />i określa nazwę reguły punktu wejścia do gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Żadnego z parametrów zawiera nieprawidłową wartość.  - <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> Określonego przez <paramref name="srgsDocument" /> nie zawiera reguły, określone przez <paramref name="ruleName" />.  -Zawartości tablicy parametrów nie są zgodne argumenty reguły inicjowania obsługi.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia rozpoznania wszystkich odwołań względne reguła w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, lub <see langword="null" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasę z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu, określa główna reguła i definiuje podstawowej zasobów identyfikator URI (Uniform) do rozpoznawania odwołań względne reguła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie zostały spełnione wszystkie parametry do inicjowania obsługi i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> nie powinna zawierać inicjowania obsługi, która wymaga argumentów.  
  
 Nie można zweryfikować tego konstruktora `baseUri`. Jednak `LoadGrammar` metody <xref:System.Speech.Recognition.SpeechRecognitionEngine> lub <xref:System.Speech.Recognition.SpeechRecognizer> obiektu zgłasza wyjątek, jeśli nie można rozpoznać wszystkich odwołań do reguły w opisie gramatyki. Jeśli `baseUri` nie jest `null`, `LoadGrammar` metoda używa Rozwiąż wszelkie odwołania reguły, które w przeciwnym razie nie można rozpoznać identyfikatora URI. Jeśli `baseUri` reprezentuje plik, a następnie `LoadGrammar` metoda używa zarówno wskazanego pliku i katalog pliku podczas próby rozpoznania odwołania względne reguła.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawanie mowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> zawiera odwołanie do pliku cities.xml względne reguła i określa identyfikator URI do użycia rozpoznania odwołania reguły. Zawartość pliku cities.xml pojawia się w następującym przykładzie XML przykład C#.  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> Nie można rozpoznać nazwy lub nie jest publiczny, lub <paramref name="ruleName" /> jest <see langword="null" /> i <paramref name="srgsDocument" /> nie zawiera reguły głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> zawiera odwołanie do reguły, których nie można rozpoznać.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do pliku, łącznie z biblioteki dll, zawiera specyfikację gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="parameters">Parametry do przekazania do inicjowania obsługi określonego przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub główna reguła z <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z pliku, który zawiera definicję gramatyki i określa nazwę reguły punktu wejścia do gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Żadnego z parametrów zawiera nieprawidłową wartość.  -Plik określony przez <paramref name="path" /> nie zawiera nieprawidłowy gramatyki lub reguły, określona w <paramref name="ruleName" />.  -Zawartości tablicy parametrów nie są zgodne argumenty reguły inicjowania obsługi.  — Gramatyka zawiera odwołanie względne reguła nie została rozpoznana przez base domyślne <see cref="T:System.Uri" /> reguła gramatyki.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> podłączone do obiektu wejścia/wyjścia (w tym pliki, zasoby Visual Studio i bibliotek DLL), który zawiera specyfikację gramatyki.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia rozpoznania wszystkich odwołań względne reguła w opisie gramatyki lub <see langword="null" />.</param>
        <param name="parameters">Parametry do przekazania do inicjowania obsługi określonego przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub główna reguła z <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Parametr może mieć wartość null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy <see cref="T:System.IO.Stream" /> i określa główna reguła i podstawowy identyfikator URI do rozpoznawania względnych odwołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Żadnego z parametrów zawiera nieprawidłową wartość.  - <paramref name="stream" /> Jest podłączony do gramatyki, która nie zawiera reguły, określone przez <paramref name="ruleName" />.  -Zawartości tablicy parametrów nie są zgodne argumenty reguły inicjowania obsługi.  — Gramatyka zawiera odwołanie względne reguła, którego nie można rozwiązać przez base domyślne <see cref="T:System.Uri" /> reguła gramatyki lub identyfikator URI dostarczony przez <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> zawierający ograniczenia dla gramatyki rozpoznawania mowy.</param>
        <param name="ruleName">Identyfikator reguły do użycia jako punkt wejścia gramatyki rozpoznawania mowy, lub <see langword="null" /> Aby użyć domyślnej reguły głównego opis gramatyki.</param>
        <param name="baseUri">Podstawowy identyfikator URI do użycia rozpoznania wszystkich odwołań względne reguła w opisie gramatyki lub <see langword="null" />.</param>
        <param name="parameters">Parametry do przekazania do inicjowania obsługi określonego przez <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> właściwości dla punktu wejścia lub główna reguła z <see cref="T:System.Speech.Recognition.Grammar" /> ma zostać utworzony. Ten parametr może mieć wartości null.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Grammar" /> klasy z wystąpienia <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />i określa nazwę reguły jako punkt wejścia podstawowy identyfikator URI do rozpoznania odwołania względne i gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także określić parametry inicjowania obsługi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-Żadnego z parametrów zawiera nieprawidłową wartość.  - <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> Określonego przez <paramref name="srgsDocument" /> nie zawiera reguły, określona w <paramref name="ruleName" />.  -Zawartości tablicy parametrów nie są zgodne argumenty reguły inicjowania obsługi.  — Gramatyka zawiera odwołanie względne reguła nie została rozpoznana przez base domyślne <see cref="T:System.Uri" /> reguła gramatyki lub identyfikator URI dostarczony przez <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Speech.Recognition.Grammar.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która kontroluje, czy <see cref="T:System.Speech.Recognition.Grammar" /> rozpoznawania mowy można przeprowadzać rozpoznawania.</summary>
        <value>
          <see langword="Enabled" /> Zwraca <see langword="true" /> Jeśli rozpoznawania mowy można wykonywać rozpoznawanie przy użyciu gramatyki rozpoznawania mowy; w przeciwnym razie wartość właściwości zwraca <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie <xref:System.Speech.Recognition.Grammar> mogą być włączone lub wyłączone niezależnie od ładowany przez aparat rozpoznawania mowy.  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje o <xref:System.Speech.Recognition.Grammar> do obiektu [konsoli](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStg : bool" Usage="System.Speech.Recognition.Grammar.IsStg" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy gramatyki jest silnie typizowane.</summary>
        <value>
          <see langword="IsStg" /> Zwraca <see langword="true" /> Jeśli gramatyki jest jednoznacznie; w przeciwnym razie wartość właściwości zwraca <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Silnie typizowanego <xref:System.Speech.Recognition.Grammar> obiektu (`IsStg` jest równe `true`) można zwrócić wyników jednoznacznie (obiekty, zamiast tekstu raw) do aplikacji klienckiej. Na przykład może zwrócić gramatyki jednoznacznie <xref:System.DateTime> obiektów zamiast nieprzetworzone dane wejściowe rozpoznany.  
  
 Można zaimplementować jednoznacznie gramatyki dołączając kodu z zasadami gramatyki. Jak aparat rozpoznawania przetwarza danej reguły, pobierania jako danych wejściowych bieżące wyniki częściowe, wykonywany jest skojarzony kod i informacji tekstowych staje się zaawansowanych typów obiektów. Dzięki temu klient łatwiej korzystania z rozszerzonej sprawdzanie semantycznego, obsługa wielu kultur i logiki wewnętrzny gramatyki.  
  
 Wystąpienie silnie typizowane <xref:System.Speech.Recognition.Grammar> obiekty są zazwyczaj uzyskiwane z zasobów w zestawie jako <xref:System.Type> z środowiska uruchomieniowego języka wspólnego (CLR). Przykłady takich są zlokalizowane typy używane do obsługi różnych języków <xref:System.Speech.Recognition.Grammar> obiektów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jednoznacznie gramatyki dziedziczących <see cref="T:System.Speech.Recognition.Grammar" /> należy zastąpić domyślne zachowanie <see langword="IsStg" />, które ma zwrócić <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Loaded : bool" Usage="System.Speech.Recognition.Grammar.Loaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy <see cref="T:System.Speech.Recognition.Grammar" /> został załadowany przez aparat rozpoznawania mowy.</summary>
        <value>
          <see langword="Loaded" /> Zwraca <see langword="true" /> Jeśli gramatyki rozpoznawania mowy przywoływanego jest aktualnie załadowany w rozpoznawania mowy; w przeciwnym razie wartość właściwości zwraca <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raz <xref:System.Speech.Recognition.Grammar> został załadowany, wartości <xref:System.Speech.Recognition.Grammar.Weight%2A>, i <xref:System.Speech.Recognition.Grammar.Priority%2A> nie można zmienić.  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje o <xref:System.Speech.Recognition.Grammar> do obiektu [konsoli](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberSignature Language="F#" Value="static member LoadLocalizedGrammarFromType : Type * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType (type, onInitParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">W zestawie <see cref="T:System.Type" /> na podstawie obiektu <see cref="T:System.Speech.Recognition.Grammar" />.</param>
        <param name="onInitParameters">Na podstawie parametrów, które mają być przekazane do metody inicjowania localizedobject <see cref="T:System.Speech.Recognition.Grammar" />. Parametr może mieć wartość null.</param>
        <summary>
          <see langword="LoadLocalizedGrammarFromType" /> Metoda zwraca zlokalizowany wystąpienia <see cref="T:System.Speech.Recognition.Grammar" /> pochodną obiektu <see cref="T:System.Type" />.</summary>
        <returns>
          <see langword="LoadLocalizedGrammarFromType" /> Metoda zwraca prawidłowy obiekt na podstawie <see cref="T:System.Speech.Recognition.Grammar" />, lub <see langword="null" /> Jeśli wystąpił błąd.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zlokalizowane gramatyki uzyskany z `LoadLocalizedGrammarFromType` są zwykle jednoznacznie (zobacz <xref:System.Speech.Recognition.Grammar.IsStg%2A> uzyskać więcej informacji o jednoznacznie gramatyki). Jeśli `onInitParameters` jest odwołanie o wartości null (Nothing w języku Visual Basic) zlokalizowanych gramatyki powinny mieć żadnej metody inicjowania lub metodę, która nie przyjmuje żadnych argumentów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Speech.Recognition.Grammar.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>
          <see langword="Name" /> Właściwość zwraca nazwę <see cref="T:System.Speech.Recognition.Grammar" /> obiektu. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy dwa <xref:System.Speech.Recognition.Grammar> obiektów, jeden dla cyfr i jeden dla ułamków. Obiekty gramatyki są przypisane nazwy względnej wagi i priorytety i ładowane przez aparat rozpoznawania mowy w procesie. `CreateDigitsGrammar`, `CreateFractionsGrammar`, I `recognizer_SpeechRecognized` metod nie są wyświetlane tutaj.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Speech.Recognition.Grammar.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość priorytetu <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>
          <see langword="Priority" /> Właściwość zwraca wartość całkowitą reprezentującą względny priorytet określony <see cref="T:System.Speech.Recognition.Grammar" />. Zakres wynosi od -128 do 127 znaków włącznie. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Priority` Właściwość jest używana do wybierania gramatyki, gdy więcej niż jedną gramatykę da wynik identyczne rozpoznawania. Jeśli aparat rozpoznawania mowy ma więcej niż jeden mowy rozpoznawania gramatyki załadowany i włączone odpowiadających danych wejściowych, i dopasowania jest najlepszym wynik aparatu rozpoznawania, a następnie aparat rozpoznawania używa gramatyki, która ma najwyższy `Priority`. Jeśli gramatyki, które dają w wyniku rozpoznawania identyczne również mają taki sam `Priority` wartości, a następnie gramatyki, która korzysta z aparatu rozpoznawania jest niezdefiniowana.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwa <xref:System.Speech.Recognition.Grammar> obiektów, jeden dla cyfr i jeden dla ułamków. <xref:System.Speech.Recognition.Grammar> Obiekty są przypisane nazwy względnej wagi i priorytety i ładowane przez aparat rozpoznawania mowy w procesie. `CreateDigitsGrammar`, `CreateFractionsGrammar`, I `recognizer_SpeechRecognized` metod nie są wyświetlane tutaj.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResourceName : string with get, set" Usage="System.Speech.Recognition.Grammar.ResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość z nazwą zasobu binarnego, użytej do załadowania bieżącej <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>
          <see langword="ResourceName" /> Właściwość zwraca nazwę zasobu binarnego, z którego gramatyki jednoznacznie używane przez <see cref="T:System.Speech.Recognition.Grammar" />, został załadowany.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RuleName : string" Usage="System.Speech.Recognition.Grammar.RuleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę głównej reguły lub wpis punktu <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>
          <see langword="RuleName" /> Właściwość zwraca identyfikator reguły głównego gramatyki rozpoznawania mowy do którego istnieje odwołanie. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby utworzyć <xref:System.Speech.Recognition.Grammar> obiektu i określić nazwę dla jej główna reguła, użyj jednej z <xref:System.Speech.Recognition.Grammar.%23ctor%2A> konstruktorów `ruleName` parametru.  
  
 Jeśli główna reguła z <xref:System.Speech.Recognition.Grammar> nie ma nazwy, właściwości zwraca `null`.  
  
 Zasady głównego <xref:System.Speech.Recognition.Grammar> wystąpienia utworzone na podstawie <xref:System.Speech.Recognition.GrammarBuilder> obiektów zwykle nie mieć nazwy, dlatego <xref:System.Speech.Recognition.Grammar.RuleName%2A> zwraca `null`.  
  
   
  
## Examples  
 Poniższy przykład zapisuje informacje o <xref:System.Speech.Recognition.Grammar> do obiektu [konsoli](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wywoływane, gdy aparat rozpoznawania mowy przeprowadza rozpoznawanie przy użyciu <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat rozpoznawania mowy również zgłasza `SpeechRecognized` zdarzeń po znalezieniu danych wejściowych. <xref:System.Speech.Recognition.Grammar> Obiektu <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenie jest wywoływane przed rozpoznawania mowy `SpeechRecognized` zdarzeń. Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, i <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> zdarzenia.  
  
 Wszystkie zadania, które są specyficzne dla konkretnego gramatyki zawsze powinno zostać obsłużone przez programy obsługi dla <xref:System.Speech.Recognition.Grammar> obiektu <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzeń.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie programu obsługi zdarzeń dla <xref:System.Speech.Recognition.Grammar> obiektu <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzeń. Go zapisuje wyniki rozpoznawania [konsoli](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.StgInit : obj[] -&gt; unit" Usage="grammar.StgInit parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">Parametry do przekazania do zainicjowania jednoznacznie gramatyki. Ten parametr może mieć wartości null.</param>
        <summary>
          <see langword="StgInit" /> Metoda inicjuje jednoznacznie gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Silnie typizowanego <xref:System.Speech.Recognition.Grammar> obiektu (`IsStg` jest równe `true`) można zwrócić wyników jednoznacznie (obiekty, zamiast tekstu raw) do aplikacji klienckiej. Na przykład może zwrócić gramatyki jednoznacznie <xref:System.DateTime> obiektów zamiast nieprzetworzone dane wejściowe rozpoznany.  
  
 Można zaimplementować jednoznacznie gramatyki dołączając kodu z zasadami gramatyki. Jak aparat rozpoznawania przetwarza danej reguły, pobierania jako danych wejściowych bieżące wyniki częściowe, wykonywany jest skojarzony kod i informacji tekstowych staje się zaawansowanych typów obiektów. Dzięki temu klient łatwiej korzystania z rozszerzonej sprawdzanie semantycznego, obsługa wielu kultur i logiki wewnętrzny gramatyki.  
  
 Wystąpienie silnie typizowane <xref:System.Speech.Recognition.Grammar> obiekty są zazwyczaj uzyskiwane z zasobów w zestawie jako <xref:System.Type> z środowiska uruchomieniowego języka wspólnego (CLR). Przykłady takich są zlokalizowane typy używane do obsługi różnych języków <xref:System.Speech.Recognition.Grammar> obiektów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli gramatyki jednoznacznie wymaga inicjowania <see langword="StgInit" /> powinna być wywoływana w konstruktorze lub metodę inicjalizacji.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Weight : single with get, set" Usage="System.Speech.Recognition.Grammar.Weight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wagi <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</summary>
        <value>
          <see langword="Weight" /> Zwraca zmiennoprzecinkowa wartość wskazującą względną wagę, które wystąpienie aparatu rozpoznawania należy przypisać do gramatyki podczas przetwarzania danych wejściowych mowy. Zakres wynosi od 0,0 do 1,0 włącznie. Wartość domyślna to 1.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ze względu na złożoność używanie aparatu rozpoznawania **wagi**, jego wpływ na wydajność określonego gramatyki nie jest bezpośrednio jako wartości prognozowanych co <xref:System.Speech.Recognition.Grammar.Priority%2A>.  
  
 Rozpoznawanie mowy jest ważony systemu. Oblicza wszystkie ścieżki rozpoznawania możliwe oparty na kombinacji wagę gramatyki, wag zdefiniowane dla alternatyw w ramach gramatyki i prawdopodobieństwa zdefiniowany przez modele mowy. Aparat rozpoznawania mowy używa kombinacji tych wag i prawdopodobieństwa do rangi potencjalnych uznania alternatywnych. Gramatyki o wagach wyższej przyczyniają się więcej na temat klasyfikacji alternatyw rozpoznawania niż gramatyki o wagach niższa.  
  
 Efekt <xref:System.Speech.Recognition.Grammar.Weight%2A> właściwość rozpoznawania mowy jest zależne od implementacji aparat rozpoznawania. Mimo że <xref:System.Speech.Recognition.Grammar.Weight%2A> właściwości mogą być używane w celu dostrojenia dokładność rozpoznawania mowy dla aplikacji, powinien być używany tylko po kontrolowane badania diagnostyczne rozpoznawanie konkretnego środowiska i wszystkie informacje o aparat rozpoznawania w obszarze użycie.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwa <xref:System.Speech.Recognition.Grammar> obiektów, jeden dla cyfr i jeden dla ułamków. <xref:System.Speech.Recognition.Grammar> Obiekty są przypisane nazwy względnej wagi i priorytety i ładowane przez aparat rozpoznawania mowy w procesie. `CreateDigitsGrammar`, `CreateFractionsGrammar`, I `recognizer_SpeechRecognized` metod nie są wyświetlane tutaj.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>