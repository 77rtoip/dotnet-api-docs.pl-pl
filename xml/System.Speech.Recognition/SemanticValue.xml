<Type Name="SemanticValue" FullName="System.Speech.Recognition.SemanticValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3512d3f365cea9b23f79251fe18457403d1417a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69101087" /></Metadata><TypeSignature Language="C#" Value="public sealed class SemanticValue : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Speech.Recognition.SemanticValue&gt;&gt;, System.Collections.Generic.IDictionary&lt;string,System.Speech.Recognition.SemanticValue&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Speech.Recognition.SemanticValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit SemanticValue extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Speech.Recognition.SemanticValue&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;string, class System.Speech.Recognition.SemanticValue&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Speech.Recognition.SemanticValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticValue" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemanticValue&#xA;Implements ICollection(Of KeyValuePair(Of String, SemanticValue)), IDictionary(Of String, SemanticValue), IEnumerable(Of KeyValuePair(Of String, SemanticValue))" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticValue sealed : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt;, System::Collections::Generic::IDictionary&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt;" />
  <TypeSignature Language="F#" Value="type SemanticValue = class&#xA;    interface IDictionary&lt;string, SemanticValue&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;string, SemanticValue&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;string, SemanticValue&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("'{_keyName}'= {Value}  -  Children = {_dictionary.Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Speech.Recognition.SemanticValue/SemanticValueDebugDisplay))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b84c7-101">Reprezentuje semantyczną organizację rozpoznanej frazy.</span><span class="sxs-lookup"><span data-stu-id="b84c7-101">Represents the semantic organization of a recognized phrase.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-102"><xref:System.Speech.Recognition.SemanticValue>jest obiektem podstawowym, który implementuje technologię semantyczną w System. Speech.</span><span class="sxs-lookup"><span data-stu-id="b84c7-102"><xref:System.Speech.Recognition.SemanticValue> is the primary object that implements the semantic technology in System.Speech.</span></span> <span data-ttu-id="b84c7-103">Interpretacja semantyczna umożliwia gramatykom definiowanie reguł używanych przez aparat rozpoznawania w celu prawidłowego interpretowania danych wejściowych audio.</span><span class="sxs-lookup"><span data-stu-id="b84c7-103">Semantic interpretation allows grammars to define rules for use by a recognition engine to correctly interpret audio input.</span></span> <span data-ttu-id="b84c7-104">Interpretacja semantyczna umożliwia również obsługę aparatów rozpoznawania w celu organizowania ich wyników, dzięki czemu można łatwiej przetwarzać, a nie zwracać tylko rozpoznane wyrazy i sekwencje wyrazów.</span><span class="sxs-lookup"><span data-stu-id="b84c7-104">Semantic interpretation also enables recognition engines to organize their results so that they can be more easily processed, rather than returning only recognized words and sequences of words.</span></span>  
  
 <span data-ttu-id="b84c7-105">Na przykład dane wyjściowe aparatu rozpoznawania "Zmień tło na czerwony" byłyby musiały zostać przeanalizowane i zinterpretowane przez aplikację, zanim będzie mogła zostać podjęta.</span><span class="sxs-lookup"><span data-stu-id="b84c7-105">For example, the recognition engine output "Change background to red" would have to be parsed and interpreted by an application before it could be acted upon.</span></span> <span data-ttu-id="b84c7-106"><xref:System.Speech.Recognition.Grammar> Obiekt może określać interpretację semantyczną, aby przetwarzać przetwarzanie przez określenie, że fraza ma dwie podstruktury semantyczne, jeden do wybierania tła lub pierwszego planu (reprezentowane przez tekst "tło"), a drugi do wybierania kolor (reprezentowany przez tekst "Red").</span><span class="sxs-lookup"><span data-stu-id="b84c7-106">A <xref:System.Speech.Recognition.Grammar> object can specify a semantic interpretation to make processing clearer by specifying that the phrase has two semantic substructures, one for selecting background or foreground (represented by the text "background"), and the other for selecting color (represented by the text "red").</span></span>  
  
 <span data-ttu-id="b84c7-107">System. Speech reprezentuje semantykę operacji rozpoznawania w drzewie <xref:System.Speech.Recognition.SemanticValue> obiektów.</span><span class="sxs-lookup"><span data-stu-id="b84c7-107">System.Speech represents the semantics of a recognition operation in a tree of <xref:System.Speech.Recognition.SemanticValue> objects.</span></span>  
  
 <span data-ttu-id="b84c7-108">Każde <xref:System.Speech.Recognition.SemanticValue> wystąpienie zawiera następujące elementy:</span><span class="sxs-lookup"><span data-stu-id="b84c7-108">Each <xref:System.Speech.Recognition.SemanticValue> instance includes the following:</span></span>  
  
-   <span data-ttu-id="b84c7-109">Element <xref:System.Object>, do którego można uzyskać dostęp <xref:System.Speech.Recognition.SemanticValue.Value%2A> za pomocą właściwości, służący do <xref:System.Speech.Recognition.SemanticValue>podkluczania wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b84c7-109">An <xref:System.Object>, accessed by means of the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property, used to key the instance of the <xref:System.Speech.Recognition.SemanticValue>.</span></span>  
  
-   <span data-ttu-id="b84c7-110">Miara dokładności analizy semantycznej zwracanej przez <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> właściwość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-110">A measure of the accuracy of semantic parsing, returned by the <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> property.</span></span>  
  
-   <span data-ttu-id="b84c7-111">Kolekcja par nazwa/wartość (<xref:System.Collections.Generic.KeyValuePair%602>) obiektów podrzędnych, które również <xref:System.Speech.Recognition.SemanticValue> są wystąpieniami.</span><span class="sxs-lookup"><span data-stu-id="b84c7-111">A collection of name/value pairs (<xref:System.Collections.Generic.KeyValuePair%602>) of child objects, which are also <xref:System.Speech.Recognition.SemanticValue> instances.</span></span> <span data-ttu-id="b84c7-112">Węzły podrzędne są dostępne przez <xref:System.Speech.Recognition.SemanticValue> <xref:System.Collections.Generic.IDictionary%602> implementację przy użyciu klucza wyszukiwania <xref:System.Speech.Recognition.SemanticValue> ciągów i wystąpienia, jak w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="b84c7-112">Child nodes are accessible through the <xref:System.Speech.Recognition.SemanticValue> implementation of <xref:System.Collections.Generic.IDictionary%602> using a string lookup key and a <xref:System.Speech.Recognition.SemanticValue> instance, as in the following example.</span></span>  
  
    ```csharp  
    foreach (KeyValuePair<String, SemanticValue> child in semantics)   
    {  
      Utils.CreateSemanticsTreeNodes(semanticsNode.Nodes, child.Value, child.Key);  
    }  
    ```  
  
 <span data-ttu-id="b84c7-113">Aparaty rozpoznawania w oparciu o system. Speech zapewniają poprawne <xref:System.Speech.Recognition.SemanticValue> wystąpienia dla wszystkich danych wyjściowych z rozpoznawania, nawet w przypadku fraz bez jawnej struktury semantycznej.</span><span class="sxs-lookup"><span data-stu-id="b84c7-113">Recognition engines based on System.Speech provide valid instances of <xref:System.Speech.Recognition.SemanticValue> for all output from recognition, even for phrases with no explicit semantic structure.</span></span>  
  
 <span data-ttu-id="b84c7-114">Wystąpienie dla frazy jest uzyskiwane <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> przy użyciu właściwości <xref:System.Speech.Recognition.RecognizedPhrase> obiektu (lub obiektów dziedziczących z niego, takich jak <xref:System.Speech.Recognition.RecognitionResult>). <xref:System.Speech.Recognition.SemanticValue></span><span class="sxs-lookup"><span data-stu-id="b84c7-114">The <xref:System.Speech.Recognition.SemanticValue> instance for a phrase is obtained using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object (or objects that inherit from it, such as <xref:System.Speech.Recognition.RecognitionResult>).</span></span>  
  
 <span data-ttu-id="b84c7-115"><xref:System.Speech.Recognition.SemanticValue>obiekty uzyskane dla rozpoznanych fraz bez struktury semantycznej są scharakteryzowane przez:</span><span class="sxs-lookup"><span data-stu-id="b84c7-115"><xref:System.Speech.Recognition.SemanticValue> objects obtained for recognized phrases without semantic structure are characterized by:</span></span>  
  
-   <span data-ttu-id="b84c7-116">Brak elementów podrzędnych (<xref:System.Speech.Recognition.SemanticValue.Count%2A> is 0).</span><span class="sxs-lookup"><span data-stu-id="b84c7-116">The lack of children (<xref:System.Speech.Recognition.SemanticValue.Count%2A> is 0).</span></span>  
  
-   <span data-ttu-id="b84c7-117"><xref:System.Speech.Recognition.SemanticValue.Value%2A> Właściwość jest`null`.</span><span class="sxs-lookup"><span data-stu-id="b84c7-117">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> property is `null`.</span></span>  
  
-   <span data-ttu-id="b84c7-118">Sztuczny poziom pewności semantycznej 1,0 (zwrócony przez <xref:System.Speech.Recognition.SemanticValue.Confidence%2A>).</span><span class="sxs-lookup"><span data-stu-id="b84c7-118">An artificial semantic confidence level of 1.0 (returned by <xref:System.Speech.Recognition.SemanticValue.Confidence%2A>).</span></span>  
  
 <span data-ttu-id="b84c7-119"><xref:System.Speech.Recognition.SemanticValue> Zwykle aplikacje tworzą wystąpienia pośrednio, dodając je do <xref:System.Speech.Recognition.Grammar> obiektów przy użyciu <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey> wystąpień, w połączeniu z <xref:System.Speech.Recognition.Choices> obiektami <xref:System.Speech.Recognition.GrammarBuilder> i.</span><span class="sxs-lookup"><span data-stu-id="b84c7-119">Typically, applications create <xref:System.Speech.Recognition.SemanticValue> instances indirectly, adding them to <xref:System.Speech.Recognition.Grammar> objects by using <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances,  in conjunction with  <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
 <span data-ttu-id="b84c7-120">Bezpośrednia konstrukcja <xref:System.Speech.Recognition.SemanticValue> wystąpienia jest przydatna podczas tworzenia gramatyki o jednoznacznie określonym typie.</span><span class="sxs-lookup"><span data-stu-id="b84c7-120">Direct construction of a <xref:System.Speech.Recognition.SemanticValue> instance is useful during the creation of strongly-typed grammars.</span></span>  
  
 <span data-ttu-id="b84c7-121"><xref:System.Speech.Recognition.SemanticValue>implementuje interfejsy <xref:System.Collections.Generic.IDictionary%602>, <xref:System.Collections.Generic.ICollection%601>i <xref:System.Collections.Generic.IEnumerable%601> .</span><span class="sxs-lookup"><span data-stu-id="b84c7-121"><xref:System.Speech.Recognition.SemanticValue> implements the <xref:System.Collections.Generic.IDictionary%602>, <xref:System.Collections.Generic.ICollection%601>, and <xref:System.Collections.Generic.IEnumerable%601> interfaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b84c7-122">Poniższy przykład pokazuje procedurę obsługi dla <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia, które służy do obsługi poleceń w celu zmiany koloru pierwszego planu i tła.</span><span class="sxs-lookup"><span data-stu-id="b84c7-122">The following example shows a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event designed to handle commands to change foreground and background color.</span></span>  
  
 <span data-ttu-id="b84c7-123">Program obsługi identyfikuje rozpoznane frazy, które nie mają bazowej struktury semantycznej <xref:System.Speech.Recognition.SemanticValue.Count%2A> , przez wykrycie <xref:System.Speech.Recognition.SemanticValue.Value%2A> wartości `null`zero i z.</span><span class="sxs-lookup"><span data-stu-id="b84c7-123">The handler identifies recognized phrases that have no underlying semantic structure by detecting a <xref:System.Speech.Recognition.SemanticValue.Count%2A> of zero and a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of `null`.</span></span> <span data-ttu-id="b84c7-124">Dane wyjściowe rozpoznawania są następnie przetwarzane bezpośrednio przez analizowanie nieprzetworzonego tekstu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-124">This recognition output is then processed directly by parsing the raw text.</span></span>  
  
 <span data-ttu-id="b84c7-125">W innych przypadkach program obsługi używa kluczy do uzyskania składników RGB nazwy koloru, aby określić, czy polecenie zmieni pierwszy plan lub tło, czy też wskazuje, że nie znaleziono prawidłowego klucza.</span><span class="sxs-lookup"><span data-stu-id="b84c7-125">In other cases, the handler uses keys to obtain the RGB components of a color name, to determine whether the command will change the foreground or background, or to indicate that no valid key was found.</span></span>  
  
```csharp  
  
newGrammar.SpeechRecognized +=  
  delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
  
    // Retrieve the value of the semantic property.  
    bool changeBackGround = true;  
    string errorString = "";  
    SemanticValue semantics = eventArgs.Result.Semantics;  
  
    Color newColor = Color.Empty;  
  
    try   
    {  
      if (semantics.Count == 0 && semantics.Value==null)  
      {  
        // Signifies recognition by a grammar with no semantics.  
        // Parse the string, assuming that the last word is color,  
        // and search for "background" or "foreground" in the input.  
        if (eventArgs.Result.Text.Contains("foreground"))   
        {  
          changeBackGround = false;  
        }  
        string cName = eventArgs.Result.Words[eventArgs.Result.Words.Count - 1].Text;  
        newColor = Color.FromName(cName);  
  
      }  
      else if (semantics.ContainsKey("colorStringList") ^ semantics.ContainsKey("colorRGBValueList"))   
      {  
  
        // Determine whether to change background or foreground.  
        if (semantics.ContainsKey("applyChgToBackground"))   
        {  
          changeBackGround = semantics["applyChgToBackground"].Value is bool;  
        }  
  
        // Get the RGB color value.  
        if (semantics.ContainsKey("colorStringList"))   
        {  
          newColor = Color.FromName((string)semantics["colorStringList"].Value);  
        }  
        if (semantics.ContainsKey("colorRGBValueList"))   
        {  
          newColor = System.Drawing.Color.FromArgb((int)semantics["colorRGBValueList"].Value);  
        }  
      }  
      else   
      {  
  
        // Throw an exception if the semantics do not contain the keys we  
        // support.  
        throw(new Exception("Unsupported semantics keys found."));  
      }  
    }  
  
    catch (Exception exp)   
    {  
      MessageBox.Show(String.Format("Unable to process color semantics.:\n{0}\n", exp.Message));  
      return;  
    }  
  
    // Change colors, either foreground or background.  
    if (changeBackGround)   
    {  
      BackColor = newColor;  
      float Bright = BackColor.GetBrightness();  
      float Hue = BackColor.GetHue();  
      float Sat = BackColor.GetSaturation();  
  
      // Make sure that text is readable regardless of the background.  
      if (BackColor.GetBrightness() <= .50)   
      {  
        ForeColor = Color.White;  
      }  
      else   
      {  
        ForeColor = Color.Black;  
      }  
    }  
    else   
    {  
      ForeColor = newColor;  
      float Bright = ForeColor.GetBrightness();  
      float Hue = ForeColor.GetHue();  
      float Sat = ForeColor.GetSaturation();  
  
      // Make sure that text is readable regardless of Foreground.  
      if (ForeColor.GetBrightness() <= .50)   
      {  
        BackColor = Color.White;  
      }  
      else   
      {  
        BackColor = Color.Black;  
      }  
    }  
    return;  
  };  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b84c7-126">Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SemanticValue" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="b84c7-126">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SemanticValue" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-127">Zazwyczaj nie utworzysz <xref:System.Speech.Recognition.SemanticValue> obiektów jawnie, z tą różnicą, że nie obsługują kompilowania silnie wpisanych gramatyki.</span><span class="sxs-lookup"><span data-stu-id="b84c7-127">Typically, you will not create <xref:System.Speech.Recognition.SemanticValue> objects explicitly, except to support the building of strongly-typed grammars.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticValue : obj -&gt; System.Speech.Recognition.SemanticValue" Usage="new System.Speech.Recognition.SemanticValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b84c7-128">Informacje, które mają być przechowywane w <see cref="T:System.Speech.Recognition.SemanticValue" /> obiekcie.</span><span class="sxs-lookup"><span data-stu-id="b84c7-128">The information to be stored in the <see cref="T:System.Speech.Recognition.SemanticValue" /> object.</span></span></param>
        <summary><span data-ttu-id="b84c7-129">Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SemanticValue" /> klasy i określa wartość semantyczną.</span><span class="sxs-lookup"><span data-stu-id="b84c7-129">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SemanticValue" /> class and specifies a semantic value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-130">Nie ma żadnych ograniczeń dotyczących typu `value` , który ma być przechowywany.</span><span class="sxs-lookup"><span data-stu-id="b84c7-130">There are no restrictions on the type of `value` to be stored.</span></span>  
  
 <span data-ttu-id="b84c7-131">Aplikacja może pobrać `value` <xref:System.Speech.Recognition.SemanticValue.Value%2A> przy użyciu właściwości w <xref:System.Speech.Recognition.SemanticValue> wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-131">An application can retrieve `value` by using the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property on a <xref:System.Speech.Recognition.SemanticValue> instance.</span></span>  
  
 <span data-ttu-id="b84c7-132">Wartość <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> właściwości<xref:System.Speech.Recognition.SemanticValue> wystąpienia zostanie ustawiona na-1.</span><span class="sxs-lookup"><span data-stu-id="b84c7-132">The value of the <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> property for the <xref:System.Speech.Recognition.SemanticValue> instance will be set to -1.</span></span>  
  
 <span data-ttu-id="b84c7-133">Nie można odwoływać się do konstrukcjiztąmetodąprzyużyciunazwyklucza.<xref:System.Speech.Recognition.SemanticValue></span><span class="sxs-lookup"><span data-stu-id="b84c7-133">A <xref:System.Speech.Recognition.SemanticValue> constructed with this method cannot be referenced by key name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticValue (string keyName, object value, float confidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string keyName, object value, float32 confidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyName As String, value As Object, confidence As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticValue(System::String ^ keyName, System::Object ^ value, float confidence);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticValue : string * obj * single -&gt; System.Speech.Recognition.SemanticValue" Usage="new System.Speech.Recognition.SemanticValue (keyName, value, confidence)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="confidence" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="keyName"><span data-ttu-id="b84c7-134">Klucz, który może służyć do odwoływania się <see cref="T:System.Speech.Recognition.SemanticValue" /> do tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b84c7-134">A key that can be used to reference this <see cref="T:System.Speech.Recognition.SemanticValue" /> instance.</span></span></param>
        <param name="value"><span data-ttu-id="b84c7-135">Obiekt zawierający informacje, które mają być przechowywane w <see cref="T:System.Speech.Recognition.SemanticValue" /> obiekcie.</span><span class="sxs-lookup"><span data-stu-id="b84c7-135">An object containing information to be stored in the <see cref="T:System.Speech.Recognition.SemanticValue" /> object.</span></span></param>
        <param name="confidence"><span data-ttu-id="b84c7-136">A <see langword="float" /> zawierające oszacowanie pewności analizy semantycznej.</span><span class="sxs-lookup"><span data-stu-id="b84c7-136">A <see langword="float" /> containing an estimate of the certainty of semantic analysis.</span></span></param>
        <summary><span data-ttu-id="b84c7-137">Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SemanticValue" /> klasy i określa wartość semantyczną, nazwę klucza i poziom zaufania.</span><span class="sxs-lookup"><span data-stu-id="b84c7-137">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SemanticValue" /> class and specifies a semantic value, a key name, and a confidence level.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-138">Nie ma żadnych ograniczeń dotyczących typu `value` , który ma być przechowywany.</span><span class="sxs-lookup"><span data-stu-id="b84c7-138">There are no restrictions on the type of `value` to be stored.</span></span>  
  
 <span data-ttu-id="b84c7-139">Aplikacja może pobrać `value` <xref:System.Speech.Recognition.SemanticValue.Value%2A> przy użyciu właściwości w <xref:System.Speech.Recognition.SemanticValue> wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-139">An application can retrieve `value` by using the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property on a <xref:System.Speech.Recognition.SemanticValue> instance.</span></span>  
  
 <span data-ttu-id="b84c7-140">Parametr (zwracany <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> przez właściwość w <xref:System.Speech.Recognition.SemanticValue> wystąpieniu) powinien mieć wartość z przedziału od 0,0 do 1,0. `confidence`</span><span class="sxs-lookup"><span data-stu-id="b84c7-140">The `confidence` parameter (returned by the <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> property on a <xref:System.Speech.Recognition.SemanticValue> instance), should be between 0.0 and 1.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SemanticValue.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.SemanticValue.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b84c7-141">Zwraca względną miarę pewności co do poprawności analizy semantycznej, która zwróciła bieżące wystąpienie <see cref="T:System.Speech.Recognition.SemanticValue" />.</span><span class="sxs-lookup"><span data-stu-id="b84c7-141">Returns a relative measure of the certainty as to the correctness of the semantic parsing that returned the current instance of <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></summary>
        <value><span data-ttu-id="b84c7-142">Zwraca obiekt <see langword="float" /> , który jest względną miarą pewności analizy semantycznej, która zwróciła bieżące <see cref="T:System.Speech.Recognition.SemanticValue" />wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="b84c7-142">Returns a <see langword="float" /> that is a relative measure of the certainty of semantic parsing that returned the current instance of <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-143">Właściwość, która zwraca miarę poprawności analizy semantycznej, nie należy mylić <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A?displayProperty=nameWithType> z właściwością, która zwraca miarę dokładności rozpoznawania mowy. <xref:System.Speech.Recognition.SemanticValue.Confidence%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b84c7-143">The <xref:System.Speech.Recognition.SemanticValue.Confidence%2A?displayProperty=nameWithType> property, which returns a measure of the correctness of semantic parsing, should not be confused with the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A?displayProperty=nameWithType> property, which returns a measure of the accuracy of speech recognition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b84c7-144">Poniższy przykład służy do rekursywnego przechodzenia, a następnie wyświetlania informacji (w tym zaufania) jako <xref:System.Windows.Forms.TreeNodeCollection>lub węzłów tworzących strukturę drzewa semantyki używanej do rozpoznawania frazy.</span><span class="sxs-lookup"><span data-stu-id="b84c7-144">The following example is used to recursively traverse and then display information (including confidence) as a <xref:System.Windows.Forms.TreeNodeCollection>, or as the nodes making up the tree structure of the semantics used to recognize a phrase.</span></span>  
  
```csharp  
internal static void CreateSemanticsTreeNodes(  
        TreeNodeCollection nodes,  
        SemanticValue semantics,  
        String name)   
{  
  string semanticsText =   
      String.Format("  {0}  (Confidence {1})", name,semantics.Confidence);  
  
  // Format integers as hexadecimal.  
  if (semantics.Value == null )  
  {  
    semanticsText = semanticsText + " = null";  
  }  
  else if (semantics.Value.GetType() == typeof(int))   
  {  
    semanticsText = String.Format("{0} = {1:X} ", semanticsText, semantics.Value);  
  }   
  else   
  {  
    semanticsText = semanticsText + " = " + semantics.Value.ToString();  
  }  
  
  TreeNode semanticsNode = new TreeNode(semanticsText);  
  foreach (KeyValuePair<String, SemanticValue> child in semantics)   
  {  
    CreateSemanticsTreeNodes(semanticsNode.Nodes, child.Value, child.Key);  
  }  
  nodes.Add(semanticsNode);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Collections.Generic.KeyValuePair&lt;string,System.Speech.Recognition.SemanticValue&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Speech.Recognition.SemanticValue&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As KeyValuePair(Of String, SemanticValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt; item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Collections.Generic.KeyValuePair&lt;string, System.Speech.Recognition.SemanticValue&gt; -&gt; bool&#xA;override this.Contains : System.Collections.Generic.KeyValuePair&lt;string, System.Speech.Recognition.SemanticValue&gt; -&gt; bool" Usage="semanticValue.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="b84c7-145">Wystąpienie <see cref="T:System.Collections.Generic.KeyValuePair`2" /> wystąpienia dla danej wartości ciągu klucza <see cref="T:System.Speech.Recognition.SemanticValue" /> i wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b84c7-145">An instance of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> instantiated for a given value of a key string and a <see cref="T:System.Speech.Recognition.SemanticValue" /> instance.</span></span></param>
        <summary><span data-ttu-id="b84c7-146">Wskazuje, czy bieżąca <see cref="T:System.Speech.Recognition.SemanticValue" /> kolekcja wystąpień zawiera określony klucz i określone <see cref="T:System.Speech.Recognition.SemanticValue" /> wystąpienie wartości wyrażone jako para klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-146">Indicates whether the current <see cref="T:System.Speech.Recognition.SemanticValue" /> instance collection contains a specific key and a specific instance of <see cref="T:System.Speech.Recognition.SemanticValue" /> expressed as a key/value pair.</span></span></summary>
        <returns><span data-ttu-id="b84c7-147"><c>&lt;&gt;</c> <see cref="T:System.Speech.Recognition.SemanticValue" /> <see langword="true" /> Zwraca wartość <see cref="T:System.Speech.Recognition.SemanticValue" />, która jest, jeśli bieżąca zawiera wystąpienie ciągu KeyValuePair, SemanticValue dla określonej wartości ciągu klucza i. <see langword="bool" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-147">Returns a <see langword="bool" /> which is <see langword="true" /> if the current <see cref="T:System.Speech.Recognition.SemanticValue" /> contains an instance of <c>KeyValuePair&lt;String, SemanticValue&gt;</c> for a specified value of the key string and the <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span> <span data-ttu-id="b84c7-148">W przeciwnym razie jest zwracany. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-148">Otherwise, <see langword="false" /> is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="semanticValue.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b84c7-149"><see cref="T:System.String" />zawierający ciąg klucza używany do identyfikowania wystąpienia <see cref="T:System.Speech.Recognition.SemanticValue" /> podrzędnego pod bieżącym. <see cref="T:System.Speech.Recognition.SemanticValue" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-149"><see cref="T:System.String" /> containing the key string used to identify a child instance of <see cref="T:System.Speech.Recognition.SemanticValue" /> under the current <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></param>
        <summary><span data-ttu-id="b84c7-150">Wskazuje, czy bieżące <see cref="T:System.Speech.Recognition.SemanticValue" /> kolekcje wystąpień zawierają wystąpienie podrzędne <see cref="T:System.Speech.Recognition.SemanticValue" /> z danym ciągiem klucza.</span><span class="sxs-lookup"><span data-stu-id="b84c7-150">Indicates whether the current <see cref="T:System.Speech.Recognition.SemanticValue" /> instance collection contains a child <see cref="T:System.Speech.Recognition.SemanticValue" /> instance with a given key string.</span></span></summary>
        <returns><span data-ttu-id="b84c7-151"><see cref="T:System.Speech.Recognition.SemanticValue" /> <paramref name="key" /> <see langword="false" /> Zwraca, Jeśli<see langword="true" /> znaleziono wystąpienie podrzędne oznaczone ciągiem, jeśli nie. <see langword="bool" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-151">Returns a <see langword="bool" />, <see langword="true" /> if a child instance <see cref="T:System.Speech.Recognition.SemanticValue" /> tagged with the string <paramref name="key" /> is found, <see langword="false" /> if not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-152">Dostęp do danych można uzyskać tylko według wartości klucza w czasie wykonywania, na przykład w celu sprawdzenia *semantyki ["klucze"]. Wartość*i generuje wyjątek.</span><span class="sxs-lookup"><span data-stu-id="b84c7-152">You can only access data by key value at runtime, for example to check *semantic["myKey"].Value*, and this generates an exception.</span></span> <span data-ttu-id="b84c7-153">Zaleca się wykonanie zapytania względem obiektu za <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> pomocą polecenia przed użyciem <xref:System.Speech.Recognition.SemanticValue.Item%2A> <xref:System.Speech.Recognition.SemanticValue>z danym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="b84c7-153">We recommend that you query the object with <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> before using <xref:System.Speech.Recognition.SemanticValue.Item%2A> with a given instance of <xref:System.Speech.Recognition.SemanticValue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b84c7-154">Poniższy przykład pokazuje procedurę obsługi dla <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia, które służy do obsługi poleceń w celu zmiany koloru pierwszego planu i tła.</span><span class="sxs-lookup"><span data-stu-id="b84c7-154">The following example shows a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event designed to handle commands to change foreground and background color.</span></span>  
  
 <span data-ttu-id="b84c7-155">Po obsłudze fraz, które są rozpoznawane, ale nie mają struktury semantycznej, program obsługi sprawdza obecność odpowiednich <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> kluczy`applyChgToBackground`przy `colorRGBValueList`użyciu ( `colorStringList)`,, lub, a następnie przetwarza semantycznie zorganizowane dane.</span><span class="sxs-lookup"><span data-stu-id="b84c7-155">After handling phrases that are recognized but have no semantic structure, the handler checks for the presence of appropriate keys using <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> (`applyChgToBackground`, `colorRGBValueList`, or `colorStringList)`,  and then processes the semantically organized data.</span></span>  
  
```csharp  
  
newGrammar.SpeechRecognized +=  
  delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
  
    // Retrieve the value of the semantic property.  
    bool changeBackGround = true;  
    string errorString = "";  
    SemanticValue semantics = eventArgs.Result.Semantics;  
  
    Color newColor = Color.Empty;  
  
    try   
    {  
      if (semantics.Count == 0 && semantics.Value==null)  
      {  
  
        // Signifies recognition by a grammar with no semantics.  
        // Parse the string, assuming that the last word is color,  
        // searching for background or foreground in input.  
        if (eventArgs.Result.Text.Contains("foreground"))   
        {  
          changeBackGround = false;  
        }  
        string cName = eventArgs.Result.Words[eventArgs.Result.Words.Count - 1].Text;  
        newColor = Color.FromName(cName);  
  
      }  
      else if (semantics.ContainsKey("colorStringList") ^ semantics.ContainsKey("colorRGBValueList"))   
      {  
  
        // Determine whether to change background or foreground.  
        if (semantics.ContainsKey("applyChgToBackground"))   
        {  
          changeBackGround = semantics["applyChgToBackground"].Value is bool;  
        }  
  
        // Get the RGB color value.  
        if (semantics.ContainsKey("colorStringList"))   
        {  
          newColor = Color.FromName((string)semantics["colorStringList"].Value);  
        }  
        if (semantics.ContainsKey("colorRGBValueList"))   
        {  
          newColor = System.Drawing.Color.FromArgb((int)semantics["colorRGBValueList"].Value);  
        }  
      }  
      else   
      {  
  
        // Throw an exception if the semantics do not contain the keys we  
        // support.  
        throw(new Exception("Unsupported semantics keys found."));  
      }  
    }  
  
    catch (Exception exp)   
    {  
      MessageBox.Show(String.Format("Unable to process color semantics.:\n{0}\n", exp.Message));  
      return;  
    }  
  
    // Change colors, either foreground or background.  
    if (changeBackGround)   
    {  
      BackColor = newColor;  
      float Bright = BackColor.GetBrightness();  
      float Hue = BackColor.GetHue();  
      float Sat = BackColor.GetSaturation();  
      // Make sure that text is readable regardless of background.  
      if (BackColor.GetBrightness() <= .50)   
      {  
        ForeColor = Color.White;  
      }  
      else   
      {  
        ForeColor = Color.Black;  
      }  
    }  
    else   
    {  
      ForeColor = newColor;  
      float Bright = ForeColor.GetBrightness();  
      float Hue = ForeColor.GetHue();  
      float Sat = ForeColor.GetSaturation();  
      // Make sure that text is readable regardless of Foreground.  
      if (ForeColor.GetBrightness() <= .50)   
      {  
        BackColor = Color.White;  
      }  
      else   
      {  
        BackColor = Color.Black;  
      }  
    }  
    return;  
  };  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SemanticValue.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Speech.Recognition.SemanticValue.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b84c7-156">Zwraca liczbę obiektów podrzędnych <see cref="T:System.Speech.Recognition.SemanticValue" /> w bieżącym <see cref="T:System.Speech.Recognition.SemanticValue" /> wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-156">Returns the number of child <see cref="T:System.Speech.Recognition.SemanticValue" /> objects under the current <see cref="T:System.Speech.Recognition.SemanticValue" /> instance.</span></span></summary>
        <value><span data-ttu-id="b84c7-157">Liczba obiektów podrzędnych <see cref="T:System.Speech.Recognition.SemanticValue" /> w bieżącym <see cref="T:System.Speech.Recognition.SemanticValue" />.</span><span class="sxs-lookup"><span data-stu-id="b84c7-157">The number of child <see cref="T:System.Speech.Recognition.SemanticValue" /> objects under the current <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-158">Wyniki rozpoznawania, które nie korzystają z analizy semantycznej, zawsze mają <xref:System.Speech.Recognition.SemanticValue.Count%2A> wartość zero, `null`a <xref:System.Speech.Recognition.SemanticValue.Value%2A> także.</span><span class="sxs-lookup"><span data-stu-id="b84c7-158">Recognition results that do not make use of semantic parsing always have a <xref:System.Speech.Recognition.SemanticValue.Count%2A> value of zero, as well as a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b84c7-159">Poniższy przykład pokazuje procedurę obsługi dla <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia, które służy do obsługi poleceń w celu zmiany koloru pierwszego planu i tła.</span><span class="sxs-lookup"><span data-stu-id="b84c7-159">The following example shows a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event designed to handle commands to change foreground and background color.</span></span>  
  
 <span data-ttu-id="b84c7-160">Program obsługi identyfikuje rozpoznane frazy, które nie mają bazowej struktury semantycznej <xref:System.Speech.Recognition.SemanticValue.Count%2A> , przez wykrycie <xref:System.Speech.Recognition.SemanticValue.Value%2A> wartości `null`zero i z.</span><span class="sxs-lookup"><span data-stu-id="b84c7-160">The handler identifies recognized phrases that have no underlying semantic structure by detecting a <xref:System.Speech.Recognition.SemanticValue.Count%2A> of zero and a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of `null`.</span></span> <span data-ttu-id="b84c7-161">Dane wyjściowe rozpoznawania są następnie przetwarzane bezpośrednio przez analizowanie nieprzetworzonego tekstu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-161">This recognition output is then processed directly by parsing the raw text.</span></span>  
  
 <span data-ttu-id="b84c7-162">W innych przypadkach program obsługi używa kluczy do uzyskania składników RGB nazwy koloru, aby określić, czy polecenie zmieni pierwszy plan lub tło, czy też wskazuje, że nie znaleziono prawidłowego klucza.</span><span class="sxs-lookup"><span data-stu-id="b84c7-162">In other cases, the handler uses keys to obtain the RGB components of a color name, to determine whether the command will change the foreground or background, or to indicate that no valid key was found.</span></span>  
  
```csharp  
  
newGrammar.SpeechRecognized +=  
  delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
  
    // Retrieve the value of the semantic property.  
    bool changeBackGround = true;  
    string errorString = "";  
    SemanticValue semantics = eventArgs.Result.Semantics;  
  
    Color newColor = Color.Empty;  
  
    try   
    {  
      if (semantics.Count == 0 && semantics.Value==null)  
      {  
        // Signifies recognition by a grammar with no semantics.  
        // Parse the string, assuming that the last word is color,  
        //  searching for background or foreground in input.  
        if (eventArgs.Result.Text.Contains("foreground"))   
        {  
          changeBackGround = false;  
        }  
        string cName = eventArgs.Result.Words[eventArgs.Result.Words.Count - 1].Text;  
        newColor = Color.FromName(cName);  
  
      }  
      else if (semantics.ContainsKey("colorStringList") ^ semantics.ContainsKey("colorRGBValueList"))   
      {  
  
        // Determine whether to change background or foreground.  
        if (semantics.ContainsKey("applyChgToBackground"))   
        {  
          changeBackGround = semantics["applyChgToBackground"].Value is bool;  
        }  
  
        // Get the RGB color value.  
        if (semantics.ContainsKey("colorStringList"))   
        {  
          newColor = Color.FromName((string)semantics["colorStringList"].Value);  
        }  
        if (semantics.ContainsKey("colorRGBValueList"))   
        {  
          newColor = System.Drawing.Color.FromArgb((int)semantics["colorRGBValueList"].Value);  
        }  
      }  
      else   
      {  
  
        // Throw an exception if the semantics do not contain the keys we  
        // support.  
        throw(new Exception("Unsupported semantics keys found."));  
      }  
    }  
  
    catch (Exception exp)   
    {  
      MessageBox.Show(String.Format("Unable to process color semantics.:\n{0}\n", exp.Message));  
      return;  
    }  
  
    // Change colors, either foreground or background.  
    if (changeBackGround)   
    {  
      BackColor = newColor;  
      float Bright = BackColor.GetBrightness();  
      float Hue = BackColor.GetHue();  
      float Sat = BackColor.GetSaturation();  
      // Make sure that text is readable regardless of background.  
      if (BackColor.GetBrightness() <= .50)   
      {  
        ForeColor = Color.White;  
      }  
      else   
      {  
        ForeColor = Color.Black;  
      }  
    }  
    else   
    {  
      ForeColor = newColor;  
      float Bright = ForeColor.GetBrightness();  
      float Hue = ForeColor.GetHue();  
      float Sat = ForeColor.GetSaturation();  
  
      // Make sure that text is readable regardless of Foreground.  
      if (ForeColor.GetBrightness() <= .50)   
      {  
        BackColor = Color.White;  
      }  
      else   
      {  
        BackColor = Color.Black;  
      }  
    }  
    return;  
  };  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="semanticValue.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b84c7-163">Obiekt do obliczenia.</span><span class="sxs-lookup"><span data-stu-id="b84c7-163">The object to evaluate.</span></span></param>
        <summary><span data-ttu-id="b84c7-164">Określa, czy określony obiekt jest wystąpieniem elementu <c>SemanticValue</c> i jest równy bieżącemu wystąpieniu elementu <c>SemanticValue</c>.</span><span class="sxs-lookup"><span data-stu-id="b84c7-164">Determines whether a specified object is an instance of <c>SemanticValue</c> and equal to the current instance of <c>SemanticValue</c>.</span></span></summary>
        <returns><span data-ttu-id="b84c7-165"><see langword="true" />Jeśli określony obiekt jest równy bieżącemu obiektowi; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-165"><see langword="true" /> if the specified Object is equal to the current Object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="semanticValue.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b84c7-166">Zawiera kod skrótu dla obiektu <c>SemanticValue</c> .</span><span class="sxs-lookup"><span data-stu-id="b84c7-166">Provides a hash code for a <c>SemanticValue</c> object.</span></span></summary>
        <returns><span data-ttu-id="b84c7-167">Kod skrótu dla bieżącego <see cref="T:System.Speech.Recognition.SemanticValue" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-167">A hash code for the current <see cref="T:System.Speech.Recognition.SemanticValue" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SemanticValue.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As String) As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ default[System::String ^] { System::Speech::Recognition::SemanticValue ^ get(System::String ^ key); void set(System::String ^ key, System::Speech::Recognition::SemanticValue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Speech.Recognition.SemanticValue with get, set" Usage="System.Speech.Recognition.SemanticValue.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b84c7-168">Klucz <see langword="KeyValuePair&lt;String, SemanticValue&gt;" /> zawarty w bieżącym <see cref="T:System.Speech.Recognition.SemanticValue" />wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-168">A key for a <see langword="KeyValuePair&lt;String, SemanticValue&gt;" /> contained in the current instance of <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></param>
        <summary><span data-ttu-id="b84c7-169">Zwraca wystąpienia <see cref="T:System.Speech.Recognition.SemanticValue" /> podrzędne należące do bieżącego <see cref="T:System.Speech.Recognition.SemanticValue" />elementu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-169">Returns child <see cref="T:System.Speech.Recognition.SemanticValue" /> instances that  belong to the current <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></summary>
        <value><span data-ttu-id="b84c7-170">Zwraca element podrzędny bieżącego <see cref="T:System.Speech.Recognition.SemanticValue" /> , który może być indeksowany jako część pary klucz wartość: <c>Ciąg&lt;KeyValuePair,</c><c>SemanticValue&gt;</c>.</span><span class="sxs-lookup"><span data-stu-id="b84c7-170">Returns a child of the current <see cref="T:System.Speech.Recognition.SemanticValue" /> that can be indexed as part of a key value pair: <c>KeyValuePair&lt;String,</c><c>SemanticValue&gt;</c>.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-171">Jest <xref:System.Speech.Recognition.SemanticValue.Item%2A> tylko do odczytu i generuje wyjątki, jeśli elementy członkowskie są modyfikowane.</span><span class="sxs-lookup"><span data-stu-id="b84c7-171">The <xref:System.Speech.Recognition.SemanticValue.Item%2A> is read-only and generates exceptions if members are modified.</span></span>  
  
 <span data-ttu-id="b84c7-172">Dostęp do danych można uzyskać tylko według wartości klucza w czasie wykonywania, a nie w czasie kompilacji, na przykład w celu `semantic["myKey"].Value`sprawdzenia.</span><span class="sxs-lookup"><span data-stu-id="b84c7-172">You can only access data by key value at run-time, not at compile-time, for example to check `semantic["myKey"].Value`.</span></span> <span data-ttu-id="b84c7-173">Określenie nieobecnego klucza generuje wyjątek.</span><span class="sxs-lookup"><span data-stu-id="b84c7-173">Specifying a key that is not present generates an exception.</span></span>  
  
 <span data-ttu-id="b84c7-174">Aby wykryć obecność danego klucza, użyj <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> właściwości <xref:System.Speech.Recognition.SemanticValue> w wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-174">To detect the presence of a given key, use the <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> property on an <xref:System.Speech.Recognition.SemanticValue> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b84c7-175">Poniższy przykład pokazuje procedurę obsługi dla <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia, które służy do obsługi poleceń w celu zmiany koloru pierwszego planu i tła.</span><span class="sxs-lookup"><span data-stu-id="b84c7-175">The following example shows a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event designed to handle commands to change foreground and background color.</span></span>  
  
 <span data-ttu-id="b84c7-176">Po obsłudze rozpoznanych fraz, które nie mają struktury semantycznej, program obsługi sprawdza obecność odpowiednich kluczy <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> przy`applyChgToBackground`użyciu `colorRGBValueList`(, `colorStringList)`, lub, a następnie <xref:System.Speech.Recognition.SemanticValue.Item%2A> używa właściwości w celu uzyskania węzłów z wymaganymi informacjami.</span><span class="sxs-lookup"><span data-stu-id="b84c7-176">After handling recognized phrases that have no semantic structure, the handler checks for the presence of appropriate keys using <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> (`applyChgToBackground`, `colorRGBValueList`, or `colorStringList)`, and then uses the <xref:System.Speech.Recognition.SemanticValue.Item%2A> property to obtain the nodes with needed information.</span></span>  
  
 <span data-ttu-id="b84c7-177">Użycie <xref:System.Speech.Recognition.SemanticValue.Item%2A> jest wyróżnione poniżej.</span><span class="sxs-lookup"><span data-stu-id="b84c7-177">The use of <xref:System.Speech.Recognition.SemanticValue.Item%2A> is highlighted below.</span></span>  
  
```csharp  
  
newGrammar.SpeechRecognized +=  
  delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
  
    // Retrieve the value of the semantic property.  
    bool changeBackGround = true;  
    string errorString = "";  
    SemanticValue semantics = eventArgs.Result.Semantics;  
  
    Color newColor = Color.Empty;  
  
    try   
    {  
      if (semantics.Count == 0 && semantics.Value==null)  
      {  
        // Signifies recognition by a grammar with no semantics.  
        // Parse the string, assuming that the last word is color,  
        //  searching for background or foreground in input.  
        if (eventArgs.Result.Text.Contains("foreground"))   
        {  
          changeBackGround = false;  
        }  
        string cName = eventArgs.Result.Words[eventArgs.Result.Words.Count - 1].Text;  
        newColor = Color.FromName(cName);  
  
      }  
      else if (semantics.ContainsKey("colorStringList") ^ semantics.ContainsKey("colorRGBValueList"))   
      {  
  
        // Determine whether to change background or foreground.  
        if (semantics.ContainsKey("applyChgToBackground"))   
        {  
          changeBackGround = semantics["applyChgToBackground"].Value is bool;  
        }  
  
        // Get the RGB color value.  
        if (semantics.ContainsKey("colorStringList"))   
        {  
          newColor = Color.FromName((string)semantics["colorStringList"].Value);  
        }  
        if (semantics.ContainsKey("colorRGBValueList"))   
        {  
          newColor = System.Drawing.Color.FromArgb((int)semantics["colorRGBValueList"].Value);  
        }  
      }  
      else   
      {  
  
        // Throw an exception if the semantics do not contain the keys we  
        // support.  
        throw(new Exception("Unsupported semantic keys found."));  
      }  
    }  
  
    catch (Exception exp)   
    {  
      MessageBox.Show(String.Format("Unable to process color semantics.:\n{0}\n", exp.Message));  
      return;  
    }  
  
    // Change colors, either foreground or background.  
    if (changeBackGround)   
    {  
      BackColor = newColor;  
      float Bright = BackColor.GetBrightness();  
      float Hue = BackColor.GetHue();  
      float Sat = BackColor.GetSaturation();  
      // Make sure that text is readable regardless of background.  
      if (BackColor.GetBrightness() <= .50)   
      {  
        ForeColor = Color.White;  
      }  
      else   
      {  
        ForeColor = Color.Black;  
      }  
    }  
    else   
    {  
      ForeColor = newColor;  
      float Bright = ForeColor.GetBrightness();  
      float Hue = ForeColor.GetHue();  
      float Sat = ForeColor.GetSaturation();  
  
      // Make sure that text is readable regardless of the foreground.  
      if (ForeColor.GetBrightness() <= .50)   
      {  
        BackColor = Color.White;  
      }  
      else   
      {  
        BackColor = Color.Black;  
      }  
    }  
    return;  
  };  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="b84c7-178">Zgłaszany, jeśli żaden podrzędny element członkowski bieżącego wystąpienia <see cref="T:System.Speech.Recognition.SemanticValue" /> ma klucz pasujący do <paramref name="key" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="b84c7-178">Thrown if no child member of the current instance of <see cref="T:System.Speech.Recognition.SemanticValue" /> has the key matching the <paramref name="key" /> parameter.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b84c7-179">Zgłaszany, <see cref="T:System.Speech.Recognition.SemanticValue" /> Jeśli kod próbuje zmienić w danym indeksie.</span><span class="sxs-lookup"><span data-stu-id="b84c7-179">Thrown if code attempts to change the <see cref="T:System.Speech.Recognition.SemanticValue" /> at a given index.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;string,SemanticValue&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;string,System.Speech.Recognition.SemanticValue&gt; key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Speech.Recognition.SemanticValue&gt; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Speech#Recognition#SemanticValue&gt;&gt;#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As KeyValuePair(Of String, SemanticValue)) Implements ICollection(Of KeyValuePair(Of String, SemanticValue)).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Add(System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt; key) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b84c7-180">Klucz dla <see cref="T:System.Speech.Recognition.SemanticValue" />.</span><span class="sxs-lookup"><span data-stu-id="b84c7-180">A key for a <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></param>
        <summary><span data-ttu-id="b84c7-181">Dodaje określony klucz i <see cref="T:System.Speech.Recognition.SemanticValue" /> do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b84c7-181">Adds the specified key and <see cref="T:System.Speech.Recognition.SemanticValue" /> to the collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;string,SemanticValue&gt;&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Speech#Recognition#SemanticValue&gt;&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of KeyValuePair(Of String, SemanticValue)).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Clear() = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b84c7-182">Usuwa wszystkie pary klucz/wartość z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b84c7-182">Removes all key/value pairs from the collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;string,SemanticValue&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;string,System.Speech.Recognition.SemanticValue&gt;[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Speech.Recognition.SemanticValue&gt;[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Speech#Recognition#SemanticValue&gt;&gt;#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As KeyValuePair(Of String, SemanticValue)(), index As Integer) Implements ICollection(Of KeyValuePair(Of String, SemanticValue)).CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.CopyTo(cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt; ^ array, int index) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="b84c7-183">Tablica par klucz/wartość, które są elementem docelowym operacji.</span><span class="sxs-lookup"><span data-stu-id="b84c7-183">The array of key/value pairs that is the target of the operation.</span></span></param>
        <param name="index"><span data-ttu-id="b84c7-184">Liczba całkowita, która określa lokalizację w tablicy, do której zostanie skopiowana para klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-184">An integer that specifies the location in the array to which the key/value pair will be copied.</span></span></param>
        <summary><span data-ttu-id="b84c7-185">Kopiuje parę klucz/wartość do określonej lokalizacji w tablicy dostosowanej.</span><span class="sxs-lookup"><span data-stu-id="b84c7-185">Copies a key/value pair to a specific location in a targeted array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Speech#Recognition#SemanticValue&gt;&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of String, SemanticValue)).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String,System::Speech::Recognition::SemanticValue&gt;&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b84c7-186">Pobiera wartość wskazującą, czy kolekcja jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-186">Gets a value that indicates whether the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="b84c7-187">Zwraca wartość wskazującą, czy kolekcja jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="b84c7-187">Returns a value that indicates whether the collection is read-only.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;string,SemanticValue&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;string,System.Speech.Recognition.SemanticValue&gt; key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Speech.Recognition.SemanticValue&gt; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Speech#Recognition#SemanticValue&gt;&gt;#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (key As KeyValuePair(Of String, SemanticValue)) As Boolean Implements ICollection(Of KeyValuePair(Of String, SemanticValue)).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.Remove(System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt; key) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b84c7-188">Klucz dla <see cref="T:System.Speech.Recognition.SemanticValue" />.</span><span class="sxs-lookup"><span data-stu-id="b84c7-188">A key for a <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></param>
        <summary><span data-ttu-id="b84c7-189">Usuwa określony klucz i <see cref="T:System.Speech.Recognition.SemanticValue" /> z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b84c7-189">Removes the specified key and <see cref="T:System.Speech.Recognition.SemanticValue" /> from the collection.</span></span></summary>
        <returns><span data-ttu-id="b84c7-190"><see langword="true" />Jeśli para klucz/wartość została pomyślnie usunięta z kolekcji; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-190"><see langword="true" /> if the key/value pair was successfully removed from the collection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b84c7-191">Ta metoda zwraca również <see langword="false" /> wartość, jeśli w kolekcji nie odnaleziono pary klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-191">This method also returns <see langword="false" /> if the key/value pair is not found in the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Add">
      <MemberSignature Language="C#" Value="void IDictionary&lt;string,SemanticValue&gt;.Add (string key, System.Speech.Recognition.SemanticValue value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Add(string key, class System.Speech.Recognition.SemanticValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary&lt;System#String,System#Speech#Recognition#SemanticValue&gt;#Add(System.String,System.Speech.Recognition.SemanticValue)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As String, value As SemanticValue) Implements IDictionary(Of String, SemanticValue).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Add(System::String ^ key, System::Speech::Recognition::SemanticValue ^ value) = System::Collections::Generic::IDictionary&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Add(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b84c7-192">Klucz dla <see cref="T:System.Speech.Recognition.SemanticValue" />.</span><span class="sxs-lookup"><span data-stu-id="b84c7-192">A key for a <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></param>
        <param name="value"><span data-ttu-id="b84c7-193"><see cref="T:System.Speech.Recognition.SemanticValue" /> Do dodania.</span><span class="sxs-lookup"><span data-stu-id="b84c7-193">The <see cref="T:System.Speech.Recognition.SemanticValue" /> to add.</span></span></param>
        <summary><span data-ttu-id="b84c7-194">Dodaje określony klucz i <see cref="T:System.Speech.Recognition.SemanticValue" /> do słownika.</span><span class="sxs-lookup"><span data-stu-id="b84c7-194">Adds the specified key and <see cref="T:System.Speech.Recognition.SemanticValue" /> to the dictionary.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;string&gt; System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;string&gt; System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary&lt;System#String,System#Speech#Recognition#SemanticValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection(Of String) Implements IDictionary(Of String, SemanticValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;System::String ^&gt; ^ System::Collections::Generic::IDictionary&lt;System::String,System::Speech::Recognition::SemanticValue&gt;::Keys { System::Collections::Generic::ICollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b84c7-195">Pobiera kolekcję zawierającą klucze z słownika par klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-195">Gets a collection that contains the keys from a dictionary of key/value pairs.</span></span></summary>
        <value><span data-ttu-id="b84c7-196">Kolekcja zawierająca klucze z słownika par klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-196">A collection that contains the keys from a dictionary of key/value pairs.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Remove">
      <MemberSignature Language="C#" Value="bool IDictionary&lt;string,SemanticValue&gt;.Remove (string key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Remove(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary&lt;System#String,System#Speech#Recognition#SemanticValue&gt;#Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (key As String) As Boolean Implements IDictionary(Of String, SemanticValue).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Remove(System::String ^ key) = System::Collections::Generic::IDictionary&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b84c7-197">Klucz dla <see cref="T:System.Speech.Recognition.SemanticValue" />.</span><span class="sxs-lookup"><span data-stu-id="b84c7-197">A key for a <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></param>
        <summary><span data-ttu-id="b84c7-198">Usuwa określony klucz i <see cref="T:System.Speech.Recognition.SemanticValue" /> ze słownika.</span><span class="sxs-lookup"><span data-stu-id="b84c7-198">Removes the specified key and <see cref="T:System.Speech.Recognition.SemanticValue" /> from the dictionary.</span></span></summary>
        <returns><span data-ttu-id="b84c7-199"><see langword="true" />Jeśli para klucz/wartość została pomyślnie usunięta ze słownika; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-199"><see langword="true" /> if the key/value pair was successfully removed from the dictionary; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b84c7-200">Ta metoda zwraca również <see langword="false" /> wartość, jeśli w słowniku nie znaleziono pary klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-200">This method also returns <see langword="false" /> if the key/value pair is not found in the dictionary.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.TryGetValue">
      <MemberSignature Language="C#" Value="bool IDictionary&lt;string,SemanticValue&gt;.TryGetValue (string key, out System.Speech.Recognition.SemanticValue value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.TryGetValue(string key, [out] class System.Speech.Recognition.SemanticValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary&lt;System#String,System#Speech#Recognition#SemanticValue&gt;#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)" />
      <MemberSignature Language="VB.NET" Value="Function TryGetValue (key As String, ByRef value As SemanticValue) As Boolean Implements IDictionary(Of String, SemanticValue).TryGetValue" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.TryGetValue(System::String ^ key, [Runtime::InteropServices::Out] System::Speech::Recognition::SemanticValue ^ % value) = System::Collections::Generic::IDictionary&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;::TryGetValue;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b84c7-201">Klucz dla <see cref="T:System.Speech.Recognition.SemanticValue" />.</span><span class="sxs-lookup"><span data-stu-id="b84c7-201">A key for a <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></param>
        <param name="value"><span data-ttu-id="b84c7-202"><see cref="T:System.Speech.Recognition.SemanticValue" /> Do pobrania.</span><span class="sxs-lookup"><span data-stu-id="b84c7-202">The <see cref="T:System.Speech.Recognition.SemanticValue" /> to get.</span></span></param>
        <summary><span data-ttu-id="b84c7-203"><see cref="T:System.Speech.Recognition.SemanticValue" /> Pobiera skojarzoną z określonym kluczem.</span><span class="sxs-lookup"><span data-stu-id="b84c7-203">Gets the <see cref="T:System.Speech.Recognition.SemanticValue" /> associated with the specified key.</span></span></summary>
        <returns><span data-ttu-id="b84c7-204"><see langword="true" />Jeśli słownik zawiera parę klucz/wartość z określonym kluczem; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-204"><see langword="true" /> if the dictionary contains a key/value pair with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;System.Speech.Recognition.SemanticValue&gt; System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class System.Speech.Recognition.SemanticValue&gt; System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary&lt;System#String,System#Speech#Recognition#SemanticValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection(Of SemanticValue) Implements IDictionary(Of String, SemanticValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;System::Speech::Recognition::SemanticValue ^&gt; ^ System::Collections::Generic::IDictionary&lt;System::String,System::Speech::Recognition::SemanticValue&gt;::Values { System::Collections::Generic::ICollection&lt;System::Speech::Recognition::SemanticValue ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Speech.Recognition.SemanticValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b84c7-205">Pobiera kolekcję zawierającą wartości ze słownika par klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-205">Gets a collection that contains the values from a dictionary of key/value pairs.</span></span></summary>
        <value><span data-ttu-id="b84c7-206">Kolekcja zawierająca wartości z słownika par klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="b84c7-206">A collection that contains the values from a dictionary of key/value pairs.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Speech.Recognition.SemanticValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,SemanticValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Speech.Recognition.SemanticValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Speech#Recognition#SemanticValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, SemanticValue)) Implements IEnumerable(Of KeyValuePair(Of String, SemanticValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Speech::Recognition::SemanticValue ^&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b84c7-207">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b84c7-207">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="b84c7-208">Moduł wyliczający, który wykonuje iterację w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b84c7-208">An enumerator that iterates through a collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b84c7-209">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b84c7-209">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="b84c7-210">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b84c7-210">Returns an enumerator that iterates through a collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SemanticValue.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Speech.Recognition.SemanticValue.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b84c7-211">Właściwość tylko do odczytu, która zwraca informacje zawarte w bieżącym <see cref="T:System.Speech.Recognition.SemanticValue" />.</span><span class="sxs-lookup"><span data-stu-id="b84c7-211">A read-only property that returns the information contained in the current <see cref="T:System.Speech.Recognition.SemanticValue" />.</span></span></summary>
        <value><span data-ttu-id="b84c7-212">Zwraca wystąpienie zawierające informacje przechowywane w bieżącym <see cref="T:System.Speech.Recognition.SemanticValue" /> wystąpieniu. <see cref="T:System.Object" /></span><span class="sxs-lookup"><span data-stu-id="b84c7-212">Returns an <see cref="T:System.Object" /> instance containing the information stored in the current <see cref="T:System.Speech.Recognition.SemanticValue" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b84c7-213">Wyniki rozpoznawania, które nie korzystają z analizy semantycznej, zawsze mają <xref:System.Speech.Recognition.SemanticValue.Value%2A> `null` <xref:System.Speech.Recognition.SemanticValue.Count%2A> Właściwość równą zero.</span><span class="sxs-lookup"><span data-stu-id="b84c7-213">Recognition results which do not make use of semantic parsing always have a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of `null` and a <xref:System.Speech.Recognition.SemanticValue.Count%2A> property of zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b84c7-214">Poniższy przykład służy do rekursywnego przechodzenia, a następnie wyświetlania informacji (w tym zaufania) jako <xref:System.Windows.Forms.TreeNodeCollection>lub węzłów tworzących strukturę drzewa semantyki używanej do rozpoznawania frazy.</span><span class="sxs-lookup"><span data-stu-id="b84c7-214">The following example is used to recursively traverse and then display information (including confidence) as a <xref:System.Windows.Forms.TreeNodeCollection>, or as the nodes making up the tree structure of the semantics used to recognize a phrase.</span></span>  
  
```csharp  
internal static void CreateSemanticsTreeNodes(  
          TreeNodeCollection nodes,  
          SemanticValue semantics,  
          String name)   
{  
  string semanticsText =   
      String.Format("  {0} ( Confidence {1})", name,semantics.Confidence);  
  
  // Format integers as hexadecimal.  
  if (semantics.Value == null )  
  {  
    semanticsText = semanticsText + " = null";  
  }  
  else if (semantics.Value.GetType() == typeof(int))   
  {  
    semanticsText = String.Format("{0} = {1:X} ", semanticsText, semantics.Value);  
  }  
  else   
  {  
    semanticsText = semanticsText + " = " + semantics.Value.ToString();  
  }  
  
  TreeNode semanticsNode = new TreeNode(semanticsText);  
  foreach (KeyValuePair<String, SemanticValue> child in semantics)   
  {  
    CreateSemanticsTreeNodes(semanticsNode.Nodes, child.Value, child.Key);  
  }  
  nodes.Add(semanticsNode);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
