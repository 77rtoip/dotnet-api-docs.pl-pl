<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73739246a3d34b754f871bb66457c788887dd0b4" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69258177" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wartość semantyczną i opcjonalnie kojarzy wartość ze składnikiem gramatyki rozpoznawania mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SemanticResultKey> <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Choices>Użycie obiektów <xref:System.Speech.Recognition.Grammar>i, w połączeniu z i, jest najprostszym sposobem projektowania struktury semantycznej dla. <xref:System.Speech.Recognition.SemanticResultValue> Informacje semantyczne dla frazy są dostępne przez uzyskanie wystąpienia elementu <xref:System.Speech.Recognition.SemanticValue>, <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> przez właściwość w <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
> [!NOTE]
>  Wartości zarządzane przez <xref:System.Speech.Recognition.SemanticResultValue> obiekty są definiowane przez <xref:System.Object> wystąpienia przesyłane do ich konstruktorów. <xref:System.Object> Typem podstawowym musi być `bool`, `int`, `float`, lub `string`. Każdy inny typ uniemożliwi konstruowanie <xref:System.Speech.Recognition.Grammar> wystąpienia <xref:System.Speech.Recognition.SemanticResultValue>z.  
  
 Typowy sposób użycia <xref:System.Speech.Recognition.SemanticResultValue> wystąpienia kojarzy wystąpienie z rozpoznawalnym składnikiem <xref:System.Speech.Recognition.Grammar>, takich jak fraza, reguła lub <xref:System.Speech.Recognition.Choices> obiekt. Jeśli skojarzony składnik jest używany jako część operacji rozpoznawania, <xref:System.Speech.Recognition.SemanticResultValue> jest używany do definiowania wartości w semantyki zwracanej frazy.  
  
 Istnieją dwie podstawowe metody kojarzenia <xref:System.Speech.Recognition.SemanticResultValue> wystąpienia z elementem gramatyki, w zależności od konstruktora użytego do <xref:System.Speech.Recognition.SemanticResultValue>utworzenia.  
  
-   Jeśli tylko wartość (określona przez <xref:System.Object>wystąpienie) jest używana do <xref:System.Speech.Recognition.SemanticResultValue> konstruowania obiektu, <xref:System.Speech.Recognition.SemanticResultValue> jest skojarzona ze składnikiem gramatyki, który <xref:System.Speech.Recognition.GrammarBuilder> poprzedza, oprócz obiektu.  
  
     Na przykład w poniższym fragmencie kodu, jeśli <xref:System.Speech.Recognition.Grammar> skonstruowany przy użyciu tego <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia rozpoznaje wyraz "Background `true` ", wartość jest ustawiana w rozpoznanej semantyki frazy.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     Aby uzyskać więcej informacji, zobacz Opis <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.  
  
-   Jeśli użyto frazy wartości ciągu lub <xref:System.Speech.Recognition.GrammarBuilder> określonego wystąpienia, wraz <xref:System.Object> z określaniem <xref:System.Speech.Recognition.SemanticResultValue> wartości, ta wartość jest automatycznie <xref:System.Speech.Recognition.GrammarBuilder> skojarzona z frazą wartości ciągu lub wystąpieniem.  Jeśli fraza lub <xref:System.Speech.Recognition.GrammarBuilder> obiekt jest używany w procesie rozpoznawania, wartość zostanie przypisana do semantyki rozpoznanej frazy.  
  
     Poniższy przykład ilustruje to i jest funkcjonalnie równoważny z poprzednim przykładem, który używa jawnych wywołań do <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> i. <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> Jeśli logika rozpoznawania używa słowa "background", wartość `true` zostanie dodana do rozpoznanej semantyki.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     Aby uzyskać więcej informacji, zobacz Opis <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> i. <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>  
  
 Aby <xref:System.Speech.Recognition.Grammar> można było używać ich w rozpoznawaniu, wszystkie <xref:System.Speech.Recognition.SemanticResultValue> wystąpienia muszą być <xref:System.Speech.Recognition.SemanticValue> skojarzone z jednym z obiektów używanych przez program <xref:System.Speech.Recognition.Grammar>. Jest to realizowane przez skojarzenie klucza semantycznego z <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 Klucze semantyczne mogą być jawnie dołączone do <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey> przy użyciu obiektu.  <xref:System.Speech.Recognition.SemanticResultValue>wystąpienia niejawnie dołączone do klucza są dołączone do klucza głównego domyślnego <xref:System.Speech.Recognition.SemanticValue>.  
  
 Po zastosowaniu do <xref:System.Speech.Recognition.SemanticValue.Value%2A>ustawienia, bez względu na to, czy jest oznakowany przy użyciu domyślnego klucza głównego, <xref:System.Speech.Recognition.SemanticResultKey>czy też według jakichkolwiek szczególnych, ta wartość nie może być modyfikowana lub wyjątek wystąpi podczas operacji rozpoznawania. <xref:System.Speech.Recognition.SemanticResultValue>  
  
 Poniższy przykład spowoduje wystąpienie wyjątku, ponieważ ustawia, a następnie modyfikuje element główny <xref:System.Speech.Recognition.SemanticValue.Value%2A>. <xref:System.Speech.Recognition.Grammar>  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 Z drugiej strony, kod w poniższym przykładzie jest dozwolony. Chociaż definiuje wiele wystąpień <xref:System.Speech.Recognition.SemanticResultValue>, są one zawarte <xref:System.Speech.Recognition.Choices> w obiekcie, a tylko jeden z nich będzie użyty do ustawienia wartości klucza `bgOrfgText`.  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 Poniższy przykład zwraca wartość <xref:System.Speech.Recognition.Grammar> , która rozpoznaje polecenie "Set/Change/ALTER pierwszego planu/tła... [Lista kolorów] ".  <xref:System.Speech.Recognition.SemanticResultValue>wystąpienia (w połączeniu z <xref:System.Speech.Recognition.Choices> obiektami i <xref:System.Speech.Recognition.GrammarBuilder> ) są używane do definiowania semantyki, które mogą być analizowane podczas rozpoznawania. <xref:System.Speech.Recognition.SemanticResultKey>  Przeanalizowana semantyka określi, który kolor został zażądany i czy ma być modyfikowany pierwszy plan lub tło.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">Używanie SemanticResultKey do wyodrębnienia SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SemanticResultValue" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `int` `bool` `string`Konstruktory obsługują <xref:System.Object> Określanie wystąpienia z typem danych źródłowych,, `float`, lub. `SemanticResultValue`  
  
 Konstruktor może utworzyć `SemanticResultValue` wystąpienie w jednej z dwóch sytuacji:  
  
-   Wystąpienie musi być jawnie skojarzone z elementem gramatyki, gdy jest <xref:System.Speech.Recognition.GrammarBuilder> używany do konstruowania <xref:System.Speech.Recognition.Grammar>elementu. `SemanticResultValue`  
  
-   Jest już skojarzony z frazą wartości ciągu <xref:System.Speech.Recognition.GrammarBuilder> lub obiektem. `SemanticResultValue`  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Wartość zarządzana przez <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Musi być typu <see langword="bool" />, <see langword="int" />, <see langword="float" />, lub <see langword="string" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SemanticResultValue" /> klasy i określa wartość semantyczną.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SemanticResultValue` Zwracany przez ten konstruktor nie jest skojarzony z żadnym konkretnym elementem gramatyki. Skojarzenie musi być jawnie wykonane przy użyciu wystąpienia programu `SemanticResultValue` w połączeniu z. <xref:System.Speech.Recognition.GrammarBuilder>  
  
 Na przykład w poniższym fragmencie kodu, jeśli <xref:System.Speech.Recognition.Grammar> skonstruowany przy użyciu tego <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia rozpoznaje wyraz "Background `true` ", wartość jest ustawiana w rozpoznanej semantyki frazy.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 Poniższy przykład zwraca wartość <xref:System.Speech.Recognition.Grammar> , która rozpoznaje polecenie "Set/Change/ALTER pierwszego planu/tła... [Lista kolorów] ". <xref:System.Speech.Recognition.SemanticResultValue>wystąpienia (w połączeniu z <xref:System.Speech.Recognition.Choices> obiektami i <xref:System.Speech.Recognition.GrammarBuilder> ) są używane do definiowania semantyki, które mogą być analizowane podczas rozpoznawania. <xref:System.Speech.Recognition.SemanticResultKey>  Przeanalizowana semantyka określi, który kolor został zażądany i czy ma być modyfikowany pierwszy plan lub tło.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">Składnik gramatyki, który ma być używany podczas rozpoznawania.</param>
        <param name="value">Wartość zarządzana przez <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Musi być typu <see langword="bool" />, <see langword="int" />, <see langword="float" />, lub <see langword="string" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SemanticResultValue" /> klasy i kojarzy wartość semantyczną <see cref="T:System.Speech.Recognition.GrammarBuilder" /> z obiektem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli element gramatyki określony przez <xref:System.Speech.Recognition.GrammarBuilder> jest używany w logice rozpoznawania, `value` zostanie ustawiony w semantyki rozpoznanych danych wyjściowych.  
  
 W poniższym fragmencie kodu, jeśli logika rozpoznawania skonstruowana przy użyciu <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia (`myGb`) używa <xref:System.Speech.Recognition.Choices> obiektu (`myChoice`) do identyfikowania danych wejściowych, wartość `true` jest dodawana do rozpoznanej semantyki.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 Jako <xref:System.Speech.Recognition.GrammarBuilder> obsługuje niejawną <xref:System.Speech.Recognition.Choices>konwersję dla <xref:System.Speech.Recognition.SemanticResultKey>, `SemanticResultValue`, i, ten konstruktor może również używać tych obiektów.  
  
   
  
## Examples  
 Poniższy przykład zwraca wartość <xref:System.Speech.Recognition.Grammar> , która rozpoznaje polecenie "Set/Change/ALTER pierwszego planu/tła... [Lista kolorów] ". <xref:System.Speech.Recognition.SemanticResultValue>wystąpienia (w połączeniu z <xref:System.Speech.Recognition.Choices> obiektami i <xref:System.Speech.Recognition.GrammarBuilder> ) są używane do definiowania semantyki, które mogą być analizowane podczas rozpoznawania. <xref:System.Speech.Recognition.SemanticResultKey>  Przeanalizowana semantyka określi, który kolor został zażądany i czy ma być modyfikowany pierwszy plan lub tło.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">Fraza, która ma być używana podczas rozpoznawania.</param>
        <param name="value">Wartość zarządzana przez <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Musi być typu <see langword="bool" />, <see langword="int" />, <see langword="float" />, lub <see langword="string" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SemanticResultValue" /> klasy i kojarzy wartość semantyczną <see cref="T:System.String" /> z obiektem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ciąg określony przez `phrase` jest używany w logice rozpoznawania, `value` zostanie ustawiony w semantyki rozpoznanych danych wyjściowych.  
  
 W poniższym fragmencie kodu, jeśli logika rozpoznawania skonstruowana przy użyciu <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia (`myGb`) używa ciągu "My hipoteczn" do identyfikowania danych wejściowych, wartość `true` zostanie dodana do rozpoznanej semantyki.  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 Poniższy przykład zwraca wartość <xref:System.Speech.Recognition.Grammar> , która rozpoznaje polecenie "Set/Change/ALTER pierwszego planu/tła... [Lista kolorów] ". <xref:System.Speech.Recognition.SemanticResultValue>wystąpienia (w połączeniu z <xref:System.Speech.Recognition.Choices> obiektami i <xref:System.Speech.Recognition.GrammarBuilder> ) są używane do definiowania semantyki, które mogą być analizowane podczas rozpoznawania. <xref:System.Speech.Recognition.SemanticResultKey>  Przeanalizowana semantyka określi, który kolor został zażądany i czy ma być modyfikowany pierwszy plan lub tło.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wystąpienie <see cref="T:System.Speech.Recognition.GrammarBuilder" /> skonstruowane z bieżącego <see cref="T:System.Speech.Recognition.SemanticResultValue" /> wystąpienia.</summary>
        <returns>Zwraca wystąpienie <see cref="T:System.Speech.Recognition.GrammarBuilder" /> skonstruowane z bieżącego <see cref="T:System.Speech.Recognition.SemanticResultValue" /> wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użycie <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> jest równoważne <xref:System.Speech.Recognition.GrammarBuilder> użyciu konstruktora, który przyjmuje <xref:System.Speech.Recognition.SemanticResultValue> jako argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.Grammar> obiekty, które obsługują polecenia, aby zmienić kolor tła.  
  
 <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> `SemanticResultValue` Obiekt (`colorChoice`) zawierający listę opcji kolorów tła jest wypełniany przy użyciu metody z wystąpieniami, które są uzyskiwane z metody dla obiektów utworzonych <xref:System.Speech.Recognition.Choices> z ciągów kolorów.  
  
 A <xref:System.Speech.Recognition.GrammarBuilder> następnie jest uzyskiwany przez <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> wywołanie na <xref:System.Speech.Recognition.SemanticResultKey> wystąpieniu, które zostanie `colorChoice` użyte do wybrania semantycznych opcji w wystąpieniu.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
