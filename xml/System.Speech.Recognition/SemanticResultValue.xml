<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="653a138a06a6f44dd5fd94ba82b6a4bf339e421e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48732702" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wartość semantyczne i opcjonalnie kojarzy wartość za pomocą składnika gramatycznych rozpoznawania mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Korzystanie z <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey> obiektów w połączeniu z <xref:System.Speech.Recognition.GrammarBuilder> i <xref:System.Speech.Recognition.Choices>, jest najprostszym sposobem na projektowanie struktury semantycznego <xref:System.Speech.Recognition.Grammar>. Informacje semantyczne wg frazy jest dostępny, uzyskując wystąpienie <xref:System.Speech.Recognition.SemanticValue>za pośrednictwem <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
> [!NOTE]
>  Wartości zarządza <xref:System.Speech.Recognition.SemanticResultValue> obiekty są zdefiniowane przez <xref:System.Object> wystąpienia przekazane do ich konstruktorów. Podstawowym typem <xref:System.Object> musi być `bool`, `int`, `float`, lub `string`. Dowolny inny typ uniemożliwi konstrukcja <xref:System.Speech.Recognition.Grammar> wystąpienia z <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 Typowym zastosowaniem <xref:System.Speech.Recognition.SemanticResultValue> wystąpienia kojarzy wystąpienie z rozpoznawalnych składnik <xref:System.Speech.Recognition.Grammar>, takie jak wyrażenie, reguły lub <xref:System.Speech.Recognition.Choices> obiektu. Jeśli składnik skojarzony jest używany jako część operacji rozpoznawania <xref:System.Speech.Recognition.SemanticResultValue> służy do definiowania wartości w semantyce zwrócona fraza.  
  
 Istnieją dwie podstawowe metody kojarzenia <xref:System.Speech.Recognition.SemanticResultValue> wystąpienia za pomocą elementu gramatyki, w zależności od używanego do utworzenia konstruktora <xref:System.Speech.Recognition.SemanticResultValue>.  
  
-   Jeśli tylko wartość (określona przez wystąpienie <xref:System.Object>) służy do konstruowania <xref:System.Speech.Recognition.SemanticResultValue> obiektu, <xref:System.Speech.Recognition.SemanticResultValue> jest skojarzony ze składnikiem gramatyki, która poprzedzała, oprócz <xref:System.Speech.Recognition.GrammarBuilder> obiektu.  
  
     Na przykład we fragmencie kodu poniżej, jeśli <xref:System.Speech.Recognition.Grammar> tworzony przy użyciu tego <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia rozpoznaje słowo "tło", wartość `true` jest ustawiony w semantyce rozpoznaną frazę.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     Aby uzyskać więcej informacji, zobacz opis <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.  
  
-   Wyrażenie wartości ciągu lub dla <xref:System.Speech.Recognition.GrammarBuilder> wystąpienie jest używane, wraz z <xref:System.Object> określający <xref:System.Speech.Recognition.SemanticResultValue> wartość, że wartość jest automatycznie kojarzony z frazą wartość ciągu lub <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia.  Jeśli wyrażenie lub <xref:System.Speech.Recognition.GrammarBuilder> obiekt jest używany w procesie rozpoznawania, wartość zostanie przypisany do semantykę rozpoznaną frazę.  
  
     Poniższy przykład ilustruje to i jest funkcjonalnie równoważny do poprzedniego przykładu, używać jawnych wywołań <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> i <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>. Jeśli logika rozpoznawania korzysta z programu word "tło", wartość `true` zostaną dodane do rozpoznany semantyki.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     Aby uzyskać więcej informacji, zobacz opis <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> i <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.  
  
 Do użycia przez <xref:System.Speech.Recognition.Grammar> rozpoznawanie, wszystkie <xref:System.Speech.Recognition.SemanticResultValue> wystąpień musi być skojarzony z jedną z <xref:System.Speech.Recognition.SemanticValue> obiekty używane przez to <xref:System.Speech.Recognition.Grammar>. Jest to realizowane przez skojarzenie semantyczne klucza z <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 Semantyczne klucze, które mogą być jawnie dołączone do <xref:System.Speech.Recognition.SemanticResultValue>przy użyciu <xref:System.Speech.Recognition.SemanticResultKey> obiektu.  <xref:System.Speech.Recognition.SemanticResultValue> wystąpienia, które nie zostały jawnie dołączone do klucza są dołączone do klucza głównego domyślnych <xref:System.Speech.Recognition.SemanticValue>.  
  
 Po <xref:System.Speech.Recognition.SemanticResultValue> został użyty do zestawu <xref:System.Speech.Recognition.SemanticValue.Value%2A>na to, czy zostaje ono oznakowane za pomocą domyślnego klucza głównego lub dowolnego określonego <xref:System.Speech.Recognition.SemanticResultKey>, ta wartość nie muszą zostać zmodyfikowane lub wyjątek wystąpi podczas operacji rozpoznawania.  
  
 Poniższy przykład spowoduje wyjątek, ponieważ zestawy, a następnie modyfikuje głównego <xref:System.Speech.Recognition.SemanticValue.Value%2A> z <xref:System.Speech.Recognition.Grammar>.  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 Z drugiej strony kod w poniższym przykładzie jest dozwolone. Mimo że definiuje on wiele wystąpień <xref:System.Speech.Recognition.SemanticResultValue>, są one uwzględnione w <xref:System.Speech.Recognition.Choices> obiektu i tylko jeden będzie nigdy nie użył można ustawić wartości klucza `bgOrfgText`.  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 Poniższy przykład zwraca <xref:System.Speech.Recognition.Grammar> która rozpoznaje polecenia "Set/zmiana/Alter narzędzia/tła... [Lista kolorów] ".  <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey> wystąpień (w połączeniu z <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiektów) są używane do definiowania semantykę, która może zostać przeanalizowany w rozpoznawania.  Przeanalizowana semantyki określi zażądano, jaki kolor i tego, czy pierwszy plan lub tło ma zostać zmodyfikowana.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">Przy użyciu SemanticResultKey umożliwiają SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SemanticResultValue" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SemanticResultValue` Konstruktory obsługuje określania <xref:System.Object> wystąpienia z typem danych podstawowych `bool`, `int`, `float`, lub `string`.  
  
 Można utworzyć konstruktora `SemanticResultValue` wystąpienia w jednej z dwóch okolicznościach:  
  
-   `SemanticResultValue` Wystąpienie musi być jawnie skojarzone z elementem gramatyki, korzystając z <xref:System.Speech.Recognition.GrammarBuilder> do konstruowania <xref:System.Speech.Recognition.Grammar>.  
  
-   `SemanticResultValue` Jest już skojarzona z frazą wartość ciągu lub <xref:System.Speech.Recognition.GrammarBuilder> obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Wartość zarządza <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Musi być typu <see langword="bool" />, <see langword="int" />, <see langword="float" />, lub <see langword="string" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SemanticResultValue" /> klasy i umożliwia określenie wartości semantycznego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `SemanticResultValue` zwrócona przez ten konstruktor nie jest skojarzony z żadnym elementem określonego gramatyki. Skojarzenie należy jako jawne można ustawić za pomocą wystąpienia `SemanticResultValue` w połączeniu z <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Na przykład we fragmencie kodu poniżej, jeśli <xref:System.Speech.Recognition.Grammar> tworzony przy użyciu tego <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia rozpoznaje słowo "tło", wartość `true` jest ustawiony w semantyce rozpoznaną frazę.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 Poniższy przykład zwraca <xref:System.Speech.Recognition.Grammar> która rozpoznaje polecenia "Set/zmiana/Alter narzędzia/tła... [Lista kolorów] ". <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey> wystąpień (w połączeniu z <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiektów) są używane do definiowania semantykę, która może zostać przeanalizowany w rozpoznawania.  Przeanalizowana semantyki określi zażądano, jaki kolor i tego, czy pierwszy plan lub tło ma zostać zmodyfikowana.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">Składnik gramatyki do użycia w rozpoznawania.</param>
        <param name="value">Wartość zarządza <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Musi być typu <see langword="bool" />, <see langword="int" />, <see langword="float" />, lub <see langword="string" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SemanticResultValue" /> klasy i kojarzy semantycznego wartością <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony element gramatyki przez <xref:System.Speech.Recognition.GrammarBuilder> jest używany w logice rozpoznawania `value` zostaną ustawione w semantyce rozpoznawanym danych wyjściowych.  
  
 We fragmencie kodu poniżej, jeśli logiki rozpoznawania skonstruowany przy użyciu <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia (`myGb`) używa <xref:System.Speech.Recognition.Choices> obiektu (`myChoice`) do identyfikowania danych wejściowych, wartość `true` jest dodawany do rozpoznany semantyki.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 Jako <xref:System.Speech.Recognition.GrammarBuilder> obsługuje niejawną konwersję na <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, i <xref:System.Speech.Recognition.SemanticResultKey>, ten konstruktor służy również do tych obiektów.  
  
   
  
## Examples  
 Poniższy przykład zwraca <xref:System.Speech.Recognition.Grammar> która rozpoznaje polecenia "Set/zmiana/Alter narzędzia/tła... [Lista kolorów] ". <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey> wystąpień (w połączeniu z <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiektów) są używane do definiowania semantykę, która może zostać przeanalizowany w rozpoznawania.  Przeanalizowana semantyki określi zażądano, jaki kolor i tego, czy pierwszy plan lub tło ma zostać zmodyfikowana.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">Wyrażenie do użycia w rozpoznawania.</param>
        <param name="value">Wartość zarządza <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Musi być typu <see langword="bool" />, <see langword="int" />, <see langword="float" />, lub <see langword="string" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SemanticResultValue" /> klasy i kojarzy semantycznego wartością <see cref="T:System.String" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten ciąg jest określony przez `phrase` jest używany w logice rozpoznawania `value` zostaną ustawione w semantyce rozpoznawanym danych wyjściowych.  
  
 W poniższy fragment kodu, jeśli logiki rozpoznawania skonstruowany przy użyciu <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia (`myGb`) używa ciągu "Mój kredyt hipoteczny" do identyfikowania, wartość wejściowa `true` zostaną dodane do rozpoznany semantyki.  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 Poniższy przykład zwraca <xref:System.Speech.Recognition.Grammar> która rozpoznaje polecenia "Set/zmiana/Alter narzędzia/tła... [Lista kolorów] ". <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey> wystąpień (w połączeniu z <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiektów) są używane do definiowania semantykę, która może zostać przeanalizowany w rozpoznawania.  Przeanalizowana semantyki określi zażądano, jaki kolor i tego, czy pierwszy plan lub tło ma zostać zmodyfikowana.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wystąpienie <see cref="T:System.Speech.Recognition.GrammarBuilder" /> skonstruowany na podstawie bieżącego <see cref="T:System.Speech.Recognition.SemanticResultValue" /> wystąpienia.</summary>
        <returns>Zwraca wystąpienie <see cref="T:System.Speech.Recognition.GrammarBuilder" /> skonstruowany na podstawie bieżącego <see cref="T:System.Speech.Recognition.SemanticResultValue" /> wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Korzystanie z <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> jest równoważne użyciu <xref:System.Speech.Recognition.GrammarBuilder> konstruktora przyjmującego <xref:System.Speech.Recognition.SemanticResultValue> jako argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.Grammar> obiekty, które obsługują polecenia, aby zmienić kolor tła.  
  
 A <xref:System.Speech.Recognition.Choices> obiektu (`colorChoice`) zawierający listę opcji kolory tła jest wypełniony przy użyciu <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> metody z <xref:System.Speech.Recognition.GrammarBuilder> wystąpień, które są uzyskiwane z <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> metody `SemanticResultValue` obiekty utworzone z ciągów kolorów.  
  
 A <xref:System.Speech.Recognition.GrammarBuilder> następnie można uzyskać przez wywołanie <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> na <xref:System.Speech.Recognition.SemanticResultKey> wystąpienia, które będzie używane na klucz semantycznego opcje dostępne w `colorChoice` wystąpienia.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>