<Type Name="SpeechUI" FullName="System.Speech.Recognition.SpeechUI">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0dd771dd080109af3696f24ea2b3f91e1630c52" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69101005" /></Metadata><TypeSignature Language="C#" Value="public class SpeechUI" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechUI extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechUI" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechUI" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechUI" />
  <TypeSignature Language="F#" Value="type SpeechUI = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="930b1-101">Zawiera informacje o tekstach i stanie dotyczące operacji rozpoznawania, które mają być wyświetlane w interfejsie użytkownika platformy mowy.</span><span class="sxs-lookup"><span data-stu-id="930b1-101">Provides text and status information on recognition operations to be displayed in the Speech platform user interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="930b1-102">Elementy członkowskie <xref:System.Speech.Recognition.SpeechUI> klasy mogą służyć do wskazania dokładnej opinii użytkownika końcowego za pomocą interfejsu użytkownika rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="930b1-102">The members of the <xref:System.Speech.Recognition.SpeechUI> class can be used to indicate exact feedback to the end user through the speech recognition user interface.</span></span> <span data-ttu-id="930b1-103">Aplikacja może zwracać dowolny tekst i informacje o powodzeniu/niepowodzeniu przy użyciu tej klasy.</span><span class="sxs-lookup"><span data-stu-id="930b1-103">An application can return arbitrary text and success/failure information using this class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="930b1-104">Poniższy przykład to program obsługi <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="930b1-104">The following example is a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="930b1-105">To zdarzenie jest używane przez <xref:System.Speech.Recognition.Grammar> program, który jest przeznaczony do obsługi danych wejściowych hasła w postaci "my password to...".</span><span class="sxs-lookup"><span data-stu-id="930b1-105">This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input in the form "My password is …".</span></span>  
  
 <span data-ttu-id="930b1-106">Jeśli hasło nie istnieje lub jest nieprawidłowe, program <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> wysyła informacje o błędach do interfejsu użytkownika platformy mowy.</span><span class="sxs-lookup"><span data-stu-id="930b1-106">If a password is not present, or not valid, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> sends error information to the Speech platform user interface.</span></span>  
  
```  
  
grammar.SpeechRecognized +=   
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else   
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() +   
              "BadPwd" + (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SendTextFeedback">
      <MemberSignature Language="C#" Value="public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SendTextFeedback(class System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SendTextFeedback (result As RecognitionResult, feedback As String, isSuccessfulAction As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SendTextFeedback(System::Speech::Recognition::RecognitionResult ^ result, System::String ^ feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="F#" Value="static member SendTextFeedback : System.Speech.Recognition.RecognitionResult * string * bool -&gt; bool" Usage="System.Speech.Recognition.SpeechUI.SendTextFeedback (result, feedback, isSuccessfulAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Speech.Recognition.RecognitionResult" />
        <Parameter Name="feedback" Type="System.String" />
        <Parameter Name="isSuccessfulAction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="930b1-107">Prawidłowe <see cref="T:System.Speech.Recognition.RecognitionResult" /> wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="930b1-107">A valid <see cref="T:System.Speech.Recognition.RecognitionResult" /> instance.</span></span></param>
        <param name="feedback"><span data-ttu-id="930b1-108">Zawierający komentarz dotyczący operacji rozpoznawania, która <see cref="T:System.Speech.Recognition.RecognitionResult" /> <paramref name="result" />wygenerowała. <see cref="T:System.String" /></span><span class="sxs-lookup"><span data-stu-id="930b1-108">A <see cref="T:System.String" /> containing a comment about the recognition operation that produced the <see cref="T:System.Speech.Recognition.RecognitionResult" /><paramref name="result" />.</span></span></param>
        <param name="isSuccessfulAction"><span data-ttu-id="930b1-109"><see langword="bool" /> Wskazuje, czy aplikacja uznana za powodzenie operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="930b1-109">A <see langword="bool" /> indicating whether the application deemed the recognition operation a success.</span></span></param>
        <summary><span data-ttu-id="930b1-110">Wysyła informacje o stanie i opis do interfejsu użytkownika platformy mowy o stanie operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="930b1-110">Sends status and descriptive text to the Speech platform user interface about the status of a recognition operation.</span></span></summary>
        <returns><span data-ttu-id="930b1-111"><see langword="true" />Jeśli informacje dostarczone do metody (<paramref name="Feedback" />i <paramref name="isSuccessfulAction" />) zostały pomyślnie udostępnione dla interfejsu użytkownika platformy mowy, a <see langword="false" /> operacja nie powiodła się.</span><span class="sxs-lookup"><span data-stu-id="930b1-111"><see langword="true" /> if the information provided to the method (<paramref name="Feedback" />, and <paramref name="isSuccessfulAction" />) was successfully made available to the Speech platform user interface, and <see langword="false" /> if the operation failed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="930b1-112"><xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A>może służyć do wskazania, że operacja rozpoznawania nie spełnia określonych kryteriów, nawet jeśli dane wejściowe zostały rozpoznane.</span><span class="sxs-lookup"><span data-stu-id="930b1-112"><xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> can be used to indicate that a recognition operation failed to meet certain criteria, even if the input was recognized.</span></span>  
  
 <span data-ttu-id="930b1-113">Przykładem jest weryfikacja informacji kodu zabezpieczeń, gdzie dane wejściowe zostały w pełni rozpoznane, ale informacje weryfikacyjne były nieprawidłowe.</span><span class="sxs-lookup"><span data-stu-id="930b1-113">An example is the verification of security code information, where the input was fully recognized, but the verification information was wrong.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="930b1-114">Poniższy przykład to program obsługi <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="930b1-114">The following example is a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="930b1-115">To zdarzenie jest używane przez <xref:System.Speech.Recognition.Grammar> program, który jest przeznaczony do obsługi danych wejściowych hasła w formularzu "my password to...".</span><span class="sxs-lookup"><span data-stu-id="930b1-115">This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input of the form, "My password is …".</span></span>  
  
 <span data-ttu-id="930b1-116">Jeśli hasło nie istnieje lub jest nieprawidłowe, **SendTextFeedback** jest używany do wysyłania informacji o błędach do interfejsu użytkownika platformy mowy.</span><span class="sxs-lookup"><span data-stu-id="930b1-116">If a password is not present, or not valid, **SendTextFeedback** is used to send error information to the Speech platform user interface.</span></span>  
  
```  
  
grammar.SpeechRecognized +=  
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else  
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
              result.Words[3],  
              result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() + "BadPwd" +   
               (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
