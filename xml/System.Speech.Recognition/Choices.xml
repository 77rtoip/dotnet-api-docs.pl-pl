<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa3d4d16669d30519d8ae8071ebbca82f9d4b5ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37610772" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zestaw alternatywy w ograniczeniach gramatyki rozpoznawania mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Speech.Recognition.Choices> obiekt reprezentuje składnik frazę, która może mieć jeden z kilku wartości. Klasa jest używana podczas tworzenia gramatyki rozpoznawania mowy z <xref:System.Speech.Recognition.GrammarBuilder> obiektu.  
  
 Na przykład <xref:System.Speech.Recognition.Choices> object może reprezentować składnika *colorChoice* frazy, "Zmiana koloru do *colorChoice*", gdzie dopuszczalnymi wartościami *colorChoice* to "red" lub "zielony" lub "niebieski".  
  
> [!NOTE]
>  Do użycia <xref:System.Speech.Recognition.Choices> obiektu jako składnik opcjonalny w frazy, Utwórz <xref:System.Speech.Recognition.Choices> obiektu i dodać go do <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> obiekt z `minRepeat` i `maxRepeat` równa 0 i 1, odpowiednio. Mogą być rozpoznawane wyrażenia zawierające składniki opcjonalne, czy składnik opcjonalny jest używany.  
  
 <xref:System.Speech.Recognition.Choices> Klasa pełni taką samą funkcję jak `one-of` — element XML zdefiniowane przez [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](https://www.w3.org/TR/speech-grammar/) i jest podobna do <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> klasy w <xref:System.Speech.Recognition.SrgsGrammar> przestrzeń nazw.  
  
 Aby uzyskać więcej informacji na temat definiowania gramatyki rozpoznawania mowy, zobacz [rozpoznawania mowy](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) i [tworzenia gramatyki GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawania mowy, dla frazy "Ustawianie tła *colorChoice*", gdzie *colorChoice* może być jednym z zdefiniowanych kolorów. <xref:System.Speech.Recognition.GrammarBuilder> Służy do definiowania ograniczeń dla gramatyki.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Choices" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można skonstruować <xref:System.Speech.Recognition.Choices> przy użyciu domyślnego konstruktora (która zwraca pusty obiekt), z grupy <xref:System.String> obiektów, lub z zestawu <xref:System.Speech.Recognition.GrammarBuilder> obiektów.  
  
 Ponieważ <xref:System.Speech.Recognition.GrammarBuilder> obiekt obsługuje niejawna konwersja z <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices> można skonstruować przy użyciu tablicy za pomocą rzutowania.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Speech.Recognition.Choices> obiektów, aby utworzyć dwie listy alternatyw.  
  
 Pierwszy <xref:System.Speech.Recognition.Choices> obiekt jest konstruowany przy użyciu tablicy <xref:System.String> obiektów. Druga <xref:System.Speech.Recognition.Choices> obiekt jest konstruowany przy użyciu tablicy <xref:System.Speech.Recognition.GrammarBuilder> obiekty, które zostały niejawnie przekonwertowane przez rzutowanie.  
  
 W przykładzie użyto <xref:System.Speech.Recognition.GrammarBuilder> obiektu można złożyć frazy, za pomocą <xref:System.Speech.Recognition.Choices> obiektów i dwa ciągi dodatkowe, które mogą służyć do rozpoznawania mowy danych wejściowych w formie "Wywołania [contactlList] na telefonie [phoneType]", na przykład "Jan wywołania na telefon komórkowy".  
  
```  
public GrammarBuilder ChoicesContructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Choices" /> klasę, która zawiera pusty zestaw alternatyw.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor zwraca prawidłowy, pusty zestaw alternatyw. Możesz dodać za pomocą jednej z alternatyw <xref:System.Speech.Recognition.Choices.Add%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiekty, aby utworzyć wyrażenie, który może służyć do rozpoznawania mowy dane wejściowe, takie jak "Anna wywołań dla jej komórki" i "James wywołania na jego Telefon służbowy". W przykładzie użyto rzutowania niejawnego z <xref:System.Speech.Recognition.Choices> i <xref:System.String> do <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Tablica zawierająca zestaw alternatyw.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Choices" /> klasy z tablicę zawierającą co najmniej jeden <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy <xref:System.Speech.Recognition.GrammarBuilder> w `alternateChoices` definiuje jedna z alternatyw. Jeśli `alternateChoices` jest pusta tablica, Konstruktor zwraca pusty zestaw alternatyw. Możesz dodać za pomocą jednej z alternatyw <xref:System.Speech.Recognition.Choices.Add%2A> metody.  
  
 Konstruktor wyrzuca <xref:System.ArgumentNullException> podczas `alternateChoices` jest `null` lub gdy dowolny z elementów tablicy jest `null`.  
  
 Ponieważ <xref:System.Speech.Recognition.GrammarBuilder> klasy obsługuje niejawną konwersję <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultValue>, i <xref:System.Speech.Recognition.SemanticResultKey> obiekty do <xref:System.Speech.Recognition.GrammarBuilder> wystąpień, używając poprawnie rzutowania, ten konstruktor może również utworzyć <xref:System.Speech.Recognition.Choices> obiekt z listy dowolnej kombinacji tych obiektów.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Choices` i <xref:System.Speech.Recognition.GrammarBuilder> obiektów, aby utworzyć <xref:System.Speech.Recognition.Grammar> zwrotów, takie jak "Anna wywołań dla jej komórki" i "James wywołania na jego Telefon służbowy". W przykładzie użyto rzutowania niejawnego z `Choices` i <xref:System.String> do <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Tablica zawierająca zestaw alternatyw.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Choices" /> klasy z tablicę zawierającą co najmniej jeden <see cref="T:System.String" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy <xref:System.String> w `phrases` definiuje jedna z alternatyw. Aparatu rozpoznawania mowy, można użyć jednego z elementów w tablicy ciągów do dopasowania wejście mowy. Jeśli `phrases` jest pusta tablica, Konstruktor zwraca pusty zestaw alternatyw. Możesz dodać za pomocą jednej z alternatyw <xref:System.Speech.Recognition.Choices.Add%2A> metody.  
  
 Konstruktor wyrzuca <xref:System.ArgumentNullException> podczas `phrases` jest `null` lub dowolny z elementów tablicy jest `null`. Konstruktor wyrzuca <xref:System.ArgumentException> Jeśli dowolny element w tablicy jest pustym ciągiem ("").  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiektów, aby utworzyć <xref:System.Speech.Recognition.Grammar> zwrotów, takie jak "Anna wywołań dla jej komórki" i "James wywołania na jego Telefon służbowy". W przykładzie użyto rzutowania niejawnego z `Choices` i <xref:System.String> do <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje elementy do zestawu możliwości wyboru.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">
          <see cref="T:System.Speech.Recognition.GrammarBuilder" /> Obiekty, aby dodać do tego <see cref="T:System.Speech.Recognition.Choices" /> obiektu.</param>
        <summary>Dodaje tablicę zawierającą co najmniej jeden <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiekty do zestawu możliwości wyboru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dzięki obsłudze niejawna konwersja z <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, i <xref:System.Speech.Recognition.SemanticResultValue> obiekty do <xref:System.Speech.Recognition.GrammarBuilder>, tych trzech klas mogą być dodawane do <xref:System.Speech.Recognition.Choices> także wystąpienia.  
  
 Jeśli `alternateChoices` jest pusta tablica, ta metoda nie powoduje aktualizacji zestawu możliwości wyboru.  
  
 Aplikacje mogą używać zarówno <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> i <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> dodać alternatywy dla <xref:System.Speech.Recognition.Choices> obiektu.  
  
 Ta metoda wyrzuca <xref:System.ArgumentNullException> podczas `alternateChoices` jest `null` lub dowolny z elementów tablicy jest `null`.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawania mowy, zwrotów, takie jak "Anna wywołań dla jej komórki" i "James wywołania na jego Telefon służbowy". W przykładzie użyto dwa razy <xref:System.Speech.Recognition.Choices.Add%2A> metoda tworzenia gramatyki.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Ciągi do dodania do tej <see cref="T:System.Speech.Recognition.Choices" /> obiektu.</param>
        <summary>Dodaje tablicę zawierającą co najmniej jeden <see cref="T:System.String" /> obiekty do zestawu możliwości wyboru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje mogą używać zarówno <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> i <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> dodać alternatywy dla <xref:System.Speech.Recognition.Choices> obiektu.  
  
 Jeśli `phrases` jest pusta tablica, ta metoda nie powoduje aktualizacji zestawu alternatyw.  
  
 Ta metoda wyrzuca <xref:System.ArgumentNullException> podczas `phrases` jest `null` lub dowolny z elementów tablicy jest `null`. Ta metoda wyrzuca <xref:System.ArgumentException> Jeśli dowolny element w tablicy jest pustym ciągiem ("").  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawania mowy, zwrotów przypominające "Anna wywołań dla jej komórki" i "James wywołania na jego Telefon służbowy". W przykładzie użyto dwa razy <xref:System.Speech.Recognition.Choices.Add%2A> metoda tworzenia gramatyki.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiektu z tego <see cref="T:System.Speech.Recognition.Choices" /> obiektu.</summary>
        <returns>A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> , które odpowiadają tym <see cref="T:System.Speech.Recognition.Choices" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> Zwracana przez tę metodę jest równoważne z jednym zwrócony przez jedną z następujących czynności.  
  
-   Wywoływanie <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> konstruktora z tego obiektu jako parametr.  
  
-   Przy użyciu jawne lub niejawne rzutowanie tego obiektu w celu <xref:System.Speech.Recognition.GrammarBuilder>.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki rozpoznawania mowy, zmiany kolor tła.  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>