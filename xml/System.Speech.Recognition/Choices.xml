<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="59f6c9fb262be88b1aec898eede33b8535c30eee" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68393703" /></Metadata><TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zestaw alternatyw w ograniczeniach gramatyki rozpoznawania mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Choices> Obiekt reprezentuje składnik frazy, która może mieć jedną z kilku wartości. Użyj tej klasy podczas tworzenia gramatyki rozpoznawania mowy z <xref:System.Speech.Recognition.GrammarBuilder> obiektu.  
  
 Na <xref:System.Speech.Recognition.Choices> przykład obiekt może reprezentować składnik *colorChoice* w frazie "Zmień kolor na *colorChoice*", gdzie akceptowalne wartości dla *colorChoice* to "Red", "Green" lub "Blue".  
  
> [!NOTE]
>  Aby <xref:System.Speech.Recognition.Choices> użyć obiektu jako składnika opcjonalnego w frazie, należy <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> <xref:System.Speech.Recognition.Choices> utworzyć obiekt i dodać go do obiektu z `minRepeat` i `maxRepeat` ustawić odpowiednio 0 i 1. Wyrażenia zawierające opcjonalne składniki można rozpoznać niezależnie od tego, czy składnik jest mówiony.  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> `one-of` <xref:System.Speech.Recognition.SrgsGrammar> [](https://www.w3.org/TR/speech-grammar/) Klasa pełni taką samą funkcję jak element XML zdefiniowany przez specyfikację gramatyki rozpoznawania mowy (SRGS) w wersji 1,0 i jest podobny do klasy w przestrzeni nazw. <xref:System.Speech.Recognition.Choices>  
  
 Aby uzyskać więcej informacji na temat definiowania gramatyki rozpoznawania mowy, zobacz [rozpoznawanie mowy](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) i [Tworzenie gramatyki GrammarBuilder](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatykę rozpoznawania mowy dla frazy "Ustaw tło na *colorChoice*", gdzie *colorChoice* może być jednym ze zdefiniowanych kolorów. <xref:System.Speech.Recognition.GrammarBuilder> Służy do definiowania ograniczeń dotyczących gramatyki.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Specyfikacja gramatyki rozpoznawania mowy (SRGS)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.Choices" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można skonstruować <xref:System.Speech.Recognition.Choices> Obiekt przy użyciu konstruktora bez parametrów (który zwraca pusty obiekt), z <xref:System.String> grupy obiektów <xref:System.Speech.Recognition.GrammarBuilder> lub z zestawu obiektów.  
  
 Ponieważ obiekt obsługuje niejawną konwersję <xref:System.Speech.Recognition.SemanticResultKey>z <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.Choices> , można utworzyć z tablicy tych obiektów przy użyciu rzutowania. <xref:System.Speech.Recognition.GrammarBuilder>  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Speech.Recognition.Choices> obiektów, aby utworzyć dwie listy alternatyw.  
  
 Pierwszy <xref:System.Speech.Recognition.Choices> obiekt jest zbudowany z <xref:System.String> tablicy obiektów. Inny <xref:System.Speech.Recognition.Choices> obiekt jest zbudowany z <xref:System.Speech.Recognition.GrammarBuilder> tablicy obiektów, które zostały niejawnie skonwertowane przez rzutowanie.  
  
 W przykładzie użyto <xref:System.Speech.Recognition.GrammarBuilder> obiektu do złożenia frazy, <xref:System.Speech.Recognition.Choices> przy użyciu obiektów i dwóch dodatkowych ciągów, których można użyć do rozpoznawania danych wejściowych mowy w postaci "Call [contactlList] na [phonetype] Phone", na przykład "Call Jan na telefonie komórkowym".  
  
```csharp
public GrammarBuilder ChoicesConstructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Choices" /> klasy, która zawiera pusty zestaw wariantów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor zwraca prawidłowy, pusty zestaw wariantów. Można dodać alternatywy przy użyciu dowolnej <xref:System.Speech.Recognition.Choices.Add%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Speech.Recognition.Choices> obiektów <xref:System.Speech.Recognition.GrammarBuilder> i do utworzenia frazy, która może służyć do rozpoznawania danych wejściowych mowy, takich jak "Call Anne on the" i "Calling" na telefonie służbowym. W przykładzie pokazano użycie niejawnych <xref:System.Speech.Recognition.Choices> rzutowania <xref:System.Speech.Recognition.GrammarBuilder>z i <xref:System.String> do.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Tablica zawierająca zestaw wariantów.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Choices" /> klasy z tablicy zawierającej co najmniej jeden <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda <xref:System.Speech.Recognition.GrammarBuilder> z`alternateChoices` nich definiuje jedną alternatywę. Jeśli `alternateChoices` jest tablicą pustą, Konstruktor zwraca pusty zestaw wariantów. Można dodać alternatywy przy użyciu dowolnej <xref:System.Speech.Recognition.Choices.Add%2A> metody.  
  
 Konstruktor zgłasza <xref:System.ArgumentNullException> , gdy `alternateChoices` `null` jest`null`lub gdy którykolwiek z elementów tablicy ma wartość.  
  
 <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.Choices> <xref:System.Speech.Recognition.SemanticResultKey> Ponieważ klasa zapewnia obsługę niejawnej konwersji,, i obiektów na wystąpienia, przez <xref:System.Speech.Recognition.Choices> prawidłowe użycie rzutowania, ten konstruktor może być również używany do tworzenia <xref:System.Speech.Recognition.GrammarBuilder> Obiekt z listy dowolnej kombinacji tych obiektów.  
  
   
  
## Examples  
 Poniższy przykład używa `Choices` i <xref:System.Speech.Recognition.GrammarBuilder> obiektów do tworzenia <xref:System.Speech.Recognition.Grammar> wyrażeń for, takich jak "Call Anne on the" i "Call Kuba na swoim telefonie służbowym". W przykładzie pokazano użycie niejawnych `Choices` rzutowania <xref:System.Speech.Recognition.GrammarBuilder>z i <xref:System.String> do.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Tablica zawierająca zestaw wariantów.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.Choices" /> klasy z tablicy zawierającej co najmniej jeden <see cref="T:System.String" /> obiekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda <xref:System.String> z`phrases` nich definiuje jedną alternatywę. Aparat rozpoznawania mowy może użyć dowolnego z elementów w tablicy ciągów, aby dopasować dane wejściowe mowy. Jeśli `phrases` jest tablicą pustą, Konstruktor zwraca pusty zestaw wariantów. Można dodać alternatywy przy użyciu dowolnej <xref:System.Speech.Recognition.Choices.Add%2A> metody.  
  
 Konstruktor zgłasza <xref:System.ArgumentNullException> `null`element `phrases` when lubanyelementutablicy.`null` Konstruktor zgłasza, <xref:System.ArgumentException> że każdy element w tablicy jest pustym ciągiem ("").  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Speech.Recognition.Choices> i <xref:System.Speech.Recognition.GrammarBuilder> obiektów do utworzenia <xref:System.Speech.Recognition.Grammar> dla wyrażeń takich jak, "Call Anne on the Work" i "Calle Kuba na swoim telefonie służbowym". W przykładzie pokazano użycie niejawnych `Choices` rzutowania <xref:System.Speech.Recognition.GrammarBuilder>z i <xref:System.String> do.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje elementy do zestawu wariantów.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Obiekty <see cref="T:System.Speech.Recognition.GrammarBuilder" /> , które mają zostać dodane <see cref="T:System.Speech.Recognition.Choices" /> do tego obiektu.</param>
        <summary>Dodaje tablicę zawierającą jeden lub <see cref="T:System.Speech.Recognition.GrammarBuilder" /> więcej obiektów do zestawu wariantów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ze względu na obsługę niejawnej <xref:System.Speech.Recognition.SemanticResultKey>konwersji z <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.Choices>,, <xref:System.Speech.Recognition.GrammarBuilder>i obiektów do, te trzy klasy można również <xref:System.Speech.Recognition.Choices> dodać do wystąpienia.  
  
 Jeśli `alternateChoices` jest tablicą pustą, ta metoda nie aktualizuje zestawu alternatyw.  
  
 Aplikacje mogą używać obu <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> i <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> <xref:System.Speech.Recognition.Choices> do dodawania alternatyw do obiektu.  
  
 Ta metoda zwraca element <xref:System.ArgumentNullException> `alternateChoices` `null` when lub any z elementów `null`tablicy.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono tworzenie gramatyki rozpoznawania mowy dla zwrotów takich jak "Call Anne on the The Work" i "Calle Kuba na swoim telefonie służbowym". W przykładzie zastosowano oba przeciążenia <xref:System.Speech.Recognition.Choices.Add%2A> metody do skompilowania gramatyki.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Ciągi, które mają zostać dodane <see cref="T:System.Speech.Recognition.Choices" /> do tego obiektu.</param>
        <summary>Dodaje tablicę zawierającą jeden lub <see cref="T:System.String" /> więcej obiektów do zestawu wariantów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje mogą używać obu <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> i <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> <xref:System.Speech.Recognition.Choices> do dodawania alternatyw do obiektu.  
  
 Jeśli `phrases` jest tablicą pustą, ta metoda nie aktualizuje zestawu elementów zastępczych.  
  
 Ta metoda zwraca element <xref:System.ArgumentNullException> `phrases` `null` when lub any z elementów `null`tablicy. Ta metoda zgłasza <xref:System.ArgumentException> , czy dowolny element w tablicy jest pustym ciągiem ("").  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono tworzenie gramatyki rozpoznawania mowy dla fraz podobnej do "Call Anne w jej komórce" i "Calle Kuba na swoim telefonie służbowym". W przykładzie zastosowano oba przeciążenia <xref:System.Speech.Recognition.Choices.Add%2A> metody do skompilowania gramatyki.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca obiekt z tego <see cref="T:System.Speech.Recognition.Choices" /> obiektu. <see cref="T:System.Speech.Recognition.GrammarBuilder" /></summary>
        <returns>, <see cref="T:System.Speech.Recognition.GrammarBuilder" /> Który jest zgodny <see cref="T:System.Speech.Recognition.Choices" /> z tym obiektem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> Zwracana przez tę metodę jest równoznaczna z wartością zwracaną przez jedną z następujących metod.  
  
-   Wywoływanie <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> konstruktora z tym obiektem jako parametru.  
  
-   Użycie rzutowania niejawnego lub jawnego tego obiektu <xref:System.Speech.Recognition.GrammarBuilder>na.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatykę rozpoznawania mowy, aby zmienić kolor tła.  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>