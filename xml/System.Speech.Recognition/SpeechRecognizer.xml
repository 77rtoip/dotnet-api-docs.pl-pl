<Type Name="SpeechRecognizer" FullName="System.Speech.Recognition.SpeechRecognizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03a2ecf66a486d776bd07181a5aa2607aa7004ff" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69258126" /></Metadata><TypeSignature Language="C#" Value="public class SpeechRecognizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognizer" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognizer : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="53099-101">Zapewnia dostęp do udostępnionej usługi rozpoznawania mowy dostępnej na pulpicie systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-101">Provides access to the shared speech recognition service available on the Windows desktop.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-102">Aplikacje używają udostępnionego aparatu rozpoznawania do uzyskiwania dostępu do funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-102">Applications use the shared recognizer to access Windows Speech Recognition.</span></span> <span data-ttu-id="53099-103">Użyj obiektu <xref:System.Speech.Recognition.SpeechRecognizer> , aby dodać do środowiska użytkownika funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-103">Use the <xref:System.Speech.Recognition.SpeechRecognizer> object to add to the Windows speech user experience.</span></span>  
  
 <span data-ttu-id="53099-104">Ta klasa zapewnia kontrolę nad różnymi aspektami procesu rozpoznawania mowy:</span><span class="sxs-lookup"><span data-stu-id="53099-104">This class provides control over various aspects of the speech recognition process:</span></span>  
  
-   <span data-ttu-id="53099-105">Aby zarządzać gramatykami rozpoznawania mowy, użyj <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A> <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>,,, i <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A>.</span><span class="sxs-lookup"><span data-stu-id="53099-105">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>, and <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A>.</span></span>  
  
-   <span data-ttu-id="53099-106">Aby uzyskać informacje o bieżących operacjach rozpoznawania mowy, zasubskrybuj <xref:System.Speech.Recognition.SpeechRecognizer> <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>zdarzenia, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, i <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> .</span><span class="sxs-lookup"><span data-stu-id="53099-106">To get information about current speech recognition operations, subscribe to the <xref:System.Speech.Recognition.SpeechRecognizer>'s <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events.</span></span>  
  
-   <span data-ttu-id="53099-107">Aby wyświetlić lub zmodyfikować liczbę alternatywnych wyników zwracanych przez aparat rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="53099-107">To view or modify the number of alternate results the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> property.</span></span> <span data-ttu-id="53099-108">Aparat rozpoznawania zwraca wyniki rozpoznawania w <xref:System.Speech.Recognition.RecognitionResult> obiekcie.</span><span class="sxs-lookup"><span data-stu-id="53099-108">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="53099-109">Aby uzyskać dostęp do stanu udostępnionego aparatu rozpoznawania lub monitorować go, należy <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>użyć <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>właściwości <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated> <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>,,,, <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> i i, <xref:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred> <xref:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged> i<xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-109">To access or monitor the state of the shared recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, and <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> properties and the <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged>, and <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> events.</span></span>  
  
-   <span data-ttu-id="53099-110">Aby zsynchronizować zmiany w aparacie rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-110">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="53099-111">Współużytkowany aparat rozpoznawania używa więcej niż jednego wątku do wykonywania zadań.</span><span class="sxs-lookup"><span data-stu-id="53099-111">The shared recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="53099-112">Aby emulować dane wejściowe do udostępnionego aparatu rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> metod i. <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A></span><span class="sxs-lookup"><span data-stu-id="53099-112">To emulate input to the shared recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="53099-113">Konfiguracją funkcji rozpoznawania mowy systemu Windows jest zarządzanie przy użyciu okna dialogowego **Właściwości mowy** w **Panelu sterowania**.</span><span class="sxs-lookup"><span data-stu-id="53099-113">The configuration of Windows Speech Recognition is managed by the use of the **Speech Properties** dialog in the **Control Panel**.</span></span> <span data-ttu-id="53099-114">Ten interfejs służy do wybierania domyślnego aparatu i języka rozpoznawania mowy na komputerze, urządzenia wejściowego audio i zachowania uśpienia funkcji rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-114">This interface is used to select the default desktop speech recognition engine and language, the audio input device, and the sleep behavior of speech recognition.</span></span> <span data-ttu-id="53099-115">Jeśli konfiguracja funkcji rozpoznawania mowy systemu Windows jest zmieniana, gdy aplikacja jest uruchomiona, (na przykład jeśli funkcja rozpoznawania mowy jest wyłączona lub język wejściowy zostanie zmieniony), zmiana wpłynie na <xref:System.Speech.Recognition.SpeechRecognizer> wszystkie obiekty.</span><span class="sxs-lookup"><span data-stu-id="53099-115">If the configuration of Windows Speech Recognition is changed while the application is running, (for instance, if speech recognition is disabled or the input language is changed), the change affects all <xref:System.Speech.Recognition.SpeechRecognizer> objects.</span></span>  
  
 <span data-ttu-id="53099-116">Aby utworzyć aparat rozpoznawania mowy w procesie, który jest niezależny od funkcji rozpoznawania mowy systemu <xref:System.Speech.Recognition.SpeechRecognitionEngine> Windows, należy użyć klasy.</span><span class="sxs-lookup"><span data-stu-id="53099-116">To create an in-process speech recognizer that is independent of Windows Speech Recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53099-117">Zawsze wywołuj <xref:System.Speech.Recognition.SpeechRecognizer.Dispose%2A> przed wydaniem ostatniego odwołania do aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-117">Always call <xref:System.Speech.Recognition.SpeechRecognizer.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="53099-118">W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania `Finalize` metody aparatu rozpoznawania elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="53099-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-119">Poniższy przykład jest częścią aplikacji konsolowej, która ładuje gramatykę rozpoznawania mowy i pokazuje asynchroniczne emulowane dane wejściowe, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-119">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  <span data-ttu-id="53099-120">Jeśli funkcja rozpoznawania mowy systemu Windows nie jest uruchomiona, uruchomienie tej aplikacji również spowoduje uruchomienie funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-120">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="53099-121">Jeśli rozpoznawanie mowy systemu Windows jest w \*\*\*\* stanie uśpienia, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> zawsze zwraca wartość null.</span><span class="sxs-lookup"><span data-stu-id="53099-121">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.   
        // This matches the grammar and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.  
        // This does not match the grammar or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the SpeechRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53099-122">Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="53099-122">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-123">Każdy <xref:System.Speech.Recognition.SpeechRecognizer> obiekt obsługuje oddzielny zestaw gramatyk rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-123">Each <xref:System.Speech.Recognition.SpeechRecognizer> object maintains a separate set of speech recognition grammars.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-124">Poniższy przykład jest częścią aplikacji konsolowej, która ładuje gramatykę rozpoznawania mowy i pokazuje asynchroniczne emulowane dane wejściowe, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-124">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="53099-125">Jeśli funkcja rozpoznawania mowy systemu Windows nie jest uruchomiona, uruchomienie tej aplikacji również spowoduje uruchomienie funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-125">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="53099-126">Jeśli rozpoznawanie mowy systemu Windows jest w \*\*\*\* stanie uśpienia, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> zawsze zwraca wartość null.</span><span class="sxs-lookup"><span data-stu-id="53099-126">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.   
        // This matches the grammar and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.  
        // This does not match the grammar or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the SpeechRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-127">Pobiera format dźwięku odbieranego przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-127">Gets the format of the audio being received by the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="53099-128">Format wejściowy audio dla aparatu rozpoznawania mowy lub <see langword="null" /> dane wejściowe do aparatu rozpoznawania nie są skonfigurowane.</span><span class="sxs-lookup"><span data-stu-id="53099-128">The audio input format for the speech recognizer, or <see langword="null" /> if the input to the recognizer is not configured.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-129">Pobiera poziom audio otrzymywany przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-129">Gets the level of the audio being received by the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="53099-130">Poziom audio danych wejściowych aparatu rozpoznawania mowy, od 0 do 100.</span><span class="sxs-lookup"><span data-stu-id="53099-130">The audio level of the input to the speech recognizer, from 0 through 100.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-131">Występuje, gdy udostępniony aparat rozpoznawania raportuje poziom wejścia audio.</span><span class="sxs-lookup"><span data-stu-id="53099-131">Occurs when the shared recognizer reports the level of its audio input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-132">Aparat rozpoznawania wywołuje to zdarzenie wiele razy na sekundę.</span><span class="sxs-lookup"><span data-stu-id="53099-132">The recognizer raises this event multiple times per second.</span></span> <span data-ttu-id="53099-133">Częstotliwość, z jaką zdarzenie jest zgłaszane, zależy od komputera, na którym jest uruchomiona aplikacja.</span><span class="sxs-lookup"><span data-stu-id="53099-133">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="53099-134">Aby uzyskać poziom audio w czasie zdarzenia, należy użyć <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> właściwości skojarzonej. <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs></span><span class="sxs-lookup"><span data-stu-id="53099-134">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="53099-135">Aby uzyskać bieżący poziom audio danych wejściowych do aparatu rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-135">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="53099-136">Podczas tworzenia delegata dla `AudioLevelUpdated` zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-136">When you create a delegate for an `AudioLevelUpdated` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-137">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-137">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-138">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-138">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-139">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-139">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-140">Poniższy przykład dodaje procedurę obsługi dla `AudioLevelUpdated` zdarzenia <xref:System.Speech.Recognition.SpeechRecognizer> do obiektu.</span><span class="sxs-lookup"><span data-stu-id="53099-140">The following example adds a handler for the `AudioLevelUpdated` event to a <xref:System.Speech.Recognition.SpeechRecognizer> object.</span></span> <span data-ttu-id="53099-141">Program obsługi wyprowadza nowy poziom dźwięku do konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="53099-141">The handler outputs the new audio level to the console.</span></span>  
  
```csharp  
private SpeechRecognizer recognizer;  
  
// Initialize the SpeechRecognizer object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognizer();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
    new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-142">Pobiera bieżącą lokalizację w strumieniu audio generowanym przez urządzenie, które dostarcza dane wejściowe do aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-142">Gets the current location in the audio stream being generated by the device that is providing input to the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="53099-143">Bieżąca lokalizacja w strumieniu wejściowym audio aparatu rozpoznawania mowy, za pomocą której odebrano dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="53099-143">The current location in the speech recognizer's audio input stream through which it has received input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-144">Udostępniony aparat rozpoznawania otrzymuje dane wejściowe podczas działania funkcji rozpoznawania mowy na komputerze.</span><span class="sxs-lookup"><span data-stu-id="53099-144">The shared recognizer receives input while the desktop speech recognition is running.</span></span>  
  
 <span data-ttu-id="53099-145">`AudioPosition` Właściwość odwołuje się do pozycji urządzenia wejściowego w wygenerowanym strumieniu audio.</span><span class="sxs-lookup"><span data-stu-id="53099-145">The `AudioPosition` property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="53099-146">Z kolei <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> Właściwość odwołuje się do pozycji aparatu rozpoznawania w przetwarzaniu danych wejściowych audio.</span><span class="sxs-lookup"><span data-stu-id="53099-146">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property references the recognizer's position in processing audio input.</span></span> <span data-ttu-id="53099-147">Te pozycje mogą być różne.</span><span class="sxs-lookup"><span data-stu-id="53099-147">These positions can be different.</span></span>  <span data-ttu-id="53099-148">Na przykład, jeśli aparat rozpoznawania odebrał dane wejściowe, dla których nie Wygenerowano jeszcze wyniku rozpoznawania, wartość <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> właściwości jest mniejsza niż wartość <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="53099-148">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-149">W poniższym przykładzie współużytkowany aparat rozpoznawania mowy używa gramatyki dyktowania, aby dopasować dane wejściowe mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-149">In the following example, the shared speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="53099-150">Program obsługi <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> zapisuje zdarzenia w konsoli programu <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>i <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> , gdy aparat rozpoznawania mowy wykrywa mowę na wejściu.</span><span class="sxs-lookup"><span data-stu-id="53099-150">A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Add handlers for events.  
      recognizer.LoadGrammarCompleted +=   
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
      recognizer.SpeechRecognized +=   
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.StateChanged +=   
        new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
      recognizer.SpeechDetected +=   
        new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load the grammar object to the recognizer.  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Recognizer audio position: " + recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Write the name of the loaded grammar to the console.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-151">Występuje po napotkaniu przez aparat rozpoznawania problemu w sygnale audio.</span><span class="sxs-lookup"><span data-stu-id="53099-151">Occurs when the recognizer encounters a problem in the audio signal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-152">Aby uzyskać ten problem, użyj <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> właściwości skojarzonej <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>klasy.</span><span class="sxs-lookup"><span data-stu-id="53099-152">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="53099-153">Podczas tworzenia delegata dla `AudioSignalProblemOccurred` zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-153">When you create a delegate for an `AudioSignalProblemOccurred` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-154">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-154">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-155">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-155">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-156">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-156">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-157">W poniższym przykładzie zdefiniowano procedurę obsługi zdarzeń, która zbiera informacje o `AudioSignalProblemOccurred` zdarzeniu.</span><span class="sxs-lookup"><span data-stu-id="53099-157">The following example defines an event handler that gathers information about an `AudioSignalProblemOccurred` event.</span></span>  
  
```  
private SpeechRecognizer recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognizer();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognizer.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-158">Pobiera stan dźwięku odbieranego przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-158">Gets the state of the audio being received by the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="53099-159">Stan wejścia audio do aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-159">The state of the audio input to the speech recognizer.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-160">Występuje po zmianie stanu w dYwięku odbieranym przez aparat rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-160">Occurs when the state changes in the audio being received by the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-161">Aby uzyskać stan dźwięku w momencie zdarzenia, należy użyć <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> właściwości skojarzonej. <xref:System.Speech.Recognition.AudioStateChangedEventArgs></span><span class="sxs-lookup"><span data-stu-id="53099-161">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="53099-162">Aby uzyskać bieżący stan audio danych wejściowych do aparatu rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-162">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> property.</span></span> <span data-ttu-id="53099-163">Aby uzyskać więcej informacji na temat stanu audio, <xref:System.Speech.Recognition.AudioState> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="53099-163">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="53099-164">Podczas tworzenia delegata dla `AudioStateChanged` zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-164">When you create a delegate for an `AudioStateChanged` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-165">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-165">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-166">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-166">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-167">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-167">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-168">W poniższym przykładzie użyto procedury obsługi dla `AudioStateChanged` zdarzenia, aby napisać aparat rozpoznawania nowy <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> do konsoli <xref:System.Speech.Recognition.AudioState> przy każdej zmianie przy użyciu elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="53099-168">The following example uses a handler for the `AudioStateChanged` event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> to the console each time it changes using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.StateChanged +=  
          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Put the recognizer into Listening mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        Console.WriteLine();  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53099-169"><see cref="T:System.Speech.Recognition.SpeechRecognizer" /> Usuwa obiekt.</span><span class="sxs-lookup"><span data-stu-id="53099-169">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53099-170"><see cref="T:System.Speech.Recognition.SpeechRecognizer" /> Usuwa obiekt.</span><span class="sxs-lookup"><span data-stu-id="53099-170">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognizer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="53099-171"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="53099-171"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="53099-172"><see cref="T:System.Speech.Recognition.SpeechRecognizer" /> Usuwa obiekt i zwalnia zasoby używane podczas sesji.</span><span class="sxs-lookup"><span data-stu-id="53099-172">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53099-173">Emuluje dane wejściowe do udostępnionego aparatu rozpoznawania mowy, korzystając z tekstu zamiast audio do synchronicznego rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-173">Emulates input to the shared speech recognizer, using text instead of audio for synchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-174">Te metody pomijają dane wejściowe dźwięku systemowego.</span><span class="sxs-lookup"><span data-stu-id="53099-174">These methods bypass the system audio input.</span></span> <span data-ttu-id="53099-175">Może to być przydatne w przypadku testowania lub debugowania aplikacji lub gramatyki.</span><span class="sxs-lookup"><span data-stu-id="53099-175">This can be helpful when you are testing or debugging an application or grammar.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53099-176">Jeśli funkcja rozpoznawania mowy systemu Windows jest \*\*\*\* w stanie uśpienia, te metody `null`zwracają.</span><span class="sxs-lookup"><span data-stu-id="53099-176">If Windows Speech Recognition is in the **Sleeping** state, then these methods return `null`.</span></span>  
  
 <span data-ttu-id="53099-177">Współużytkowany <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>aparat rozpoznawania wywołuje zdarzenia, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> , tak jakby operacja rozpoznawania nie jest emulowana.</span><span class="sxs-lookup"><span data-stu-id="53099-177">The shared recognizer raises the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="53099-178">Aparat rozpoznawania ignoruje nowe wiersze i dodatkowy biały znak i traktuje znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="53099-178">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53099-179">Obiekt wygenerowany przez udostępniony aparat rozpoznawania w odpowiedzi na emulowane dane wejściowe ma `null` wartość dla <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> właściwości. <xref:System.Speech.Recognition.RecognitionResult></span><span class="sxs-lookup"><span data-stu-id="53099-179">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the shared recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="53099-180">Aby emulować rozpoznawanie asynchroniczne, użyj <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-180">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="53099-181">Dane wejściowe dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-181">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="53099-182">Emuluje wprowadzanie frazy w udostępnionym aparacie rozpoznawania mowy przy użyciu tekstu zamiast dźwięku do synchronicznego rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-182">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for synchronous speech recognition.</span></span></summary>
        <returns><span data-ttu-id="53099-183">Wynik rozpoznawania dla operacji rozpoznawania lub <see langword="null" />, jeśli operacja nie powiedzie się lub funkcja rozpoznawania mowy systemu Windows jest w stanie **uśpienia** .</span><span class="sxs-lookup"><span data-stu-id="53099-183">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-184">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują wielkość liter i znaki w przypadku stosowania reguł gramatycznych do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="53099-184">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="53099-185">Aby uzyskać więcej informacji na temat tego typu porównania, zobacz <xref:System.Globalization.CompareOptions> wartości <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> wyliczenia i <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="53099-185">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="53099-186">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy oraz traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="53099-186">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-187">Poniższy przykład ładuje przykładową gramatykę do współużytkowanego aparatu rozpoznawania i emuluje dane wejściowe do aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-187">The following example loads a sample grammar to the shared recognizer and emulates input to the recognizer.</span></span> <span data-ttu-id="53099-188">Jeśli funkcja rozpoznawania mowy systemu Windows nie jest uruchomiona, uruchomienie tej aplikacji również spowoduje uruchomienie funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-188">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="53099-189">Jeśli rozpoznawanie mowy systemu Windows jest w \*\*\*\* stanie uśpienia, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> zawsze zwraca wartość null.</span><span class="sxs-lookup"><span data-stu-id="53099-189">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> always returns null.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        RecognitionResult result;  
  
        // This EmulateRecognize call matches the grammar and returns a  
        // recognition result.  
        result = recognizer.EmulateRecognize("testing testing");  
        OutputResult(result);  
  
        // This EmulateRecognize call does not match the grammar and   
        // returns null.  
        result = recognizer.EmulateRecognize("testing one two three");  
        OutputResult(result);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Output information about a recognition result to the console.  
    private static void OutputResult(RecognitionResult result)  
    {  
      if (result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="53099-190">Tablica jednostek programu Word, która zawiera dane wejściowe dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-190">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="53099-191">Bitowa kombinacja wartości wyliczenia, które opisują typ porównania do użycia dla emulowanej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-191">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="53099-192">Emuluje wprowadzanie określonych słów do udostępnionego aparatu rozpoznawania mowy, przy użyciu tekstu zamiast dźwięku do synchronicznego rozpoznawania mowy i określa, jak aparat rozpoznawania obsługuje porównanie Unicode między wyrazami a załadowanymi gramatykami rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-192">Emulates input of specific words to the shared speech recognizer, using text instead of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="53099-193">Wynik rozpoznawania dla operacji rozpoznawania lub <see langword="null" />, jeśli operacja nie powiedzie się lub funkcja rozpoznawania mowy systemu Windows jest w stanie **uśpienia** .</span><span class="sxs-lookup"><span data-stu-id="53099-193">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-194">Ta metoda tworzy <xref:System.Speech.Recognition.RecognitionResult> Obiekt przy użyciu informacji podanych `wordUnits` w parametrze.</span><span class="sxs-lookup"><span data-stu-id="53099-194">This method creates a <xref:System.Speech.Recognition.RecognitionResult> object using the information provided in the `wordUnits` parameter.</span></span>  
  
 <span data-ttu-id="53099-195">Aparat rozpoznawania używa, `compareOptions` gdy stosuje reguły gramatyki do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="53099-195">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="53099-196">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują <xref:System.Globalization.CompareOptions.IgnoreCase> przypadek, <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> Jeśli wartość lub jest obecna.</span><span class="sxs-lookup"><span data-stu-id="53099-196">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="53099-197">Aparaty rozpoznawania zawsze ignorują szerokość znaków i nigdy nie ignorują typu kana.</span><span class="sxs-lookup"><span data-stu-id="53099-197">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="53099-198">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy i traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="53099-198">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="53099-199">Aby uzyskać więcej informacji na temat szerokości znaków i typu kana, <xref:System.Globalization.CompareOptions> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="53099-199">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="53099-200">Fraza wejściowa dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-200">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="53099-201">Bitowa kombinacja wartości wyliczenia, które opisują typ porównania do użycia dla emulowanej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-201">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="53099-202">Emuluje wprowadzanie frazy do udostępnionego aparatu rozpoznawania mowy, przy użyciu tekstu zamiast audio do synchronicznego rozpoznawania mowy i określa, jak aparat rozpoznawania obsługuje porównanie Unicode między frazą a załadowanymi gramatykami rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-202">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="53099-203">Wynik rozpoznawania dla operacji rozpoznawania lub <see langword="null" />, jeśli operacja nie powiedzie się lub funkcja rozpoznawania mowy systemu Windows jest w stanie **uśpienia** .</span><span class="sxs-lookup"><span data-stu-id="53099-203">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-204">Aparat rozpoznawania używa, `compareOptions` gdy stosuje reguły gramatyki do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="53099-204">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="53099-205">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują <xref:System.Globalization.CompareOptions.IgnoreCase> przypadek, <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> Jeśli wartość lub jest obecna.</span><span class="sxs-lookup"><span data-stu-id="53099-205">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="53099-206">Aparaty rozpoznawania zawsze ignorują szerokość znaków i nigdy nie ignorują typu kana.</span><span class="sxs-lookup"><span data-stu-id="53099-206">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="53099-207">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy i traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="53099-207">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="53099-208">Aby uzyskać więcej informacji na temat szerokości znaków i typu kana, <xref:System.Globalization.CompareOptions> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="53099-208">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53099-209">Emuluje dane wejściowe do udostępnionego aparatu rozpoznawania mowy, korzystając z tekstu zamiast audio w celu asynchronicznego rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-209">Emulates input to the shared speech recognizer, using text instead of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-210">Te metody pomijają dane wejściowe dźwięku systemowego.</span><span class="sxs-lookup"><span data-stu-id="53099-210">These methods bypass the system audio input.</span></span> <span data-ttu-id="53099-211">Może to być przydatne w przypadku testowania lub debugowania aplikacji lub gramatyki.</span><span class="sxs-lookup"><span data-stu-id="53099-211">This can be helpful when you are testing or debugging an application or grammar.</span></span>  
  
 <span data-ttu-id="53099-212">Współużytkowany <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>aparat rozpoznawania wywołuje zdarzenia, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> , tak jakby operacja rozpoznawania nie jest emulowana.</span><span class="sxs-lookup"><span data-stu-id="53099-212">The shared recognizer raises the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="53099-213">Gdy aparat rozpoznawania ukończy asynchroniczne operacje rozpoznawania, zgłasza <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-213">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="53099-214">Aparat rozpoznawania ignoruje nowe wiersze i dodatkowy biały znak i traktuje znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="53099-214">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53099-215">Jeśli funkcja rozpoznawania mowy w systemie Windows \*\*\*\* jest w stanie uśpienia, udostępniony aparat rozpoznawania nie przetwarza danych wejściowych i nie zgłasza <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> zdarzeń i pokrewnych, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> ale nadal wywołuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-215">If Windows Speech Recognition is in the **Sleeping** state, then the shared recognizer does not process input and does not raise the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> and related events, but still raises the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53099-216">Obiekt wygenerowany przez udostępniony aparat rozpoznawania w odpowiedzi na emulowane dane wejściowe ma `null` wartość dla <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> właściwości. <xref:System.Speech.Recognition.RecognitionResult></span><span class="sxs-lookup"><span data-stu-id="53099-216">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the shared recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="53099-217">Aby emulować rozpoznawanie synchroniczne, użyj <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-217">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="53099-218">Dane wejściowe dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-218">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="53099-219">Emuluje wprowadzanie frazy w udostępnionym aparacie rozpoznawania mowy przy użyciu tekstu zamiast dźwięku do asynchronicznego rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-219">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-220">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują wielkość liter i znaki w przypadku stosowania reguł gramatycznych do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="53099-220">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="53099-221">Aby uzyskać więcej informacji na temat tego typu porównania, zobacz <xref:System.Globalization.CompareOptions> wartości <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> wyliczenia i <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="53099-221">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="53099-222">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy oraz traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="53099-222">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-223">Poniższy przykład jest częścią aplikacji konsolowej, która ładuje gramatykę rozpoznawania mowy i pokazuje asynchroniczne emulowane dane wejściowe, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-223">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="53099-224">Jeśli funkcja rozpoznawania mowy systemu Windows nie jest uruchomiona, uruchomienie tej aplikacji również spowoduje uruchomienie funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-224">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="53099-225">Jeśli rozpoznawanie mowy systemu Windows jest w \*\*\*\* stanie uśpienia, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> zawsze zwraca wartość null.</span><span class="sxs-lookup"><span data-stu-id="53099-225">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar   
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.   
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="53099-226">Tablica jednostek programu Word, która zawiera dane wejściowe dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-226">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="53099-227">Bitowa kombinacja wartości wyliczenia, które opisują typ porównania do użycia dla emulowanej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-227">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="53099-228">Emuluje wprowadzanie określonych słów do udostępnionego aparatu rozpoznawania mowy, przy użyciu tekstu zamiast dźwięku do asynchronicznego rozpoznawania mowy i określa, jak aparat rozpoznawania obsługuje porównanie Unicode między wyrazami a załadowanymi gramatykami rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-228">Emulates input of specific words to the shared speech recognizer, using text instead of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-229">Ta metoda tworzy <xref:System.Speech.Recognition.RecognitionResult> Obiekt przy użyciu informacji podanych `wordUnits` w parametrze.</span><span class="sxs-lookup"><span data-stu-id="53099-229">This method creates a <xref:System.Speech.Recognition.RecognitionResult> object using the information provided in the `wordUnits` parameter.</span></span>  
  
 <span data-ttu-id="53099-230">Aparat rozpoznawania używa, `compareOptions` gdy stosuje reguły gramatyki do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="53099-230">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="53099-231">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują <xref:System.Globalization.CompareOptions.IgnoreCase> przypadek, <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> Jeśli wartość lub jest obecna.</span><span class="sxs-lookup"><span data-stu-id="53099-231">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="53099-232">Aparaty rozpoznawania zawsze ignorują szerokość znaków i nigdy nie ignorują typu kana.</span><span class="sxs-lookup"><span data-stu-id="53099-232">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="53099-233">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy i traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="53099-233">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="53099-234">Aby uzyskać więcej informacji na temat szerokości znaków i typu kana, <xref:System.Globalization.CompareOptions> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="53099-234">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="53099-235">Fraza wejściowa dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-235">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="53099-236">Bitowa kombinacja wartości wyliczenia, które opisują typ porównania do użycia dla emulowanej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-236">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="53099-237">Emuluje wprowadzanie frazy w udostępnionym aparacie rozpoznawania mowy, przy użyciu tekstu zamiast dźwięku do asynchronicznego rozpoznawania mowy i określa, jak aparat rozpoznawania obsługuje porównanie Unicode między frazą a załadowanymi gramatykami rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-237">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-238">Aparat rozpoznawania używa, `compareOptions` gdy stosuje reguły gramatyki do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="53099-238">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="53099-239">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują <xref:System.Globalization.CompareOptions.IgnoreCase> przypadek, <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> Jeśli wartość lub jest obecna.</span><span class="sxs-lookup"><span data-stu-id="53099-239">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="53099-240">Aparaty rozpoznawania zawsze ignorują szerokość znaków i nigdy nie ignorują typu kana.</span><span class="sxs-lookup"><span data-stu-id="53099-240">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="53099-241">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy i traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="53099-241">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="53099-242">Aby uzyskać więcej informacji na temat szerokości znaków i typu kana, <xref:System.Globalization.CompareOptions> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="53099-242">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-243">Występuje, gdy udostępniony aparat rozpoznawania zakończy asynchroniczne operacje rozpoznawania dla emulowanej danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="53099-243">Occurs when the shared recognizer finalizes an asynchronous recognition operation for emulated input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-244">Każda <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> Metoda rozpoczyna asynchroniczne operacje rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-244">Each <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="53099-245">Aparat rozpoznawania zgłasza zdarzenie `EmulateRecognizeCompleted` w momencie zakończenia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="53099-245">The recognizer raises the `EmulateRecognizeCompleted` event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="53099-246">Asynchroniczne operacje <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>rozpoznawania mogą podnieść zdarzenia, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> .</span><span class="sxs-lookup"><span data-stu-id="53099-246">The asynchronous recognition operation can raise the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events.</span></span> <span data-ttu-id="53099-247"><xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> Zdarzenie jest ostatnim zdarzeniem, które aparat rozpoznawania zgłasza dla danej operacji.</span><span class="sxs-lookup"><span data-stu-id="53099-247">The <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="53099-248">Podczas tworzenia delegata dla `EmulateRecognizeCompleted` zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-248">When you create a delegate for an `EmulateRecognizeCompleted` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-249">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-249">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-250">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-250">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-251">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-251">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-252">Poniższy przykład jest częścią aplikacji konsolowej, która ładuje gramatykę rozpoznawania mowy i pokazuje asynchroniczne emulowane dane wejściowe, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-252">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="53099-253">Jeśli funkcja rozpoznawania mowy systemu Windows nie jest uruchomiona, uruchomienie tej aplikacji również spowoduje uruchomienie funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-253">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="53099-254">Jeśli funkcja rozpoznawania mowy w systemie Windows \*\*\*\* jest w trybie uśpienia, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> zawsze zwraca wartość null.</span><span class="sxs-lookup"><span data-stu-id="53099-254">If Windows Speech Recognition is in the **Sleeping** mode, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=   
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-255">Pobiera lub ustawia wartość wskazującą, czy ten <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> obiekt jest gotowy do przetwarzania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-255">Gets or sets a value that indicates whether this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object is ready to process speech.</span></span></summary>
        <value><span data-ttu-id="53099-256"><see langword="true" />Jeśli ten <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> obiekt wykonuje rozpoznawanie mowy; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="53099-256"><see langword="true" /> if this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object is performing speech recognition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-257">Zmiany tej właściwości nie wpływają na inne wystąpienia <xref:System.Speech.Recognition.SpeechRecognizer> klasy.</span><span class="sxs-lookup"><span data-stu-id="53099-257">Changes to this property do not affect other instances of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="53099-258">Domyślnie wartość <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> właściwości jest `true` dla nowo wystąpienia wystąpienia elementu <xref:System.Speech.Recognition.SpeechRecognizer>.</span><span class="sxs-lookup"><span data-stu-id="53099-258">By default, the value of the <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property is `true` for a newly instantiated instance of <xref:System.Speech.Recognition.SpeechRecognizer>.</span></span> <span data-ttu-id="53099-259">Gdy aparat rozpoznawania jest wyłączony, żadne gramatyki rozpoznawania mowy dla aparatu rozpoznawania nie są dostępne dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-259">While the recognizer is disabled, none of the recognizer's speech recognition grammars are available for recognition operations.</span></span> <span data-ttu-id="53099-260">Ustawienie <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> właściwości aparatu rozpoznawania nie ma wpływu na <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> Właściwość aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-260">Setting the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property has no effect on the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognizer.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-261">Pobiera kolekcję <see cref="T:System.Speech.Recognition.Grammar" /> obiektów, które są ładowane w tym <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="53099-261">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> instance.</span></span></summary>
        <value><span data-ttu-id="53099-262">Kolekcja <see cref="T:System.Speech.Recognition.Grammar" /> obiektów, do których aplikacja została załadowana do bieżącego wystąpienia udostępnionego aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-262">A collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that the application loaded into the current instance of the shared recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-263">Ta właściwość nie zwraca żadnych gramatyki rozpoznawania mowy ładowanych przez inną aplikację.</span><span class="sxs-lookup"><span data-stu-id="53099-263">This property does not return any speech recognition grammars loaded by another application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-264">Poniższy przykład wyprowadza informacje do konsoli dla każdej gramatyki rozpoznawania mowy załadowanej do udostępnionego aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-264">The following example outputs information to the console for each speech recognition grammar loaded into the shared speech recognizer.</span></span>  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        Grammar sampleGrammar = new Grammar(new GrammarBuilder("sample phrase"));  
        sampleGrammar.Name = "Sample Grammar";  
        recognizer.LoadGrammar(sampleGrammar);  
  
        OutputGrammarList(recognizer);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void OutputGrammarList(SpeechRecognizer recognizer)  
    {  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      if (grammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in grammars)  
        {  
          Console.WriteLine("  Grammar: {0}",  
            (g.Name != null) ? g.Name : "<no name>");  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="53099-265">Gramatyka rozpoznawania mowy do załadowania.</span><span class="sxs-lookup"><span data-stu-id="53099-265">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="53099-266">Ładuje gramatykę rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-266">Loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-267">Współużytkowany aparat rozpoznawania zgłasza wyjątek, jeśli Gramatyka rozpoznawania mowy jest już załadowana, jest ładowane asynchronicznie lub załadowanie do dowolnego aparatu rozpoznawania nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="53099-267">The shared recognizer throws an exception if the speech recognition grammar is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="53099-268">Jeśli aparat rozpoznawania jest uruchomiony, aplikacje muszą korzystać <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> z programu, aby wstrzymać wyszukiwarkę mowy przed załadowaniem, wyładowaniem, włączeniem lub wyłączeniem gramatyki.</span><span class="sxs-lookup"><span data-stu-id="53099-268">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="53099-269">Aby załadować gramatykę rozpoznawania mowy asynchronicznie, użyj <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-269">To load a speech recognition grammar asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-270">Poniższy przykład jest częścią aplikacji konsolowej, która ładuje gramatykę rozpoznawania mowy i pokazuje asynchroniczne emulowane dane wejściowe, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-270">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="53099-271">Jeśli funkcja rozpoznawania mowy systemu Windows nie jest uruchomiona, uruchomienie tej aplikacji również spowoduje uruchomienie funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-271">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="53099-272">Jeśli rozpoznawanie mowy systemu Windows jest w \*\*\*\* stanie uśpienia, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> zawsze zwraca wartość null.</span><span class="sxs-lookup"><span data-stu-id="53099-272">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar   
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }   
  
    // Handle the EmulateRecognizeCompleted event.   
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="53099-273">Gramatyka rozpoznawania mowy do załadowania.</span><span class="sxs-lookup"><span data-stu-id="53099-273">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="53099-274">Asynchronicznie ładuje gramatykę rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-274">Asynchronously loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-275">Gdy aparat rozpoznawania ukończy tę operację asynchroniczną, wywołuje <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-275">When the recognizer completes this asynchronous operation, it raises a <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="53099-276">Aparat rozpoznawania zgłasza wyjątek, jeśli Gramatyka rozpoznawania mowy jest już załadowana, jest ładowane asynchronicznie lub załadowanie do dowolnego aparatu rozpoznawania nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="53099-276">The recognizer throws an exception if the speech recognition grammar is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="53099-277">Jeśli aparat rozpoznawania jest uruchomiony, aplikacje muszą korzystać <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> z programu, aby wstrzymać wyszukiwarkę mowy przed załadowaniem, wyładowaniem, włączeniem lub wyłączeniem gramatyki.</span><span class="sxs-lookup"><span data-stu-id="53099-277">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="53099-278">Aby synchronicznie załadować gramatykę rozpoznawania mowy, użyj <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-278">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-279">Występuje, gdy aparat rozpoznawania kończy asynchroniczne ładowanie gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-279">Occurs when the recognizer finishes the asynchronous loading of a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-280"><xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> Metoda aparatu rozpoznawania Inicjuje operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="53099-280">The recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="53099-281">Aparat rozpoznawania wywołuje `LoadGrammarCompleted` zdarzenie po zakończeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="53099-281">The recognizer raises the `LoadGrammarCompleted` event when it completes the operation.</span></span> <span data-ttu-id="53099-282">Aby uzyskać <xref:System.Speech.Recognition.Grammar> obiekt, który został załadowany przez aparat rozpoznawania, <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> Użyj właściwości skojarzonej <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>klasy.</span><span class="sxs-lookup"><span data-stu-id="53099-282">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="53099-283">Aby uzyskać bieżące <xref:System.Speech.Recognition.Grammar> obiekty, które zostały załadowane przez aparat rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-283">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="53099-284">Podczas tworzenia delegata dla `LoadGrammarCompleted` zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-284">When you create a delegate for a `LoadGrammarCompleted` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-285">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-285">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-286">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-286">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-287">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-287">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-288">Poniższy przykład tworzy współużytkowany aparat rozpoznawania mowy, a następnie tworzy dwa typy gramatyki do rozpoznawania określonych słów i akceptowania swobodnego dyktowania.</span><span class="sxs-lookup"><span data-stu-id="53099-288">The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="53099-289">Przykład asynchronicznie ładuje wszystkie utworzone gramatyki do aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-289">The example asynchronously loads all the created grammars to the recognizer.</span></span> <span data-ttu-id="53099-290">Programy obsługi dla aparatu rozpoznawania <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> i <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> zdarzenia zapisu w konsoli nazwa gramatyki, która została użyta do przeprowadzenia rozpoznawania i tekst wyniku rozpoznawania odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="53099-290">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events write to the console the name of the grammar that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Add a handler for the StateChanged event.  
        recognizer.StateChanged +=  
          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
        // Create "yesno" grammar.  
        Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah}" });  
        SemanticResultValue yesValue =  
            new SemanticResultValue(yesChoices, (bool)true);  
        Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
        SemanticResultValue noValue =  
            new SemanticResultValue(noChoices, (bool)false);  
        SemanticResultKey yesNoKey =  
            new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
        Grammar yesnoGrammar = new Grammar(yesNoKey);  
        yesnoGrammar.Name = "yesNo";  
  
        // Create "done" grammar.  
        Grammar doneGrammar =  
          new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
        doneGrammar.Name = "Done";  
  
        // Create dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation";  
  
        // Load grammars to the recognizer.  
        recognizer.LoadGrammarAsync(yesnoGrammar);  
        recognizer.LoadGrammarAsync(doneGrammar);  
        recognizer.LoadGrammarAsync(dictation);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Put the shared speech recognizer into "listening" mode.   
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-291">Pobiera lub ustawia maksymalną liczbę alternatywnych wyników rozpoznawania, które funkcja udostępnionego aparatu rozpoznawania zwraca dla każdej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-291">Gets or sets the maximum number of alternate recognition results that the shared recognizer returns for each recognition operation.</span></span></summary>
        <value><span data-ttu-id="53099-292">Maksymalna liczba alternatywnych wyników zwracanych przez aparat rozpoznawania mowy dla każdej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-292">The maximum number of alternate results that the speech recognizer returns for each recognition operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-293"><xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Właściwość<xref:System.Speech.Recognition.RecognitionResult> klasy zawiera kolekcję obiektówreprezentującychinneinterpretacjekandydatadanychwejściowych.<xref:System.Speech.Recognition.RecognizedPhrase></span><span class="sxs-lookup"><span data-stu-id="53099-293">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent other candidate interpretations of the input.</span></span>  
  
 <span data-ttu-id="53099-294">Wartość domyślna dla <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> wynosi 10.</span><span class="sxs-lookup"><span data-stu-id="53099-294">The default value for <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="PauseRecognizerOnRecognition">
      <MemberSignature Language="C#" Value="public bool PauseRecognizerOnRecognition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PauseRecognizerOnRecognition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      <MemberSignature Language="VB.NET" Value="Public Property PauseRecognizerOnRecognition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PauseRecognizerOnRecognition { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PauseRecognizerOnRecognition : bool with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-295">Pobiera lub ustawia wartość wskazującą, czy współużytkowany aparat rozpoznawania wstrzymuje operacje rozpoznawania, gdy aplikacja obsługuje <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-295">Gets or sets a value that indicates whether the shared recognizer pauses recognition operations while an application is handling a <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> event.</span></span></summary>
        <value><span data-ttu-id="53099-296"><see langword="true" />Jeśli udostępniony aparat rozpoznawania czeka na przetwarzanie danych wejściowych, <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> <see langword="false" />gdy dowolna aplikacja obsługuje zdarzenie; w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="53099-296"><see langword="true" /> if the shared recognizer waits to process input while any application is handling the <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> event; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-297">Ustaw tę właściwość na `true`, jeśli <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> w ramach programu obsługi zdarzeń aplikacja wymaga zmiany stanu usługi rozpoznawania mowy lub zmiany załadowanych lub włączonych gramatyki rozpoznawania mowy przed użyciem usługi rozpoznawania mowy przetwarza więcej danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="53099-297">Set this property to `true`, if within the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler your application needs to change the state of the speech recognition service or change the loaded or enabled speech recognition grammars before the speech recognition service processes more input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53099-298">Ustawienie <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> właściwości powoduje, że każdy program obsługi zdarzeń w każdej aplikacji blokuje usługę rozpoznawania mowy systemu Windows. `true`</span><span class="sxs-lookup"><span data-stu-id="53099-298">Setting the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> property to `true` causes each <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler in every application to block the Windows speech recognition service.</span></span>  
  
 <span data-ttu-id="53099-299">Aby zsynchronizować zmiany w udostępnionym aparacie rozpoznawania przy użyciu stanu aplikacji, użyj <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-299">To synchronize the changes to the shared recognizer with your application state, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="53099-300">Gdy <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> tak `true`jest ,<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> podczas wykonywania programu obsługi usługa rozpoznawania mowy wstrzymuje i buforuje nowe dane wejściowe audio w miarę ich nadejścia.</span><span class="sxs-lookup"><span data-stu-id="53099-300">When <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> is `true`, during the execution of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> handler the speech recognition service pauses and buffers new audio input as it arrives.</span></span> <span data-ttu-id="53099-301">Po zakończeniu obsługi zdarzeń usługa rozpoznawania mowy wznowi rozpoznawanie i zacznie przetwarzać informacje z buforu wejściowego. <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized></span><span class="sxs-lookup"><span data-stu-id="53099-301">Once the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler exits, the speech recognition service resumes recognition and starts processing information from its input buffer.</span></span>  
  
 <span data-ttu-id="53099-302">Aby włączyć lub wyłączyć usługę rozpoznawania mowy, użyj <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="53099-302">To enable or disable the speech recognition service, use the <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-303">Pobiera bieżącą lokalizację aparatu rozpoznawania w danych wejściowych audio, który jest przetwarzany.</span><span class="sxs-lookup"><span data-stu-id="53099-303">Gets the current location of the recognizer in the audio input that it is processing.</span></span></summary>
        <value><span data-ttu-id="53099-304">Pozycja aparatu rozpoznawania w danych wejściowych audio, który jest przetwarzany.</span><span class="sxs-lookup"><span data-stu-id="53099-304">The position of the recognizer in the audio input that it is processing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-305">`RecognizerAudioPosition` Właściwość odwołuje się do pozycji aparatu rozpoznawania podczas przetwarzania danych wejściowych audio.</span><span class="sxs-lookup"><span data-stu-id="53099-305">The `RecognizerAudioPosition` property references the recognizer's position in processing its audio input.</span></span> <span data-ttu-id="53099-306">Z kolei <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> Właściwość odwołuje się do pozycji urządzenia wejściowego w wygenerowanym strumieniu audio.</span><span class="sxs-lookup"><span data-stu-id="53099-306">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="53099-307">Te pozycje mogą być różne.</span><span class="sxs-lookup"><span data-stu-id="53099-307">These positions can be different.</span></span> <span data-ttu-id="53099-308">Na przykład, jeśli aparat rozpoznawania odebrał dane wejściowe, dla których nie Wygenerowano jeszcze wyniku rozpoznawania, wartość <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> właściwości jest mniejsza niż wartość <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="53099-308">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognizer.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-309">Pobiera informacje o udostępnionym aparacie rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-309">Gets information about the shared speech recognizer.</span></span></summary>
        <value><span data-ttu-id="53099-310">Informacje o udostępnionym aparacie rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-310">Information about the shared speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-311">Ta właściwość zwraca informacje o aparacie rozpoznawania mowy używanym przez funkcję rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-311">This property returns information about the speech recognizer in use by Windows Speech Recognition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-312">Poniższy przykład wysyła do konsoli informacje o udostępnionym aparacie rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-312">The following example sends information about the shared recognizer to the console.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        Console.WriteLine("Recognizer information for the shared recognizer:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.State" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-313">Występuje, gdy aparat rozpoznawania wstrzyma się w celu zsynchronizowania rozpoznawania i innych operacji.</span><span class="sxs-lookup"><span data-stu-id="53099-313">Occurs when the recognizer pauses to synchronize recognition and other operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-314">Aplikacje muszą używać <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> programu, aby wstrzymać uruchomione <xref:System.Speech.Recognition.SpeechRecognizer> wystąpienie przed zmodyfikowaniem jego <xref:System.Speech.Recognition.Grammar> obiektów.</span><span class="sxs-lookup"><span data-stu-id="53099-314">Applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognizer> before modifying its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="53099-315">Na przykład podczas <xref:System.Speech.Recognition.SpeechRecognizer> wstrzymania można ładować, zwalniać, włączać i wyłączać <xref:System.Speech.Recognition.Grammar> obiekty.</span><span class="sxs-lookup"><span data-stu-id="53099-315">For example, while the <xref:System.Speech.Recognition.SpeechRecognizer> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="53099-316">Wywołuje <xref:System.Speech.Recognition.SpeechRecognizer> to zdarzenie, gdy jest gotowe do akceptowania modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="53099-316">The <xref:System.Speech.Recognition.SpeechRecognizer> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="53099-317">Podczas tworzenia delegata dla <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-317">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-318">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-318">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-319">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-319">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-320">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-320">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-321">W poniższym przykładzie przedstawiono aplikację konsolową, która ładuje i zwalnia <xref:System.Speech.Recognition.Grammar> obiekty.</span><span class="sxs-lookup"><span data-stu-id="53099-321">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="53099-322">Aplikacja używa <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> metody, aby zażądać zatrzymania aparatu rozpoznawania mowy, aby można było odebrać aktualizację.</span><span class="sxs-lookup"><span data-stu-id="53099-322">The application uses the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="53099-323">Następnie aplikacja ładuje lub zwalnia <xref:System.Speech.Recognition.Grammar> obiekt.</span><span class="sxs-lookup"><span data-stu-id="53099-323">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="53099-324">W każdej aktualizacji program obsługi <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> zdarzeń zapisuje nazwę i stan aktualnie załadowanych <xref:System.Speech.Recognition.Grammar> obiektów do konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="53099-324">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="53099-325">Ponieważ gramatyki są ładowane i zwalniane, aplikacja najpierw rozpoznaje nazwy zwierząt farmy, a następnie nazwy zwierząt farmy i nazwy owoców, a następnie tylko nazwy owoców.</span><span class="sxs-lookup"><span data-stu-id="53099-325">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Create the first grammar - Farm.  
      Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
      GrammarBuilder farm = new GrammarBuilder(animals);  
      Grammar farmAnimals = new Grammar(farm);  
      farmAnimals.Name = "Farm";  
  
      // Create the second grammar - Fruit.  
      Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
      GrammarBuilder favorite = new GrammarBuilder(fruit);  
      Grammar favoriteFruit = new Grammar(favorite);  
      favoriteFruit.Name = "Fruit";  
  
      // Attach event handlers.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.RecognizerUpdateReached +=  
        new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
      recognizer.StateChanged +=   
        new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
      // Load the Farm grammar.  
      recognizer.LoadGrammar(farmAnimals);  
      Console.WriteLine("Grammar Farm is loaded");  
  
      // Pause to recognize farm animals.  
      Thread.Sleep(7000);  
      Console.WriteLine();  
  
      // Request an update and load the Fruit grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.LoadGrammarAsync(favoriteFruit);  
      Thread.Sleep(5000);  
  
      // Request an update and unload the Farm grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.UnloadGrammar(farmAnimals);  
      Thread.Sleep(5000);  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  Grammar {0} is loaded and is {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53099-326">Żąda wstrzymania udostępnionego aparatu rozpoznawania i zaktualizowania jego stanu.</span><span class="sxs-lookup"><span data-stu-id="53099-326">Requests that the shared recognizer pause and update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-327">Ta metoda umożliwia synchronizowanie zmian współużytkowanego aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-327">Use this method to synchronize changes to the shared recognizer.</span></span> <span data-ttu-id="53099-328">Jeśli na przykład załadujesz lub zwolnisz gramatykę rozpoznawania mowy podczas przetwarzania danych wejściowych przez aparat rozpoznawania, Użyj tej metody <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> i zdarzenia, aby zsynchronizować zachowanie aplikacji ze stanem aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-328">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="53099-329">Gdy ta metoda jest wywoływana, aparat rozpoznawania wstrzymuje lub kończy operacje asynchroniczne i generuje <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-329">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="53099-330">Program <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> obsługi zdarzeń może następnie zmodyfikować stan aparatu rozpoznawania w ramach operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-330">A <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span>  
  
 <span data-ttu-id="53099-331">Gdy ta metoda jest wywoływana:</span><span class="sxs-lookup"><span data-stu-id="53099-331">When this method is called:</span></span>  
  
-   <span data-ttu-id="53099-332">Jeśli aparat rozpoznawania nie przetwarza danych wejściowych, aparat rozpoznawania natychmiast wygeneruje <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-332">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="53099-333">Jeśli aparat rozpoznawania przetwarza dane wejściowe, które obejmują wyciszenie lub hałas w tle, aparat rozpoznawania wstrzymuje operację rozpoznawania i <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> generuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-333">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="53099-334">Jeśli aparat rozpoznawania przetwarza dane wejściowe, które nie składają się z podkładu lub szumu w tle, aparat rozpoznawania wykonuje operację rozpoznawania, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> a następnie generuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-334">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="53099-335">Gdy aparat rozpoznawania obsługuje <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> zdarzenie:</span><span class="sxs-lookup"><span data-stu-id="53099-335">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="53099-336">Aparat rozpoznawania nie przetwarza danych wejściowych, a wartość <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> właściwości pozostaje taka sama.</span><span class="sxs-lookup"><span data-stu-id="53099-336">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="53099-337">Aparat rozpoznawania w dalszym ciągu zbiera dane wejściowe i może zmienić <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> wartość właściwości.</span><span class="sxs-lookup"><span data-stu-id="53099-337">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property can change.</span></span>  
  
 <span data-ttu-id="53099-338">Aby zmienić, czy współużytkowany aparat rozpoznawania wstrzymuje operacje rozpoznawania, gdy aplikacja obsługuje <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> zdarzenie, <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> Użyj właściwości.</span><span class="sxs-lookup"><span data-stu-id="53099-338">To change whether the shared recognizer pauses recognition operations while an application is handling a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event, use the <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-339">W poniższym przykładzie przedstawiono aplikację konsolową, która ładuje i zwalnia <xref:System.Speech.Recognition.Grammar> obiekty.</span><span class="sxs-lookup"><span data-stu-id="53099-339">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="53099-340">Aplikacja używa <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> metody, aby zażądać zatrzymania aparatu rozpoznawania mowy, aby można było odebrać aktualizację.</span><span class="sxs-lookup"><span data-stu-id="53099-340">The application uses the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="53099-341">Następnie aplikacja ładuje lub zwalnia <xref:System.Speech.Recognition.Grammar> obiekt.</span><span class="sxs-lookup"><span data-stu-id="53099-341">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="53099-342">W każdej aktualizacji program obsługi <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> zdarzeń zapisuje nazwę i stan aktualnie załadowanych <xref:System.Speech.Recognition.Grammar> obiektów do konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="53099-342">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="53099-343">Ponieważ gramatyki są ładowane i zwalniane, aplikacja najpierw rozpoznaje nazwy zwierząt farmy, a następnie nazwy zwierząt farmy i nazwy owoców, a następnie tylko nazwy owoców.</span><span class="sxs-lookup"><span data-stu-id="53099-343">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      recognizer = new SpeechRecognizer();  
  
      // Create the first grammar - Farm.  
      Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
      GrammarBuilder farm = new GrammarBuilder(animals);  
      Grammar farmAnimals = new Grammar(farm);  
      farmAnimals.Name = "Farm";  
  
      // Create the second grammar - Fruit.  
      Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
      GrammarBuilder favorite = new GrammarBuilder(fruit);  
      Grammar favoriteFruit = new Grammar(favorite);  
      favoriteFruit.Name = "Fruit";  
  
      // Attach event handlers.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.RecognizerUpdateReached +=  
        new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
  
      // Check to see if recognizer is loaded, wait if it is not loaded.  
      if (recognizer.State != RecognizerState.Listening)  
      {  
        Thread.Sleep(5000);  
  
        // Put recognizer in listening state.  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
  
      // Load the Farm grammar.  
      recognizer.LoadGrammar(farmAnimals);  
      Console.WriteLine("Grammar Farm is loaded");  
  
      // Pause to recognize farm animals.  
      Thread.Sleep(7000);  
      Console.WriteLine();  
  
      // Request an update and load the Fruit grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.LoadGrammarAsync(favoriteFruit);  
      Thread.Sleep(5000);  
  
      // Request an update and unload the Farm grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.UnloadGrammar(farmAnimals);  
      Thread.Sleep(5000);  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    public static void recognizer_RecognizerUpdateReached(object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      // At the update, get the names and enabled status of the currently loaded grammars.  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  Grammar {0} is loaded and is {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53099-344">Żąda wstrzymania udostępnionego aparatu rozpoznawania i zaktualizowania jego stanu.</span><span class="sxs-lookup"><span data-stu-id="53099-344">Requests that the shared recognizer pause and update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-345">Po wygenerowaniu <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> przez aparat rozpoznawania zdarzeń <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Właściwość <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> ma `null`wartość.</span><span class="sxs-lookup"><span data-stu-id="53099-345">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="53099-346">Aby podać token użytkownika, użyj <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> metody lub. <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A></span><span class="sxs-lookup"><span data-stu-id="53099-346">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="53099-347">Aby określić przesunięcie pozycji audio, użyj <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-347">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="53099-348">Informacje zdefiniowane przez użytkownika, które zawierają informacje dla operacji.</span><span class="sxs-lookup"><span data-stu-id="53099-348">User-defined information that contains information for the operation.</span></span></param>
        <summary><span data-ttu-id="53099-349">Żąda, aby współużytkowany aparat rozpoznawania wstrzymał i zaktualizował swój stan i udostępnia token użytkownika dla skojarzonego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-349">Requests that the shared recognizer pause and update its state and provides a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-350">Po wygenerowaniu <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> przez aparat rozpoznawania zdarzeń <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Właściwość <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> zawiera wartość `userToken` parametru.</span><span class="sxs-lookup"><span data-stu-id="53099-350">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="53099-351">Aby określić przesunięcie pozycji audio, użyj <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-351">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="53099-352">Informacje zdefiniowane przez użytkownika, które zawierają informacje dla operacji.</span><span class="sxs-lookup"><span data-stu-id="53099-352">User-defined information that contains information for the operation.</span></span></param>
        <param name="audioPositionAheadToRaiseUpdate"><span data-ttu-id="53099-353">Przesunięcie od bieżącego <see cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" /> , aby opóźnić żądanie.</span><span class="sxs-lookup"><span data-stu-id="53099-353">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" /> to delay the request.</span></span></param>
        <summary><span data-ttu-id="53099-354">Żąda, aby współużytkowany aparat rozpoznawania wstrzymał i zaktualizował jego stan oraz podaje przesunięcie i token użytkownika dla skojarzonego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-354">Requests that the shared recognizer pause and update its state and provides an offset and a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-355">Aparat rozpoznawania nie inicjuje żądania aktualizacji aparatu rozpoznawania do momentu, gdy <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> aparat rozpoznawania nie <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> jest równy bieżącemu `audioPositionAheadToRaiseUpdate` i wartości parametru.</span><span class="sxs-lookup"><span data-stu-id="53099-355">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> plus the value of the `audioPositionAheadToRaiseUpdate` parameter.</span></span>  
  
 <span data-ttu-id="53099-356">Po wygenerowaniu <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> przez aparat rozpoznawania zdarzeń <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Właściwość <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> zawiera wartość `userToken` parametru.</span><span class="sxs-lookup"><span data-stu-id="53099-356">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-357">Występuje, gdy aparat rozpoznawania wykryje dane wejściowe, które mogą identyfikować jako mowę.</span><span class="sxs-lookup"><span data-stu-id="53099-357">Occurs when the recognizer detects input that it can identify as speech.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-358">Współużytkowany aparat rozpoznawania może zgłosić to zdarzenie w odpowiedzi na dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="53099-358">The shared recognizer can raise this event in response to input.</span></span> <span data-ttu-id="53099-359"><xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> Właściwość skojarzonego<xref:System.Speech.Recognition.SpeechDetectedEventArgs> obiektu wskazuje lokalizację w strumieniu wejściowym, w którym aparat rozpoznawania wykrył mowę.</span><span class="sxs-lookup"><span data-stu-id="53099-359">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="53099-360">Aby uzyskać więcej informacji, <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> Zobacz i właściwości <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> oraz metody <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> i.</span><span class="sxs-lookup"><span data-stu-id="53099-360">For more information see the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> properties and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="53099-361">Podczas tworzenia delegata dla <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-361">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-362">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-362">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-363">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-363">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-364">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-364">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-365">Poniższy przykład jest częścią aplikacji konsolowej służącej do wybierania miejscowości początkowych i docelowych dla lotu.</span><span class="sxs-lookup"><span data-stu-id="53099-365">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="53099-366">Aplikacja rozpoznaje frazy, takie jak "chcę mieć Miami do Chicago".</span><span class="sxs-lookup"><span data-stu-id="53099-366">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="53099-367">W przykładzie używa <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> się zdarzenia do <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> raportowania każdej wykrytej mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-367">The example uses the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=   
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-368">Występuje po rozpoznaniu przez aparat rozpoznawania wyrazu lub wyrazów, które mogą być składnikiem wielu kompletnych fraz w gramatyce.</span><span class="sxs-lookup"><span data-stu-id="53099-368">Occurs when the recognizer has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-369">Współużytkowany aparat rozpoznawania może zgłosić to zdarzenie, gdy dane wejściowe są niejednoznaczne.</span><span class="sxs-lookup"><span data-stu-id="53099-369">The shared recognizer can raise this event when the input is ambiguous.</span></span> <span data-ttu-id="53099-370">Na przykład w przypadku gramatyki rozpoznawania mowy, która obsługuje rozpoznawanie "nowa gra" lub "nowa gra", "nowa gra" to niejednoznaczne dane wejściowe, a "nowa gra" to niejednoznaczne dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="53099-370">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="53099-371">Podczas tworzenia delegata dla <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-371">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-372">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-372">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-373">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-373">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-374">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-374">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-375">Poniższy przykład rozpoznaje zwroty, takie jak "Wyświetlanie listy artystów w kategorii Jazz".</span><span class="sxs-lookup"><span data-stu-id="53099-375">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="53099-376">W przykładzie używa <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> się zdarzenia, aby wyświetlić niekompletne fragmenty frazy w konsoli w miarę ich rozpoznania.</span><span class="sxs-lookup"><span data-stu-id="53099-376">The example uses the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=   
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-377">Występuje, gdy aparat rozpoznawania odbiera dane wejściowe, które nie pasują do żadnego załadowanego gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-377">Occurs when the recognizer receives input that does not match any of the speech recognition grammars it has loaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-378">Współużytkowany aparat rozpoznawania wywołuje to zdarzenie, jeśli określa, że dane wejściowe nie pasują do wystarczającej pewności od załadowanej gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-378">The shared recognizer raises this event if it determines that input does not match with sufficient confidence any of the loaded speech recognition grammars.</span></span> <span data-ttu-id="53099-379">Właściwość zawiera obiekt odrzucony <xref:System.Speech.Recognition.RecognitionResult>. <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs></span><span class="sxs-lookup"><span data-stu-id="53099-379">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
 <span data-ttu-id="53099-380">Progi zaufania udostępnionego aparatu rozpoznawania, zarządzane przez <xref:System.Speech.Recognition.SpeechRecognizer>, są skojarzone z profilem użytkownika i przechowywane w rejestrze systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-380">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="53099-381">Aplikacje nie powinny zapisywać zmian w rejestrze dla właściwości udostępnionego aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-381">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 <span data-ttu-id="53099-382">Podczas tworzenia delegata dla <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-382">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-383">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-383">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-384">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-384">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-385">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-385">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-386">Poniższy przykład rozpoznaje frazy, takie jak "Wyświetlanie listy artystów w kategorii Jazz" lub "Wyświetlanie albumów gospel".</span><span class="sxs-lookup"><span data-stu-id="53099-386">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="53099-387">W przykładzie zastosowano procedurę obsługi dla <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> zdarzenia, aby wyświetlić powiadomienie w konsoli, gdy dane wejściowe mowy nie mogą być dopasowane do zawartości gramatyki z wystarczającą pewnością do wygenerowania pomyślnego rozpoznania.</span><span class="sxs-lookup"><span data-stu-id="53099-387">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient confidence to produce a successful recognition.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=   
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-388">Występuje, gdy aparat rozpoznawania odbiera dane wejściowe, które pasują do jednej z gramatyk rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-388">Occurs when the recognizer receives input that matches one of its speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-389">Aparat rozpoznawania wywołuje zdarzenie `SpeechRecognized` , jeśli ustali, że dane wejściowe są zgodne z jedną z załadowanych i włączonych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-389">The recognizer raises the `SpeechRecognized` event if it determines with sufficient confidence that input matches one of the loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="53099-390">Właściwość zawiera zaakceptowany <xref:System.Speech.Recognition.RecognitionResult>obiekt. <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs></span><span class="sxs-lookup"><span data-stu-id="53099-390">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
 <span data-ttu-id="53099-391">Progi zaufania udostępnionego aparatu rozpoznawania, zarządzane przez <xref:System.Speech.Recognition.SpeechRecognizer>, są skojarzone z profilem użytkownika i przechowywane w rejestrze systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-391">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="53099-392">Aplikacje nie powinny zapisywać zmian w rejestrze dla właściwości udostępnionego aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-392">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 <span data-ttu-id="53099-393">Gdy aparat rozpoznawania odbiera dane wejściowe, które pasują do <xref:System.Speech.Recognition.Grammar> gramatyki, obiekt <xref:System.Speech.Recognition.Grammar.SpeechRecognized> może zgłosić zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-393">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="53099-394">Zdarzenie obiektu jest zgłaszane przed <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> zdarzeniem aparatu rozpoznawania mowy. <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.Grammar.SpeechRecognized></span><span class="sxs-lookup"><span data-stu-id="53099-394">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="53099-395">Podczas tworzenia delegata dla <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-395">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-396">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-396">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-397">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-397">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-398">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-398">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-399">Poniższy przykład jest częścią aplikacji konsolowej, która ładuje gramatykę rozpoznawania mowy i prezentuje dane wejściowe mowy do udostępnionego aparatu rozpoznawania, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="53099-399">The following example is part of a console application that loads a speech recognition grammar and demonstrates speech input to the shared recognizer, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="53099-400">Jeśli funkcja rozpoznawania mowy systemu Windows nie jest uruchomiona, uruchomienie tej aplikacji również spowoduje uruchomienie funkcji rozpoznawania mowy systemu Windows.</span><span class="sxs-lookup"><span data-stu-id="53099-400">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span>  
  
 <span data-ttu-id="53099-401">Wypowiadane dane wejściowe, takie jak "chcę mieć od Chicago do Miami" spowodują <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> wyzwolenie zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-401">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span> <span data-ttu-id="53099-402">Mówiąc, że fraza "przylot ja z Houston do Chicago" nie spowoduje <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> wyzwolenia zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-402">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="53099-403">W przykładzie zastosowano procedurę obsługi dla <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> zdarzenia, aby wyświetlić pomyślnie rozpoznane frazy i semantykę, która zawiera w konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="53099-403">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.RecognizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As RecognizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerState State { System::Speech::Recognition::RecognizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Recognition.RecognizerState" Usage="System.Speech.Recognition.SpeechRecognizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-404">Pobiera stan <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="53099-404">Gets the state of a <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span></span></summary>
        <value><span data-ttu-id="53099-405">Stan <see langword="SpeechRecognizer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="53099-405">The state of the <see langword="SpeechRecognizer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-406">Ta właściwość tylko do odczytu wskazuje, czy udostępniony aparat rozpoznawania w systemie Windows jest w `Stopped` `Listening` stanie lub.</span><span class="sxs-lookup"><span data-stu-id="53099-406">This read-only property indicates whether the shared recognizer resident in Windows is in the `Stopped` or the `Listening` state.</span></span> <span data-ttu-id="53099-407">Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.RecognizerState> Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="53099-407">For more information, see the <xref:System.Speech.Recognition.RecognizerState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53099-408">Występuje, gdy zmienia się stan uruchomienia aparatu rozpoznawania technologii rozpoznawania mowy dla systemu Windows Desktop.</span><span class="sxs-lookup"><span data-stu-id="53099-408">Occurs when the running state of the Windows Desktop Speech Technology recognition engine changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-409">Współużytkowany aparat rozpoznawania zgłasza to zdarzenie, <xref:System.Speech.Recognition.RecognizerState.Listening> gdy stan funkcji rozpoznawania mowy systemu Windows zmieni się na stan lub. <xref:System.Speech.Recognition.RecognizerState.Stopped></span><span class="sxs-lookup"><span data-stu-id="53099-409">The shared recognizer raises this event when the state of Windows Speech Recognition changes to the <xref:System.Speech.Recognition.RecognizerState.Listening> or <xref:System.Speech.Recognition.RecognizerState.Stopped> state.</span></span>  
  
 <span data-ttu-id="53099-410">Aby uzyskać stan udostępnionego aparatu rozpoznawania w momencie zdarzenia, należy użyć <xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A> właściwości skojarzonej <xref:System.Speech.Recognition.StateChangedEventArgs>klasy.</span><span class="sxs-lookup"><span data-stu-id="53099-410">To get the state of the shared recognizer at the time of the event, use the <xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A> property of the associated <xref:System.Speech.Recognition.StateChangedEventArgs>.</span></span> <span data-ttu-id="53099-411">Aby uzyskać bieżący stan udostępnionego aparatu rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-411">To get the current state of the shared recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> property.</span></span>  
  
 <span data-ttu-id="53099-412">Podczas tworzenia delegata dla <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> zdarzenia należy zidentyfikować metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="53099-412">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="53099-413">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="53099-413">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="53099-414">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="53099-414">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="53099-415">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="53099-415">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53099-416">Poniższy przykład tworzy współużytkowany aparat rozpoznawania mowy, a następnie tworzy dwa typy gramatyki do rozpoznawania określonych słów i akceptowania swobodnego dyktowania.</span><span class="sxs-lookup"><span data-stu-id="53099-416">The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="53099-417">Przykład asynchronicznie ładuje wszystkie utworzone gramatyki do aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-417">The example asynchronously loads all the created grammars to the recognizer.</span></span>  <span data-ttu-id="53099-418">Procedura obsługi dla <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> zdarzenia <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> używa metody w celu umieszczenia rozpoznawania systemu Windows w trybie "nasłuchiwania".</span><span class="sxs-lookup"><span data-stu-id="53099-418">A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event uses the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method to put Windows Recognition in "listening" mode.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted += new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Add a handler for the StateChanged event.  
      recognizer.StateChanged += new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
      // Create "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yah}" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
      SemanticResultValue noValue = new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void  recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
     if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void  recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
     Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void  recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
     string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
      }  
  
      // Add exception handling code here.  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerState" />
        <altmember cref="T:System.Speech.Recognition.StateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.State" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognizer.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53099-419">Zwalnia wszystkie gramatyki rozpoznawania mowy z udostępnionego aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-419">Unloads all speech recognition grammars from the shared recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-420">Jeśli aparat rozpoznawania aktualnie ładuje gramatykę asynchronicznie, ta metoda odczeka do momentu załadowania gramatyki, zanim odładuje wszystkie gramatyki aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-420">If the recognizer is currently loading a grammar asynchronously, this method waits until the grammar is loaded, before it unloads all of the recognizer's grammars.</span></span>  
  
 <span data-ttu-id="53099-421">Aby zwolnić określoną gramatykę, użyj <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-421">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="53099-422">Gramatyka do zwolnienia.</span><span class="sxs-lookup"><span data-stu-id="53099-422">The grammar to unload.</span></span></param>
        <summary><span data-ttu-id="53099-423">Zwalnia określoną gramatykę rozpoznawania mowy z udostępnionego aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="53099-423">Unloads a specified speech recognition grammar from the shared recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53099-424">Jeśli aparat rozpoznawania jest uruchomiony, aplikacje muszą korzystać <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> z programu, aby wstrzymać wyszukiwarkę mowy przed załadowaniem, wyładowaniem, włączeniem lub wyłączeniem gramatyki.</span><span class="sxs-lookup"><span data-stu-id="53099-424">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span> <span data-ttu-id="53099-425">Aby zwolnić wszystkie gramatyki, użyj <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="53099-425">To unload all grammars, use the <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
      </Docs>
    </Member>
  </Members>
</Type>
