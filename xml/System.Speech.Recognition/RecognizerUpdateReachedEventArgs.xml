<Type Name="RecognizerUpdateReachedEventArgs" FullName="System.Speech.Recognition.RecognizerUpdateReachedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77798094a96becd337441519d667f9c64129b168" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39872923" /></Metadata><TypeSignature Language="C#" Value="public class RecognizerUpdateReachedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RecognizerUpdateReachedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizerUpdateReachedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizerUpdateReachedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type RecognizerUpdateReachedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9c8e6-101">Zwraca dane z <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" /> lub <see cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" /> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-101">Returns data from a <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" /> or a <see cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c8e6-102">`RecognizerUpdateReached` zdarzenia udostępniają mechanizm wstrzymywania aparat rozpoznawania mowy, aby zastosować zmiany częściowych i synchroniczne, takich jak ładowanie i zwalnianie gramatyki.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-102">`RecognizerUpdateReached` events provide a mechanism for pausing a speech recognition engine to apply atomic and synchronous modifications, such as loading and unloading grammars.</span></span>  
  
 <span data-ttu-id="9c8e6-103">Jeśli aplikacja wykorzystuje <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia do zarządzania rozpoznawania, można użyć jednego z <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A?displayProperty=nameWithType> metody żądania, że aparat wstrzymuje do odbierania aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-103">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance to manage recognition, it can use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A?displayProperty=nameWithType> methods to request that the engine pauses to receive an update.</span></span> <span data-ttu-id="9c8e6-104"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Wystąpienia zgłasza <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> zdarzenie, gdy wszystko będzie gotowe do aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-104">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> event when it is ready for the update.</span></span>  
  
 <span data-ttu-id="9c8e6-105">Gdy <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia jest wstrzymana, możesz załadować, zwolnij, włączania i wyłączania <xref:System.Speech.Recognition.Grammar> obiektów, a następnie zmodyfikuj wartości <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, i <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-105">While a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span>  
  
 <span data-ttu-id="9c8e6-106">Jeśli aplikacja wykorzystuje <xref:System.Speech.Recognition.SpeechRecognizer> wystąpienia do zarządzania rozpoznawania, można użyć jednego z <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A?displayProperty=nameWithType> metody żądania, że aparat wstrzymuje do odbierania aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-106">If your application is using a <xref:System.Speech.Recognition.SpeechRecognizer> instance to manage recognition, it can use one of the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A?displayProperty=nameWithType> methods to request that the engine pauses to receive an update.</span></span> <span data-ttu-id="9c8e6-107"><xref:System.Speech.Recognition.SpeechRecognizer> Wystąpienia zgłasza <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached?displayProperty=nameWithType> zdarzenie, gdy wszystko będzie gotowe do aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-107">The <xref:System.Speech.Recognition.SpeechRecognizer> instance raises a <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached?displayProperty=nameWithType> event when it is ready for the update.</span></span>  
  
 <span data-ttu-id="9c8e6-108">Gdy <xref:System.Speech.Recognition.SpeechRecognizer> wystąpienia jest wstrzymana, możesz załadować, zwolnij, włączania i wyłączania <xref:System.Speech.Recognition.Grammar> obiektów.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-108">While a <xref:System.Speech.Recognition.SpeechRecognizer> instance is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="9c8e6-109">Podczas obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> i <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached?displayProperty=nameWithType> zdarzenia, aparat rozpoznawania wstrzymuje, dopóki nie zwraca program obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-109">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> and  <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached?displayProperty=nameWithType> events, a recognition engine pauses until the event handler returns.</span></span>  
  
 <span data-ttu-id="9c8e6-110"><xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> pochodzi od klasy <xref:System.EventArgs>.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-110"><xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> derives from <xref:System.EventArgs>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c8e6-111">W poniższym przykładzie przedstawiono aplikację konsolową która ładuje i zwalnia <xref:System.Speech.Recognition.Grammar> obiektów.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-111">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="9c8e6-112">Aplikacja używa <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodę, aby zażądać aparatu rozpoznawania mowy, aby wstrzymać, więc może ona odbierać aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-112">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="9c8e6-113">Aplikacja, a następnie ładuje i zwalnia <xref:System.Speech.Recognition.Grammar> obiektu.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-113">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="9c8e6-114">Przy każdej aktualizacji program obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> zdarzeń zapisuje nazwę i stan aktualnie załadowanych <xref:System.Speech.Recognition.Grammar> obiekty do konsoli.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-114">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="9c8e6-115">Gramatyki są ładowane i zwolniony, najpierw rozpoznaje nazwy zwierząt gospodarskich, a następnie utworzyć nazwy zwierząt gospodarskich nazw owoców, a następnie nazwy tylko owoce.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-115">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
    <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
    <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9c8e6-116">Pobiera pozycję audio, skojarzone ze zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-116">Gets the audio position associated with the event.</span></span></summary>
        <value><span data-ttu-id="9c8e6-117">Zwraca lokalizację, w ramach bufor mowy <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> lub <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> po wstrzymuje i zgłasza <c>RecognizerUpdateReached</c> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-117">Returns the location within the speech buffer of a <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> or a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> when it pauses and raises a <c>RecognizerUpdateReached</c> event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c8e6-118">Aplikacje mogą używać lokalizacji wskazanej przez <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition%2A> dostępu wejścia audio, który wystąpił podczas została wstrzymana przez aparat rozpoznawania do.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-118">Applications can use the location indicated by <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition%2A> to access audio input that occurred while the recognition engine was paused.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      </Docs>
    </Member>
    <Member MemberName="UserToken">
      <MemberSignature Language="C#" Value="public object UserToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserToken" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserToken As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserToken { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserToken : obj" Usage="System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9c8e6-119">Pobiera <c>UserToken</c> przekazywane do systemu, gdy aplikacja wywołuje <see cref="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" /> lub <see cref="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-119">Gets the <c>UserToken</c> passed to the system when an application calls <see cref="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" /> or <see cref="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />.</span></span></summary>
        <value><span data-ttu-id="9c8e6-120">Zwraca obiekt, który zawiera <c>UserToken</c>.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-120">Returns an object that contains the <c>UserToken</c>.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c8e6-121">Określa aplikację `UserToken` gdy żąda ona Generowanie `RecognizerUpdateReached` zdarzeń, wywołując jedną z <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A?displayProperty=nameWithType> lub <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A?displayProperty=nameWithType> metod, które przyjmują `userToken` parametru.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-121">An application specifies a `UserToken` when it requests the generation of a `RecognizerUpdateReached` event by calling one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A?displayProperty=nameWithType> methods that take a `userToken` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c8e6-122">W poniższym przykładzie przedstawiono aplikację konsolową która ładuje i zwalnia <xref:System.Speech.Recognition.Grammar> obiektów.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-122">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="9c8e6-123">Aplikacja używa <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodę, aby zażądać aparatu rozpoznawania mowy, aby wstrzymać, więc może ona odbierać aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-123">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="9c8e6-124">Metoda przekazuje <xref:System.String> dla obiektu `userToken` parametr, który w tym artykule opisano, co aplikacja będzie także rozpoznawał po aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-124">The method passes in a <xref:System.String> object for the `userToken` parameter that describes what the application will recognize after the update.</span></span> <span data-ttu-id="9c8e6-125">Aplikacja, a następnie ładuje i zwalnia <xref:System.Speech.Recognition.Grammar> obiektu.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-125">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="9c8e6-126">Przy każdej aktualizacji program obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> zdarzeń zapisuje zawartość `userToken` do konsoli.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-126">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> event writes the contents of `userToken` to the console.</span></span> <span data-ttu-id="9c8e6-127">Gramatyki są ładowane i zwolniony, najpierw rozpoznaje nazwy zwierząt gospodarskich, a następnie utworzyć nazwy zwierząt gospodarskich nazw owoców, a następnie nazwy tylko owoce.</span><span class="sxs-lookup"><span data-stu-id="9c8e6-127">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the farmAnimals grammar  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start continuous, asynchronous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous recognition...");  
        Console.WriteLine("  Farm animals will now be recognized.");  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Load the Fruit grammar.  
        string activeGrammars = "Farm animals and fruits will now be recognized.";  
        recognizer.RequestRecognizerUpdate(activeGrammars);  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Console.WriteLine();  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Unload the Farm grammar.  
        string onlyFruit = "Only fruits will now be recognized.";  
        recognizer.RequestRecognizerUpdate(onlyFruit);  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, describe what the application will recognize next.  
    public static void recognizer_RecognizerUpdateReached(object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine("  Update reached: " + e.UserToken);  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      </Docs>
    </Member>
  </Members>
</Type>