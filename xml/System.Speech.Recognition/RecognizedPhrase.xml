<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="be44d69d55c21115cdbd91a93bf10a0d73179176" />
    <Meta Name="ms.sourcegitcommit" Value="84c54c0c7d64827a5637d1f05e74e1f0598606a1" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/27/2018" />
    <Meta Name="ms.locfileid" Value="42942586" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <TypeSignature Language="F#" Value="type RecognizedPhrase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera szczegółowe informacje, generowane przez aparat rozpoznawania mowy o rozpoznawanym danych wejściowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa zawiera szczegółowe informacje dotyczące słów i fraz przetworzone podczas operacji rozpoznawania mowy, takie jak następujące:  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> Odwołania do właściwości <xref:System.Speech.Recognition.Grammar> , aparat rozpoznawania używany do identyfikowania danych wejściowych.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> Właściwość zawiera tekst znormalizowane frazy.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Semantycznego informacji zawartych w wyniku odwołuje się do właściwości. Informacje semantyczne jest słownik nazw kluczy i skojarzone dane semantycznego.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Właściwość zawiera uporządkowany zbiór <xref:System.Speech.Recognition.RecognizedWordUnit> obiekty reprezentujące każdego rozpoznane słowa w danych wejściowych. Każda jednostka w wersji programu word zawiera format wyświetlania, format leksykalne i Wymowa informacji dla odpowiedniego programu word.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> Właściwość zawiera informacje o podstawienia wyspecjalizowane programu word.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> i <xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> właściwości zawierają informacje o zastępców rozpoznawania, które mają takie same lub podobne Wymowa.  
  
-   Wartość <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> właściwość wskazuje stopień pewności, przypisany przez aparat rozpoznawania mowy, czy rozpoznaną frazę dopasowuje dane wejściowe.  
  
 Aparat rozpoznawania mowy zwraca wyniki rozpoznawania w <xref:System.Speech.Recognition.RecognitionResult> obiektu, który dziedziczy z <xref:System.Speech.Recognition.RecognizedPhrase>. Wynik rozpoznawania <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> właściwość zawiera uporządkowany zbiór <xref:System.Speech.Recognition.RecognizedPhrase> obiektów, z których każdy jest możliwe dopasowanie na dane wejściowe dla aparatu rozpoznawania.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano program obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, lub <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> zdarzeń i niektóre informacje związane z <xref:System.Speech.Recognition.RecognitionResult> obiektu. <xref:System.Speech.Recognition.RecognitionResult> Klasa pochodzi od <xref:System.Speech.Recognition.RecognizedPhrase> klasy.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość przypisaną przez aparat rozpoznawania, który reprezentuje prawdopodobieństwo który <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> pasuje do podanego danych wejściowych.</summary>
        <value>Względna miara pewności poprawne rozpoznawanie frazę. Wartość jest od 0,0 do 1,0, niski wysokiego zaufania, aby uzyskać odpowiednio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyniki zaufania nie wskazują na bezwzględne prawdopodobieństwo frazę rozpoznano poprawnie. Zamiast tego oceny zaufania mechanizm umożliwiający porównanie względną dokładność wiele alternatyw rozpoznawania dla danego danych wejściowych. To ułatwia, zwracając najdokładniejszych wynik rozpoznawania. Na przykład jeśli rozpoznaną frazę współczynnik ufności 0,8, to oznacza, że wyrażenie ma 80% prawdopodobieństwo są poprawne dopasowania dla danych wejściowych.  Oznacza to, że wyrażenie jest bardziej prawdopodobne, jako prawidłowego dopasowania dla danych wejściowych niż inne wyniki, które mają zaufanie ocenia mniejsza niż 0,8.  
  
 Współczynnik ufności, samodzielnie nie ma sensu, chyba że masz alternatywnych wyników, aby porównać z tej samej operacji rozpoznawania albo z poprzednich rozpoznawań tych samych danych wejściowych. Wartości są używane do rank alternatywnych Release candidate fraz zwrócony przez <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> właściwość <xref:System.Speech.Recognition.RecognitionResult> obiektów.  
  
 Zaufania są wartości względne i unikatowy do każdego aparat rozpoznawania. Nie można znacząco porównać wartości ufności zwrócony przez dwa aparatów rozpoznawania w innej.  
  
 Aparat rozpoznawania mowy może przydzielić współczynnik ufności niski prowadzone danych wejściowych z różnych powodów, takie jak zakłócenia w tle, inarticulate mowy lub nieprzewidziane słowa lub sekwencji. Jeśli aplikacja wykorzystuje <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia, możesz zmodyfikować poziom ufności, w których mowy danych wejściowych jest zaakceptowane lub odrzucone z jednym z <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metody. Progi zaufania dla udostępnionego urządzenia rozpoznającego zarządzane przez <xref:System.Speech.Recognition.SpeechRecognizer>, są skojarzone z profilem użytkownika i przechowywane w rejestrze systemu Windows. Aplikacje nie powinien zapisać zmiany w rejestrze dla właściwości udostępniony aparat rozpoznawania.  
  
 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Właściwość <xref:System.Speech.Recognition.RecognitionResult> obiekt zawiera uporządkowany zbiór <xref:System.Speech.Recognition.RecognizedPhrase> obiektów, z których każdy jest możliwe dopasowanie na dane wejściowe dla aparatu rozpoznawania. Zastępcy są uporządkowane od najwyższego do najniższego zaufania.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano program obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, lub <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> zdarzeń. W przykładzie przedstawiono informacje związane z <xref:System.Speech.Recognition.RecognitionResult> obiektu, niektóre z nich jest tworzony na podstawie <xref:System.Speech.Recognition.RecognizedPhrase>. Program obsługi wyświetla wyniki zaufania dla rozpoznawanych frazy oraz jak w przypadku zastępców rozpoznawania.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberSignature Language="F#" Value="member this.ConstructSmlFromSemantics : unit -&gt; System.Xml.XPath.IXPathNavigable" Usage="recognizedPhrase.ConstructSmlFromSemantics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca dokument znaczników semantycznych języka (SML) dla informacji semantycznych w <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> obiektu.</summary>
        <returns>Zwraca opis SML semantykę <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> jako [XPath](http://msdn.microsoft.com/library/ms256115.aspx) obiektu można nawigować.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o języku znaczników semantycznych (SML), zobacz [semantycznego Markup Language Reference](http://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d).  
  
   
  
## Examples  
 W poniższym przykładzie metoda zwraca ciąg, który zawiera SML dla semantyki rozpoznaną frazę.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammar : System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Speech.Recognition.Grammar" /> używanej przez aparat rozpoznawania mowy do zwrócenia <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <value>Obiekt Gramatyka języka aparatu rozpoznawania mowy, używany do identyfikowania danych wejściowych.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HomophoneGroupId : int" Usage="System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator dla grupy homophone frazy.</summary>
        <value>Identyfikator grupy homophone frazy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat rozpoznawania mowy przypisuje identyfikator grupy wszystkich zastępców rozpoznawania, które mają ten sam Wymowa. Dla każdej alternatywny, który ma unikatowy Wymowa aparat rozpoznawania tworzy grupę homophone. Aparat rozpoznawania mowy generuje nową grupę identyfikatory dla każdej operacji rozpoznawania i identyfikatory nie może służyć do porównywania alternatyw wygenerowany na podstawie rozpoznawania osobne operacje.  
  
 Na przykład dla wyniku rozpoznawania, który zawierał zastępcy "wskaźnik", "koniec" i "warstwa", zastępców pierwsze dwie będą należeć do jednej grupy homophone, a ostatni alternatywny będzie jeden element członkowski drugiej grupy homophone.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Homophones : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję alternatyw rozpoznawania, które mają ten sam Wymowa jako rozpoznawanym frazy.</summary>
        <value>Kolekcja tylko do odczytu, które mają ten sam Wymowa jako rozpoznawanym frazy alternatyw rozpoznawania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wszystkie inne zastępców rozpoznawania, które mają ten sam Wymowa jako rozpoznawanym frazy.  
  
 Na przykład dla wyniku rozpoznawania, który zawierał zastępcy, "wskaźnik" i "koniec", Kolekcja homofonów podczas pierwszego alternatywna "wskaźnik" zawierałoby drugi frazę "koniec". Kolekcja homofonów podczas dla drugiego alternatywny, "koniec" zawiera pierwszy frazę "wskaźnik".  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementWordUnits : System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o tekst, który aparat rozpoznawania mowy zmieniać normalizacji część mowy na tekst.</summary>
        <value>Kolekcja <see cref="T:System.Speech.Recognition.ReplacementText" /> obiekty, które opisują fragmentów tekstu, który zastąpił aparatu rozpoznawania mowy, gdy jej znormalizowane rozpoznawanym dane wejściowe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W ramach procesu rozpoznawania mowy rozpoznawania mowy normalizuje rozpoznawanym danych wejściowych w formularzu wyświetlania.  
  
 Na przykład dane głosowe "dwadzieścia pięć dolarów", generuje wynik rozpoznawania gdzie <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość zawiera słowa "dwadzieścia", "5" i "dolarów", a <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> właściwość zawiera frazę "25,00". Aby uzyskać więcej informacji na temat normalizacji tekstu zobacz <xref:System.Speech.Recognition.ReplacementText> klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Semantics : System.Speech.Recognition.SemanticValue" Usage="System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje semantyczne, który jest skojarzony z wyrażeniem rozpoznawanym.</summary>
        <value>Semantyczne informacje związane z rozpoznanym frazę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gramatyka rozpoznawania mowy mogą obejmować informacje semantyczne. Aparat rozpoznawania mowy, generując wyniku rozpoznawania dla takich gramatyki, informacji semantycznych mógłby być zawarty w wyniku rozpoznawania zgodnie z regułami i gramatyki, dane wejściowe dla aparatu rozpoznawania. Aby uzyskać więcej informacji na temat informacji semantycznych zobacz [interpretacji wyników semantycznego](http://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) i <xref:System.Speech.Recognition.SemanticResultKey> i <xref:System.Speech.Recognition.SemanticResultValue> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę, która pobiera konkretnych informacji semantycznych z rozpoznanym frazę. Po powrocie z tej metody zawiera wartość semantycznego klucza lub wartość null, jeśli wartość nie została pobrana. Ta metoda sprawdza, czy tylko klucze najwyższego poziomu. Ponieważ informacje semantyczne znajduje się w drzewie wartości, niższego poziomu muszą być dostępne za pośrednictwem zwrócona wartość semantycznego.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tekst znormalizowane generowane przez aparat rozpoznawania mowy z rozpoznanym danych wejściowych.</summary>
        <value>Znormalizowana tekst generowany przez aparat rozpoznawania mowy z rozpoznanym danych wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W ramach procesu rozpoznawania mowy rozpoznawania mowy wykonuje normalizacji mowy na tekst rozpoznawanym danych wejściowych w formularzu wyświetlania.  
  
 Na przykład dane głosowe "dwadzieścia pięć dolarów", generuje wynik rozpoznawania gdzie <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość zawiera słowa "dwadzieścia", "5" i "dolarów", a <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> właściwość zawiera frazę "25,00". Aby uzyskać więcej informacji na temat normalizacji tekstu zobacz <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Words : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wyrazy generowane przez aparat rozpoznawania mowy z rozpoznanym danych wejściowych.</summary>
        <value>Kolekcja <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> obiekty wygenerowane przez aparatu rozpoznawania mowy, rozpoznawanym danych wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zawiera wyrazy wydzielana z danych wejściowych aparatu rozpoznawania mowy, przed aparatu rozpoznawania mowy na tekst normalizacji wyniku.  
  
 Na przykład dane głosowe "dwadzieścia pięć dolarów", generuje wynik rozpoznawania gdzie <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> właściwość zawiera słowa "dwadzieścia", "5" i "dolarów", a <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> właściwość zawiera frazę "25,00". Aby uzyskać więcej informacji na temat normalizacji tekstu zobacz <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>