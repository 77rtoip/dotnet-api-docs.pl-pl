<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="532436c4bf4201c336f4d35a62ee5de8416d69f2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231151" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <TypeSignature Language="F#" Value="type RecognizedPhrase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera szczegółowe informacje, które zostały wygenerowane przez aparat rozpoznawania mowy, dotyczące rozpoznanego danych wejściowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa zawiera szczegółowe informacje dotyczące słów i fraz przetworzonych podczas operacji rozpoznawania mowy, w tym następujące:  
  
-   Właściwość odwołuje się do tego, że aparat rozpoznawania służy do identyfikowania danych wejściowych. <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A>  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> Właściwość zawiera znormalizowany tekst dla frazy.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Właściwość odwołuje się do informacji semantycznych zawartych w wyniku. Informacje semantyczne to słownik nazw kluczy i skojarzonych danych semantycznych.  
  
-   Właściwość zawiera uporządkowaną <xref:System.Speech.Recognition.RecognizedWordUnit> kolekcję obiektów, które reprezentują każdy rozpoznany wyraz w danych wejściowych. <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Każda jednostka słowa zawiera format wyświetlania, format leksykalny i informacje o wymowie dla odpowiedniego wyrazu.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> Właściwość zawiera informacje na temat specjalnych zastępowania wyrazów.  
  
-   Właściwości <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> i<xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> zawierają informacje o alternatywach rozpoznawania, które mają taką samą lub podobną wymowę.  
  
-   Wartość <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> właściwości wskazuje stopień pewności, przypisany przez aparat rozpoznawania mowy, że rozpoznana fraza pasuje do danych wejściowych.  
  
 Aparat rozpoznawania mowy zwraca wyniki rozpoznawania w <xref:System.Speech.Recognition.RecognitionResult> obiekcie, który dziedziczy z. <xref:System.Speech.Recognition.RecognizedPhrase> Właściwość wynik <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> rozpoznawania zawiera uporządkowaną <xref:System.Speech.Recognition.RecognizedPhrase> kolekcję obiektów, z których każdy jest możliwym dopasowaniem danych wejściowych do aparatu rozpoznawania.  
  
   
  
## Examples  
 Poniższy przykład pokazuje procedurę obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>dla, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, lub <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> , <xref:System.Speech.Recognition.RecognitionResult> i niektóre informacje skojarzone z obiektem. <xref:System.Speech.Recognition.RecognitionResult> Klasa pochodzi<xref:System.Speech.Recognition.RecognizedPhrase> od klasy.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość przypisaną przez aparat rozpoznawania, która reprezentuje prawdopodobieństwo, że <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> dopasowuje dane wejściowe.</summary>
        <value>Względna miara pewności poprawnego rozpoznawania frazy. Wartość jest z przedziału od 0,0 do 1,0, odpowiednio dla niskiego wysokiego poziomu zaufania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyniki pewności nie wskazują absolutnego prawdopodobieństwa, że fraza została prawidłowo rozpoznana. Zamiast tego, wyniki pewności zapewniają mechanizm do porównywania dokładności względnej z wieloma alternatywami rozpoznawania dla danego danych wejściowych. Ułatwia to zwrócenie najbardziej dokładnego wyniku rozpoznawania. Na przykład jeśli rozpoznana fraza ma wynik o ufności 0,8, nie oznacza to, że fraza ma 80% szansy dla danych wejściowych.  Oznacza to, że fraza może być właściwym dopasowaniem do danych wejściowych niż inne wyniki, które mają wartość mniejszą niż 0,8.  
  
 Wynik pewności nie ma znaczenia, chyba że masz alternatywne wyniki do porównania z, z tej samej operacji rozpoznawania lub z poprzednich ocen tych samych danych wejściowych. Wartości są używane do klasyfikowania alternatywnych fraz kandydujących zwracanych <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> przez <xref:System.Speech.Recognition.RecognitionResult> Właściwość obiektów.  
  
 Wartości zaufania są względne i unikatowe dla poszczególnych aparatów rozpoznawania. Wartości zaufania zwracane przez dwa różne aparaty rozpoznawania nie mogą być w znaczący sposób porównywane.  
  
 Aparat rozpoznawania mowy może przypisywać niewielką ocenę do mówionych danych wejściowych z różnych powodów, takich jak zakłócenia w tle, zamiana mowy lub nieprzewidziane słowa albo sekwencje słów. Jeśli aplikacja używa <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia, można zmodyfikować poziom pewności, przy którym dane wejściowe mowy są akceptowane lub odrzucane przy użyciu jednej <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> z metod. Progi zaufania udostępnionego aparatu rozpoznawania, zarządzane przez <xref:System.Speech.Recognition.SpeechRecognizer>, są skojarzone z profilem użytkownika i przechowywane w rejestrze systemu Windows. Aplikacje nie powinny zapisywać zmian w rejestrze dla właściwości udostępnionego aparatu rozpoznawania.  
  
 Właściwość obiektu zawiera uporządkowaną kolekcję obiektów, z których każdy jest możliwym dopasowaniem do danych wejściowych aparatu rozpoznawania. <xref:System.Speech.Recognition.RecognizedPhrase> <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> <xref:System.Speech.Recognition.RecognitionResult> Alternatywy są uporządkowane od najwyższego do najniższego zaufania.  
  
   
  
## Examples  
 Poniższy przykład pokazuje procedurę obsługi dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>lub <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> zdarzenia. W przykładzie przedstawiono informacje skojarzone z <xref:System.Speech.Recognition.RecognitionResult> obiektem, z których <xref:System.Speech.Recognition.RecognizedPhrase>pochodzą. Procedura obsługi wyświetla wyniki zaufania dla rozpoznanej frazy, a także dla alternatywów rozpoznawania.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberSignature Language="F#" Value="member this.ConstructSmlFromSemantics : unit -&gt; System.Xml.XPath.IXPathNavigable" Usage="recognizedPhrase.ConstructSmlFromSemantics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca dokument semantycznego języka Markup Language (SML) dla informacji semantycznych w <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> obiekcie.</summary>
        <returns>Zwraca SML opisu semantyki <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> jako obiektu nawigacji <see href="https://msdn.microsoft.com/library/ms256115.aspx">XPath</see> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje na temat semantycznego języka Markup Language (SML), zobacz [Skorowidz języka znaczników semantycznych](https://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d).  
  
   
  
## Examples  
 W poniższym przykładzie metoda zwraca ciąg, który zawiera SML dla semantyki rozpoznanej frazy.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammar : System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera aparat rozpoznawania mowy używany do <see cref="T:System.Speech.Recognition.RecognizedPhrase" />zwrócenia. <see cref="T:System.Speech.Recognition.Grammar" /></summary>
        <value>Obiekt gramatyki, który służy do identyfikowania danych wejściowych przez aparat rozpoznawania mowy.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HomophoneGroupId : int" Usage="System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator dla grupy homophone dla frazy.</summary>
        <value>Identyfikator dla grupy homophone dla frazy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat rozpoznawania mowy przypisuje identyfikator grupy do wszystkich zastępców rozpoznawania, które mają tę samą wymowę. Dla każdego alternatywnego, który ma unikatową wymowę, aparat rozpoznawania tworzy grupę homophone. Aparat rozpoznawania mowy generuje nową grupę identyfikatorów dla każdej operacji rozpoznawania, a identyfikatory nie mogą być używane do porównywania elementów zastępczych z wygenerowanych z oddzielnych operacji rozpoznawania.  
  
 Na przykład w przypadku wyniku rozpoznawania, który zawierał zamienniki "urządzeniem", "ogon" i "ale ale", pierwsze dwa alternatywy będą należeć do jednej grupy homophone, a ostatni alternatywa będzie jednym członkiem drugiej grupy homophone.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Homophones : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję zastępców rozpoznawania, które mają tę samą odmowę co rozpoznaną frazę.</summary>
        <value>Kolekcja odpowiedników rozpoznawania, które mają taką samą odmowę jak ta rozpoznana fraza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wszystkie inne alternatywy rozpoznawania, które mają tę samą odmowę co rozpoznaną frazę.  
  
 Na przykład w przypadku wyniku rozpoznawania, który zawierał zamienniki, "urządzeniem" i "ogon", kolekcja homofonów podczas dla pierwszego zastępcy, "urządzeniem", będzie zawierać drugie zdanie "ogon". Kolekcja homofonów podczas dla drugiego alternatywnego "ogona" powinna zawierać pierwszą frazę "urządzeniem".  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementWordUnits : System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o tekście zmienionym przez aparat rozpoznawania mowy w ramach normalizacji zamiany mowy na tekst.</summary>
        <value>Kolekcja <see cref="T:System.Speech.Recognition.ReplacementText" /> obiektów, które opisują sekcje tekstu, które aparat rozpoznawania mowy zastąpił po znormalizowaniu rozpoznanych danych wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W ramach procesu rozpoznawania mowy aparat rozpoznawania mowy normalizuje rozpoznane dane wejściowe do formularza wyświetlania.  
  
 Na przykład dane wejściowe, "dwadzieścia pięć dolarów", generują wynik rozpoznawania, gdy <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Właściwość zawiera słowa, "dwadzieścia", "pięć" i "dolarów", <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> a właściwość zawiera frazę "$25,00". Aby uzyskać więcej informacji na temat normalizacji tekstu, <xref:System.Speech.Recognition.ReplacementText> zobacz Klasa.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Semantics : System.Speech.Recognition.SemanticValue" Usage="System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o semantyce, które są skojarzone z rozpoznaną frazą.</summary>
        <value>Informacje semantyczne skojarzone z rozpoznaną frazą.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gramatyka rozpoznawania mowy może zawierać informacje semantyczne. Gdy aparat rozpoznawania mowy generuje wynik rozpoznawania dla takiej gramatyki, informacje semantyczne mogą być zawarte w wynikach rozpoznawania, zgodnie z regułami gramatyki i danymi wejściowymi do aparatu rozpoznawania. Aby uzyskać więcej informacji na temat informacji semantycznych, zobacz [Opis wyników semantycznych](https://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) i <xref:System.Speech.Recognition.SemanticResultKey> klas i <xref:System.Speech.Recognition.SemanticResultValue> .  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę, która pobiera określone informacje semantyczne z rozpoznanej frazy. Gdy ta metoda zwraca, zawiera wartość klucza semantycznego lub wartość null, jeśli wartość nie została pobrana. Ta metoda sprawdza tylko klucze najwyższego poziomu. Ponieważ informacje o semantyce są zawarte w drzewie wartości, klucze niższego poziomu muszą być dostępne za pomocą zwracanej wartości semantycznej.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera znormalizowany tekst generowany przez aparat rozpoznawania mowy z rozpoznanych danych wejściowych.</summary>
        <value>Znormalizowany tekst generowany przez aparat rozpoznawania mowy rozpoznanego danych wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W ramach procesu rozpoznawania mowy aparat rozpoznawania mowy wykonuje normalizację zamiany mowy na tekst rozpoznanego danych wejściowych w formularzu wyświetlanym.  
  
 Na przykład dane wejściowe, "dwadzieścia pięć dolarów", generują wynik rozpoznawania, gdy <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Właściwość zawiera słowa, "dwadzieścia", "pięć" i "dolarów", <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> a właściwość zawiera frazę "$25,00". Aby uzyskać więcej informacji na temat normalizacji tekstu <xref:System.Speech.Recognition.ReplacementText>, zobacz.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Words : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wyrazy generowane przez aparat rozpoznawania mowy rozpoznawane jako dane wejściowe.</summary>
        <value>Kolekcja <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> obiektów wygenerowanych przez aparat rozpoznawania mowy dla rozpoznanego danych wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zawiera wyrazy utworzone na podstawie danych wejściowych przez aparat rozpoznawania mowy przed znormalizowaną metodą zamiany mowy na tekst aparatu rozpoznawania.  
  
 Na przykład dane wejściowe, "dwadzieścia pięć dolarów", generują wynik rozpoznawania, gdy <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Właściwość zawiera słowa, "dwadzieścia", "pięć" i "dolarów", <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> a właściwość zawiera frazę "$25,00". Aby uzyskać więcej informacji na temat normalizacji tekstu <xref:System.Speech.Recognition.ReplacementText>, zobacz.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>
