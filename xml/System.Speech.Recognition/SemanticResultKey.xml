<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68d8adcbb951b916fb8741f4e20d6c90b9461f90" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579337" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Kojarzy ciąg klucza z <see cref="T:System.Speech.Recognition.SemanticResultValue" /> wartości, aby zdefiniować <see cref="T:System.Speech.Recognition.SemanticValue" /> obiektów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To podstawowa jednostka semantycznego wyrażenie w System.Speech <xref:System.Speech.Recognition.SemanticValue>, która jest para klucza i wartości.  
  
 Przy użyciu <xref:System.Speech.Recognition.SemanticResultKey> obiekty, możesz oznaczyć <xref:System.Speech.Recognition.SemanticResultValue> wystąpień znajdujących się w <xref:System.Speech.Recognition.GrammarBuilder> obiekty i ciągi, dzięki czemu wartości można łatwo uzyskać dostęp z <xref:System.Speech.Recognition.SemanticValue> wystąpień na rozpoznawania.  
  
 Można użyć <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey> obiektów w połączeniu z <xref:System.Speech.Recognition.GrammarBuilder> i <xref:System.Speech.Recognition.Choices> obiekty do definiowania struktury semantycznego dla gramatyki rozpoznawania mowy. Aby uzyskać dostęp do informacji semantycznych w wyniku rozpoznawania, należy uzyskać wystąpienia <xref:System.Speech.Recognition.SemanticValue> za pośrednictwem <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> właściwość <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
 Aby uzyskać więcej informacji o korzystaniu z <xref:System.Speech.Recognition.SemanticResultValue> i <xref:System.Speech.Recognition.SemanticResultKey> obiekty, zobacz [SemanticResultValue zrozumienia i obiekty SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c) i [przy użyciu SemanticResultKey do wyodrębniania SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa) w [przewodnik programowania w języku mowy systemu .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.Grammar> rozpoznawanie wprowadzania hasła w postaci "hasło jest...", gdzie rzeczywiste dane wejściowe jest zgodny z symbolem wieloznacznym.  
  
 Symbol wieloznaczny jest oznaczone za pomocą semantyki klucza i <xref:System.Speech.Recognition.Grammar.SpeechRecognized> obsługi sprawdza obecność tego tagu, aby sprawdzić, czy podczas wprowadzania hasła.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy wystąpienie klasy <see cref="T:System.Speech.Recognition.SemanticResultKey" /> i kojarzy klucz ze składnikami gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktory <xref:System.Speech.Recognition.SemanticResultKey> Określ tagu tekstu (klucz semantyki) i zestaw składników gramatyki do dodania do gramatyki rozpoznawania mowy.  
  
 Gramatyka składników może być określona jako tablicę <xref:System.Speech.Recognition.GrammarBuilder> obiektów, lub jako tablica <xref:System.String> wystąpień.  
  
 Składniki gramatyki są używane w rozpoznawania, można przejść do zwróconego <xref:System.Speech.Recognition.SemanticValue> przy użyciu tagu tekstu dostarczony do konstruktora obiektu <xref:System.Speech.Recognition.SemanticResultKey> jako klucz semantyki. <xref:System.Speech.Recognition.SemanticValue.Value%2A> Właściwość <xref:System.Speech.Recognition.SemanticValue> wystąpienie będzie określana przez składniki gramatyki, używane w definicji <xref:System.Speech.Recognition.SemanticResultKey>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Tag, który ma być używany jako klucz semantyki dostępu do <see cref="T:System.Speech.Recognition.SemanticValue" /> wystąpienia skojarzonego z <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiekty określone przez <c>konstruktorów</c> argumentu.</param>
        <param name="builders">Tablica gramatyki składników, które zostaną skojarzone z <see cref="T:System.Speech.Recognition.SemanticValue" /> obiekt z tagiem zdefiniowane w <c>semanticResultKey</c>.</param>
        <summary>Przypisuje do co najmniej jeden klucz semantyki <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiekty używane do tworzenia gramatyki rozpoznawania mowy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z powodu niejawne konwersje `builders` obsługuje argument <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, i <xref:System.String> również obiektów. Aby uzyskać więcej informacji na niejawne konwersje, zobacz <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.  
  
 Podczas wykonywania operacji rozpoznawania <xref:System.Speech.Recognition.GrammarBuilder> obiektów w `builders` argumentu są traktowane jako sekwencyjnych. Na przykład jeśli następujące <xref:System.Speech.Recognition.SemanticResultValue> jest używany do tworzenia <xref:System.Speech.Recognition.Grammar>, dane wejściowe do aparatu rozpoznawania musi zawierać słów "szybki lis brązowy" w sekwencji zostały rozpoznane.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 `semanticResultKey` Argument zawiera tag używane do dostępu <xref:System.Speech.Recognition.SemanticValue> który może być zwracany.  
  
 <xref:System.Speech.Recognition.SemanticValue.Value%2A> z <xref:System.Speech.Recognition.SemanticValue> jest określany przez <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia zapewniane przez `builders` parametru.  
  
 Jeśli <xref:System.Speech.Recognition.GrammarBuilder> obiekty zawierają żadnych wystąpień definiującego <xref:System.Speech.Recognition.SemanticResultValue>, wartość <xref:System.Speech.Recognition.SemanticValue> jest `null`.  
  
 Jeśli <xref:System.Speech.Recognition.GrammarBuilder> obiektów w `builders` parametru podaj nieoznakowanego (nie są skojarzone z <xref:System.Speech.Recognition.SemanticResultKey> obiektu) <xref:System.Speech.Recognition.SemanticResultValue> wystąpienie, które jest używane przez logikę rozpoznawania, danego wystąpienia <xref:System.Speech.Recognition.SemanticResultValue> określi <xref:System.Speech.Recognition.SemanticValue.Value%2A>właściwość <xref:System.Speech.Recognition.SemanticValue> który jest generowany.  
  
 Powinien istnieć jeden i tylko jeden nieoznakowany <xref:System.Speech.Recognition.SemanticResultValue> wystąpienia w <xref:System.Speech.Recognition.GrammarBuilder> obiekty określone przez `builders` parametru. Jeśli wiele wystąpień nieoznakowany <xref:System.Speech.Recognition.SemanticResultValue> są skojarzone z <xref:System.Speech.Recognition.SemanticResultKey>, każda będzie podejmować próby zestaw wartości <xref:System.Speech.Recognition.SemanticValue> utworzone w wyniku rozpoznawania. Jest to niedozwolone, a aparat rozpoznawania wygeneruje wyjątek podczas próby użycia <xref:System.Speech.Recognition.Grammar> utworzone za pomocą takich <xref:System.Speech.Recognition.SemanticResultKey> wystąpienia.  
  
 Wystąpienia <xref:System.Speech.Recognition.SemanticResultValue> zawartych w <xref:System.Speech.Recognition.GrammarBuilder> obiekty określone przez `builders` parametru i już skojarzona z inną <xref:System.Speech.Recognition.SemanticResultKey> nie mają wpływu na bieżące <xref:System.Speech.Recognition.SemanticResultKey> wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.Grammar> rozpoznawanie wprowadzania hasła w postaci "hasło jest...", gdzie rzeczywiste dane wejściowe jest zgodny z symbolem wieloznacznym.  
  
 Symbol wieloznaczny jest oznakowany przez <xref:System.Speech.Recognition.SpeechRecognizer> o wartości klucza jest "Password". <xref:System.Speech.Recognition.Grammar.SpeechRecognized> Obsługi sprawdza obecność tego tagu, uzyskuje wejście audio hasła i weryfikuje hasło.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Tag, aby można używać dostępu <see cref="T:System.Speech.Recognition.SemanticValue" /> wystąpienia skojarzonego z <see cref="T:System.String" /> obiekty określone przez <c>fraz</c> argumentu.</param>
        <param name="phrases">Co najmniej jeden <see cref="T:System.String" /> obiektów, którego połączonych tekstu zostaną skojarzone z <see cref="T:System.Speech.Recognition.SemanticValue" /> obiekt z tagiem zdefiniowane w <c>semanticResultKey</c>.</param>
        <summary>Przypisuje do co najmniej jeden klucz semantyki <see cref="T:System.String" /> wystąpień używane do tworzenia gramatyki rozpoznawania mowy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania operacji rozpoznawania <xref:System.String> obiektów używanych w `phrases` parametru są traktowane jako sekwencyjnych. Na przykład jeśli następujące <xref:System.Speech.Recognition.SemanticResultValue> jest używany do tworzenia <xref:System.Speech.Recognition.Grammar>, dane wejściowe do aparatu rozpoznawania musi zawierać słów "szybki lis brązowy" w sekwencji zostały rozpoznane.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 `semanticResultKey` Argument określa klucz służący do dostępu <xref:System.Speech.Recognition.SemanticValue> który może być zwracany.  
  
 Jeśli musisz utworzyć <xref:System.Speech.Recognition.Grammar> przy użyciu <xref:System.Speech.Recognition.GrammarBuilder> obiekt, który zawiera klucz semantyki z tablicę obiektów string <xref:System.Speech.Recognition.SemanticValue.Value%2A> z <xref:System.Speech.Recognition.SemanticValue> utworzone przez operację rozpoznawania będzie do ciągu używanego w rozpoznawania. W poprzednim przykładzie, oznacza to, że <xref:System.Speech.Recognition.SemanticValue.Value%2A> byłoby "szybki lis brązowy".  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.Grammar> z <xref:System.Speech.Recognition.GrammarBuilder> obiekt, który używa <xref:System.Speech.Recognition.SemanticResultKey>, która jest zdefiniowana przez tablicę <xref:System.String> obiektów.  
  
 Aparat rozpoznawania przy użyciu <xref:System.Speech.Recognition.Grammar> zostanie utworzony rozpoznaje frazy "kolor czerwony zielony zero niebieski". Semantyka <xref:System.Speech.Recognition.RecognizedPhrase> zwrócony przez rozpoznawania będzie zawierać <xref:System.Speech.Recognition.SemanticValue> z <xref:System.Speech.Recognition.SemanticValue.Value%2A> "zielone czerwony niebieski". Dostęp można uzyskać <xref:System.Speech.Recognition.SemanticValue> tagu 'code'.  
  
 Z powodu `SemanticResultValue("zero", 5)` dołączany do <xref:System.Speech.Recognition.GrammarBuilder>, katalog główny <xref:System.Speech.Recognition.SemanticValue> obiektu w <xref:System.Speech.Recognition.RecognizedPhrase> będzie miał wartość 5.  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wystąpienie klasy <see cref="T:System.Speech.Recognition.GrammarBuilder" /> utworzone na podstawie bieżącego <see cref="T:System.Speech.Recognition.SemanticResultKey" /> wystąpienia.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Korzystanie z <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> odpowiada za pomocą <xref:System.Speech.Recognition.GrammarBuilder> Konstruktor pobierający <xref:System.Speech.Recognition.SemanticResultKey> jako argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.Grammar> obiekt, który obsługuje poleceń, aby zmienić kolor tła.  
  
 A <xref:System.Speech.Recognition.Choices> obiektu (`colorChoice`) zawierający listę opcji kolorów tła jest wypełniana przy użyciu <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> metody z <xref:System.Speech.Recognition.GrammarBuilder> wystąpień. <xref:System.Speech.Recognition.GrammarBuilder> Wystąpienia są uzyskiwane poprzez <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> metoda <xref:System.Speech.Recognition.SemanticResultValue> obiekty utworzone na podstawie ciągów kolorów.  
  
 A <xref:System.Speech.Recognition.GrammarBuilder> następnie są uzyskiwane przez wywołanie metody <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> na <xref:System.Speech.Recognition.SemanticResultKey> wystąpienia, która będzie służyć do klucza semantycznego dostępnych wyborów w programie `colorChoice`.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>