<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eed89ae88fdd6e3eb5d993c63104666d18daaa47" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231056" /></Metadata><TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognitionEngine = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c715b-101">Zapewnia dostęp do aparatu rozpoznawania mowy w procesie i zarządzania nim.</span><span class="sxs-lookup"><span data-stu-id="c715b-101">Provides the means to access and manage an in-process speech recognition engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-102">Dla dowolnego z zainstalowanych aparatów rozpoznawania mowy można utworzyć wystąpienie tej klasy.</span><span class="sxs-lookup"><span data-stu-id="c715b-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="c715b-103">Aby uzyskać informacje o zainstalowanych aparatach rozpoznawania, użyj metody statycznej <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> .</span><span class="sxs-lookup"><span data-stu-id="c715b-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-104">Ta klasa jest używana do uruchamiania aparatów rozpoznawania mowy w procesie i zapewnia kontrolę nad różnymi aspektami rozpoznawania mowy w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="c715b-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="c715b-105">Aby utworzyć aparat rozpoznawania mowy w procesie, użyj jednego z <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> konstruktorów.</span><span class="sxs-lookup"><span data-stu-id="c715b-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="c715b-106">Aby zarządzać gramatykami <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>rozpoznawania mowy, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> metod <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> , <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>,, i właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="c715b-107">Aby skonfigurować dane wejściowe do <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>aparatu rozpoznawania, użyj metody, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> .</span><span class="sxs-lookup"><span data-stu-id="c715b-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="c715b-108">Aby przeprowadzić rozpoznawanie mowy, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metody lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="c715b-109">Aby zmodyfikować sposób, w jaki rozpoznawanie obsługuje wyciszenie lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>nieoczekiwane dane <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> wejściowe, użyj właściwości <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, i.</span><span class="sxs-lookup"><span data-stu-id="c715b-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="c715b-110">Aby zmienić liczbę elementów zastępczych zwracanych przez aparat rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="c715b-111">Aparat rozpoznawania zwraca wyniki rozpoznawania w <xref:System.Speech.Recognition.RecognitionResult> obiekcie.</span><span class="sxs-lookup"><span data-stu-id="c715b-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="c715b-112">Aby zsynchronizować zmiany w aparacie rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="c715b-113">Aparat rozpoznawania używa więcej niż jednego wątku do wykonywania zadań.</span><span class="sxs-lookup"><span data-stu-id="c715b-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="c715b-114">Aby emulować dane wejściowe do aparatu rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> metod i. <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c715b-115"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Obiekt służy wyłącznie do korzystania z procesu, który tworzy wystąpienie obiektu.</span><span class="sxs-lookup"><span data-stu-id="c715b-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="c715b-116">Z drugiej strony, <xref:System.Speech.Recognition.SpeechRecognizer> współużytkuje jeden aparat rozpoznawania z dowolną aplikacją, która chce jej używać.</span><span class="sxs-lookup"><span data-stu-id="c715b-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c715b-117">Zawsze wywołuj <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> przed wydaniem ostatniego odwołania do aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="c715b-118">W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania `Finalize` metody aparatu rozpoznawania elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="c715b-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-119">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c715b-120">Ponieważ w `Multiple` tym przykładzie używa trybu <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metody, wykonuje rozpoznawanie, dopóki nie zamkniesz okna konsoli lub nie zatrzymasz debugowania.</span><span class="sxs-lookup"><span data-stu-id="c715b-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c715b-121">Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="c715b-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-122">Można skonstruować <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienie z dowolnego z następujących elementów:</span><span class="sxs-lookup"><span data-stu-id="c715b-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="c715b-123">Domyślny aparat rozpoznawania mowy dla systemu</span><span class="sxs-lookup"><span data-stu-id="c715b-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="c715b-124">Określony aparat rozpoznawania mowy określony przez użytkownika według nazwy</span><span class="sxs-lookup"><span data-stu-id="c715b-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="c715b-125">Domyślny aparat rozpoznawania mowy dla określonych ustawień regionalnych</span><span class="sxs-lookup"><span data-stu-id="c715b-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="c715b-126">Konkretny aparat rozpoznawania spełniający kryteria określone w <xref:System.Speech.Recognition.RecognizerInfo> obiekcie.</span><span class="sxs-lookup"><span data-stu-id="c715b-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="c715b-127">Zanim aparat rozpoznawania mowy zacznie rozpoznawać, należy załadować co najmniej jedną gramatykę rozpoznawania mowy i skonfigurować dane wejściowe dla aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c715b-128">Aby załadować gramatykę, wywołaj <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metodę <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> lub.</span><span class="sxs-lookup"><span data-stu-id="c715b-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-129">Aby skonfigurować wejście audio, użyj jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="c715b-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-130">Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> klasy przy użyciu domyślnego aparatu rozpoznawania mowy dla systemu.</span><span class="sxs-lookup"><span data-stu-id="c715b-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-131">Przed rozpoczęciem rozpoznawania mowy przez aparat rozpoznawania mowy należy załadować co najmniej jedną gramatykę rozpoznawania i skonfigurować dane wejściowe dla aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c715b-132">Aby załadować gramatykę, wywołaj <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metodę <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> lub.</span><span class="sxs-lookup"><span data-stu-id="c715b-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-133">Aby skonfigurować wejście audio, użyj jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="c715b-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Globalization.CultureInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="c715b-134">Ustawienia regionalne wymagane przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-134">The locale that the speech recognizer must support.</span></span></param>
        <summary><span data-ttu-id="c715b-135">Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> klasy przy użyciu domyślnego aparatu rozpoznawania mowy dla określonych ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="c715b-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-136">Microsoft Windows i system. Speech API akceptują wszystkie prawidłowe kody krajów językowych.</span><span class="sxs-lookup"><span data-stu-id="c715b-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="c715b-137">Aby przeprowadzić rozpoznawanie mowy przy użyciu języka określonego w `CultureInfo` argumencie, należy zainstalować aparat rozpoznawania mowy obsługujący ten kod w języku kraju.</span><span class="sxs-lookup"><span data-stu-id="c715b-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="c715b-138">Aparaty rozpoznawania mowy dostarczane z systemem Microsoft Windows 7 współpracują z poniższymi kodami kraju języka.</span><span class="sxs-lookup"><span data-stu-id="c715b-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="c715b-139">pl GB.</span><span class="sxs-lookup"><span data-stu-id="c715b-139">en-GB.</span></span> <span data-ttu-id="c715b-140">Angielski (Zjednoczone Królestwo)</span><span class="sxs-lookup"><span data-stu-id="c715b-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="c715b-141">en-US.</span><span class="sxs-lookup"><span data-stu-id="c715b-141">en-US.</span></span> <span data-ttu-id="c715b-142">Angielski (Stany Zjednoczone)</span><span class="sxs-lookup"><span data-stu-id="c715b-142">English (United States)</span></span>  
  
-   <span data-ttu-id="c715b-143">de-DE.</span><span class="sxs-lookup"><span data-stu-id="c715b-143">de-DE.</span></span> <span data-ttu-id="c715b-144">Niemiecki (Niemcy)</span><span class="sxs-lookup"><span data-stu-id="c715b-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="c715b-145">es-ES.</span><span class="sxs-lookup"><span data-stu-id="c715b-145">es-ES.</span></span> <span data-ttu-id="c715b-146">Hiszpański (Hiszpania)</span><span class="sxs-lookup"><span data-stu-id="c715b-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="c715b-147">fr-FR.</span><span class="sxs-lookup"><span data-stu-id="c715b-147">fr-FR.</span></span> <span data-ttu-id="c715b-148">Francuski (Francja)</span><span class="sxs-lookup"><span data-stu-id="c715b-148">French (France)</span></span>  
  
-   <span data-ttu-id="c715b-149">ja-JP.</span><span class="sxs-lookup"><span data-stu-id="c715b-149">ja-JP.</span></span> <span data-ttu-id="c715b-150">Japoński (Japonia)</span><span class="sxs-lookup"><span data-stu-id="c715b-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="c715b-151">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="c715b-151">zh-CN.</span></span> <span data-ttu-id="c715b-152">Chiński (Chiny)</span><span class="sxs-lookup"><span data-stu-id="c715b-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="c715b-153">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="c715b-153">zh-TW.</span></span> <span data-ttu-id="c715b-154">Chiński (Tajwan)</span><span class="sxs-lookup"><span data-stu-id="c715b-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="c715b-155">Dozwolone są również dwuliterowe kody języka, takie jak "en", "fr" lub "es".</span><span class="sxs-lookup"><span data-stu-id="c715b-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="c715b-156">Zanim aparat rozpoznawania mowy zacznie rozpoznawać, należy załadować co najmniej jedną gramatykę rozpoznawania mowy i skonfigurować dane wejściowe dla aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c715b-157">Aby załadować gramatykę, wywołaj <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metodę <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> lub.</span><span class="sxs-lookup"><span data-stu-id="c715b-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-158">Aby skonfigurować wejście audio, użyj jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="c715b-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-159">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy, i inicjuje aparat rozpoznawania mowy dla ustawień regionalnych en-US.</span><span class="sxs-lookup"><span data-stu-id="c715b-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-160">Żadna z zainstalowanych funkcji rozpoznawania mowy nie obsługuje określonych ustawień regionalnych lub <paramref name="culture" /> jest kulturą niezmienną.</span><span class="sxs-lookup"><span data-stu-id="c715b-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-161"><paramref name="Culture" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-161"><paramref name="Culture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Speech.Recognition.RecognizerInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerInfo" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo"><span data-ttu-id="c715b-162">Informacje dotyczące określonego aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-162">The information for the specific speech recognizer.</span></span></param>
        <summary><span data-ttu-id="c715b-163">Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> programu przy użyciu informacji <see cref="T:System.Speech.Recognition.RecognizerInfo" /> w obiekcie, aby określić aparat rozpoznawania, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="c715b-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-164">Dla dowolnego z zainstalowanych aparatów rozpoznawania mowy można utworzyć wystąpienie tej klasy.</span><span class="sxs-lookup"><span data-stu-id="c715b-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="c715b-165">Aby uzyskać informacje o zainstalowanych aparatach rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-166">Zanim aparat rozpoznawania mowy zacznie rozpoznawać, należy załadować co najmniej jedną gramatykę rozpoznawania mowy i skonfigurować dane wejściowe dla aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c715b-167">Aby załadować gramatykę, wywołaj <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metodę <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> lub.</span><span class="sxs-lookup"><span data-stu-id="c715b-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-168">Aby skonfigurować wejście audio, użyj jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="c715b-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-169">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy, i inicjuje aparat rozpoznawania mowy obsługujący język angielski.</span><span class="sxs-lookup"><span data-stu-id="c715b-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : string -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerId" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId"><span data-ttu-id="c715b-170">Nazwa tokenu aparatu rozpoznawania mowy do użycia.</span><span class="sxs-lookup"><span data-stu-id="c715b-170">The token name of the speech recognizer to use.</span></span></param>
        <summary><span data-ttu-id="c715b-171">Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> klasy z parametrem ciągu, który określa nazwę aparatu rozpoznawania do użycia.</span><span class="sxs-lookup"><span data-stu-id="c715b-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-172">Nazwa tokenu aparatu rozpoznawania jest wartością <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> właściwości <xref:System.Speech.Recognition.RecognizerInfo> obiektu zwróconego przez <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> Właściwość aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="c715b-173">Aby uzyskać kolekcję wszystkich zainstalowanych aparatów rozpoznawania, użyj metody statycznej <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> .</span><span class="sxs-lookup"><span data-stu-id="c715b-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-174">Zanim aparat rozpoznawania mowy zacznie rozpoznawać, należy załadować co najmniej jedną gramatykę rozpoznawania mowy i skonfigurować dane wejściowe dla aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c715b-175">Aby załadować gramatykę, wywołaj <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metodę <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> lub.</span><span class="sxs-lookup"><span data-stu-id="c715b-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-176">Aby skonfigurować wejście audio, użyj jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="c715b-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-177">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy, i tworzy wystąpienie aparatu rozpoznawania mowy 8,0 dla systemu Windows (angielski-US).</span><span class="sxs-lookup"><span data-stu-id="c715b-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-178">Nie zainstalowano aparatu rozpoznawania mowy z tą nazwą tokenu <paramref name="recognizerId" /> lub jest to ciąg pusty ("").</span><span class="sxs-lookup"><span data-stu-id="c715b-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-179"><paramref name="recognizerId" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-179"><paramref name="recognizerId" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-180">Pobiera format dźwięku odbieranego przez <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c715b-181">Format dźwięku na wejściu do <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> wystąpienia lub <see langword="null" /> Jeśli dane wejściowe nie są skonfigurowane lub ustawione na dane wejściowe o wartości null.</span><span class="sxs-lookup"><span data-stu-id="c715b-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-182">Aby skonfigurować wejście audio, użyj jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="c715b-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-183">W poniższym <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> przykładzie pokazano, jak uzyskać i wyświetlić dane formatu audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-184">Pobiera poziom audio odbieranego przez <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c715b-185">Poziom audio danych wejściowych aparatu rozpoznawania mowy, od 0 do 100.</span><span class="sxs-lookup"><span data-stu-id="c715b-185">The audio level of the input to the speech recognizer, from 0 through 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-186">Wartość 0 oznacza ciszę, a 100 reprezentuje maksymalny wolumin wejściowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-187">Uruchamiany, gdy <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> raportuje poziom wejścia audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-188"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Wywołuje to zdarzenie wiele razy na sekundę.</span><span class="sxs-lookup"><span data-stu-id="c715b-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="c715b-189">Częstotliwość, z jaką zdarzenie jest zgłaszane, zależy od komputera, na którym jest uruchomiona aplikacja.</span><span class="sxs-lookup"><span data-stu-id="c715b-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="c715b-190">Aby uzyskać poziom audio w czasie zdarzenia, należy użyć <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> właściwości skojarzonej. <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs></span><span class="sxs-lookup"><span data-stu-id="c715b-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="c715b-191">Aby uzyskać bieżący poziom audio danych wejściowych do aparatu rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="c715b-192">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-193">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-194">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-195">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-195">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-196">Poniższy przykład dodaje procedurę obsługi dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> zdarzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine> do obiektu.</span><span class="sxs-lookup"><span data-stu-id="c715b-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="c715b-197">Program obsługi wyprowadza nowy poziom dźwięku do konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="c715b-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-198">Pobiera bieżącą lokalizację w strumieniu audio generowanym przez urządzenie, które udostępnia dane wejściowe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c715b-199">Bieżąca lokalizacja w strumieniu audio generowanym przez urządzenie wejściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-199">The current location in the audio stream being generated by the input device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-200"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> Właściwość odwołuje się do pozycji urządzenia wejściowego w wygenerowanym strumieniu audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="c715b-201">Z kolei <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> Właściwość odwołuje się do pozycji aparatu rozpoznawania w ramach wejścia audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="c715b-202">Te pozycje mogą być różne.</span><span class="sxs-lookup"><span data-stu-id="c715b-202">These positions can be different.</span></span> <span data-ttu-id="c715b-203">Na przykład, jeśli aparat rozpoznawania odebrał dane wejściowe, dla których nie Wygenerowano jeszcze wyniku rozpoznawania, wartość <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> właściwości jest mniejsza niż wartość <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-204">W poniższym przykładzie aparat rozpoznawania mowy w procesie używa gramatyki dyktowania, aby dopasować dane wejściowe mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="c715b-205">Program obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> zapisuje zdarzenia w konsoli programu <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> , gdy aparat rozpoznawania mowy wykrywa mowę na wejściu.</span><span class="sxs-lookup"><span data-stu-id="c715b-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-206">Uruchamiany po <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> wykryciu problemu w sygnale audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-207">Aby uzyskać ten problem, użyj <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> właściwości skojarzonej <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>klasy.</span><span class="sxs-lookup"><span data-stu-id="c715b-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="c715b-208">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-209">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-210">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-211">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-211">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-212">W poniższym przykładzie zdefiniowano procedurę obsługi zdarzeń, która zbiera informacje o <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> zdarzeniu.</span><span class="sxs-lookup"><span data-stu-id="c715b-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-213">Pobiera stan dźwięku odbieranego przez <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c715b-214">Stan wejścia audio do aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-214">The state of the audio input to the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-215">Właściwość reprezentuje stan dźwięku za pomocą elementu członkowskiego <xref:System.Speech.Recognition.AudioState> wyliczenia. <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-216">Uruchamiany po zmianie stanu w dźwięku otrzymywanym przez <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-217">Aby uzyskać stan dźwięku w momencie zdarzenia, należy użyć <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> właściwości skojarzonej. <xref:System.Speech.Recognition.AudioStateChangedEventArgs></span><span class="sxs-lookup"><span data-stu-id="c715b-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="c715b-218">Aby uzyskać bieżący stan audio danych wejściowych do aparatu rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="c715b-219">Aby uzyskać więcej informacji na temat stanu audio, <xref:System.Speech.Recognition.AudioState> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="c715b-220">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-221">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-222">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-223">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-223">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-224">W poniższym przykładzie użyto procedury obsługi dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> zdarzenia, aby napisać aparat rozpoznawania nowy <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> do konsoli <xref:System.Speech.Recognition.AudioState> przy każdej zmianie przy użyciu elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.BabbleTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-225">Pobiera lub ustawia przedział czasu, w którym <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> akceptowane są dane wejściowe zawierające tylko hałas w tle, przed zakończeniem rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="c715b-226">Czas trwania przedziału czasu.</span><span class="sxs-lookup"><span data-stu-id="c715b-226">The duration of the time interval.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-227">Każdy aparat rozpoznawania mowy ma algorytm rozróżniania między ciszą a mową.</span><span class="sxs-lookup"><span data-stu-id="c715b-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="c715b-228">Aparat rozpoznawania klasyfikuje jako szumy w tle wszystkie wyciszenie wejściowe, które nie jest zgodne z początkową regułą dowolnego z załadowanych i włączonych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="c715b-229">Jeśli aparat rozpoznawania odbiera tylko hałas w tle i wyciszenie w czasie interwału limitu czasu Babble, aparat rozpoznawania kończy tę operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="c715b-230">W przypadku asynchronicznych operacji rozpoznawania aparat rozpoznawania wywołuje <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> zdarzenie, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> gdzie <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> właściwość jest `true`i właściwość jest `null`.</span><span class="sxs-lookup"><span data-stu-id="c715b-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="c715b-231">W przypadku synchronicznych operacji rozpoznawania i emulacji aparat `null`rozpoznawania zwraca, a nie <xref:System.Speech.Recognition.RecognitionResult>prawidłowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="c715b-232">Jeśli limit czasu Babble jest ustawiony na 0, aparat rozpoznawania nie wykona sprawdzenia limitu czasu Babble.</span><span class="sxs-lookup"><span data-stu-id="c715b-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="c715b-233">Interwał limitu czasu może być dowolną wartością nieujemną.</span><span class="sxs-lookup"><span data-stu-id="c715b-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="c715b-234">Wartość domyślna to 0 s.</span><span class="sxs-lookup"><span data-stu-id="c715b-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-235">W poniższym przykładzie przedstawiono część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy, która ustawia <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> właściwości <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> <xref:System.Speech.Recognition.SpeechRecognitionEngine> i przed inicjacją rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="c715b-236">Procedury obsługi dla informacji o zdarzeniu <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> aparatu <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> rozpoznawania mowy i zdarzeń wyjściowych zdarzenia do konsoli programu, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> aby zademonstrować, <xref:System.Speech.Recognition.SpeechRecognitionEngine> jak właściwości mają wpływ na operacje rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder. 
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c715b-237">Ta właściwość jest ustawiona na wartość mniejszą niż 0 sekund.</span><span class="sxs-lookup"><span data-stu-id="c715b-237">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c715b-238"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> Usuwa obiekt.</span><span class="sxs-lookup"><span data-stu-id="c715b-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognitionEngine.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-239"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> Usuwa obiekt.</span><span class="sxs-lookup"><span data-stu-id="c715b-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognitionEngine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="c715b-240"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="c715b-240"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="c715b-241"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> Usuwa obiekt i zwalnia zasoby używane podczas sesji.</span><span class="sxs-lookup"><span data-stu-id="c715b-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c715b-242">Emuluje dane wejściowe do aparatu rozpoznawania mowy przy użyciu tekstu zamiast dźwięku do synchronicznego rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-243">Te metody pomijają wprowadzanie danych audio systemu i zapewniają tekst do aparatu rozpoznawania <xref:System.String> jako obiekty lub <xref:System.Speech.Recognition.RecognizedWordUnit> tablicę obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="c715b-244">Może to być przydatne w przypadku testowania lub debugowania aplikacji lub gramatyki.</span><span class="sxs-lookup"><span data-stu-id="c715b-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="c715b-245">Na przykład można użyć emulacji, aby określić, czy słowo znajduje się w gramatyce i jakie semantyki są zwracane po rozpoznaniu wyrazu.</span><span class="sxs-lookup"><span data-stu-id="c715b-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="c715b-246"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> Użyj metody, aby wyłączyć dane wejściowe audio w aparacie rozpoznawania mowy podczas operacji emulacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="c715b-247">Aparat <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>rozpoznawania mowy wywołuje,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, tak jakby operacja rozpoznawania nie została emulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c715b-248">Aparat rozpoznawania ignoruje nowe wiersze i dodatkowy biały znak i traktuje znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="c715b-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c715b-249">Obiekt wygenerowany przez aparat rozpoznawania mowy w odpowiedzi na emulowane dane wejściowe ma `null` wartość dla <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> właściwości. <xref:System.Speech.Recognition.RecognitionResult></span><span class="sxs-lookup"><span data-stu-id="c715b-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="c715b-250">Aby emulować rozpoznawanie asynchroniczne, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="c715b-251">Dane wejściowe dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-251">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="c715b-252">Emuluje wprowadzanie frazy do aparatu rozpoznawania mowy przy użyciu tekstu zamiast dźwięku do synchronicznego rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <returns><span data-ttu-id="c715b-253">Wynik operacji rozpoznawania lub <see langword="null" /> Jeśli operacja nie powiedzie się lub aparat rozpoznawania nie jest włączony.</span><span class="sxs-lookup"><span data-stu-id="c715b-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-254">Aparat <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>rozpoznawania mowy wywołuje,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, tak jakby operacja rozpoznawania nie została emulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="c715b-255">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują wielkość liter i znaki w przypadku stosowania reguł gramatycznych do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="c715b-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="c715b-256">Aby uzyskać więcej informacji na temat tego typu porównania, zobacz <xref:System.Globalization.CompareOptions> wartości <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> wyliczenia i <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="c715b-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="c715b-257">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy oraz traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="c715b-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-258">Poniższy przykład kodu jest częścią aplikacji konsolowej, która demonstruje emulowane dane wejściowe, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="c715b-259">Przykład generuje następujące dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-260">Aparat rozpoznawania nie ma załadowanych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-260">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-261"><paramref name="inputText" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-261"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-262"><paramref name="inputText" />jest ciągiem pustym ("").</span><span class="sxs-lookup"><span data-stu-id="c715b-262"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="c715b-263">Tablica jednostek programu Word, która zawiera dane wejściowe dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-263">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="c715b-264">Bitowa kombinacja wartości wyliczenia, które opisują typ porównania do użycia dla emulowanej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="c715b-265">Emuluje wprowadzanie określonych słów do aparatu rozpoznawania mowy, przy użyciu tekstu zamiast dźwięku do synchronicznego rozpoznawania mowy i określa, jak aparat rozpoznawania obsługuje porównanie Unicode między wyrazami a załadowanymi gramatykami rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="c715b-266">Wynik operacji rozpoznawania lub <see langword="null" /> Jeśli operacja nie powiedzie się lub aparat rozpoznawania nie jest włączony.</span><span class="sxs-lookup"><span data-stu-id="c715b-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-267">Aparat <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>rozpoznawania mowy wywołuje,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, tak jakby operacja rozpoznawania nie została emulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="c715b-268">Aparat rozpoznawania używa `compareOptions` , gdy stosuje reguły gramatyki do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="c715b-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="c715b-269">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują <xref:System.Globalization.CompareOptions.IgnoreCase> przypadek, <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> Jeśli wartość lub jest obecna.</span><span class="sxs-lookup"><span data-stu-id="c715b-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="c715b-270">Aparat rozpoznawania zawsze ignoruje szerokość znaków i nigdy nie ignoruje typu kana.</span><span class="sxs-lookup"><span data-stu-id="c715b-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="c715b-271">Aparat rozpoznawania ignoruje także nowe wiersze i dodatkowy biały znak i traktuje znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="c715b-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="c715b-272">Aby uzyskać więcej informacji na temat szerokości znaków i typu kana, <xref:System.Globalization.CompareOptions> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-273">Aparat rozpoznawania nie ma załadowanych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-273">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-274"><paramref name="wordUnits" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-274"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-275"><paramref name="wordUnits" />zawiera co najmniej jeden <see langword="null" /> element.</span><span class="sxs-lookup"><span data-stu-id="c715b-275"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c715b-276"><paramref name="compareOptions" />zawiera flagę <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />,,lub <see cref="F:System.Globalization.CompareOptions.StringSort" />. <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /></span><span class="sxs-lookup"><span data-stu-id="c715b-276"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="c715b-277">Fraza wejściowa dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-277">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="c715b-278">Bitowa kombinacja wartości wyliczenia, które opisują typ porównania do użycia dla emulowanej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="c715b-279">Emuluje wprowadzanie frazy do aparatu rozpoznawania mowy, przy użyciu tekstu zamiast dźwięku do synchronicznego rozpoznawania mowy i określa, jak aparat rozpoznawania obsługuje porównanie Unicode między frazą a załadowane gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="c715b-280">Wynik operacji rozpoznawania lub <see langword="null" /> Jeśli operacja nie powiedzie się lub aparat rozpoznawania nie jest włączony.</span><span class="sxs-lookup"><span data-stu-id="c715b-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-281">Aparat <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>rozpoznawania mowy wywołuje,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, tak jakby operacja rozpoznawania nie została emulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="c715b-282">Aparat rozpoznawania używa `compareOptions` , gdy stosuje reguły gramatyki do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="c715b-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="c715b-283">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują <xref:System.Globalization.CompareOptions.IgnoreCase> przypadek, <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> Jeśli wartość lub jest obecna.</span><span class="sxs-lookup"><span data-stu-id="c715b-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="c715b-284">Aparat rozpoznawania zawsze ignoruje szerokość znaków i nigdy nie ignoruje typu kana.</span><span class="sxs-lookup"><span data-stu-id="c715b-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="c715b-285">Aparat rozpoznawania ignoruje także nowe wiersze i dodatkowy biały znak i traktuje znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="c715b-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="c715b-286">Aby uzyskać więcej informacji na temat szerokości znaków i typu kana, <xref:System.Globalization.CompareOptions> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-287">Aparat rozpoznawania nie ma załadowanych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-287">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-288"><paramref name="inputText" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-288"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-289"><paramref name="inputText" />jest ciągiem pustym ("").</span><span class="sxs-lookup"><span data-stu-id="c715b-289"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c715b-290"><paramref name="compareOptions" />zawiera flagę <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />,,lub <see cref="F:System.Globalization.CompareOptions.StringSort" />. <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /></span><span class="sxs-lookup"><span data-stu-id="c715b-290"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c715b-291">Emuluje dane wejściowe do aparatu rozpoznawania mowy przy użyciu tekstu zamiast dźwięku na potrzeby asynchronicznego rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-292">Te metody pomijają wprowadzanie danych audio systemu i zapewniają tekst do aparatu rozpoznawania <xref:System.String> jako obiekty lub <xref:System.Speech.Recognition.RecognizedWordUnit> tablicę obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="c715b-293">Może to być przydatne w przypadku testowania lub debugowania aplikacji lub gramatyki.</span><span class="sxs-lookup"><span data-stu-id="c715b-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="c715b-294">Na przykład można użyć emulacji, aby określić, czy słowo znajduje się w gramatyce i jakie semantyki są zwracane po rozpoznaniu wyrazu.</span><span class="sxs-lookup"><span data-stu-id="c715b-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="c715b-295"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> Użyj metody, aby wyłączyć dane wejściowe audio w aparacie rozpoznawania mowy podczas operacji emulacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="c715b-296">Aparat <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>rozpoznawania mowy wywołuje,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, tak jakby operacja rozpoznawania nie została emulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c715b-297">Gdy aparat rozpoznawania ukończy asynchroniczne operacje rozpoznawania, zgłasza <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="c715b-298">Aparat rozpoznawania ignoruje nowe wiersze i dodatkowy biały znak i traktuje znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="c715b-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c715b-299">Obiekt wygenerowany przez aparat rozpoznawania mowy w odpowiedzi na emulowane dane wejściowe ma `null` wartość dla <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> właściwości. <xref:System.Speech.Recognition.RecognitionResult></span><span class="sxs-lookup"><span data-stu-id="c715b-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="c715b-300">Aby emulować rozpoznawanie synchroniczne, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="c715b-301">Dane wejściowe dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-301">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="c715b-302">Emuluje wprowadzanie frazy do aparatu rozpoznawania mowy przy użyciu tekstu zamiast dźwięku na potrzeby asynchronicznego rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-303">Aparat <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>rozpoznawania mowy wywołuje,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, tak jakby operacja rozpoznawania nie została emulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c715b-304">Gdy aparat rozpoznawania ukończy asynchroniczne operacje rozpoznawania, zgłasza <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="c715b-305">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują wielkość liter i znaki w przypadku stosowania reguł gramatycznych do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="c715b-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="c715b-306">Aby uzyskać więcej informacji na temat tego typu porównania, zobacz <xref:System.Globalization.CompareOptions> wartości <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> wyliczenia i <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="c715b-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="c715b-307">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy oraz traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="c715b-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-308">Poniższy przykład kodu jest częścią aplikacji konsolowej, która pokazuje asynchroniczne emulowane dane wejściowe, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="c715b-309">Przykład generuje następujące dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-310">Aparat rozpoznawania nie ma załadowanych gramatyki rozpoznawania mowy lub aparat rozpoznawania ma asynchroniczną operację rozpoznawania, która nie została jeszcze ukończona.</span><span class="sxs-lookup"><span data-stu-id="c715b-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-311"><paramref name="inputText" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-311"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-312"><paramref name="inputText" />jest ciągiem pustym ("").</span><span class="sxs-lookup"><span data-stu-id="c715b-312"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="c715b-313">Tablica jednostek programu Word, która zawiera dane wejściowe dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-313">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="c715b-314">Bitowa kombinacja wartości wyliczenia, które opisują typ porównania do użycia dla emulowanej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="c715b-315">Emuluje wprowadzanie określonych słów do aparatu rozpoznawania mowy przy użyciu tablicy <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> obiektów zamiast dźwięku na potrzeby asynchronicznego rozpoznawania mowy i określa, jak aparat rozpoznawania obsługuje porównanie Unicode między wyrazami a załadowanej mowy Rozpoznawanie gramatyki.</span><span class="sxs-lookup"><span data-stu-id="c715b-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-316">Aparat <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>rozpoznawania mowy wywołuje,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, tak jakby operacja rozpoznawania nie została emulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c715b-317">Gdy aparat rozpoznawania ukończy asynchroniczne operacje rozpoznawania, zgłasza <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="c715b-318">Aparat rozpoznawania używa `compareOptions` , gdy stosuje reguły gramatyki do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="c715b-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="c715b-319">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują <xref:System.Globalization.CompareOptions.IgnoreCase> przypadek, <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> Jeśli wartość lub jest obecna.</span><span class="sxs-lookup"><span data-stu-id="c715b-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="c715b-320">Aparaty rozpoznawania zawsze ignorują szerokość znaków i nigdy nie ignorują typu kana.</span><span class="sxs-lookup"><span data-stu-id="c715b-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="c715b-321">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy oraz traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="c715b-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="c715b-322">Aby uzyskać więcej informacji na temat szerokości znaków i typu kana, <xref:System.Globalization.CompareOptions> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-323">Aparat rozpoznawania nie ma załadowanych gramatyki rozpoznawania mowy lub aparat rozpoznawania ma asynchroniczną operację rozpoznawania, która nie została jeszcze ukończona.</span><span class="sxs-lookup"><span data-stu-id="c715b-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-324"><paramref name="wordUnits" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-324"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-325"><paramref name="wordUnits" />zawiera co najmniej jeden <see langword="null" /> element.</span><span class="sxs-lookup"><span data-stu-id="c715b-325"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c715b-326"><paramref name="compareOptions" />zawiera flagę <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />,,lub <see cref="F:System.Globalization.CompareOptions.StringSort" />. <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /></span><span class="sxs-lookup"><span data-stu-id="c715b-326"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="c715b-327">Fraza wejściowa dla operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-327">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="c715b-328">Bitowa kombinacja wartości wyliczenia, które opisują typ porównania do użycia dla emulowanej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="c715b-329">Emuluje wprowadzanie frazy do aparatu rozpoznawania mowy, przy użyciu tekstu zamiast dźwięku na potrzeby asynchronicznego rozpoznawania mowy i określa, jak aparat rozpoznawania obsługuje porównanie Unicode między frazą a załadowane gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-330">Aparat <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>rozpoznawania mowy wywołuje,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, tak jakby operacja rozpoznawania nie została emulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c715b-331">Gdy aparat rozpoznawania ukończy asynchroniczne operacje rozpoznawania, zgłasza <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="c715b-332">Aparat rozpoznawania używa `compareOptions` , gdy stosuje reguły gramatyki do frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="c715b-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="c715b-333">Aparaty rozpoznawania, które są dostarczane z systemami Vista i Windows 7 ignorują <xref:System.Globalization.CompareOptions.IgnoreCase> przypadek, <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> Jeśli wartość lub jest obecna.</span><span class="sxs-lookup"><span data-stu-id="c715b-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="c715b-334">Aparaty rozpoznawania zawsze ignorują szerokość znaków i nigdy nie ignorują typu kana.</span><span class="sxs-lookup"><span data-stu-id="c715b-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="c715b-335">Aparaty rozpoznawania ignorują również nowe wiersze i dodatkowe odstępy oraz traktują znaki interpunkcyjne jako literały.</span><span class="sxs-lookup"><span data-stu-id="c715b-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="c715b-336">Aby uzyskać więcej informacji na temat szerokości znaków i typu kana, <xref:System.Globalization.CompareOptions> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-337">Aparat rozpoznawania nie ma załadowanych gramatyki rozpoznawania mowy lub aparat rozpoznawania ma asynchroniczną operację rozpoznawania, która nie została jeszcze ukończona.</span><span class="sxs-lookup"><span data-stu-id="c715b-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-338"><paramref name="inputText" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-338"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-339"><paramref name="inputText" />jest ciągiem pustym ("").</span><span class="sxs-lookup"><span data-stu-id="c715b-339"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c715b-340"><paramref name="compareOptions" />zawiera flagę <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />,,lub <see cref="F:System.Globalization.CompareOptions.StringSort" />. <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /></span><span class="sxs-lookup"><span data-stu-id="c715b-340"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-341">Uruchamiany, <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> gdy kończy asynchroniczne operacje rozpoznawania emulowanej danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="c715b-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-342">Każda <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Metoda rozpoczyna asynchroniczne operacje rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="c715b-343">Wywołuje zdarzenie w <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> momencie zakończenia operacji asynchronicznej. <xref:System.Speech.Recognition.SpeechRecognitionEngine></span><span class="sxs-lookup"><span data-stu-id="c715b-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="c715b-344"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Operacja <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>może <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>podnieść zdarzenia, ,<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>i .<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized></span><span class="sxs-lookup"><span data-stu-id="c715b-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="c715b-345"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Zdarzenie jest ostatnim zdarzeniem, które aparat rozpoznawania zgłasza dla danej operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="c715b-346">Jeśli emulacja emulowana zakończyła się pomyślnie, możesz uzyskać dostęp do wyniku rozpoznawania przy użyciu jednego z następujących elementów:</span><span class="sxs-lookup"><span data-stu-id="c715b-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="c715b-347">Właściwość obiektu w programie obsługi zdarzenia. <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs></span><span class="sxs-lookup"><span data-stu-id="c715b-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="c715b-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>Właściwość w <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> obiekcie programu obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="c715b-349">Jeśli emulacja emulowana zakończyła się <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> niepowodzeniem, zdarzenie nie zostanie <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> zgłoszone i będzie miało wartość null.</span><span class="sxs-lookup"><span data-stu-id="c715b-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="c715b-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>pochodzi od <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c715b-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="c715b-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs>pochodzi od <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c715b-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="c715b-352">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-353">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-354">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-355">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-355">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-356">Poniższy przykład jest częścią aplikacji konsolowej, która ładuje gramatykę rozpoznawania mowy i pokazuje asynchroniczne emulowane dane wejściowe, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call matches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-357">Pobiera lub ustawia interwał wyciszenia, który <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> zostanie zaakceptowany na końcu niejednoznacznych danych wejściowych przed zakończeniem operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="c715b-358">Czas trwania interwału wyciszenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-358">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-359">Aparat rozpoznawania mowy używa tego interwału limitu czasu, gdy dane wejściowe rozpoznawania są niejednoznaczne.</span><span class="sxs-lookup"><span data-stu-id="c715b-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="c715b-360">Na przykład w przypadku gramatyki rozpoznawania mowy, która obsługuje rozpoznawanie "nowa gra" lub "nowa gra", "nowa gra" to niejednoznaczne dane wejściowe, a "nowa gra" to niejednoznaczne dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="c715b-361">Ta właściwość określa, jak długo aparat rozpoznawania mowy czeka na dodatkowe dane wejściowe przed zakończeniem operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="c715b-362">Interwał limitu czasu może mieć wartość od 0 do 10 sekund włącznie.</span><span class="sxs-lookup"><span data-stu-id="c715b-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="c715b-363">Wartość domyślna to 150 milisekund.</span><span class="sxs-lookup"><span data-stu-id="c715b-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="c715b-364">Aby ustawić interwał limitu czasu dla niejednoznacznych danych wejściowych, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Użyj właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c715b-365">Ta właściwość jest ustawiona na wartość mniejszą niż 0 sekund lub większa niż 10 sekund.</span><span class="sxs-lookup"><span data-stu-id="c715b-365">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeoutAmbiguous : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-366">Pobiera lub ustawia interwał wyciszenia, który <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> zostanie zaakceptowany na końcu niejednoznacznych danych wejściowych przed zakończeniem operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="c715b-367">Czas trwania interwału wyciszenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-367">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-368">Aparat rozpoznawania mowy używa tego interwału limitu czasu, gdy dane wejściowe rozpoznawania są niejednoznaczne.</span><span class="sxs-lookup"><span data-stu-id="c715b-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="c715b-369">Na przykład w przypadku gramatyki rozpoznawania mowy, która obsługuje rozpoznawanie "nowa gra" lub "nowa gra", "nowa gra" to niejednoznaczne dane wejściowe, a "nowa gra" to niejednoznaczne dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="c715b-370">Ta właściwość określa, jak długo aparat rozpoznawania mowy czeka na dodatkowe dane wejściowe przed zakończeniem operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="c715b-371">Interwał limitu czasu może mieć wartość od 0 do 10 sekund włącznie.</span><span class="sxs-lookup"><span data-stu-id="c715b-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="c715b-372">Wartość domyślna to 500 milisekund.</span><span class="sxs-lookup"><span data-stu-id="c715b-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="c715b-373">Aby ustawić interwał limitu czasu dla niejednoznacznych danych wejściowych, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c715b-374">Ta właściwość jest ustawiona na wartość mniejszą niż 0 sekund lub większa niż 10 sekund.</span><span class="sxs-lookup"><span data-stu-id="c715b-374">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-375">Pobiera kolekcję <see cref="T:System.Speech.Recognition.Grammar" /> obiektów, które są ładowane w tym <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="c715b-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <value><span data-ttu-id="c715b-376">Kolekcja <see cref="T:System.Speech.Recognition.Grammar" /> obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c715b-377">Poniższy przykład wyprowadza informacje do konsoli dla każdej gramatyki rozpoznawania mowy, która jest aktualnie załadowana przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c715b-378">Skopiuj kolekcję gramatyki, aby uniknąć błędów, jeśli kolekcja zostanie zmodyfikowana, a ta metoda wylicza elementy kolekcji.</span><span class="sxs-lookup"><span data-stu-id="c715b-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.InitialSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-379">Pobiera lub ustawia przedział czasu, w którym <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> akceptowane są dane wejściowe zawierające tylko cisz przed finalizowaniem rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="c715b-380">Czas trwania interwału wyciszenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-380">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-381">Każdy aparat rozpoznawania mowy ma algorytm rozróżniania między ciszą a mową.</span><span class="sxs-lookup"><span data-stu-id="c715b-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="c715b-382">Jeśli dane wejściowe aparatu rozpoznawania są wyciszenie w początkowym okresie limitu czasu, aparat rozpoznawania kończy tę operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="c715b-383">W przypadku asynchronicznych operacji rozpoznawania i emulacji aparat rozpoznawania <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> wywołuje zdarzenie, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> gdzie <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> właściwość jest `true`i właściwość jest `null`.</span><span class="sxs-lookup"><span data-stu-id="c715b-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="c715b-384">W przypadku synchronicznych operacji rozpoznawania i emulacji aparat `null`rozpoznawania zwraca, a nie <xref:System.Speech.Recognition.RecognitionResult>prawidłowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="c715b-385">Jeśli początkowy interwał limitu czasu wyciszenia jest ustawiony na 0, aparat rozpoznawania nie wykonuje początkowego sprawdzenia limitu czasu wyciszenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="c715b-386">Interwał limitu czasu może być dowolną wartością nieujemną.</span><span class="sxs-lookup"><span data-stu-id="c715b-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="c715b-387">Wartość domyślna to 0 s.</span><span class="sxs-lookup"><span data-stu-id="c715b-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-388">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c715b-389">Przykład ustawia <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> właściwości <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> i przedinicjacjąrozpoznawaniamowy.<xref:System.Speech.Recognition.SpeechRecognitionEngine></span><span class="sxs-lookup"><span data-stu-id="c715b-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="c715b-390">Programy obsługi dla informacji o zdarzeniu <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> aparatu <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> rozpoznawania mowy i zdarzeń wyjściowych zdarzenia do konsoli programu, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> aby zademonstrować, <xref:System.Speech.Recognition.SpeechRecognitionEngine> jak właściwości właściwości wpływają na operacje rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder. 
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c715b-391">Ta właściwość jest ustawiona na wartość mniejszą niż 0 sekund.</span><span class="sxs-lookup"><span data-stu-id="c715b-391">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberSignature Language="F#" Value="static member InstalledRecognizers : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-392">Zwraca informacje dla wszystkich zainstalowanych aparatów rozpoznawania mowy w bieżącym systemie.</span><span class="sxs-lookup"><span data-stu-id="c715b-392">Returns information for all of the installed speech recognizers on the current system.</span></span></summary>
        <returns><span data-ttu-id="c715b-393">Kolekcja <see cref="T:System.Speech.Recognition.RecognizerInfo" /> obiektów w trybie tylko do odczytu, które opisują zainstalowane aparaty rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-394">Aby uzyskać informacje o bieżącym aparacie rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-395">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c715b-396">W przykładzie zastosowano kolekcję zwracaną przez <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> metodę, aby znaleźć aparat rozpoznawania mowy obsługujący język angielski.</span><span class="sxs-lookup"><span data-stu-id="c715b-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="c715b-397">Obiekt gramatyki do załadowania.</span><span class="sxs-lookup"><span data-stu-id="c715b-397">The grammar object to load.</span></span></param>
        <summary><span data-ttu-id="c715b-398">Synchronicznie ładuje <see cref="T:System.Speech.Recognition.Grammar" /> obiekt.</span><span class="sxs-lookup"><span data-stu-id="c715b-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-399">Aparat rozpoznawania zgłasza wyjątek, jeśli <xref:System.Speech.Recognition.Grammar> obiekt jest już załadowany, jest ładowany asynchronicznie lub nie został załadowany do żadnego aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="c715b-400">Nie można załadować tego samego <xref:System.Speech.Recognition.Grammar> obiektu do wielu <xref:System.Speech.Recognition.SpeechRecognitionEngine>wystąpień.</span><span class="sxs-lookup"><span data-stu-id="c715b-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="c715b-401">Zamiast tego należy utworzyć nowy <xref:System.Speech.Recognition.Grammar> obiekt dla każdego <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="c715b-402">Jeśli aparat rozpoznawania jest uruchomiony, aplikacje muszą korzystać <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> z programu, aby wstrzymać wyszukiwarkę mowy przed załadowaniem, wyładowaniem, włączeniem lub wyłączeniem gramatyki.</span><span class="sxs-lookup"><span data-stu-id="c715b-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="c715b-403">Po załadowaniu gramatyki jest ona domyślnie włączona.</span><span class="sxs-lookup"><span data-stu-id="c715b-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="c715b-404">Aby wyłączyć załadowana Gramatyka, należy <xref:System.Speech.Recognition.Grammar.Enabled%2A> użyć właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c715b-405">Aby załadować <xref:System.Speech.Recognition.Grammar> obiekt asynchronicznie, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Użyj metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-406">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c715b-407">Przykład tworzy <xref:System.Speech.Recognition.DictationGrammar> i ładuje do aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-408"><paramref name="Grammar" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-408"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-409"><paramref name="Grammar" />jest w nieprawidłowym stanie.</span><span class="sxs-lookup"><span data-stu-id="c715b-409"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="c715b-410">Gramatyka rozpoznawania mowy do załadowania.</span><span class="sxs-lookup"><span data-stu-id="c715b-410">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="c715b-411">Asynchronicznie ładuje gramatykę rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-411">Asynchronously loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-412">Gdy aparat rozpoznawania zakończy ładowanie <xref:System.Speech.Recognition.Grammar> obiektu, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> wywołuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="c715b-413">Aparat rozpoznawania zgłasza wyjątek, jeśli <xref:System.Speech.Recognition.Grammar> obiekt jest już załadowany, jest ładowany asynchronicznie lub nie został załadowany do żadnego aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="c715b-414">Nie można załadować tego samego <xref:System.Speech.Recognition.Grammar> obiektu do wielu <xref:System.Speech.Recognition.SpeechRecognitionEngine>wystąpień.</span><span class="sxs-lookup"><span data-stu-id="c715b-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="c715b-415">Zamiast tego należy utworzyć nowy <xref:System.Speech.Recognition.Grammar> obiekt dla każdego <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="c715b-416">Jeśli aparat rozpoznawania jest uruchomiony, aplikacje muszą korzystać <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> z programu, aby wstrzymać wyszukiwarkę mowy przed załadowaniem, wyładowaniem, włączeniem lub wyłączeniem gramatyki.</span><span class="sxs-lookup"><span data-stu-id="c715b-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="c715b-417">Po załadowaniu gramatyki jest ona domyślnie włączona.</span><span class="sxs-lookup"><span data-stu-id="c715b-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="c715b-418">Aby wyłączyć załadowana Gramatyka, należy <xref:System.Speech.Recognition.Grammar.Enabled%2A> użyć właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c715b-419">Aby synchronicznie załadować gramatykę rozpoznawania mowy, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-420"><paramref name="Grammar" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-420"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-421"><paramref name="Grammar" />jest w nieprawidłowym stanie.</span><span class="sxs-lookup"><span data-stu-id="c715b-421"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c715b-422">Operacja asynchroniczna została anulowana.</span><span class="sxs-lookup"><span data-stu-id="c715b-422">The asynchronous operation was canceled.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-423">Uruchamiany po <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> zakończeniu asynchronicznego ładowania <see cref="T:System.Speech.Recognition.Grammar" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c715b-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-424"><xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Metoda aparatu rozpoznawania Inicjuje operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="c715b-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="c715b-425"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Wywołuje to zdarzenie po zakończeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="c715b-426">Aby uzyskać <xref:System.Speech.Recognition.Grammar> obiekt, który został załadowany przez aparat rozpoznawania, <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> Użyj właściwości skojarzonej <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>klasy.</span><span class="sxs-lookup"><span data-stu-id="c715b-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="c715b-427">Aby uzyskać bieżące <xref:System.Speech.Recognition.Grammar> obiekty, które zostały załadowane przez aparat rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="c715b-428">Jeśli aparat rozpoznawania jest uruchomiony, aplikacje muszą korzystać <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> z programu, aby wstrzymać wyszukiwarkę mowy przed załadowaniem, wyładowaniem, włączeniem lub wyłączeniem gramatyki.</span><span class="sxs-lookup"><span data-stu-id="c715b-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="c715b-429">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-430">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-431">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-432">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-432">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-433">Poniższy przykład tworzy aparat rozpoznawania mowy w procesie, a następnie tworzy dwa typy gramatyki do rozpoznawania określonych słów i akceptowania swobodnego dyktowania.</span><span class="sxs-lookup"><span data-stu-id="c715b-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="c715b-434">Przykład tworzy <xref:System.Speech.Recognition.Grammar> obiekt z każdego wykonanej gramatyki rozpoznawania mowy, a następnie asynchronicznie <xref:System.Speech.Recognition.Grammar> ładuje obiekty do <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="c715b-435">Programy obsługi dla aparatu rozpoznawania <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> i <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia zapisu w <xref:System.Speech.Recognition.Grammar> konsoli, nazwa obiektu, który został użyty do przeprowadzenia rozpoznawania i tekst wyniku rozpoznawania odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="c715b-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-436">Pobiera lub ustawia maksymalną liczbę alternatywnych wyników <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> rozpoznawania zwracanych przez funkcję Return dla każdej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span></span></summary>
        <value><span data-ttu-id="c715b-437">Liczba alternatywnych wyników do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-437">The number of alternate results to return.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-438"><xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Właściwość<xref:System.Speech.Recognition.RecognitionResult> klasy zawiera kolekcję obiektów,którereprezentująmożliweinterpretacjedanychwejściowych.<xref:System.Speech.Recognition.RecognizedPhrase></span><span class="sxs-lookup"><span data-stu-id="c715b-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="c715b-439">Wartość domyślna dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> wynosi 10.</span><span class="sxs-lookup"><span data-stu-id="c715b-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c715b-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />jest ustawiona na wartość mniejszą niż 0.</span><span class="sxs-lookup"><span data-stu-id="c715b-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberSignature Language="F#" Value="member this.QueryRecognizerSetting : string -&gt; obj" Usage="speechRecognitionEngine.QueryRecognizerSetting settingName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="c715b-441">Nazwa ustawienia do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-441">The name of the setting to return.</span></span></param>
        <summary><span data-ttu-id="c715b-442">Zwraca wartości ustawień dla aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-442">Returns the values of settings for the recognizer.</span></span></summary>
        <returns><span data-ttu-id="c715b-443">Wartość ustawienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-443">The value of the setting.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-444">Ustawienia aparatu rozpoznawania mogą zawierać ciąg, 64-bitową liczbę całkowitą lub dane adresu pamięci.</span><span class="sxs-lookup"><span data-stu-id="c715b-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="c715b-445">W poniższej tabeli opisano ustawienia, które są zdefiniowane dla aparatu rozpoznawania zgodnego z programem Microsoft Speech API (SAPI).</span><span class="sxs-lookup"><span data-stu-id="c715b-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="c715b-446">Poniższe ustawienia muszą mieć ten sam zakres dla każdego aparatu rozpoznawania, który obsługuje ustawienie.</span><span class="sxs-lookup"><span data-stu-id="c715b-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="c715b-447">Aparat rozpoznawania zgodny z interfejsem SAPI nie jest wymagany do obsługi tych ustawień i może obsługiwać inne ustawienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="c715b-448">Nazwa</span><span class="sxs-lookup"><span data-stu-id="c715b-448">Name</span></span>|<span data-ttu-id="c715b-449">Opis</span><span class="sxs-lookup"><span data-stu-id="c715b-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="c715b-450">Określa użycie procesora przez aparat rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="c715b-451">Zakresem jest z zakresu od 0 do 100.</span><span class="sxs-lookup"><span data-stu-id="c715b-451">The range is from 0 to 100.</span></span> <span data-ttu-id="c715b-452">Wartość domyślna to 50.</span><span class="sxs-lookup"><span data-stu-id="c715b-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="c715b-453">Wskazuje długość wyciszenia na końcu jednoznacznego wejścia, zanim aparat rozpoznawania mowy ukończy operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="c715b-454">Zakresem jest z zakresu od 0 do 10 000 milisekund (MS).</span><span class="sxs-lookup"><span data-stu-id="c715b-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="c715b-455">To ustawienie odpowiada <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="c715b-456">Wartość domyślna = 150ms.</span><span class="sxs-lookup"><span data-stu-id="c715b-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="c715b-457">Wskazuje długość wyciszenia na końcu niejednoznacznych danych wejściowych przed zakończeniem operacji rozpoznawania przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="c715b-458">Zakresem jest z zakresu od 0 do 10, 000ms.</span><span class="sxs-lookup"><span data-stu-id="c715b-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="c715b-459">To ustawienie odpowiada <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="c715b-460">Wartość domyślna = 500 ms.</span><span class="sxs-lookup"><span data-stu-id="c715b-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="c715b-461">Wskazuje, czy adaptacja modelu akustycznego jest włączona (wartość `1`=) czy wyłączona (wartość `0`=).</span><span class="sxs-lookup"><span data-stu-id="c715b-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="c715b-462">Wartość domyślna to `1` (włączone).</span><span class="sxs-lookup"><span data-stu-id="c715b-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="c715b-463">Wskazuje, czy adaptacja w tle jest włączona `1`(wartość =) czy wyłączona `0`(wartość =) i utrzymuje ustawienie w rejestrze.</span><span class="sxs-lookup"><span data-stu-id="c715b-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="c715b-464">Wartość domyślna to `1` (włączone).</span><span class="sxs-lookup"><span data-stu-id="c715b-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="c715b-465">Aby zaktualizować ustawienia dla aparatu rozpoznawania, użyj jednej z <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-466">Poniższy przykład jest częścią aplikacji konsolowej, która wyprowadza wartości dla wielu ustawień zdefiniowanych dla aparatu rozpoznawania, który obsługuje ustawienia regionalne en-US.</span><span class="sxs-lookup"><span data-stu-id="c715b-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="c715b-467">Przykład generuje następujące dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-468"><paramref name="settingName" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-468"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-469"><paramref name="settingName" />jest ciągiem pustym ("").</span><span class="sxs-lookup"><span data-stu-id="c715b-469"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="c715b-470">Aparat rozpoznawania nie ma ustawienia o tej nazwie.</span><span class="sxs-lookup"><span data-stu-id="c715b-470">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c715b-471">Uruchamia synchroniczną operację rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-471">Starts a synchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-472">Te metody wykonują pojedynczą, synchroniczną operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="c715b-473">Aparat rozpoznawania wykonuje tę operację w odniesieniu do załadowanych i włączonych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="c715b-474">Podczas wywołania tej metody aparat rozpoznawania może wywoływać następujące zdarzenia:</span><span class="sxs-lookup"><span data-stu-id="c715b-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c715b-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c715b-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c715b-476">Uruchamiany, gdy aparat rozpoznawania wykryje dane wejściowe, które mogą identyfikować jako mowę.</span><span class="sxs-lookup"><span data-stu-id="c715b-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c715b-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c715b-478">Uruchamiany, gdy dane wejściowe tworzą niejednoznaczne dopasowanie z jedną z aktywnych gramatyk.</span><span class="sxs-lookup"><span data-stu-id="c715b-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c715b-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c715b-480">Uruchamiany, gdy aparat rozpoznawania zakończy operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="c715b-481">Aparat rozpoznawania nie zgłasza <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> zdarzenia podczas korzystania z jednej <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> z metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="c715b-482">Metody zwracają obiekt lub`null` Jeśli operacja nie powiedzie się lub aparat rozpoznawania nie jest włączony. <xref:System.Speech.Recognition.RecognitionResult> <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="c715b-483">Synchroniczna operacja rozpoznawania może zakończyć się niepowodzeniem z następujących powodów:</span><span class="sxs-lookup"><span data-stu-id="c715b-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c715b-484">Nie wykryto mowy przed upływem limitu <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> czasu dla `initialSilenceTimeout` właściwości lub lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> parametru <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="c715b-485">Aparat rozpoznawania wykrywa mowę, ale nie znalazł żadnych dopasowań w żadnym z załadowanych <xref:System.Speech.Recognition.Grammar> i włączonych obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c715b-486">Aby zmodyfikować sposób obsługi przez aparat rozpoznawania czasu mowy lub ciszi w odniesieniu do rozpoznawania, <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>Użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>właściwości <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> i.</span><span class="sxs-lookup"><span data-stu-id="c715b-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="c715b-487">Przed przeprowadzeniem rozpoznawania <xref:System.Speech.Recognition.Grammar> musibyćzaładowanyconajmniejjedenobiekt.<xref:System.Speech.Recognition.SpeechRecognitionEngine></span><span class="sxs-lookup"><span data-stu-id="c715b-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="c715b-488">Aby załadować gramatykę rozpoznawania mowy, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metody lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-489">Aby przeprowadzić rozpoznawanie asynchroniczne, należy użyć jednej z <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberSignature Language="F#" Value="member this.Recognize : unit -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-490">Wykonuje synchroniczną operację rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-490">Performs a synchronous speech recognition operation.</span></span></summary>
        <returns><span data-ttu-id="c715b-491">Wynik rozpoznawania dla danych wejściowych lub <see langword="null" /> Jeśli operacja nie powiedzie się lub aparat rozpoznawania nie jest włączony.</span><span class="sxs-lookup"><span data-stu-id="c715b-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-492">Ta metoda wykonuje pojedyncze operacje rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="c715b-493">Aparat rozpoznawania wykonuje tę operację w odniesieniu do załadowanych i włączonych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="c715b-494">Podczas wywołania tej metody aparat rozpoznawania może wywoływać następujące zdarzenia:</span><span class="sxs-lookup"><span data-stu-id="c715b-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c715b-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c715b-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c715b-496">Uruchamiany, gdy aparat rozpoznawania wykryje dane wejściowe, które mogą identyfikować jako mowę.</span><span class="sxs-lookup"><span data-stu-id="c715b-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c715b-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c715b-498">Uruchamiany, gdy dane wejściowe tworzą niejednoznaczne dopasowanie z jedną z aktywnych gramatyk.</span><span class="sxs-lookup"><span data-stu-id="c715b-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c715b-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c715b-500">Uruchamiany, gdy aparat rozpoznawania zakończy operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="c715b-501">Aparat rozpoznawania nie zgłasza zdarzenia w <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> przypadku korzystania z tej metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="c715b-502">Metoda zwraca obiekt lub`null` Jeśli operacja nie powiedzie się. <xref:System.Speech.Recognition.RecognitionResult> <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize></span><span class="sxs-lookup"><span data-stu-id="c715b-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="c715b-503">Synchroniczna operacja rozpoznawania może zakończyć się niepowodzeniem z następujących powodów:</span><span class="sxs-lookup"><span data-stu-id="c715b-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c715b-504">Nie wykryto mowy przed upływem limitu czasu dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> właściwości lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="c715b-505">Aparat rozpoznawania wykrywa mowę, ale nie znalazł żadnych dopasowań w żadnym z załadowanych <xref:System.Speech.Recognition.Grammar> i włączonych obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c715b-506">Aby przeprowadzić rozpoznawanie asynchroniczne, należy użyć jednej z <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-507">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c715b-508">Przykład tworzy <xref:System.Speech.Recognition.DictationGrammar>, ładuje go do aparatu rozpoznawania mowy w procesie i wykonuje jedną operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="F#" Value="member this.Recognize : TimeSpan -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize initialSilenceTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout"><span data-ttu-id="c715b-509">Przedział czasu, w którym aparat rozpoznawania mowy akceptuje dane wejściowe zawierające tylko cisze przed finalizowaniem rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span></span></param>
        <summary><span data-ttu-id="c715b-510">Wykonuje synchroniczną operację rozpoznawania mowy z określonym początkowym limitem czasu wyciszenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span></span></summary>
        <returns><span data-ttu-id="c715b-511">Wynik rozpoznawania dla danych wejściowych lub <see langword="null" /> Jeśli operacja nie powiedzie się lub aparat rozpoznawania nie jest włączony.</span><span class="sxs-lookup"><span data-stu-id="c715b-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-512">Jeśli aparat rozpoznawania mowy wykrywa mowę w przedziale czasu określonym przez `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> wykonuje pojedyncze operacje rozpoznawania, a następnie kończy pracę.</span><span class="sxs-lookup"><span data-stu-id="c715b-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="c715b-513">Parametr zastępuje <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Właściwość aparatu rozpoznawania. `initialSilenceTimeout`</span><span class="sxs-lookup"><span data-stu-id="c715b-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="c715b-514">Podczas wywołania tej metody aparat rozpoznawania może wywoływać następujące zdarzenia:</span><span class="sxs-lookup"><span data-stu-id="c715b-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c715b-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c715b-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c715b-516">Uruchamiany, gdy aparat rozpoznawania wykryje dane wejściowe, które mogą identyfikować jako mowę.</span><span class="sxs-lookup"><span data-stu-id="c715b-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c715b-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c715b-518">Uruchamiany, gdy dane wejściowe tworzą niejednoznaczne dopasowanie z jedną z aktywnych gramatyk.</span><span class="sxs-lookup"><span data-stu-id="c715b-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c715b-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c715b-520">Uruchamiany, gdy aparat rozpoznawania zakończy operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="c715b-521">Aparat rozpoznawania nie zgłasza zdarzenia w <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> przypadku korzystania z tej metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="c715b-522">Metoda zwraca obiekt lub`null` Jeśli operacja nie powiedzie się. <xref:System.Speech.Recognition.RecognitionResult> <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize></span><span class="sxs-lookup"><span data-stu-id="c715b-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="c715b-523">Synchroniczna operacja rozpoznawania może zakończyć się niepowodzeniem z następujących powodów:</span><span class="sxs-lookup"><span data-stu-id="c715b-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c715b-524">Nie wykryto mowy przed upływem interwału limitu czasu dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> `initialSilenceTimeout` parametru lub.</span><span class="sxs-lookup"><span data-stu-id="c715b-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="c715b-525">Aparat rozpoznawania wykrywa mowę, ale nie znalazł żadnych dopasowań w żadnym z załadowanych <xref:System.Speech.Recognition.Grammar> i włączonych obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c715b-526">Aby przeprowadzić rozpoznawanie asynchroniczne, należy użyć jednej z <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-527">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c715b-528">Przykład tworzy <xref:System.Speech.Recognition.DictationGrammar>, ładuje go do aparatu rozpoznawania mowy w procesie i wykonuje jedną operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c715b-529">Uruchamia asynchroniczną operację rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-529">Starts an asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-530">Metody te wykonują jedną lub wiele asynchronicznych operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="c715b-531">Aparat rozpoznawania wykonuje każdą operację w odniesieniu do załadowanych i włączonych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="c715b-532">Podczas wywołania tej metody aparat rozpoznawania może wywoływać następujące zdarzenia:</span><span class="sxs-lookup"><span data-stu-id="c715b-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c715b-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c715b-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c715b-534">Uruchamiany, gdy aparat rozpoznawania wykryje dane wejściowe, które mogą identyfikować jako mowę.</span><span class="sxs-lookup"><span data-stu-id="c715b-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c715b-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c715b-536">Uruchamiany, gdy dane wejściowe tworzą niejednoznaczne dopasowanie z jedną z aktywnych gramatyk.</span><span class="sxs-lookup"><span data-stu-id="c715b-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c715b-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c715b-538">Uruchamiany, gdy aparat rozpoznawania zakończy operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="c715b-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="c715b-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="c715b-540">Uruchamiany po <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> zakończeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="c715b-541">Aby pobrać wynik asynchronicznej operacji rozpoznawania, Dołącz procedurę obsługi zdarzeń do <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c715b-542">Aparat rozpoznawania wywołuje to zdarzenie za każdym razem, gdy pomyślnie zakończy operację rozpoznawania synchronicznego lub asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="c715b-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="c715b-543">Jeśli rozpoznawanie nie powiodło się, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> właściwość obiektu, do którego można uzyskać dostęp <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> w programie obsługi zdarzenia, będzie miała `null`wartość.</span><span class="sxs-lookup"><span data-stu-id="c715b-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="c715b-544">Asynchroniczna operacja rozpoznawania może zakończyć się niepowodzeniem z następujących powodów:</span><span class="sxs-lookup"><span data-stu-id="c715b-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c715b-545">Nie wykryto mowy przed upływem limitu czasu dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> właściwości lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="c715b-546">Aparat rozpoznawania wykrywa mowę, ale nie znalazł żadnych dopasowań w żadnym z załadowanych <xref:System.Speech.Recognition.Grammar> i włączonych obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="c715b-547">Przed przeprowadzeniem rozpoznawania <xref:System.Speech.Recognition.Grammar> musibyćzaładowanyconajmniejjedenobiekt.<xref:System.Speech.Recognition.SpeechRecognitionEngine></span><span class="sxs-lookup"><span data-stu-id="c715b-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="c715b-548">Aby załadować gramatykę rozpoznawania mowy, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metody lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="c715b-549">Aby zmodyfikować sposób obsługi przez aparat rozpoznawania czasu mowy lub ciszi w odniesieniu do rozpoznawania, <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>Użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>właściwości <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> i.</span><span class="sxs-lookup"><span data-stu-id="c715b-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="c715b-550">Aby przeprowadzić rozpoznawanie synchroniczne, należy użyć jednej z <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-551">Wykonuje pojedynczą, asynchroniczną operację rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-551">Performs a single, asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-552">Ta metoda wykonuje pojedynczą, asynchroniczną operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="c715b-553">Aparat rozpoznawania wykonuje operację na podstawie załadowanych i włączonych gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="c715b-554">Podczas wywołania tej metody aparat rozpoznawania może wywoływać następujące zdarzenia:</span><span class="sxs-lookup"><span data-stu-id="c715b-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c715b-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c715b-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c715b-556">Uruchamiany, gdy aparat rozpoznawania wykryje dane wejściowe, które mogą identyfikować jako mowę.</span><span class="sxs-lookup"><span data-stu-id="c715b-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c715b-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c715b-558">Uruchamiany, gdy dane wejściowe tworzą niejednoznaczne dopasowanie z jedną z aktywnych gramatyk.</span><span class="sxs-lookup"><span data-stu-id="c715b-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c715b-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c715b-560">Uruchamiany, gdy aparat rozpoznawania zakończy operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="c715b-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="c715b-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="c715b-562">Uruchamiany po <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> zakończeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="c715b-563">Aby pobrać wynik asynchronicznej operacji rozpoznawania, Dołącz procedurę obsługi zdarzeń do <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c715b-564">Aparat rozpoznawania wywołuje to zdarzenie za każdym razem, gdy pomyślnie zakończy operację rozpoznawania synchronicznego lub asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="c715b-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="c715b-565">Jeśli rozpoznawanie nie powiodło się, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> właściwość obiektu, do którego można uzyskać dostęp <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> w programie obsługi zdarzenia, będzie miała `null`wartość.</span><span class="sxs-lookup"><span data-stu-id="c715b-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="c715b-566">Aby przeprowadzić rozpoznawanie synchroniczne, należy użyć jednej z <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-567">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe asynchroniczne rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="c715b-568">Przykład tworzy <xref:System.Speech.Recognition.DictationGrammar>, ładuje go do aparatu rozpoznawania mowy w procesie i wykonuje jedną operację rozpoznawania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="c715b-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="c715b-569">Procedury obsługi zdarzeń są dołączone do zademonstrowania zdarzeń zgłaszanych przez aparat rozpoznawania podczas operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : System.Speech.Recognition.RecognizeMode -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="c715b-570">Wskazuje, czy wykonać jedną lub wiele operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-570">Indicates whether to perform one or multiple recognition operations.</span></span></param>
        <summary><span data-ttu-id="c715b-571">Wykonuje co najmniej jedną asynchroniczne operacje rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-571">Performs one or more asynchronous speech recognition operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-572">Jeśli `mode` <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> jest <xref:System.Speech.Recognition.RecognizeMode.Multiple>, aparat rozpoznawania kontynuuje asynchroniczne operacje rozpoznawania do momentu wywołania metody lub.</span><span class="sxs-lookup"><span data-stu-id="c715b-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="c715b-573">Podczas wywołania tej metody aparat rozpoznawania może wywoływać następujące zdarzenia:</span><span class="sxs-lookup"><span data-stu-id="c715b-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c715b-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c715b-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c715b-575">Uruchamiany, gdy aparat rozpoznawania wykryje dane wejściowe, które mogą identyfikować jako mowę.</span><span class="sxs-lookup"><span data-stu-id="c715b-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c715b-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c715b-577">Uruchamiany, gdy dane wejściowe tworzą niejednoznaczne dopasowanie z jedną z aktywnych gramatyk.</span><span class="sxs-lookup"><span data-stu-id="c715b-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c715b-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c715b-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c715b-579">Uruchamiany, gdy aparat rozpoznawania zakończy operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="c715b-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="c715b-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="c715b-581">Uruchamiany po <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> zakończeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="c715b-582">Aby pobrać wynik asynchronicznej operacji rozpoznawania, Dołącz procedurę obsługi zdarzeń do <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c715b-583">Aparat rozpoznawania wywołuje to zdarzenie za każdym razem, gdy pomyślnie zakończy operację rozpoznawania synchronicznego lub asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="c715b-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="c715b-584">Jeśli rozpoznawanie nie powiodło się, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> właściwość obiektu, do którego można uzyskać dostęp <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> w programie obsługi zdarzenia, będzie miała `null`wartość.</span><span class="sxs-lookup"><span data-stu-id="c715b-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="c715b-585">Asynchroniczna operacja rozpoznawania może zakończyć się niepowodzeniem z następujących powodów:</span><span class="sxs-lookup"><span data-stu-id="c715b-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c715b-586">Nie wykryto mowy przed upływem limitu czasu dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> właściwości lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="c715b-587">Aparat rozpoznawania wykrywa mowę, ale nie znalazł żadnych dopasowań w żadnym z załadowanych <xref:System.Speech.Recognition.Grammar> i włączonych obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c715b-588">Aby przeprowadzić rozpoznawanie synchroniczne, należy użyć jednej z <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-589">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe asynchroniczne rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="c715b-590">Przykład tworzy <xref:System.Speech.Recognition.DictationGrammar>, ładuje go do aparatu rozpoznawania mowy w procesie i wykonuje wiele asynchronicznych operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="c715b-591">Operacje asynchroniczne są anulowane po 30 sekundach.</span><span class="sxs-lookup"><span data-stu-id="c715b-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="c715b-592">Procedury obsługi zdarzeń są dołączone do zademonstrowania zdarzeń zgłaszanych przez aparat rozpoznawania podczas operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncCancel : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-593">Kończy rozpoznawanie asynchroniczne bez oczekiwania na zakończenie bieżącej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-594">Ta metoda natychmiast kończy rozpoznawanie asynchroniczne.</span><span class="sxs-lookup"><span data-stu-id="c715b-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="c715b-595">Jeśli bieżąca operacja rozpoznawania asynchronicznego otrzymuje dane wejściowe, dane wejściowe są obcinane i operacja zostanie ukończona z istniejącymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="c715b-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="c715b-596"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Aparat rozpoznawania zgłasza zdarzenie lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> po <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> anulowaniu operacji asynchronicznej i <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> ustawia właściwość na `true`.</span><span class="sxs-lookup"><span data-stu-id="c715b-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="c715b-597">Ta metoda anuluje asynchroniczne operacje zainicjowane przez <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metody i. <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c715b-598">Aby zatrzymać asynchroniczne rozpoznawanie bez obcinania danych wejściowych, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-599">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje użycie <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="c715b-600">Przykładem jest tworzenie i ładowanie gramatyki rozpoznawania mowy, inicjowanie asynchronicznej operacji rozpoznawania, a następnie wstrzymanie 2 sekund przed anulowaniem operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="c715b-601">Aparat rozpoznawania odbiera dane wejściowe z pliku, c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="c715b-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="c715b-602">Procedury obsługi zdarzeń są dołączone do zademonstrowania zdarzeń zgłaszanych przez aparat rozpoznawania podczas operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncStop : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-603">Wyłącza asynchroniczne rozpoznawanie po zakończeniu bieżącej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-603">Stops asynchronous recognition after the current recognition operation completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-604">Ta metoda kończy rozpoznawanie asynchroniczne bez obcinania danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="c715b-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="c715b-605">Jeśli bieżąca operacja rozpoznawania asynchronicznego odbiera dane wejściowe, aparat rozpoznawania kontynuuje akceptowanie danych wejściowych do momentu zakończenia bieżącej operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="c715b-606"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Aparat rozpoznawania wywołuje zdarzenie lub <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> , gdy operacja asynchroniczna jest <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> zatrzymana, i <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> ustawia właściwość na `true`.</span><span class="sxs-lookup"><span data-stu-id="c715b-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="c715b-607">Ta metoda powoduje zatrzymanie asynchronicznych operacji zainicjowanych przez <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metody i. <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c715b-608">Aby natychmiast anulować rozpoznawanie asynchroniczne tylko z istniejącymi danymi wejściowymi, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> Użyj metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-609">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje użycie <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="c715b-610">Przykład tworzy i ładuje gramatykę rozpoznawania mowy, inicjuje asynchroniczną operację rozpoznawania, a następnie wstrzymuje 2 sekundy przed zatrzymaniem operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="c715b-611">Aparat rozpoznawania odbiera dane wejściowe z pliku, c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="c715b-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="c715b-612">Procedury obsługi zdarzeń są dołączone do zademonstrowania zdarzeń zgłaszanych przez aparat rozpoznawania podczas operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.RecognizeCompleted : EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " Usage="member this.RecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-613">Uruchamiany, <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> gdy kończy asynchroniczne operacje rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-614">Metoda<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>obiektuinicjuje asynchroniczne operacje rozpoznawania. <xref:System.Speech.Recognition.SpeechRecognitionEngine></span><span class="sxs-lookup"><span data-stu-id="c715b-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="c715b-615">Gdy aparat rozpoznawania kończy operację asynchroniczną, zgłasza to zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="c715b-616">Korzystając z procedury obsługi dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> zdarzenia, można <xref:System.Speech.Recognition.RecognitionResult> uzyskać dostęp <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> do obiektu.</span><span class="sxs-lookup"><span data-stu-id="c715b-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="c715b-617">Jeśli rozpoznawanie nie powiodło się <xref:System.Speech.Recognition.RecognitionResult> , `null`będzie.</span><span class="sxs-lookup"><span data-stu-id="c715b-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="c715b-618">Aby określić, czy przekroczenie limitu czasu lub przerwania w danych wejściowych audio spowodowało niepowodzenie rozpoznawania, można uzyskać <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>dostęp <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>do właściwości <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>dla, lub.</span><span class="sxs-lookup"><span data-stu-id="c715b-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="c715b-619">Aby uzyskać <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> więcej informacji, zobacz klasę.</span><span class="sxs-lookup"><span data-stu-id="c715b-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="c715b-620">Aby uzyskać szczegółowe informacje na temat najlepszych odrzuconych kandydatów rozpoznawania, Dołącz procedurę <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> obsługi dla zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="c715b-621">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-622">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-623">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-624">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-624">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-625">Poniższy przykład rozpoznaje frazy, takie jak "Wyświetlanie listy artystów w kategorii Jazz" lub "Wyświetlanie albumów gospel".</span><span class="sxs-lookup"><span data-stu-id="c715b-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="c715b-626">W przykładzie zastosowano procedurę obsługi dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> zdarzenia, aby wyświetlić informacje o wynikach rozpoznawania w konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="c715b-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-627">Pobiera bieżącą lokalizację <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> w danych wejściowych audio, która jest przetwarzana.</span><span class="sxs-lookup"><span data-stu-id="c715b-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span></span></summary>
        <value><span data-ttu-id="c715b-628">Pozycja aparatu rozpoznawania w danych wejściowych audio, który jest przetwarzany.</span><span class="sxs-lookup"><span data-stu-id="c715b-628">The position of the recognizer in the audio input that it is processing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-629">Pozycja audio jest specyficzna dla każdego aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="c715b-630">Wartość zerowa strumienia wejściowego jest określana, gdy jest włączona.</span><span class="sxs-lookup"><span data-stu-id="c715b-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="c715b-631">Właściwość odwołuje się <xref:System.Speech.Recognition.SpeechRecognitionEngine> do położenia obiektu w obrębie wejścia audio. <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="c715b-632">Z kolei <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> Właściwość odwołuje się do pozycji urządzenia wejściowego w wygenerowanym strumieniu audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="c715b-633">Te pozycje mogą być różne.</span><span class="sxs-lookup"><span data-stu-id="c715b-633">These positions can be different.</span></span> <span data-ttu-id="c715b-634">Na przykład, jeśli aparat rozpoznawania odebrał dane wejściowe, dla których nie Wygenerowano jeszcze wyniku rozpoznawania, wartość <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> właściwości jest mniejsza niż wartość <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-635">Pobiera informacje o bieżącym wystąpieniu <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c715b-636">Informacje o bieżącym aparacie rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-636">Information about the current speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-637">Aby uzyskać informacje o wszystkich zainstalowanych aparatach rozpoznawania mowy dla bieżącego systemu, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-638">Poniższy przykład pobiera częściową listę danych dla bieżącego aparatu rozpoznawania mowy w procesie.</span><span class="sxs-lookup"><span data-stu-id="c715b-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="c715b-639">Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.RecognizerInfo>.</span><span class="sxs-lookup"><span data-stu-id="c715b-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-640">Uruchamiany, gdy działa <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> wstrzymanie, aby akceptować modyfikacje.</span><span class="sxs-lookup"><span data-stu-id="c715b-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-641">Aplikacje muszą używać <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> programu, aby wstrzymać uruchomione <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienie przed zmodyfikowaniem jego ustawień <xref:System.Speech.Recognition.Grammar> lub jego obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c715b-642">Wywołuje <xref:System.Speech.Recognition.SpeechRecognitionEngine> to zdarzenie, gdy jest gotowe do akceptowania modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="c715b-643"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Na przykład podczas wstrzymania można ładować, zwalniać, włączać i wyłączać <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> <xref:System.Speech.Recognition.Grammar> obiekty oraz modyfikować wartości właściwości, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>i <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> .</span><span class="sxs-lookup"><span data-stu-id="c715b-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="c715b-644">Aby uzyskać więcej informacji, zobacz <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodę.</span><span class="sxs-lookup"><span data-stu-id="c715b-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-645">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-646">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-647">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-648">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-648">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-649">W poniższym przykładzie przedstawiono aplikację konsolową, która ładuje i zwalnia <xref:System.Speech.Recognition.Grammar> obiekty.</span><span class="sxs-lookup"><span data-stu-id="c715b-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c715b-650">Aplikacja używa <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metody, aby zażądać zatrzymania aparatu rozpoznawania mowy, aby można było odebrać aktualizację.</span><span class="sxs-lookup"><span data-stu-id="c715b-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="c715b-651">Następnie aplikacja ładuje lub zwalnia <xref:System.Speech.Recognition.Grammar> obiekt.</span><span class="sxs-lookup"><span data-stu-id="c715b-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="c715b-652">W każdej aktualizacji program obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> zdarzeń zapisuje nazwę i stan aktualnie załadowanych <xref:System.Speech.Recognition.Grammar> obiektów do konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="c715b-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="c715b-653">Ponieważ gramatyki są ładowane i zwalniane, aplikacja najpierw rozpoznaje nazwy zwierząt farmy, a następnie nazwy zwierząt farmy i nazwy owoców, a następnie tylko nazwy owoców.</span><span class="sxs-lookup"><span data-stu-id="c715b-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c715b-654">Żąda, aby aparat rozpoznawania wstrzymał aktualizację stanu.</span><span class="sxs-lookup"><span data-stu-id="c715b-654">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-655">Ta metoda umożliwia synchronizowanie zmian w aparacie rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="c715b-656">Jeśli na przykład załadujesz lub zwolnisz gramatykę rozpoznawania mowy podczas przetwarzania danych wejściowych przez aparat rozpoznawania, Użyj tej metody <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> i zdarzenia, aby zsynchronizować zachowanie aplikacji ze stanem aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="c715b-657">Gdy ta metoda jest wywoływana, aparat rozpoznawania wstrzymuje lub kończy operacje asynchroniczne i generuje <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="c715b-658">Program <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> obsługi zdarzeń może następnie zmodyfikować stan aparatu rozpoznawania w ramach operacji rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="c715b-659">Podczas obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> zdarzeń aparat rozpoznawania wstrzymuje się do momentu, gdy program obsługi zdarzeń zwróci wartość.</span><span class="sxs-lookup"><span data-stu-id="c715b-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c715b-660">Jeśli dane wejściowe do aparatu rozpoznawania ulegną zmianie, zanim aparat rozpoznawania zgłasza <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> zdarzenie, żądanie zostanie odrzucone.</span><span class="sxs-lookup"><span data-stu-id="c715b-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="c715b-661">Gdy ta metoda jest wywoływana:</span><span class="sxs-lookup"><span data-stu-id="c715b-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="c715b-662">Jeśli aparat rozpoznawania nie przetwarza danych wejściowych, aparat rozpoznawania natychmiast wygeneruje <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="c715b-663">Jeśli aparat rozpoznawania przetwarza dane wejściowe, które obejmują wyciszenie lub hałas w tle, aparat rozpoznawania wstrzymuje operację rozpoznawania i <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> generuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="c715b-664">Jeśli aparat rozpoznawania przetwarza dane wejściowe, które nie składają się z podkładu lub szumu w tle, aparat rozpoznawania wykonuje operację rozpoznawania, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> a następnie generuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="c715b-665">Gdy aparat rozpoznawania obsługuje <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> zdarzenie:</span><span class="sxs-lookup"><span data-stu-id="c715b-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="c715b-666">Aparat rozpoznawania nie przetwarza danych wejściowych, a wartość <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> właściwości pozostaje taka sama.</span><span class="sxs-lookup"><span data-stu-id="c715b-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="c715b-667">Aparat rozpoznawania w dalszym ciągu zbiera dane wejściowe i może zmienić <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> wartość właściwości.</span><span class="sxs-lookup"><span data-stu-id="c715b-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-668">Żąda, aby aparat rozpoznawania wstrzymał aktualizację stanu.</span><span class="sxs-lookup"><span data-stu-id="c715b-668">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-669">Po wygenerowaniu <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> przez aparat rozpoznawania zdarzeń <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Właściwość <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> ma `null`wartość.</span><span class="sxs-lookup"><span data-stu-id="c715b-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="c715b-670">Aby podać token użytkownika, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metody lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="c715b-671">Aby określić przesunięcie pozycji audio, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-672">W poniższym przykładzie przedstawiono aplikację konsolową, która ładuje i zwalnia <xref:System.Speech.Recognition.Grammar> obiekty.</span><span class="sxs-lookup"><span data-stu-id="c715b-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c715b-673">Aplikacja używa <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metody, aby zażądać zatrzymania aparatu rozpoznawania mowy, aby można było odebrać aktualizację.</span><span class="sxs-lookup"><span data-stu-id="c715b-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="c715b-674">Następnie aplikacja ładuje lub zwalnia <xref:System.Speech.Recognition.Grammar> obiekt.</span><span class="sxs-lookup"><span data-stu-id="c715b-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="c715b-675">W każdej aktualizacji program obsługi <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> zdarzeń zapisuje nazwę i stan aktualnie załadowanych <xref:System.Speech.Recognition.Grammar> obiektów do konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="c715b-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="c715b-676">Ponieważ gramatyki są ładowane i zwalniane, aplikacja najpierw rozpoznaje nazwy zwierząt farmy, a następnie nazwy zwierząt farmy i nazwy owoców, a następnie tylko nazwy owoców.</span><span class="sxs-lookup"><span data-stu-id="c715b-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="c715b-677">Informacje zdefiniowane przez użytkownika, które zawierają informacje dla operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-677">User-defined information that contains information for the operation.</span></span></param>
        <summary><span data-ttu-id="c715b-678">Żądania, które aparat rozpoznawania wstrzymuje w celu zaktualizowania jego stanu i udostępnia token użytkownika dla skojarzonego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-679">Po wygenerowaniu <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> przez aparat rozpoznawania zdarzeń <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Właściwość <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> zawiera wartość `userToken` parametru.</span><span class="sxs-lookup"><span data-stu-id="c715b-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="c715b-680">Aby określić przesunięcie pozycji audio, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="c715b-681">Informacje zdefiniowane przez użytkownika, które zawierają informacje dla operacji.</span><span class="sxs-lookup"><span data-stu-id="c715b-681">User-defined information that contains information for the operation.</span></span></param>
        <param name="audioPositionAheadToRaiseUpdate"><span data-ttu-id="c715b-682">Przesunięcie od bieżącego <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> , aby opóźnić żądanie.</span><span class="sxs-lookup"><span data-stu-id="c715b-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span></span></param>
        <summary><span data-ttu-id="c715b-683">Żądania, które aparat rozpoznawania wstrzymuje w celu zaktualizowania stanu i zawiera przesunięcie i token użytkownika dla skojarzonego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-684">Aparat rozpoznawania nie inicjuje żądania aktualizacji aparatu rozpoznawania do momentu, gdy <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> aparat rozpoznawania jest <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> równy `audioPositionAheadToRaiseUpdate`bieżącemu znakowi Plus.</span><span class="sxs-lookup"><span data-stu-id="c715b-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="c715b-685">Po wygenerowaniu <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> przez aparat rozpoznawania zdarzeń <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Właściwość <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> zawiera wartość `userToken` parametru.</span><span class="sxs-lookup"><span data-stu-id="c715b-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberSignature Language="F#" Value="member this.SetInputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechRecognitionEngine.SetInputToAudioStream (audioSource, audioFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="c715b-686">Strumień wejściowy audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-686">The audio input stream.</span></span></param>
        <param name="audioFormat"><span data-ttu-id="c715b-687">Format wejścia audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-687">The format of the audio input.</span></span></param>
        <summary><span data-ttu-id="c715b-688">Konfiguruje <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> obiekt do odbierania danych wejściowych ze strumienia audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-689">Jeśli aparat rozpoznawania osiągnie koniec strumienia wejściowego podczas operacji rozpoznawania, operacja rozpoznawania kończy się z dostępnymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="c715b-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="c715b-690">Wszelkie kolejne operacje rozpoznawania mogą generować wyjątek, chyba że dane wejściowe zostaną zaktualizowane do aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-691">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c715b-692">W przykładzie używane są dane wejściowe z pliku audio, przykład. wav, który zawiera frazy "testowanie testów 1 2 3" i "Mister Cooper", oddzielone pauzą.</span><span class="sxs-lookup"><span data-stu-id="c715b-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="c715b-693">Przykład generuje następujące dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetInputToDefaultAudioDevice : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-694">Konfiguruje <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> obiekt do odbierania danych wejściowych z domyślnego urządzenia audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c715b-695">Poniższy przykład przedstawia część aplikacji konsolowej, która demonstruje podstawowe rozpoznawanie mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c715b-696">W przykładzie jest stosowane wyjście z domyślnego urządzenia audio, wykonuje wiele asynchronicznych operacji rozpoznawania i kończy się, gdy użytkownik zajmuje frazę "Exit".</span><span class="sxs-lookup"><span data-stu-id="c715b-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetInputToNull : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-697">Wyłącza dane wejściowe aparatu rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-697">Disables the input to the speech recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-698">Skonfiguruj obiekt dla braku danych wejściowych przy <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> użyciu metod i <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> lub podczas tymczasowego przełączania aparatu rozpoznawania. <xref:System.Speech.Recognition.SpeechRecognitionEngine></span><span class="sxs-lookup"><span data-stu-id="c715b-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveFile : string -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c715b-699">Ścieżka pliku do użycia jako dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-699">The path of the file to use as input.</span></span></param>
        <summary><span data-ttu-id="c715b-700">Konfiguruje <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> obiekt do odbierania danych wejściowych z pliku Wave audio format (. wav).</span><span class="sxs-lookup"><span data-stu-id="c715b-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-701">Jeśli aparat rozpoznawania osiągnie koniec pliku wejściowego podczas operacji rozpoznawania, operacja rozpoznawania kończy się z dostępnymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="c715b-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="c715b-702">Wszelkie kolejne operacje rozpoznawania mogą generować wyjątek, chyba że dane wejściowe zostaną zaktualizowane do aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-703">Poniższy przykład wykonuje rozpoznawanie dźwięku w pliku WAV i zapisuje rozpoznany tekst w konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="c715b-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveStream audioSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="c715b-704">Strumień zawierający dane audio.</span><span class="sxs-lookup"><span data-stu-id="c715b-704">The stream containing the audio data.</span></span></param>
        <summary><span data-ttu-id="c715b-705">Konfiguruje <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> obiekt do odbierania danych wejściowych ze strumienia zawierającego dane Wave audio (wav).</span><span class="sxs-lookup"><span data-stu-id="c715b-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-706">Jeśli aparat rozpoznawania osiągnie koniec strumienia wejściowego podczas operacji rozpoznawania, operacja rozpoznawania kończy się z dostępnymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="c715b-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="c715b-707">Wszelkie kolejne operacje rozpoznawania mogą generować wyjątek, chyba że dane wejściowe zostaną zaktualizowane do aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-708">Uruchamiany, gdy <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> wykryje dane wejściowe, które mogą identyfikować jako mowę.</span><span class="sxs-lookup"><span data-stu-id="c715b-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-709">Każdy aparat rozpoznawania mowy ma algorytm rozróżniania między ciszą a mową.</span><span class="sxs-lookup"><span data-stu-id="c715b-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="c715b-710">Gdy wykonuje operację rozpoznawania mowy, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> wywołuje zdarzenie, gdy jego algorytm identyfikuje dane wejściowe jako mowę. <xref:System.Speech.Recognition.SpeechRecognitionEngine></span><span class="sxs-lookup"><span data-stu-id="c715b-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="c715b-711"><xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> Właściwość skojarzonego<xref:System.Speech.Recognition.SpeechDetectedEventArgs> obiektu wskazuje lokalizację w strumieniu wejściowym, w którym aparat rozpoznawania wykrył mowę.</span><span class="sxs-lookup"><span data-stu-id="c715b-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="c715b-712"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> Wywołuje zdarzenie przed wyjęciem dowolnego zdarzenia, lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine> <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected></span><span class="sxs-lookup"><span data-stu-id="c715b-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="c715b-713"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>Aby uzyskać więcej informacji <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> , zobacz metody, ,,i.<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c715b-714">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-715">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-716">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-717">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-717">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-718">Poniższy przykład jest częścią aplikacji konsolowej służącej do wybierania miejscowości początkowych i docelowych dla lotu.</span><span class="sxs-lookup"><span data-stu-id="c715b-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="c715b-719">Aplikacja rozpoznaje frazy, takie jak "chcę mieć Miami do Chicago".</span><span class="sxs-lookup"><span data-stu-id="c715b-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="c715b-720">W przykładzie używa <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> się zdarzenia do <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> raportowania każdej wykrytej mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-721">Uruchamiany, gdy <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> rozpoznany wyraz lub wyraz, który może być składnikiem wielu kompletnych fraz w gramatyce.</span><span class="sxs-lookup"><span data-stu-id="c715b-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-722"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Generuje wiele<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> zdarzeń podczas próby zidentyfikowania frazy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="c715b-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="c715b-723">Można uzyskać dostęp do tekstu częściowo rozpoznanych fraz we <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> właściwości <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> obiektu <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> w programie obsługi zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="c715b-724">Zwykle obsługa tych zdarzeń jest przydatna tylko w przypadku debugowania.</span><span class="sxs-lookup"><span data-stu-id="c715b-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="c715b-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs>pochodzi od <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c715b-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="c715b-726">Aby uzyskać więcej informacji, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Zobacz właściwości <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>i metody <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>,, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> i.</span><span class="sxs-lookup"><span data-stu-id="c715b-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c715b-727">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-728">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-729">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-730">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-730">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-731">Poniższy przykład rozpoznaje zwroty, takie jak "Wyświetlanie listy artystów w kategorii Jazz".</span><span class="sxs-lookup"><span data-stu-id="c715b-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="c715b-732">W przykładzie używa <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> się zdarzenia, aby wyświetlić niekompletne fragmenty frazy w konsoli w miarę ich rozpoznania.</span><span class="sxs-lookup"><span data-stu-id="c715b-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-733">Uruchamiany, gdy <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> odbiera dane wejściowe, które nie są zgodne z żadnym z załadowanych i włączonych <see cref="T:System.Speech.Recognition.Grammar" /> obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-734">Aparat rozpoznawania wywołuje to zdarzenie, jeśli określa, że dane wejściowe nie pasują do wystarczającej pewności żadnego z załadowanych i włączonych <xref:System.Speech.Recognition.Grammar> obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c715b-735">Właściwość zawiera obiekt odrzucony <xref:System.Speech.Recognition.RecognitionResult>. <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs></span><span class="sxs-lookup"><span data-stu-id="c715b-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="c715b-736">Możesz użyć procedury obsługi dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> zdarzenia, aby pobrać rozpoznawanie <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> odrzucone i ich <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> wyniki.</span><span class="sxs-lookup"><span data-stu-id="c715b-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="c715b-737">Jeśli aplikacja używa <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia, można zmodyfikować poziom pewności, przy którym dane wejściowe mowy są akceptowane lub odrzucane przy użyciu jednej <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> z metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="c715b-738">Można zmodyfikować sposób, w jaki rozpoznawanie mowy reaguje na dane wejściowe inne niż mowę <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>przy <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>użyciu <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>właściwości, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> , i.</span><span class="sxs-lookup"><span data-stu-id="c715b-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="c715b-739">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-740">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-741">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-742">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-742">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-743">Poniższy przykład rozpoznaje frazy, takie jak "Wyświetlanie listy artystów w kategorii Jazz" lub "Wyświetlanie albumów gospel".</span><span class="sxs-lookup"><span data-stu-id="c715b-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="c715b-744">W przykładzie zastosowano procedurę obsługi dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> zdarzenia, aby wyświetlić powiadomienie w konsoli, gdy dane wejściowe mowy nie można dopasować do zawartości gramatyki wystarczającej <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> do wygenerowania pomyślnego rozpoznania.</span><span class="sxs-lookup"><span data-stu-id="c715b-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="c715b-745">Program obsługi wyświetla również wynik <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> rozpoznania, który został odrzucony z powodu oceny o niskiej pewności.</span><span class="sxs-lookup"><span data-stu-id="c715b-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c715b-746">Uruchamiany, gdy <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> odbiera dane wejściowe, które pasują do dowolnego z <see cref="T:System.Speech.Recognition.Grammar" /> załadowanych i włączonych obiektów.</span><span class="sxs-lookup"><span data-stu-id="c715b-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-747">Można zainicjować operację rozpoznawania przy użyciu jednej z <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metod lub. <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A></span><span class="sxs-lookup"><span data-stu-id="c715b-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="c715b-748">Aparat rozpoznawania wywołuje <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenie, jeśli określa, że dane wejściowe są zgodne z jednym <xref:System.Speech.Recognition.Grammar> z załadowanych obiektów z wystarczającym poziomem pewności, aby stanowić uznanie.</span><span class="sxs-lookup"><span data-stu-id="c715b-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="c715b-749">Właściwość zawiera zaakceptowany <xref:System.Speech.Recognition.RecognitionResult>obiekt. <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs></span><span class="sxs-lookup"><span data-stu-id="c715b-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="c715b-750">Procedury obsługi <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> zdarzeń mogą uzyskać rozpoznaną frazę, a także listę rozpoznawania z niższymi wynikami pewności. <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized></span><span class="sxs-lookup"><span data-stu-id="c715b-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="c715b-751">Jeśli aplikacja używa <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia, można zmodyfikować poziom pewności, przy którym dane wejściowe mowy są akceptowane lub odrzucane przy użyciu jednej <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> z metod.</span><span class="sxs-lookup"><span data-stu-id="c715b-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="c715b-752">Można zmodyfikować sposób, w jaki rozpoznawanie mowy reaguje na dane wejściowe inne niż mowę <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>przy <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>użyciu <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>właściwości, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> , i.</span><span class="sxs-lookup"><span data-stu-id="c715b-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="c715b-753">Gdy aparat rozpoznawania odbiera dane wejściowe, które pasują do <xref:System.Speech.Recognition.Grammar> gramatyki, obiekt <xref:System.Speech.Recognition.Grammar.SpeechRecognized> może zgłosić swoje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="c715b-754">Zdarzenie obiektu jest zgłaszane przed <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzeniem aparatu rozpoznawania mowy. <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.Grammar.SpeechRecognized></span><span class="sxs-lookup"><span data-stu-id="c715b-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c715b-755">Wszystkie zadania specyficzne dla określonej gramatyki powinny być zawsze wykonywane przez program obsługi <xref:System.Speech.Recognition.Grammar.SpeechRecognized> zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="c715b-756">Podczas tworzenia <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegata należy określić metodę, która będzie obsługiwać zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c715b-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c715b-757">Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c715b-758">Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata.</span><span class="sxs-lookup"><span data-stu-id="c715b-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c715b-759">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Events and delegats](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c715b-759">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-760">Poniższy przykład jest częścią aplikacji konsolowej, która tworzy gramatykę rozpoznawania mowy, konstruuje <xref:System.Speech.Recognition.Grammar> obiekt i ładuje go do programu <xref:System.Speech.Recognition.SpeechRecognitionEngine> w celu przeprowadzenia rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="c715b-761">Przykład ilustruje dane wejściowe mowy do <xref:System.Speech.Recognition.SpeechRecognitionEngine>, skojarzone wyniki rozpoznawania i skojarzone zdarzenia zgłoszone przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="c715b-762">Wypowiadane dane wejściowe, takie jak "chcę mieć od Chicago do Miami" spowodują <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> wyzwolenie zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c715b-763">Mówiąc, że fraza "przylot ja z Houston do Chicago" nie spowoduje <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> wyzwolenia zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c715b-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="c715b-764">W przykładzie zastosowano procedurę obsługi dla <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzenia, aby wyświetlić pomyślnie rozpoznane frazy i semantykę, która zawiera w konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="c715b-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognitionEngine.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c715b-765">Zwalnia wszystkie <see cref="T:System.Speech.Recognition.Grammar" /> obiekty z aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-766">Jeśli aparat rozpoznawania <xref:System.Speech.Recognition.Grammar> jest obecnie ładowany asynchronicznie, ta metoda czeka <xref:System.Speech.Recognition.Grammar> do momentu załadowania, zanim <xref:System.Speech.Recognition.Grammar> odładuje wszystkie obiekty z <xref:System.Speech.Recognition.SpeechRecognitionEngine> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="c715b-767">Aby zwolnić określoną gramatykę, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-768">W poniższym przykładzie przedstawiono część aplikacji konsolowej, która pokazuje synchroniczne ładowanie i wyładowywanie gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="c715b-769">Obiekt gramatyki do zwolnienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-769">The grammar object to unload.</span></span></param>
        <summary><span data-ttu-id="c715b-770">Zwalnia określony <see cref="T:System.Speech.Recognition.Grammar" /> obiekt <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> z wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-771">Jeśli aparat rozpoznawania jest uruchomiony, aplikacje muszą użyć <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> do <xref:System.Speech.Recognition.SpeechRecognitionEngine> wstrzymania wystąpienia przed załadowaniem, wyładowaniem, <xref:System.Speech.Recognition.Grammar> włączeniem lub wyłączeniem obiektu.</span><span class="sxs-lookup"><span data-stu-id="c715b-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="c715b-772">Aby zwolnić wszystkie <xref:System.Speech.Recognition.Grammar> obiekty, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> Użyj metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-773">W poniższym przykładzie przedstawiono część aplikacji konsolowej, która pokazuje synchroniczne ładowanie i wyładowywanie gramatyki rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-774"><paramref name="Grammar" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-774"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c715b-775">Gramatyka nie została załadowana w tym aparacie rozpoznawania lub aparat rozpoznawania obecnie ładuje gramatykę asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="c715b-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c715b-776">Aktualizuje wartość ustawienia dla aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-776">Updates the value of a setting for the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-777">Ustawienia aparatu rozpoznawania mogą zawierać ciąg, 64-bitową liczbę całkowitą lub dane adresu pamięci.</span><span class="sxs-lookup"><span data-stu-id="c715b-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="c715b-778">W poniższej tabeli opisano ustawienia, które są zdefiniowane dla aparatu rozpoznawania zgodnego z programem Microsoft Speech API (SAPI).</span><span class="sxs-lookup"><span data-stu-id="c715b-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="c715b-779">Poniższe ustawienia muszą mieć ten sam zakres dla każdego aparatu rozpoznawania, który obsługuje ustawienie.</span><span class="sxs-lookup"><span data-stu-id="c715b-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="c715b-780">Aparat rozpoznawania zgodny z interfejsem SAPI nie jest wymagany do obsługi tych ustawień i może obsługiwać inne ustawienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="c715b-781">Nazwa</span><span class="sxs-lookup"><span data-stu-id="c715b-781">Name</span></span>|<span data-ttu-id="c715b-782">Opis</span><span class="sxs-lookup"><span data-stu-id="c715b-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="c715b-783">Określa użycie procesora przez aparat rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="c715b-784">Zakresem jest z zakresu od 0 do 100.</span><span class="sxs-lookup"><span data-stu-id="c715b-784">The range is from 0 to 100.</span></span> <span data-ttu-id="c715b-785">Wartość domyślna to 50.</span><span class="sxs-lookup"><span data-stu-id="c715b-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="c715b-786">Wskazuje długość wyciszenia na końcu jednoznacznego wejścia, zanim aparat rozpoznawania mowy ukończy operację rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="c715b-787">Zakresem jest z zakresu od 0 do 10 000 milisekund (MS).</span><span class="sxs-lookup"><span data-stu-id="c715b-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="c715b-788">To ustawienie odpowiada <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="c715b-789">Wartość domyślna = 150ms.</span><span class="sxs-lookup"><span data-stu-id="c715b-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="c715b-790">Wskazuje długość wyciszenia w milisekundach (MS) na końcu niejednoznacznych danych wejściowych przed ukończeniem operacji rozpoznawania przez aparat rozpoznawania mowy.</span><span class="sxs-lookup"><span data-stu-id="c715b-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="c715b-791">Zakresem jest z zakresu od 0 do 10, 000ms.</span><span class="sxs-lookup"><span data-stu-id="c715b-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="c715b-792">To ustawienie odpowiada <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> właściwości aparatu rozpoznawania.</span><span class="sxs-lookup"><span data-stu-id="c715b-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="c715b-793">Wartość domyślna = 500 ms.</span><span class="sxs-lookup"><span data-stu-id="c715b-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="c715b-794">Wskazuje, czy adaptacja modelu akustycznego jest włączona (wartość `1`=) czy wyłączona (wartość `0`=).</span><span class="sxs-lookup"><span data-stu-id="c715b-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="c715b-795">Wartość domyślna to `1` (włączone).</span><span class="sxs-lookup"><span data-stu-id="c715b-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="c715b-796">Wskazuje, czy adaptacja w tle jest włączona `1`(wartość =) czy wyłączona `0`(wartość =) i utrzymuje ustawienie w rejestrze.</span><span class="sxs-lookup"><span data-stu-id="c715b-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="c715b-797">Wartość domyślna to `1` (włączone).</span><span class="sxs-lookup"><span data-stu-id="c715b-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="c715b-798">Aby zwrócić jeden z ustawień aparatu rozpoznawania, użyj <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c715b-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="c715b-799">Z wyjątkiem `PersistedBackgroundAdaptation`wartości właściwości ustawionych <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> przy użyciu metod pozostają w efekcie tylko <xref:System.Speech.Recognition.SpeechRecognitionEngine>dla bieżącego wystąpienia, po którym przywracają ustawienia domyślne.</span><span class="sxs-lookup"><span data-stu-id="c715b-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="c715b-800">Można zmodyfikować sposób, w jaki rozpoznawanie mowy reaguje na dane wejściowe inne niż mowę <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>przy <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>użyciu <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>właściwości, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> , i.</span><span class="sxs-lookup"><span data-stu-id="c715b-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * int -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="c715b-801">Nazwa ustawienia do zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="c715b-801">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="c715b-802">Nowa wartość ustawienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-802">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="c715b-803">Aktualizuje określone ustawienie dla <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> z określoną wartością całkowitą.</span><span class="sxs-lookup"><span data-stu-id="c715b-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-804">Z wyjątkiem `PersistedBackgroundAdaptation`wartości właściwości ustawionych <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> przy użyciu metody pozostają w efekcie tylko <xref:System.Speech.Recognition.SpeechRecognitionEngine>dla bieżącego wystąpienia, po którym przywracają ustawienia domyślne.</span><span class="sxs-lookup"><span data-stu-id="c715b-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="c715b-805">Opis <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> obsługiwanych ustawień można znaleźć w temacie.</span><span class="sxs-lookup"><span data-stu-id="c715b-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c715b-806">Poniższy przykład jest częścią aplikacji konsolowej, która wyprowadza wartości dla wielu ustawień zdefiniowanych dla aparatu rozpoznawania, który obsługuje ustawienia regionalne en-US.</span><span class="sxs-lookup"><span data-stu-id="c715b-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="c715b-807">Przykład aktualizuje ustawienia poziomu ufności, a następnie wysyła zapytanie do aparatu rozpoznawania w celu sprawdzenia zaktualizowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="c715b-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="c715b-808">Przykład generuje następujące dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="c715b-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-809"><paramref name="settingName" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-809"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-810"><paramref name="settingName" />jest ciągiem pustym ("").</span><span class="sxs-lookup"><span data-stu-id="c715b-810"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="c715b-811">Aparat rozpoznawania nie ma ustawienia o tej nazwie.</span><span class="sxs-lookup"><span data-stu-id="c715b-811">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * string -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="c715b-812">Nazwa ustawienia do zaktualizowania.</span><span class="sxs-lookup"><span data-stu-id="c715b-812">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="c715b-813">Nowa wartość ustawienia.</span><span class="sxs-lookup"><span data-stu-id="c715b-813">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="c715b-814">Aktualizuje określone ustawienie aparatu rozpoznawania mowy o określonej wartości ciągu.</span><span class="sxs-lookup"><span data-stu-id="c715b-814">Updates the specified speech recognition engine setting with the specified string value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c715b-815">Z wyjątkiem `PersistedBackgroundAdaptation`wartości właściwości ustawionych <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> przy użyciu metody pozostają w efekcie tylko <xref:System.Speech.Recognition.SpeechRecognitionEngine>dla bieżącego wystąpienia, po którym przywracają ustawienia domyślne.</span><span class="sxs-lookup"><span data-stu-id="c715b-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="c715b-816">Opis <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> obsługiwanych ustawień można znaleźć w temacie.</span><span class="sxs-lookup"><span data-stu-id="c715b-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c715b-817"><paramref name="settingName" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c715b-817"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c715b-818"><paramref name="settingName" />jest ciągiem pustym ("").</span><span class="sxs-lookup"><span data-stu-id="c715b-818"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="c715b-819">Aparat rozpoznawania nie ma ustawienia o tej nazwie.</span><span class="sxs-lookup"><span data-stu-id="c715b-819">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
