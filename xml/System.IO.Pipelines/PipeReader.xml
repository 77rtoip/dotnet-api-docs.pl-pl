<Type Name="PipeReader" FullName="System.IO.Pipelines.PipeReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d4e70dc07dc58e6713f1e895528070814c966ce" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69244563" /></Metadata><TypeSignature Language="C#" Value="public abstract class PipeReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PipeReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Pipelines.PipeReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PipeReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class PipeReader abstract" />
  <TypeSignature Language="F#" Value="type PipeReader = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Pipelines</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e8bd1-101">Definiuje klasę, która zapewnia dostęp do odczytu z potoku.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-101">Defines a class that provides access to a read side of pipe.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PipeReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PipeReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8bd1-102">Inicjuje nowe wystąpienie klasy <see cref="T:System.IO.Pipelines.PipeReader" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-102">Initializes a new instance of the <see cref="T:System.IO.Pipelines.PipeReader" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvanceTo">
      <MemberSignature Language="C#" Value="public abstract void AdvanceTo (SequencePosition consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdvanceTo(valuetype System.SequencePosition consumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.AdvanceTo(System.SequencePosition)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AdvanceTo (consumed As SequencePosition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AdvanceTo(SequencePosition consumed);" />
      <MemberSignature Language="F#" Value="abstract member AdvanceTo : SequencePosition -&gt; unit" Usage="pipeReader.AdvanceTo consumed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="consumed" Type="System.SequencePosition" />
      </Parameters>
      <Docs>
        <param name="consumed"><span data-ttu-id="e8bd1-103">Oznacza zakres danych, które zostały pomyślnie przetworzone.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-103">Marks the extent of the data that has been successfully processed.</span></span></param>
        <summary><span data-ttu-id="e8bd1-104">Przenosi do przodu kursor przeczytania potoku do po użytych danych.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-104">Moves forward the pipeline's read cursor to after the consumed data.</span></span></summary>
        <remarks><span data-ttu-id="e8bd1-105">Pamięć użytych danych zostanie wydana i nie będzie już dostępna.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-105">The memory for the consumed data will be released and no longer available.</span></span> <span data-ttu-id="e8bd1-106">Badane dane komunikują się z potokiem, gdy powinien sygnalizować więcej danych.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-106">The examined data communicates to the pipeline when it should signal more data is available.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvanceTo">
      <MemberSignature Language="C#" Value="public abstract void AdvanceTo (SequencePosition consumed, SequencePosition examined);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdvanceTo(valuetype System.SequencePosition consumed, valuetype System.SequencePosition examined) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.AdvanceTo(System.SequencePosition,System.SequencePosition)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AdvanceTo (consumed As SequencePosition, examined As SequencePosition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AdvanceTo(SequencePosition consumed, SequencePosition examined);" />
      <MemberSignature Language="F#" Value="abstract member AdvanceTo : SequencePosition * SequencePosition -&gt; unit" Usage="pipeReader.AdvanceTo (consumed, examined)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="consumed" Type="System.SequencePosition" />
        <Parameter Name="examined" Type="System.SequencePosition" />
      </Parameters>
      <Docs>
        <param name="consumed"><span data-ttu-id="e8bd1-107">Oznacza zakres danych, które zostały pomyślnie przetworzone.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-107">Marks the extent of the data that has been successfully processed.</span></span></param>
        <param name="examined"><span data-ttu-id="e8bd1-108">Oznacza zakres danych, które zostały odczytane i zbadane.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-108">Marks the extent of the data that has been read and examined.</span></span></param>
        <summary><span data-ttu-id="e8bd1-109">Przenosi do przodu kursor przeczytania potoku do po użytych danych.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-109">Moves forward the pipeline's read cursor to after the consumed data.</span></span></summary>
        <remarks><span data-ttu-id="e8bd1-110">Pamięć użytych danych zostanie wydana i nie będzie już dostępna.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-110">The memory for the consumed data will be released and no longer available.</span></span>
<span data-ttu-id="e8bd1-111">Badane dane komunikują się z potokiem, gdy powinien sygnalizować więcej danych.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-111">The examined data communicates to the pipeline when it should signal more data is available.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream AsStream (bool leaveOpen = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream AsStream(bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.AsStream(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsStream (Optional leaveOpen As Boolean = false) As Stream" />
      <MemberSignature Language="F#" Value="abstract member AsStream : bool -&gt; System.IO.Stream&#xA;override this.AsStream : bool -&gt; System.IO.Stream" Usage="pipeReader.AsStream leaveOpen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leaveOpen" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="leaveOpen"><span data-ttu-id="e8bd1-112">Opcjonalna flaga <see cref="T:System.IO.Stream" /> wskazująca, czy usuwanie zwróconych pozostawionych<see langword="true" />pozostaweń <see cref="T:System.IO.Pipelines.PipeReader" /> <see cref="T:System.IO.Pipelines.PipeReader" /> Open<see langword="false" />() lub Zakończ ().</span><span class="sxs-lookup"><span data-stu-id="e8bd1-112">An optional flag that indicates whether disposing the returned <see cref="T:System.IO.Stream" /> leaves <see cref="T:System.IO.Pipelines.PipeReader" /> open (<see langword="true" />) or completes <see cref="T:System.IO.Pipelines.PipeReader" /> (<see langword="false" />).</span></span></param>
        <summary><span data-ttu-id="e8bd1-113">Zwraca podstawę <see cref="T:System.IO.Stream" /> opakowaną <see cref="T:System.IO.Pipelines.PipeReader" />przez.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-113">Returns the underlying <see cref="T:System.IO.Stream" /> wrapped by the <see cref="T:System.IO.Pipelines.PipeReader" />.</span></span></summary>
        <returns><span data-ttu-id="e8bd1-114">Źródłowy strumień.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-114">The underlying stream.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRead">
      <MemberSignature Language="C#" Value="public abstract void CancelPendingRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelPendingRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.CancelPendingRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub CancelPendingRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void CancelPendingRead();" />
      <MemberSignature Language="F#" Value="abstract member CancelPendingRead : unit -&gt; unit" Usage="pipeReader.CancelPendingRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8bd1-115">Anuluje obecnie oczekujące lub jeśli żadna z nich oczekuje na następne <see cref="M:System.IO.Pipelines.PipeReader.ReadAsync(System.Threading.CancellationToken)" />wywołanie do, bez <see cref="T:System.IO.Pipelines.PipeReader" />kończenia.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-115">Cancels to currently pending or if none is pending next call to <see cref="M:System.IO.Pipelines.PipeReader.ReadAsync(System.Threading.CancellationToken)" />, without completing the <see cref="T:System.IO.Pipelines.PipeReader" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public abstract void Complete (Exception exception = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.Complete(System.Exception)" />
      <MemberSignature Language="F#" Value="abstract member Complete : Exception -&gt; unit" Usage="pipeReader.Complete exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="e8bd1-116">Opcjonalne <see cref="T:System.Exception" /> oznaczanie błędu powodującego zakończenie potoku.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-116">Optional <see cref="T:System.Exception" /> indicating a failure that's causing the pipeline to complete.</span></span></param>
        <summary><span data-ttu-id="e8bd1-117">Sygnalizuje producenta, że konsument ukończy odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-117">Signals to the producer that the consumer is done reading.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask CompleteAsync (Exception exception = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask CompleteAsync(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.CompleteAsync(System.Exception)" />
      <MemberSignature Language="F#" Value="abstract member CompleteAsync : Exception -&gt; System.Threading.Tasks.ValueTask&#xA;override this.CompleteAsync : Exception -&gt; System.Threading.Tasks.ValueTask" Usage="pipeReader.CompleteAsync exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="exception">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Pipelines.PipeWriter destination, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Pipelines.PipeWriter destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.CopyToAsync(System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CopyToAsync : System.IO.Pipelines.PipeWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CopyToAsync : System.IO.Pipelines.PipeWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="pipeReader.CopyToAsync (destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Pipelines.PipeWriter" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e8bd1-118">Moduł zapisujący potoku, do którego zostanie skopiowana zawartość bieżącego strumienia.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-118">The pipe writer to which the contents of the current stream will be copied.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e8bd1-119">Token do monitorowania żądań anulowania.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-119">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="e8bd1-120">Wartość domyślna to <see cref="P:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-120">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="e8bd1-121">Asynchronicznie odczytuje bajty z <see cref="T:System.IO.Pipelines.PipeReader" /> i zapisuje je w określonej <see cref="T:System.IO.Pipelines.PipeWriter" />postaci przy użyciu określonego rozmiaru buforu i tokenu anulowania.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-121">Asynchronously reads the bytes from the <see cref="T:System.IO.Pipelines.PipeReader" /> and writes them to the specified <see cref="T:System.IO.Pipelines.PipeWriter" />, using a specified buffer size and cancellation token.</span></span></summary>
        <returns><span data-ttu-id="e8bd1-122">Zadanie, które reprezentuje asynchroniczną operację kopiowania.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-122">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CopyToAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CopyToAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="pipeReader.CopyToAsync (destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e8bd1-123">Strumień, do którego zostanie skopiowana zawartość bieżącego strumienia.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-123">The stream to which the contents of the current stream will be copied.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e8bd1-124">Token do monitorowania żądań anulowania.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-124">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="e8bd1-125">Wartość domyślna to <see cref="P:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-125">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="e8bd1-126">Asynchronicznie odczytuje bajty z <see cref="T:System.IO.Pipelines.PipeReader" /> i zapisuje je w określonym strumieniu przy użyciu określonego tokenu anulowania.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-126">Asynchronously reads the bytes from the <see cref="T:System.IO.Pipelines.PipeReader" /> and writes them to the specified stream, using a specified cancellation token.</span></span></summary>
        <returns><span data-ttu-id="e8bd1-127">Zadanie, które reprezentuje asynchroniczną operację kopiowania.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-127">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.Pipelines.PipeReader Create (System.IO.Stream stream, System.IO.Pipelines.StreamPipeReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Pipelines.PipeReader Create(class System.IO.Stream stream, class System.IO.Pipelines.StreamPipeReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.Create(System.IO.Stream,System.IO.Pipelines.StreamPipeReaderOptions)" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.IO.Pipelines.StreamPipeReaderOptions -&gt; System.IO.Pipelines.PipeReader" Usage="System.IO.Pipelines.PipeReader.Create (stream, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Pipelines.PipeReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
        <Parameter Name="readerOptions" Type="System.IO.Pipelines.StreamPipeReaderOptions" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="e8bd1-128">Strumień, który będzie zawijał czytnik potoku.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-128">The stream that the pipe reader will wrap.</span></span></param>
        <param name="readerOptions"><span data-ttu-id="e8bd1-129">Opcje konfigurowania czytnika potoku.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-129">The options to configure the pipe reader.</span></span></param>
        <summary><span data-ttu-id="e8bd1-130">Tworzy otokę określonego <see cref="T:System.IO.Stream" />. <see cref="T:System.IO.Pipelines.PipeReader" /></span><span class="sxs-lookup"><span data-stu-id="e8bd1-130">Creates a <see cref="T:System.IO.Pipelines.PipeReader" /> wrapping the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <returns><span data-ttu-id="e8bd1-131">Obiekt <see cref="T:System.IO.Pipelines.PipeReader" /> , który zawija <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-131">A <see cref="T:System.IO.Pipelines.PipeReader" /> that wraps the <see cref="T:System.IO.Stream" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWriterCompleted">
      <MemberSignature Language="C#" Value="public virtual void OnWriterCompleted (Action&lt;Exception,object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWriterCompleted(class System.Action`2&lt;class System.Exception, object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.OnWriterCompleted(System.Action{System.Exception,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnWriterCompleted (callback As Action(Of Exception, Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnWriterCompleted(Action&lt;Exception ^, System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member OnWriterCompleted : Action&lt;Exception, obj&gt; * obj -&gt; unit&#xA;override this.OnWriterCompleted : Action&lt;Exception, obj&gt; * obj -&gt; unit" Usage="pipeReader.OnWriterCompleted (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-3.0">
          <AttributeName>System.Obsolete("OnWriterCompleted may not be invoked on all implementations of PipeReader. This will be removed in a future release.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Exception,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e8bd1-132">Wywołanie zwrotne do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-132">The callback to register.</span></span></param>
        <param name="state"><span data-ttu-id="e8bd1-133">Obiekt stanu do przekazania <paramref name="callback" /> , gdy jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-133">The state object to pass to <paramref name="callback" /> when it's invoked.</span></span></param>
        <summary><span data-ttu-id="e8bd1-134">Rejestruje wywołanie zwrotne, które jest <see cref="T:System.IO.Pipelines.PipeWriter" /> wykonywane po zakończeniu boku potoku.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-134">Registers a callback that executes when the <see cref="T:System.IO.Pipelines.PipeWriter" /> side of the pipe is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="e8bd1-135">`OnWriterCompleted`nie można wywołać dla wszystkich implementacji programu <xref:System.IO.Pipelines.PipeWriter>.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-135">`OnWriterCompleted` may not be invoked on all implementations of <xref:System.IO.Pipelines.PipeWriter>.</span></span> <span data-ttu-id="e8bd1-136">Ta metoda zostanie usunięta w przyszłej wersji.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-136">This method will be removed in a future release.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.ReadResult&gt; ReadAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.IO.Pipelines.ReadResult&gt; ReadAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.ReadAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.ReadResult&gt;" Usage="pipeReader.ReadAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.ReadResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary><span data-ttu-id="e8bd1-137">Asynchronicznie odczytuje sekwencję bajtów z bieżącej <see cref="T:System.IO.Pipelines.PipeReader" />.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-137">Asynchronously reads a sequence of bytes from the current <see cref="T:System.IO.Pipelines.PipeReader" />.</span></span></summary>
        <returns><span data-ttu-id="e8bd1-138"><see cref="T:System.Threading.Tasks.ValueTask`1" /> Reprezentująca asynchroniczną operację odczytu.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-138">A <see cref="T:System.Threading.Tasks.ValueTask`1" /> representing the asynchronous read operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead">
      <MemberSignature Language="C#" Value="public abstract bool TryRead (out System.IO.Pipelines.ReadResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryRead([out] valuetype System.IO.Pipelines.ReadResult&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeReader.TryRead(System.IO.Pipelines.ReadResult@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryRead (ByRef result As ReadResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool TryRead([Runtime::InteropServices::Out] System::IO::Pipelines::ReadResult % result);" />
      <MemberSignature Language="F#" Value="abstract member TryRead :  -&gt; bool" Usage="pipeReader.TryRead result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IO.Pipelines.ReadResult" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="e8bd1-139">Polu<see cref="T:System.IO.Pipelines.ReadResult" /></span><span class="sxs-lookup"><span data-stu-id="e8bd1-139">The <see cref="T:System.IO.Pipelines.ReadResult" /></span></span></param>
        <summary><span data-ttu-id="e8bd1-140">Próbuje synchronicznie odczytać dane <see cref="T:System.IO.Pipelines.PipeReader" />.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-140">Attempts to synchronously read data the <see cref="T:System.IO.Pipelines.PipeReader" />.</span></span></summary>
        <returns><span data-ttu-id="e8bd1-141"><see langword="true" />Jeśli dane były dostępne lub wywołanie zostało anulowane lub moduł zapisujący został ukończony; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e8bd1-141"><see langword="true" /> if data was available, or if the call was canceled or the writer was completed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks><span data-ttu-id="e8bd1-142">Jeśli potoku powróci <see langword="false" />, nie ma potrzeby wywoływania <see cref="M:System.IO.Pipelines.PipeReader.AdvanceTo(System.SequencePosition,System.SequencePosition)" />.</span><span class="sxs-lookup"><span data-stu-id="e8bd1-142">If the pipe returns <see langword="false" />, there's no need to call <see cref="M:System.IO.Pipelines.PipeReader.AdvanceTo(System.SequencePosition,System.SequencePosition)" />.</span></span></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
