<Type Name="PipeWriter" FullName="System.IO.Pipelines.PipeWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a9b6bc52d86f1dce7e08bf6570e11d7dc1387d4d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69244523" /></Metadata><TypeSignature Language="C#" Value="public abstract class PipeWriter : System.Buffers.IBufferWriter&lt;byte&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PipeWriter extends System.Object implements class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IO.Pipelines.PipeWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PipeWriter&#xA;Implements IBufferWriter(Of Byte)" />
  <TypeSignature Language="C++ CLI" Value="public ref class PipeWriter abstract : System::Buffers::IBufferWriter&lt;System::Byte&gt;" />
  <TypeSignature Language="F#" Value="type PipeWriter = class&#xA;    interface IBufferWriter&lt;byte&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Pipelines</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Buffers.IBufferWriter&lt;System.Byte&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="fe46a-101">Definiuje klasę, która dostarcza potok, do którego można pisać dane.</span><span class="sxs-lookup"><span data-stu-id="fe46a-101">Defines a class that provides a pipeline to which data can be written.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PipeWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PipeWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe46a-102">Inicjuje nowe wystąpienie klasy.</span><span class="sxs-lookup"><span data-stu-id="fe46a-102">Initializes a new instance of the class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public abstract void Advance (int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Advance(int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.Advance(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Advance (bytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Advance(int bytes);" />
      <MemberSignature Language="F#" Value="abstract member Advance : int -&gt; unit" Usage="pipeWriter.Advance bytes" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Buffers.IBufferWriter`1.Advance(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="fe46a-103">Liczba bajtów zapisywana <see cref="T:System.Span`1" /> w lub <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="fe46a-103">The number of bytes written to the <see cref="T:System.Span`1" /> or <see cref="T:System.Memory`1" />.</span></span></param>
        <summary><span data-ttu-id="fe46a-104">Powiadamia, że <paramref name="bytes" /> bajty zostały zapisaną w danych <see cref="T:System.Span`1" /> wyjściowych lub <see cref="T:System.Memory`1" />. <see cref="T:System.IO.Pipelines.PipeWriter" /></span><span class="sxs-lookup"><span data-stu-id="fe46a-104">Notifies the <see cref="T:System.IO.Pipelines.PipeWriter" /> that <paramref name="bytes" /> bytes were written to the output <see cref="T:System.Span`1" /> or <see cref="T:System.Memory`1" />.</span></span> <span data-ttu-id="fe46a-105">Musisz zażądać nowego buforu po wywołaniu <see cref="M:System.IO.Pipelines.PipeWriter.Advance(System.Int32)" /> , aby kontynuować zapisywanie większej ilości danych. nie można zapisywać w wcześniej pobranym buforze.</span><span class="sxs-lookup"><span data-stu-id="fe46a-105">You must request a new buffer after calling <see cref="M:System.IO.Pipelines.PipeWriter.Advance(System.Int32)" /> to continue writing more data; you cannot write to a previously acquired buffer.</span></span></summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="AsStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream AsStream (bool leaveOpen = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream AsStream(bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.AsStream(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsStream (Optional leaveOpen As Boolean = false) As Stream" />
      <MemberSignature Language="F#" Value="abstract member AsStream : bool -&gt; System.IO.Stream&#xA;override this.AsStream : bool -&gt; System.IO.Stream" Usage="pipeWriter.AsStream leaveOpen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leaveOpen" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="leaveOpen"><span data-ttu-id="fe46a-106">Opcjonalna flaga <see cref="T:System.IO.Stream" /> wskazująca, czy usuwanie zwróconych pozostawionych<see langword="true" />pozostaweń <see cref="T:System.IO.Pipelines.PipeReader" /> <see cref="T:System.IO.Pipelines.PipeReader" /> Open<see langword="false" />() lub Zakończ ().</span><span class="sxs-lookup"><span data-stu-id="fe46a-106">An optional flag that indicates whether disposing the returned <see cref="T:System.IO.Stream" /> leaves <see cref="T:System.IO.Pipelines.PipeReader" /> open (<see langword="true" />) or completes <see cref="T:System.IO.Pipelines.PipeReader" /> (<see langword="false" />).</span></span></param>
        <summary><span data-ttu-id="fe46a-107">Zwraca podstawę <see cref="T:System.IO.Stream" /> opakowaną <see cref="T:System.IO.Pipelines.PipeWriter" />przez.</span><span class="sxs-lookup"><span data-stu-id="fe46a-107">Returns the underlying <see cref="T:System.IO.Stream" /> wrapped by the <see cref="T:System.IO.Pipelines.PipeWriter" />.</span></span></summary>
        <returns><span data-ttu-id="fe46a-108">Źródłowy strumień.</span><span class="sxs-lookup"><span data-stu-id="fe46a-108">The underlying stream.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingFlush">
      <MemberSignature Language="C#" Value="public abstract void CancelPendingFlush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelPendingFlush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.CancelPendingFlush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub CancelPendingFlush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void CancelPendingFlush();" />
      <MemberSignature Language="F#" Value="abstract member CancelPendingFlush : unit -&gt; unit" Usage="pipeWriter.CancelPendingFlush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe46a-109">Anuluje oczekującą <see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> operację.</span><span class="sxs-lookup"><span data-stu-id="fe46a-109">Cancels the pending <see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> operation.</span></span> <span data-ttu-id="fe46a-110">Jeśli nie ma żadnych, anuluje następną <see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> operację bez <see cref="T:System.IO.Pipelines.PipeWriter" />kończenia.</span><span class="sxs-lookup"><span data-stu-id="fe46a-110">If there is none, cancels next <see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> operation, without completing the <see cref="T:System.IO.Pipelines.PipeWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public abstract void Complete (Exception exception = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.Complete(System.Exception)" />
      <MemberSignature Language="F#" Value="abstract member Complete : Exception -&gt; unit" Usage="pipeWriter.Complete exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="fe46a-111">Opcjonalne <see cref="T:System.Exception" /> oznaczanie błędu powodującego zakończenie potoku.</span><span class="sxs-lookup"><span data-stu-id="fe46a-111">Optional <see cref="T:System.Exception" /> indicating a failure that's causing the pipeline to complete.</span></span></param>
        <summary><span data-ttu-id="fe46a-112"><see cref="T:System.IO.Pipelines.PipeWriter" /> Oznacza jako kompletną, co oznacza, że nie będą w nim zapisywane żadne elementy.</span><span class="sxs-lookup"><span data-stu-id="fe46a-112">Marks the <see cref="T:System.IO.Pipelines.PipeWriter" /> as being complete, meaning no more items will be written to it.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask CompleteAsync (Exception exception = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask CompleteAsync(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.CompleteAsync(System.Exception)" />
      <MemberSignature Language="F#" Value="abstract member CompleteAsync : Exception -&gt; System.Threading.Tasks.ValueTask&#xA;override this.CompleteAsync : Exception -&gt; System.Threading.Tasks.ValueTask" Usage="pipeWriter.CompleteAsync exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="exception">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task CopyFromAsync (System.IO.Stream source, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task CopyFromAsync(class System.IO.Stream source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.CopyFromAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CopyFromAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CopyFromAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="pipeWriter.CopyFromAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe46a-113">Strumień, z którego zostanie skopiowana zawartość.</span><span class="sxs-lookup"><span data-stu-id="fe46a-113">The stream from which the contents will be copied.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fe46a-114">Token do monitorowania żądań anulowania.</span><span class="sxs-lookup"><span data-stu-id="fe46a-114">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="fe46a-115">Wartość domyślna to <see cref="P:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="fe46a-115">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="fe46a-116">Asynchronicznie odczytuje bajty z określonego strumienia i zapisuje je w <see cref="T:System.IO.Pipelines.PipeWriter" />.</span><span class="sxs-lookup"><span data-stu-id="fe46a-116">Asynchronously reads the bytes from the specified stream and writes them to the <see cref="T:System.IO.Pipelines.PipeWriter" />.</span></span></summary>
        <returns><span data-ttu-id="fe46a-117">Zadanie, które reprezentuje asynchroniczną operację kopiowania.</span><span class="sxs-lookup"><span data-stu-id="fe46a-117">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.Pipelines.PipeWriter Create (System.IO.Stream stream, System.IO.Pipelines.StreamPipeWriterOptions writerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Pipelines.PipeWriter Create(class System.IO.Stream stream, class System.IO.Pipelines.StreamPipeWriterOptions writerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.Create(System.IO.Stream,System.IO.Pipelines.StreamPipeWriterOptions)" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.IO.Pipelines.StreamPipeWriterOptions -&gt; System.IO.Pipelines.PipeWriter" Usage="System.IO.Pipelines.PipeWriter.Create (stream, writerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Pipelines.PipeWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
        <Parameter Name="writerOptions" Type="System.IO.Pipelines.StreamPipeWriterOptions" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="fe46a-118">Strumień, który będzie zawijał składnik zapisywania potoku.</span><span class="sxs-lookup"><span data-stu-id="fe46a-118">The stream that the pipe writer will wrap.</span></span></param>
        <param name="writerOptions"><span data-ttu-id="fe46a-119">Opcje konfigurowania modułu zapisywania potoku.</span><span class="sxs-lookup"><span data-stu-id="fe46a-119">The options to configure the pipe writer.</span></span></param>
        <summary><span data-ttu-id="fe46a-120">Tworzy otokę określonego <see cref="T:System.IO.Stream" />. <see cref="T:System.IO.Pipelines.PipeWriter" /></span><span class="sxs-lookup"><span data-stu-id="fe46a-120">Creates a <see cref="T:System.IO.Pipelines.PipeWriter" /> wrapping the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <returns><span data-ttu-id="fe46a-121">Obiekt <see cref="T:System.IO.Pipelines.PipeWriter" /> , który zawija <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="fe46a-121">A <see cref="T:System.IO.Pipelines.PipeWriter" /> that wraps the <see cref="T:System.IO.Stream" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.FlushResult&gt; FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.IO.Pipelines.FlushResult&gt; FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.FlushResult&gt;" Usage="pipeWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.FlushResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="fe46a-122">Token do monitorowania żądań anulowania.</span><span class="sxs-lookup"><span data-stu-id="fe46a-122">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="fe46a-123">Wartość domyślna to <see cref="T:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="fe46a-123">The default value is <see cref="T:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="fe46a-124">Sprawia, że bajty <see cref="T:System.IO.Pipelines.PipeReader" /> są dostępne <see cref="M:System.IO.Pipelines.PipeReader.ReadAsync(System.Threading.CancellationToken)" /> dla i uruchamiają kontynuację.</span><span class="sxs-lookup"><span data-stu-id="fe46a-124">Makes bytes written available to <see cref="T:System.IO.Pipelines.PipeReader" /> and runs <see cref="M:System.IO.Pipelines.PipeReader.ReadAsync(System.Threading.CancellationToken)" /> continuation.</span></span></summary>
        <returns><span data-ttu-id="fe46a-125">Zadanie, które reprezentuje i otacza asynchroniczną operację opróżniania.</span><span class="sxs-lookup"><span data-stu-id="fe46a-125">A task that represents and wraps the asynchronous flush operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMemory">
      <MemberSignature Language="C#" Value="public abstract Memory&lt;byte&gt; GetMemory (int sizeHint = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Memory`1&lt;unsigned int8&gt; GetMemory(int32 sizeHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.GetMemory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMemory (Optional sizeHint As Integer = 0) As Memory(Of Byte)" />
      <MemberSignature Language="F#" Value="abstract member GetMemory : int -&gt; Memory&lt;byte&gt;" Usage="pipeWriter.GetMemory sizeHint" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeHint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeHint"><span data-ttu-id="fe46a-126">Minimalna długość zwracanych <see cref="T:System.Memory`1" />wartości.</span><span class="sxs-lookup"><span data-stu-id="fe46a-126">The minimum length of the returned <see cref="T:System.Memory`1" />.</span></span> <span data-ttu-id="fe46a-127">Jeśli 0, zwracany jest niepusty bufor pamięci o dowolnym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="fe46a-127">If 0, a non-empty memory buffer of arbitrary size is returned.</span></span></param>
        <summary><span data-ttu-id="fe46a-128">Zwraca do zapisu, który jest co najmniej żądanym rozmiarem, określonym <paramref name="sizeHint" /> przez parametr. <see cref="T:System.Memory`1" /></span><span class="sxs-lookup"><span data-stu-id="fe46a-128">Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested size, as specified by the <paramref name="sizeHint" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="fe46a-129">Bufor pamięci o wielkości co najmniej <paramref name="sizeHint" /> bajtów.</span><span class="sxs-lookup"><span data-stu-id="fe46a-129">A memory buffer of at least <paramref name="sizeHint" /> bytes.</span></span> <span data-ttu-id="fe46a-130">Jeśli <paramref name="sizeHint" /> jest równa 0, zwraca niepusty bufor o dowolnym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="fe46a-130">If <paramref name="sizeHint" /> is 0, returns a non-empty buffer of arbitrary size.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="fe46a-131">Nie ma gwarancji, że kolejne wywołania będą zwracać ten sam bufor lub bufor o takim samym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="fe46a-131">There is no guarantee that successive calls will return the same buffer or the same-sized buffer.</span></span>

<span data-ttu-id="fe46a-132">Ta metoda nigdy nie <xref:System.Memory`1.Empty?displayProperty=nameWithType>zwraca, ale <xref:System.OutOfMemoryException> zgłasza, że żądany rozmiar buforu jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="fe46a-132">This method never returns <xref:System.Memory`1.Empty?displayProperty=nameWithType>, but it throws an <xref:System.OutOfMemoryException> if the requested buffer size is not available.</span></span>

<span data-ttu-id="fe46a-133">Musisz zażądać nowego buforu po wywołaniu <xref:System.IO.Pipelines.PipeWriter.Advance%2A> , aby kontynuować zapisywanie większej ilości danych. nie można zapisywać w wcześniej pobranym buforze.</span><span class="sxs-lookup"><span data-stu-id="fe46a-133">You must request a new buffer after calling <xref:System.IO.Pipelines.PipeWriter.Advance%2A> to continue writing more data; you cannot write to a previously acquired buffer.</span></span>

              ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="fe46a-134">Żądany rozmiar buforu jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="fe46a-134">The requested buffer size is not available.</span></span></exception>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public abstract Span&lt;byte&gt; GetSpan (int sizeHint = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;unsigned int8&gt; GetSpan(int32 sizeHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.GetSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSpan (Optional sizeHint As Integer = 0) As Span(Of Byte)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : int -&gt; Span&lt;byte&gt;" Usage="pipeWriter.GetSpan sizeHint" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeHint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeHint"><span data-ttu-id="fe46a-135">Minimalna długość zwracanych <see cref="T:System.Span`1" />wartości.</span><span class="sxs-lookup"><span data-stu-id="fe46a-135">The minimum length of the returned <see cref="T:System.Span`1" />.</span></span> <span data-ttu-id="fe46a-136">Jeśli 0, zwracany jest niepusty bufor dowolnego rozmiaru.</span><span class="sxs-lookup"><span data-stu-id="fe46a-136">If 0, a non-empty buffer of arbitrary size is returned.</span></span></param>
        <summary><span data-ttu-id="fe46a-137">Zwraca do zapisu, który jest co najmniej żądanym rozmiarem, określonym <paramref name="sizeHint" /> przez parametr. <see cref="T:System.Span`1" /></span><span class="sxs-lookup"><span data-stu-id="fe46a-137">Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested size, as specified by the <paramref name="sizeHint" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="fe46a-138">Bufor o wielkości co najmniej <paramref name="sizeHint" /> bajtów.</span><span class="sxs-lookup"><span data-stu-id="fe46a-138">A buffer of at least <paramref name="sizeHint" /> bytes.</span></span> <span data-ttu-id="fe46a-139">Jeśli <paramref name="sizeHint" /> jest równa 0, zwraca niepusty bufor o dowolnym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="fe46a-139">If <paramref name="sizeHint" /> is 0, returns a non-empty buffer of arbitrary size.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="fe46a-140">Nie ma gwarancji, że kolejne wywołania będą zwracać ten sam bufor lub bufor o takim samym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="fe46a-140">There is no guarantee that successive calls will return the same buffer or the same-sized buffer.</span></span>

<span data-ttu-id="fe46a-141">Ta metoda nigdy nie <see cref="P:System.Span`1.Empty" />zwraca, ale <see cref="T:System.OutOfMemoryException" /> zgłasza, że żądany rozmiar buforu jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="fe46a-141">This method never returns <see cref="P:System.Span`1.Empty" />, but it throws an <see cref="T:System.OutOfMemoryException" /> if the requested buffer size is not available.</span></span>

<span data-ttu-id="fe46a-142">Musisz zażądać nowego buforu po wywołaniu <xref:System.IO.Pipelines.PipeWriter.Advance(System.Int32)> , aby kontynuować zapisywanie większej ilości danych. nie można zapisywać w wcześniej pobranym buforze.</span><span class="sxs-lookup"><span data-stu-id="fe46a-142">You must request a new buffer after calling <xref:System.IO.Pipelines.PipeWriter.Advance(System.Int32)> to continue writing more data; you cannot write to a previously acquired buffer.</span></span>

              ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="fe46a-143">Żądany rozmiar buforu jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="fe46a-143">The requested buffer size is not available.</span></span></exception>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="OnReaderCompleted">
      <MemberSignature Language="C#" Value="public virtual void OnReaderCompleted (Action&lt;Exception,object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnReaderCompleted(class System.Action`2&lt;class System.Exception, object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.OnReaderCompleted(System.Action{System.Exception,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnReaderCompleted (callback As Action(Of Exception, Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnReaderCompleted(Action&lt;Exception ^, System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member OnReaderCompleted : Action&lt;Exception, obj&gt; * obj -&gt; unit&#xA;override this.OnReaderCompleted : Action&lt;Exception, obj&gt; * obj -&gt; unit" Usage="pipeWriter.OnReaderCompleted (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-3.0">
          <AttributeName>System.Obsolete("OnReaderCompleted may not be invoked on all implementations of PipeWriter. This will be removed in a future release.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Exception,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="fe46a-144">Wywołanie zwrotne do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="fe46a-144">The callback to register.</span></span></param>
        <param name="state"><span data-ttu-id="fe46a-145">Obiekt stanu do przekazania <paramref name="callback" /> , gdy jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="fe46a-145">The state object to pass to <paramref name="callback" /> when it's invoked.</span></span></param>
        <summary><span data-ttu-id="fe46a-146">Rejestruje wywołanie zwrotne, które jest <see cref="T:System.IO.Pipelines.PipeReader" /> wykonywane po zakończeniu boku potoku.</span><span class="sxs-lookup"><span data-stu-id="fe46a-146">Registers a callback that executes when the <see cref="T:System.IO.Pipelines.PipeReader" /> side of the pipe is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="fe46a-147">`OnReaderCompleted`nie można wywołać dla wszystkich implementacji programu <xref:System.IO.Pipelines.PipeWriter>.</span><span class="sxs-lookup"><span data-stu-id="fe46a-147">`OnReaderCompleted` may not be invoked on all implementations of <xref:System.IO.Pipelines.PipeWriter>.</span></span> <span data-ttu-id="fe46a-148">Ta metoda zostanie usunięta w przyszłej wersji.</span><span class="sxs-lookup"><span data-stu-id="fe46a-148">This method will be removed in a future release.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.FlushResult&gt; WriteAsync (ReadOnlyMemory&lt;byte&gt; source, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.IO.Pipelines.FlushResult&gt; WriteAsync(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeWriter.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : ReadOnlyMemory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.FlushResult&gt;&#xA;override this.WriteAsync : ReadOnlyMemory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.FlushResult&gt;" Usage="pipeWriter.WriteAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.IO.Pipelines.FlushResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe46a-149">Region pamięci bajtowej tylko do odczytu do zapisu.</span><span class="sxs-lookup"><span data-stu-id="fe46a-149">The read-only byte memory region to write.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fe46a-150">Token do monitorowania żądań anulowania.</span><span class="sxs-lookup"><span data-stu-id="fe46a-150">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="fe46a-151">Wartość domyślna to <see cref="T:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="fe46a-151">The default value is <see cref="T:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="fe46a-152">Zapisuje określony bajtowy zakres pamięci do potoku i udostępnia dane dla <see cref="T:System.IO.Pipelines.PipeReader" />.</span><span class="sxs-lookup"><span data-stu-id="fe46a-152">Writes the specified byte memory range to the pipe and makes data accessible to the <see cref="T:System.IO.Pipelines.PipeReader" />.</span></span></summary>
        <returns><span data-ttu-id="fe46a-153">Zadanie, które reprezentuje asynchroniczną operację zapisu, i otacza operację asynchroniczną opróżniania.</span><span class="sxs-lookup"><span data-stu-id="fe46a-153">A task that represents the asynchronous write operation, and wraps the flush asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
