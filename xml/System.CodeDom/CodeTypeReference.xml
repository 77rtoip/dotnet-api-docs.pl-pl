<Type Name="CodeTypeReference" FullName="System.CodeDom.CodeTypeReference">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2455b43fddb32549a443564aec8b89bb01619d72" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30440436" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeTypeReference : System.CodeDom.CodeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeReference extends System.CodeDom.CodeObject" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeReference" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeReference&#xA;Inherits CodeObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeReference : System::CodeDom::CodeObject" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje odwołanie do typu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.CodeDom.CodeTypeReference> obiekt jest używany do reprezentowania typu dla obiektów CodeDOM. Gdy typy CodeDOM mają `Type` właściwość jest typu <xref:System.CodeDom.CodeTypeReference>. Na przykład <xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType> jest właściwość <xref:System.CodeDom.CodeTypeReference> reprezentujący typ danych pola.  
  
 A <xref:System.CodeDom.CodeTypeReference> mogą być inicjowane z <xref:System.Type> obiektu lub ciąg. Ogólnie zaleca się używania <xref:System.Type> Aby to zrobić, mimo że jego może nie zawsze jest możliwe. Jeśli inicjowanie wystąpienia tej klasy z ciągiem, zaleca zawsze używaj typów pełną, takich jak "System.Console", a nie tylko "Konsola", ponieważ nie obsługuje wszystkich języków importowania przestrzeni nazw. Można określić typy tablic za przekazywanie w obiekcie typu dla tablicy albo przy użyciu jednego z konstruktorów, które akceptują rangę jako parametr.  
  
 <xref:System.CodeDom.CodeTypeReference.BaseType%2A> Właściwość określa nazwę typu, aby odwołać. Odwołania do typów tablicowych <xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A> właściwość wskazuje typ elementów tablicy i <xref:System.CodeDom.CodeTypeReference.ArrayRank%2A> właściwość wskazuje liczbę wymiarów tablicy.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.CodeDom.CodeTypeReference> do reprezentowania odwołania do typu.  
  
 [!code-cpp[CodeTypeOfExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeOfExample/CPP/codetypeofexample.cpp#2)]
 [!code-csharp[CodeTypeOfExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeOfExample/CS/codetypeofexample.cs#2)]
 [!code-vb[CodeTypeOfExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeOfExample/VB/codetypeofexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu określonego typu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor tworzy pustą <xref:System.CodeDom.CodeTypeReference> obiektu.  Jeśli używasz tego konstruktora właściwości do ustanawiania odwołanie do typu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (System.CodeDom.CodeTypeParameter typeParameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeTypeParameter typeParameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeParameter As CodeTypeParameter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::CodeDom::CodeTypeParameter ^ typeParameter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeParameter" Type="System.CodeDom.CodeTypeParameter" />
      </Parameters>
      <Docs>
        <param name="typeParameter">A <see cref="T:System.CodeDom.CodeTypeParameter" /> reprezentujący typ parametru typu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu określonego kodu parametru typu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::String ^ typeName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">Nazwa typu ma dotyczyć odwołanie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu określonej nazwy typu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `typeName` odwołuje się do parametru typu ogólnego, musi on być zgodny z konwencjami składni dla typów ogólnych. Na przykład podpis odbicia dla <xref:System.Collections.Generic.Dictionary%602> typu, których `K` jest ciągiem i `V` jest <xref:System.Collections.Generic.List%601> liczb całkowitych, jest reprezentowana przez odbicie w następujący sposób (z informacjami o zestawie usunięte): ``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``.  
  
> [!NOTE]
>  Nawiasy kwadratowe ([]) i nie C# nawiasu ostrego (<>) należy użyć do rozdzielenia parametrów ogólnych.  
  
 Aby uniknąć możliwości popełnienia błędu określania składni, należy rozważyć użycie konstruktora, który przyjmuje jako parametr zamiast ciągu typu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> Do odwołania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu określonego typu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (System.CodeDom.CodeTypeReference arrayType, int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeTypeReference arrayType, int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (arrayType As CodeTypeReference, rank As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::CodeDom::CodeTypeReference ^ arrayType, int rank);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="arrayType" Type="System.CodeDom.CodeTypeReference" />
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arrayType">A <see cref="T:System.CodeDom.CodeTypeReference" /> wskazujące typ tablicy.</param>
        <param name="rank">Liczba wymiarów tablicy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu określonej tablicy typu i rangę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor może służyć do tworzenia tablic zawierających tablice przez zagnieżdżanie <xref:System.CodeDom.CodeTypeReference> obiektów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (string typeName, params System.CodeDom.CodeTypeReference[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, class System.CodeDom.CodeTypeReference[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, ParamArray typeArguments As CodeTypeReference())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::String ^ typeName, ... cli::array &lt;System::CodeDom::CodeTypeReference ^&gt; ^ typeArguments);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.CodeDom.CodeTypeReference[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeName">Nazwa typu ma dotyczyć odwołanie.</param>
        <param name="typeArguments">Tablica <see cref="T:System.CodeDom.CodeTypeReference" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu argumentów nazwę i typ określonego typu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (string typeName, System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, valuetype System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, codeTypeReferenceOption As CodeTypeReferenceOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::String ^ typeName, System::CodeDom::CodeTypeReferenceOptions codeTypeReferenceOption);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="codeTypeReferenceOption" Type="System.CodeDom.CodeTypeReferenceOptions" />
      </Parameters>
      <Docs>
        <param name="typeName">Nazwa typu ma dotyczyć odwołanie.</param>
        <param name="codeTypeReferenceOption">Opcja odwołania typu kodu, jeden z <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu określonej nazwy typu i kodu opcji odwołanie do typu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (string baseType, int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseType, int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseType As String, rank As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::String ^ baseType, int rank);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseType" Type="System.String" />
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="baseType">Nazwa typu elementu tablicy.</param>
        <param name="rank">Liczba wymiarów tablicy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu nazwy typu określonej tablicy i rangę.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (Type type, System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, valuetype System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(Type ^ type, System::CodeDom::CodeTypeReferenceOptions codeTypeReferenceOption);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="codeTypeReferenceOption" Type="System.CodeDom.CodeTypeReferenceOptions" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> Do odwołania.</param>
        <param name="codeTypeReferenceOption">Opcja odwołania typu kodu, jeden z <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.CodeTypeReference" /> przy użyciu określonego typu i kodu typu odwołania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayElementType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference ArrayElementType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReference ArrayElementType" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.ArrayElementType" />
      <MemberSignature Language="VB.NET" Value="Public Property ArrayElementType As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReference ^ ArrayElementType { System::CodeDom::CodeTypeReference ^ get(); void set(System::CodeDom::CodeTypeReference ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ elementów w tablicy.</summary>
        <value>A <see cref="T:System.CodeDom.CodeTypeReference" /> wskazujące typ elementów tablicy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To jest ignorowana, chyba że <xref:System.CodeDom.CodeTypeReference.ArrayRank%2A> właściwość jest większa niż lub równa 1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayRank">
      <MemberSignature Language="C#" Value="public int ArrayRank { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArrayRank" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.ArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Property ArrayRank As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArrayRank { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rangą tablicy w tablicy.</summary>
        <value>Liczba wymiarów tablicy.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public string BaseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseType" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę typu, do którego nastąpiło odwołanie.</summary>
        <value>Nazwa typu, do którego nastąpiło odwołanie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zawiera nazwę typu, o ile nie jest typem tablicy, w tym przypadku jest typ elementu tablicy.  
  
> [!NOTE]
>  Nazwa właściwości może być mylące. Ta właściwość zawiera tylko nazwę typu z dowolnego skojarzenia tablica lub argumentów typu ogólnego usunąć, nie typ podstawowy lub element nadrzędny jak można się spodziewać. Na przykład <xref:System.CodeDom.CodeTypeReference.BaseType%2A> wartość ``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]`` jest ``System.Collections.Generic.Dictionary`2``.  
  
## <a name="representation-of-generic-types"></a>Reprezentacja typów ogólnych  
 Informacje przedstawione w tej sekcji jest przeznaczony dla deweloperów dostawcy CodeDom i dotyczy tylko języki zgodne ze specyfikacją CLS. Zwracana wartość może zawierać typów ogólnych. Typy ogólne są sformatowane nazwę typu, a następnie akcent ("" ") a po niej liczbę argumentów typu ogólnego. Argumenty typu ogólnego znajdują się w <xref:System.CodeDom.CodeTypeReferenceCollection> zwrócony przez <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> właściwości. Wartości zwracane przez <xref:System.CodeDom.CodeTypeReference.BaseType%2A> oraz skojarzonych z nimi <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> tę samą zawartość jako wartość typ zwracany przez odbicie.  
  
 Na przykład skonstruowane <xref:System.Collections.Generic.Dictionary%602> gdzie `K` jest ciągiem i `V` jest zbudowany <xref:System.Collections.Generic.List%601> liczb całkowitych jest reprezentowana przez odbicie w następujący sposób (z informacjami o zestawie usunięte):  
  
```  
System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]  
```  
  
 Podczas analizowania rekursywnie <xref:System.CodeDom.CodeTypeReference.BaseType%2A> właściwość z <xref:System.CodeDom.CodeTypeReference> dla <xref:System.Collections.Generic.Dictionary%602> daje w wyniku tego samego ciągi jako reprezentacja odbicia powyżej:  
  
-   <xref:System.CodeDom.CodeTypeReference.BaseType%2A> Właściwości nadrzędnego <xref:System.CodeDom.CodeTypeReference> zwraca następujące:  
  
    ```  
    System.Collections.Generic.Dictionary`2  
    ```  
  
-   <xref:System.CodeDom.CodeTypeReference.BaseType%2A> Właściwości pierwszy <xref:System.CodeDom.CodeTypeReference> obiektu w <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> kolekcji zwraca następujące:  
  
    ```  
    System.String  
    ```  
  
-   <xref:System.CodeDom.CodeTypeReference.BaseType%2A> Właściwości dla drugiego <xref:System.CodeDom.CodeTypeReference> obiektu w <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> kolekcji zwraca następujące:  
  
    ```  
    System.Collections.Generic.List`1  
    ```  
  
-   <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> Właściwości w <xref:System.CodeDom.CodeTypeReference> obiekt do ``System.Collections.Generic.List`1`` zwraca następujące:  
  
    ```  
    System.Int32  
    ```  
  
 Liczba argumentów typu używanego podczas analizowania skojarzony <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> wartości. Popularną praktyką jest usunięcie liczby argumentów typu z wygenerowanego kodu, ale praktyką jest określonych kompilatora.  Należy pamiętać, że liczba argumentów typu można znaleźć w nazwie typu zagnieżdżonego, w tym przypadku jest za znakiem plus ("+").  
  
> [!NOTE]
>  Podczas tworzenia ogólnego <xref:System.CodeDom.CodeTypeReference>, zalecanym rozwiązaniem jest określenie argumentów typu jako <xref:System.CodeDom.CodeTypeReference> obiektów lub użyj konstruktora, który przyjmuje <xref:System.Type>. Użyj konstruktora, który tworzy <xref:System.CodeDom.CodeTypeReference> z ciągu może prowadzić do błędów undiscoverable argumentu typu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.CodeTypeReferenceOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As CodeTypeReferenceOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceOptions Options { System::CodeDom::CodeTypeReferenceOptions get(); void set(System::CodeDom::CodeTypeReferenceOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opcję odwołania typu kodu.</summary>
        <value>Bitowe połączenie <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> wartości.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.TypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeArguments As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ TypeArguments { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera argumentów typu dla bieżącego odwołania typu ogólnego.</summary>
        <value>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> zawierający argumentów typu dla bieżącego <see cref="T:System.CodeDom.CodeTypeReference" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> Właściwości to zbiór odwołania do typu do zastąpienia dla odwołań do parametru typu bieżącego typu ogólnego. Kolekcja zawiera wszystkich argumentów typu dla wszystkich typów zagnieżdżonych. Na przykład zobacz <xref:System.CodeDom.CodeTypeReference.BaseType%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>