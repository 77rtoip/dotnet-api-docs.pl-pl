<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeTypeDeclaration.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac552c8bfcbe9527832064fa06fd15fae096ecb1cf0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52c8bfcbe9527832064fa06fd15fae096ecb1cf0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">Reprezentuje deklaracji typu klasy, struktury, interfejsu lub wyliczenia.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> może być używana do reprezentowania kodu, który deklaruje klasy, struktury, interfejsu lub wyliczenia.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to declare a type that is nested within another type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> można zadeklarować typu, który jest zagnieżdżony w ramach innego typu.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> property specifies the base type or base types of the type being declared.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> Właściwość określa typ podstawowy lub typy podstawowe typu został zadeklarowany.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> Właściwość zawiera elementy członkowskie typu, które mogą obejmować metody, pola, właściwości, komentarze i innych typów.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property indicates the <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> Właściwość wskazuje <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> dla deklaracji typu wartości, które wskazują kategorii typu typu.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>, I <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph> metody informujące o powodzeniu typu klasy, struktury, wyliczenia lub typu interfejsu, odpowiednio.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">Niektóre języki programowania obsługuje tylko deklaracji typów referencyjnych i klas.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method to test for the appropriate <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags.</source>
          <target state="translated">Aby sprawdzić generator kodu CodeDOM specyficzny dla języka dla pomocy technicznej deklarowania interfejsy, wyliczenia lub typu wartości, należy wywołać <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> metody do testowania dla odpowiedniej <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flagi.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> indicates support for interfaces, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph> indicates support for enumerations, and <ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph> indicates support for value types such as structures.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> Wskazuje obsługę interfejsów, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph> wskazuje obsługę wyliczenia, i <ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph> wskazuje pomocy technicznej dla typów wartości, takich jak struktury.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">Tworzenie klasy lub struktury implementacji w jednej deklaracji pełną lub ich rozmieszczenie do wykonania wielu deklaracji.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property indicates whether the type declaration is complete or partial.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> Właściwość wskazuje, czy deklaracja typu jest pełną lub częściową.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">Nie wszystkie generatory kodu obsługuje deklaracji typu częściowego, dlatego należy przetestować obsługę wywołując <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> metody z flagą <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to declare a type.</source>
          <target state="translated">W tym przykładzie pokazano, przy użyciu <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> Aby zadeklarować typu.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>The name for the new type.</source>
          <target state="translated">Nazwa nowego typu.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class with the specified name.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> klasy o określonej nazwie.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>Gets the base types of the type.</source>
          <target state="translated">Pobiera typy podstawowe typu.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> object that indicates the base types of the type.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> obiekt, który wskazuje typy podstawowe typu.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <ph id="ph1">&lt;xref:System.Object&gt;</ph> as the first item in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> collection.</source>
          <target state="translated">Aby wygenerować klasy w Visual Basic, który nie dziedziczy z typu podstawowego, ale który implementuje jeden lub więcej interfejsów, należy uwzględnić <ph id="ph1">&lt;xref:System.Object&gt;</ph> jako pierwszy element <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>In the .NET Framework version 2.0 you do not need the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph2">&lt;xref:System.Object&gt;</ph> if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">W programie .NET Framework w wersji 2.0, nie trzeba <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> dla <ph id="ph2">&lt;xref:System.Object&gt;</ph> Jeśli interfejsu w przypadku wdrażania już istnieje i odwołujące się do niego według typu.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>For example, if you are implementing the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface and add it to the collection with this statement, <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">Na przykład w przypadku wdrażania <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interfejsu i dodaj go do kolekcji z tej instrukcji <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, nie trzeba poprzedniego <ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> instrukcji.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The following code illustrates the addition of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> to the collection that refers to <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Poniższy kod ilustruje dodanie <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> do kolekcji, która odwołuje się do <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">Poprzedni kod generuje odpowiednikiem następującego kodu języka Visual Basic.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>However, the Visual Basic code actually generated is the following.</source>
          <target state="translated">Kod Visual Basic faktycznie generowany jest jednak poniżej.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">Pobiera lub ustawia wartość wskazującą, czy typ jest typem klasy lub odwołanie.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a class or reference type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli typ jest typem klasy lub odwołania; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">Pobiera lub ustawia wartość wskazującą, czy typ jest wyliczeniem.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an enumeration; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli typ jest wyliczeniem; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">Pobiera lub ustawia wartość wskazującą, czy typ jest interfejsem.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an interface; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli typ jest interfejsem; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">Pobiera lub ustawia wartość wskazującą, czy deklaracja typu jest pełną lub częściową.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class or structure declaration is a partial representation of the implementation; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> w przypadku deklaracji klasy lub struktury reprezentację częściowa implementacja; <ph id="ph2">&lt;see langword="false" /&gt;</ph> czy deklaracja jest pełna implementacja klasy lub struktury.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">Tworzenie klasy lub struktury implementacji w jednej deklaracji pełną lub ich rozmieszczenie do wykonania wielu deklaracji.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">Implementacje często są określane w deklaracji typu pełną.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In this case, set the type declaration <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">W takim przypadku należy ustawić deklaracji typu <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> właściwości <ph id="ph2">`false`</ph>, co oznacza, że Deklaracja typu reprezentuje wszystkie szczegóły implementacji klasy lub struktury.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">Deklaracja typu częściowego ułatwia tworzenie różnych części implementacji klasy lub struktury w różnych modułach aplikacji.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">Deklaracje typu częściowego mogą być przechowywane w jednym pliku źródłowego lub rozłożyć na wiele plików źródłowych kompilowanych ostatecznie razem do utworzenia implementacji typu połączonych.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">W języku C# obsługuje typ częściowe deklaracje klas i struktur za pomocą <ph id="ph1">`partial`</ph> — słowo kluczowe.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic obsługuje typ częściowe deklaracje klas i struktur z <ph id="ph1">`Partial`</ph> — słowo kluczowe.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">Nie wszystkie generatory kodu obsługuje deklaracji typu częściowego, dlatego należy przetestować obsługę wywołując <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> metody z flagą <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Partial type declarations are supported for classes and structures.</source>
          <target state="translated">Deklaracje typu częściowego są obsługiwane dla klas i struktur.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">Jeśli określisz deklaracji typu częściowego, wyliczenie lub interfejs wygenerowany kod tworzy błędy kompilatora.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>When supplying a class or structure implementation across multiple declarations, set the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">Ustaw dostarczając implementację klasy lub struktury w wielu deklaracjach <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> właściwości <ph id="ph2">`true`</ph> początkowej deklaracji i wszystkie dodatkowe deklaracje.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">Początkowej deklaracji pełni określić typ podpisu, takich jak modyfikatory dostępu dziedziczone typy i zaimplementowane interfejsy.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">Dodatkowe deklaracje nie trzeba ponownie Określ podpis typu.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">Błąd kompilatora zwykle powoduje podczas zmiany definicji podpis typu w deklaracji dodatkowych.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 używa typów częściowych do oddzielania kod wygenerowany przez użytkownika z projektanta kodu.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">W projektach Visual Basic aplikacji systemu Windows, kod użytkownika znajduje się w klasie częściowej, który nie jest kwalifikowana przez <ph id="ph1">`Partial`</ph> — słowo kluczowe; podane projektanta kod pojawia się w częściowej klasy, która ma <ph id="ph2">`Partial`</ph> — słowo kluczowe.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">W języku C#, zarówno kod użytkownika i kodu projektanta wyświetlane w częściowej klasy oznaczona <ph id="ph1">`partial`</ph> — słowo kluczowe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to supply a class implementation across multiple declarations.</source>
          <target state="translated">W tym przykładzie pokazano, przy użyciu <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> dostarczyć implementację klasy w wielu deklaracjach.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The example builds the initial class declaration statement and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Przykład kompilacje instrukcji deklaracji klasy początkowej i ustawia <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> właściwości <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A different method in the example extends the class implementation.</source>
          <target state="translated">Inna metoda w tym przykładzie rozszerza implementacji klasy.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This method builds a new type declaration statement for the existing class and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Ta metoda tworzy nowy instrukcji deklaracji typu dla istniejącej klasy i zestawów <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> właściwości <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The compiler combines the two partial type declarations together for the complete class implementation.</source>
          <target state="translated">Kompilator łączy dwie deklaracje typu częściowego ze sobą w celu wykonania pełnej klasy.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">Pobiera lub ustawia wartość wskazującą, czy typ jest typem wartości (struktury).</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a value type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli typem jest typ wartości; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">Pobiera kolekcję elementów członkowskich klasy dla typu reprezentowanego.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> object that indicates the class members.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> obiekt, który wskazuje elementów członkowskich klasy.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated">Występuje, gdy <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph> kolekcji jest dostępny po raz pierwszy.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated">Występuje, gdy <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph> kolekcji jest dostępny po raz pierwszy.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">Pobiera lub ustawia atrybuty typu.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> object that indicates the attributes of the type.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> obiekt, który określa atrybuty typu.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> property contains the same type of values used by <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> when investigating a type at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> Właściwość zawiera ten sam typ wartości używane przez <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> podczas badania typu w czasie wykonywania.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">Wiele z tych flag nie odpowiadają Składnia deklaracji typu w przypadku niektórych języków.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>As a result, only the following flags are significant to <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> : <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>, and <ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>.</source>
          <target state="translated">W związku z tym tylko następujące flagi są istotne dla <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> : <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>, i <ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Some of the flags such as <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph> overlap with the meaning of flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property of <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> that is inherited from <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>.</source>
          <target state="translated">Niektórych flag, takich jak <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph> nakłada się znaczenie flagi w <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> właściwość <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> który odziedziczone <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property is a side effect of the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> class inheriting from <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph> so that classes can be nested.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> Właściwość jest efektem ubocznym <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> dziedziczenia z klasy <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph> , dzięki czemu mogą być zagnieżdżane klasy.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The flags in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property should be used instead of the flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">Flagi w <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> właściwość powinna być używana zamiast flagi w <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The pattern for setting the visibility flags (flags containing the words <ph id="ph1">`Public`</ph> or <ph id="ph2">`Nested`</ph>) is to mask out all visibility flags using the <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph> and then set the desired visibility flag.</source>
          <target state="translated">Wzorzec do ustawiania flagi widoczności (flagi zawierające słowa <ph id="ph1">`Public`</ph> lub <ph id="ph2">`Nested`</ph>) jest zamaskowanie widoczność wszystkie flagi przy użyciu <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph> , a następnie ustaw wartość flagi widoczności żądany.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>For example, the C# code statement to identify the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (named <ph id="ph2">`cd`</ph>) as an internal class is <ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">Na przykład C# instrukcja kodu do identyfikowania <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (o nazwie <ph id="ph2">`cd`</ph>) jest klasą wewnętrzną <ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">Kod, aby ustawić tę samą wartość w języku Visual Basic <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Setting the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property directly to a visibility flag (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">Ustawienie <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> właściwości bezpośrednio do flaga widoczności (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) powoduje usunięcie wszystkich flag, które mogą być ustawione.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">Pobiera parametry typu dla deklaracji typu.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph> that contains the type parameters for the type declaration.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph> zawiera parametry typu dla deklaracji typu.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">Deklaracja typu ogólnego zawiera jeden lub kilka nieokreślonych typy znane jako parametrów typu.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">Nazwa parametru typu oznacza typu w treści deklaracja ogólna.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For example, the generic declaration for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains the type parameter <ph id="ph2">`T`</ph>.</source>
          <target state="translated">Na przykład deklaracja ogólna dla <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> klasa zawiera parametr typu <ph id="ph2">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji dotyczących typów ogólnych, zobacz <bpt id="p1">[</bpt>typy ogólne w bibliotece klas programu .NET Framework<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>