<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeBinaryOperatorExpression.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5315206703cd49a783aa43e2c6ee62f7f6153c560.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">315206703cd49a783aa43e2c6ee62f7f6153c560</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeBinaryOperatorExpression">
          <source>Represents an expression that consists of a binary operation between two expressions.</source>
          <target state="translated">Reprezentuje wyrażenie, które składa się z operacją danych binarnych między dwoma wyrażeniami.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeBinaryOperatorExpression">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeBinaryOperatorExpression&gt;</ph> can be used to represent code expressions that include a binary operator.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeBinaryOperatorExpression&gt;</ph> może być używana do reprezentowania wyrażenia kodu, które obejmują operator binarny.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeBinaryOperatorExpression">
          <source>Some examples of binary operators are equality (<ph id="ph1">`==`</ph>), addition (<ph id="ph2">`+`</ph>), and bitwise (<ph id="ph3">`|`</ph>) operators.</source>
          <target state="translated">Przykłady operatorów binarnych są równości (<ph id="ph1">`==`</ph>), dodanie (<ph id="ph2">`+`</ph>) i bitowe (<ph id="ph3">`|`</ph>) operatorów.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeBinaryOperatorExpression">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeBinaryOperatorType&gt;</ph> enumeration represents a set of basic, commonly used binary operators that are supported in many languages.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeBinaryOperatorType&gt;</ph> Wyliczenie reprezentuje zestaw podstawowy, często używane operatorów binarnych, które są obsługiwane w wielu językach.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeBinaryOperatorExpression">
          <source>This example demonstrates use of a <ph id="ph1">&lt;xref:System.CodeDom.CodeBinaryOperatorExpression&gt;</ph> to add two numbers together.</source>
          <target state="translated">W tym przykładzie przedstawiono użycie <ph id="ph1">&lt;xref:System.CodeDom.CodeBinaryOperatorExpression&gt;</ph> Aby jednocześnie dodać dwóch liczb.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeBinaryOperatorExpression">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> on the left of the operator.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> Po lewej stronie operatora.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorType" /&gt;</ph> indicating the type of operator.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorType" /&gt;</ph> wskazujący rodzaj operatora.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> on the right of the operator.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> Po prawej stronie operatora.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /&gt;</ph> class using the specified parameters.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /&gt;</ph> przy użyciu określonych parametrów.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
          <source>Gets or sets the code expression on the left of the operator.</source>
          <target state="translated">Pobiera lub ustawia kod wyrażenie po lewej stronie operatora.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> that indicates the left operand.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> wskazujące Lewy argument operacji.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
          <source>Gets or sets the operator in the binary operator expression.</source>
          <target state="translated">Pobiera lub ustawia operator w wyrażeniu operatora binarnego.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorType" /&gt;</ph> that indicates the type of operator in the expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeBinaryOperatorType" /&gt;</ph> wskazujący rodzaj operatora w wyrażeniu.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
          <source>A binary operator performs an evaluation on two operands.</source>
          <target state="translated">Operator binarny dokonuje oceny dwóch argumentów operacji.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
          <source>Some examples of binary operators are equality (<ph id="ph1">`==`</ph>), addition (<ph id="ph2">`+`</ph>), and bitwise (<ph id="ph3">`|`</ph>) operators.</source>
          <target state="translated">Przykłady operatorów binarnych są równości (<ph id="ph1">`==`</ph>), dodanie (<ph id="ph2">`+`</ph>) i bitowe (<ph id="ph3">`|`</ph>) operatorów.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
          <source>Many commonly used binary operators can be found in the <ph id="ph1">&lt;xref:System.CodeDom.CodeBinaryOperatorType&gt;</ph> enumeration.</source>
          <target state="translated">Wiele typowych operatorów binarnych znajdują się w <ph id="ph1">&lt;xref:System.CodeDom.CodeBinaryOperatorType&gt;</ph> wyliczenia.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
          <source>Gets or sets the code expression on the right of the operator.</source>
          <target state="translated">Pobiera lub ustawia kod wyrażenie po prawej stronie operatora.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> that indicates the right operand.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> wskazujące prawy argument operacji.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>