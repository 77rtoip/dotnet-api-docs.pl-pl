<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51155de7d23c7958800f502e0aaf995f864d8b09" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69394478" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia obiekt, który umożliwia dwóm <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontrolkom połączenie. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W składniki Web Part zestawie kontrolnym połączenie to link lub skojarzenie między dwoma <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolkami (lub innymi serwerami lub użytkownikami), które umożliwiają im udostępnianie danych. Ta możliwość udostępniania danych umożliwia używanie połączonych kontrolek w sposób, który przekracza funkcje oferowane przez izolowane kontrolki. Na przykład, jeśli jedna kontrolka zawiera dane kodu pocztowego, a inna kontrolka może odczytywać te dane i podawać lokalne informacje o pogodzie na podstawie kodu pocztowego, wówczas połączona możliwość dwóch formantów zapewnia więcej wartości użytkownikom. Aby zwiększyć ten przykład, można utworzyć inne kontrolki, które zawierają również informacje na podstawie kodu pocztowego, takie jak kontrolka z linkami do wiadomości lokalnych i wszystkie te kontrolki, które mogą współpracowały z danymi kodu pocztowego, mogą współużytkować dane z pojedynczym formantem, który udostępnia kod pocztowy. Użytkownicy końcowi aplikacji składniki Web Part mogą tworzyć i zarządzać połączeniami między wszystkimi takimi zgodnymi kontrolkami bezpośrednio z przeglądarki sieci Web przy użyciu interfejsu użytkownika połączenia standardowego (UI) <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> dostarczonego przez formant lub przy użyciu niestandardowego interfejsu użytkownika dostarczonego przez pisał.  
  
 Ten <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> przegląd klas zawiera ogólne zestawienie podstawowych informacji na temat tworzenia połączenia. Aby uzyskać więcej informacji na temat określonych składników i wymagań związanych z tworzeniem połączeń, zobacz [składniki Web Part Connections — Omówienie](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100))lub zapoznaj się z klasami referencyjnymi i przykładami kodu wymienionymi w poniższej dyskusji. Istnieje kilka podstawowych aspektów połączenia składniki Web Part:  
  
-   Dwie <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Każde połączenie składniki Web Part składa się z dwóch kontrolek. Istnieje możliwość, aby kontrolka jednocześnie uczestniczyła w więcej niż jednym połączeniu, ale każde pojedyncze połączenie składa się z dokładnie dwóch kontrolek. Formanty mogą pochodzić bezpośrednio z <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy bazowej lub mogą być innymi kontrolkami serwera, w tym kontrolkami ASP.NET, niestandardowymi kontrolkami serwera i kontrolkami użytkownika. Kontrolki, które nie pochodzą z <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy, jeśli <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> są umieszczone <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> w strefie, są automatycznie zawijane z obiektem w czasie wykonywania <xref:System.Web.UI.WebControls.WebParts.WebPart> , co umożliwia im dziedziczenie z klasy i funkcji jako czasu <xref:System.Web.UI.WebControls.WebParts.WebPart> wykonywania kontrolek.  
  
-   Kontrolki znajdujące <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> się w strefach. Zarówno <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, jak i każdy inny typ formantu serwera muszą znajdować <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> się w strefie, aby można było uczestniczyć w połączeniach składniki Web Part (i większość innych funkcji składniki Web Part).  
  
-   Konsumenci i dostawcy. W każdym składniki Web Part połączenia istnieją dwie kontrolki: dostawca danych i odbiorca danych. Dostawca dostarcza dane do konsumenta za pomocą określonej metody wywołania zwrotnego, która zwraca dane w postaci interfejsu. (Przykład tworzenia i określania metody wywołania zwrotnego można znaleźć w sekcji przykład w tym temacie). Ta metoda wywołania zwrotnego jest znana jako punkt połączenia dostawcy. Szczegóły tego punktu połączenia (jego "przyjaznej" nazwy, identyfikatora i typu zwracanego interfejsu) są zawarte w <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekcie skojarzonym z kontrolką dostawcy. Odbiorca otrzymuje dane za pomocą określonej metody, która może akceptować wystąpienie interfejsu. Ta metoda jest znana jako punkt połączenia z klientem, a szczegóły punktu połączenia (nazwa, identyfikator i typ interfejsu) są zawarte w <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekcie skojarzonym z kontrolką klienta.  
  
-   Zgodne kontrolki lub prawidłowy transformator. Aby połączenie działało, odbiorca i dostawca muszą być zgodne (co oznacza, że ich określone metody punktu połączenia mogą pracować z tym samym typem interfejsu) lub musi istnieć <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt, który może przetłumaczyć typ oferowany przez Dostawca na typ zrozumiały dla konsumenta.  
  
-   Element <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu. Aby połączenie było istniejące, musi istnieć wystąpienie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> klasy, która zawiera odwołania do dostawcy i kontroli odbiorców wraz ze szczegółami ich punktów połączenia. Jeśli dostawca i odbiorca są niezgodne i zamiast tego <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> używają obiektu, połączenie odwołuje się do transformatora.  
  
-   Sposób nawiązywania połączenia. Po poprawnym zaprojektowaniu zgodnych kontrolek odbiorca i dostawca przy użyciu metod punktu połączenia i umieszczonych w strefie oraz <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> gdy obiekt jest dostępny, ostatni podstawowy krok wymagany jest zainicjowanie połączenia. Jednym ze sposobów może być to, aby użytkownicy mogli utworzyć połączenie za pomocą interfejsu użytkownika. Jeśli umieścisz `<asp:connectionszone>` element na stronie, a pozostałe wymagane składniki połączenia są stosowane, w czasie wykonywania użytkownik może przełączyć stronę w tryb wyświetlania połączenia, a następnie kliknąć Zlecenie Połącz w menu czasowników dostawcy lub odbiorcy i zostanie wyświetlony interfejs użytkownika połączenia (na podstawie <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolki). Za pomocą tego interfejsu użytkownika użytkownik może zainicjować połączenie. Innym sposobem na zainicjowanie połączenia jest jego programowe przeprowadzenie. Niezależnie od tego, czy za pomocą interfejsu użytkownika, czy programowo, podstawowa metoda inicjująca połączenie jest taka sama. Aplikacja wywołuje <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę (lub metodę, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Jeśli używasz transformatora) na <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolce, przekazując do niej dostawcę, odbiorcę i odpowiednie obiekty <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> punktu połączenia, a metoda zwraca Stream.  
  
 Klasa definiuje obiekt, który hermetyzuje podstawowe szczegóły połączenia między dwoma <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolkami. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klasa składa się z niemal całości właściwości związanych ze szczegółami konkretnego połączenia. Niektóre właściwości dotyczą kontroli konsumenta w połączeniu. Właściwość odwołuje się do samej kontroli konsumenta, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> a Właściwość odwołuje się do identyfikatora odbiorcy. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Obiekt, który zawiera szczegółowe informacje o punkcie połączenia konsumenta, jest przywoływany przez <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> Właściwość konsumenta. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Właściwość odwołuje się do identyfikatora <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Wszystkie te właściwości połączenia związane z klientem muszą mieć przypisaną wartość, aby można było utworzyć połączenie.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klasa ma również kilka właściwości, które odnoszą się do kontrolki dostawcy w ramach połączenia, i odpowiadają właściwościom odbiorcy. Właściwość odwołuje się do samej kontroli dostawcy, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> natomiast Właściwość odwołuje się do jej identyfikatora. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Właściwość odwołuje się <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> do obiektu, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Właściwość odwołuje się do identyfikatora punktu połączenia dostawcy. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>  
  
 Niektóre właściwości dotyczą stanu połączenia. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Właściwość wskazuje, czy połączenie jest aktywne (aktualnie wymienia dane) czy nieaktywne (nadal połączone, ale nie udostępniają aktywnie danych). Właściwość wskazuje, czy połączenie jest udostępniane (dostępne dla wszystkich użytkowników strony) czy połączenie specyficzne dla użytkownika, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> a właściwość wskazuje, czy formant jest statyczny (zadeklarowany w znaczniku strony i w ten sposób trwały). <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> dynamiczne (utworzone programowo, co oznacza, że można je usunąć).  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób tworzenia prostego połączenia między dwoma <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolkami. Przykład ilustruje trzy sposoby tworzenia połączenia: deklaratywnie, umieszczając Tagi dla połączenia w znaczniku strony sieci Web; programowo, przez utworzenie połączenia w kodzie; i za pomocą interfejsu użytkownika, umieszczając <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> na stronie formant, który umożliwia użytkownikom nawiązanie połączenia.  
  
 Przykład kodu ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa o nazwie `ZipCodeWebPart` implementująca interfejs i działająca jako formant dostawcy. Jego `ProvideIZipCode` Metoda jest metodą wywołania zwrotnego implementującą tylko element członkowski interfejsu. Metoda po prostu zwraca wystąpienie interfejsu. Należy zauważyć, że metoda jest oznaczona `ConnectionProvider` atrybutem w metadanych. Jest to mechanizm identyfikacji metody jako metody wywołania zwrotnego dla punktu połączenia dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa ma nazwę `WeatherWebPart`i działa jako odbiorca połączenia. Ta klasa ma metodę o nazwie `GetZipCode` , która pobiera wystąpienie `IZipCode` interfejsu z kontrolki dostawcy. Należy zauważyć, że ta metoda jest oznaczona jako metoda punktu połączenia konsumenta z `ConnectionConsumer` atrybutem w metadanych.  
  
 Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. W górnej części znajdują `Register` się dyrektywy kontrolki użytkownika i kontrolek <xref:System.Web.UI.WebControls.WebParts.WebPart> niestandardowych. Ponieważ w przykładzie założono dynamiczną kompilację kontrolek, kod źródłowy kontrolek powinien znajdować się w podfolderze App_Code; `Register` tag na stronie odwołuje się tylko do dowolnego prefiksu tagu i przestrzeni nazw formantów. Kontrolki <xref:System.Web.UI.WebControls.WebParts.WebPart> niestandardowe (dostawca i konsument) są zadeklarowane w obrębie `<asp:webpartzone>` elementu strony sieci Web wewnątrz `<zonetemplate>` elementu.  
  
 Strona zawiera trzy sposoby tworzenia połączenia między kontrolkami niestandardowymi. Pierwsza metoda jest deklaratywna. W znaczniku dla strony `<StaticConnections>` jest zadeklarowany element, a w tym `<asp:WebPartConnections>` elemencie, z różnymi szczegółami konsumenta i dostawcy połączenia określonego jako atrybuty. Jest to jeden ze sposobów tworzenia połączenia przez zadeklarowanie go bezpośrednio na stronie sieci Web, w `<asp:WebPartManager>` odniesieniu do elementu. Ze względu na to połączenie statyczne połączenie między dwoma kontrolkami niestandardowymi jest tworzone natychmiast podczas pierwszego ładowania strony.  
  
 Druga metoda tworzenia połączenia między kontrolkami jest zapewniana przez `<asp:connectionszone>` element na stronie. Jeśli użytkownik przełączy stronę w tryb wyświetlania w czasie wykonywania, a następnie kliknie czasownik połączenia na jednym z formantów niestandardowych, `<asp:connectionszone>` element automatycznie renderuje interfejs użytkownika w celu utworzenia połączenia.  
  
 Na stronie przedstawiono również trzeci sposób tworzenia połączenia, co jest możliwe programowo. W metodzie kod <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> tworzy obiekt dla kontrolki dostawcy i pobiera szczegóły <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> punktu połączenia przez wywołanie metody. `Button1_Click` Wykonuje ono podobne zadanie dla kontrolki konsumenta, wywołując <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodę. Na koniec tworzy nowy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt przez <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> wywołanie metody na <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolce.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony sieci Web w przeglądarce pierwsze połączenie już istnieje, ponieważ jest ono zadeklarowane w `<StaticConnections>` elemencie. Wprowadź tekst w kontrolce **dostawca kodu pocztowego** , który będzie wyświetlany w kontrolce odbiorcy. Następnie odłącz dwie kontrolki. Przy użyciu kontrolki lista rozwijana **tryb wyświetlania** Zmień stronę, aby podłączyć tryb wyświetlania. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) dla każdej <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki i zwróć uwagę, że każdy z nich ma opcję **Połącz** . Jest to zlecenie połączenia, które pojawia się w menu czasowniks tylko wtedy, gdy strona jest w trybie Connect. Kliknij zlecenie Connect na jednej z formantów i pojawi się interfejs użytkownika połączenia dostarczony przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formant. Kliknij przycisk **Rozłącz** , aby zakończyć połączenie statyczne między kontrolkami. Użyj kontrolki **tryb wyświetlania** , aby przywrócić stronę do trybu przeglądania. Spróbuj ponownie wprowadzić nowy tekst w dostawcy i zwróć uwagę, że ponieważ formanty są rozłączone, tekst nie zostanie zaktualizowany w kontrolce odbiorcy.  
  
 Następnie użyj tej samej metody, jak powyżej, aby ponownie przełączyć stronę do trybu wyświetlania połączenia. Kliknij zlecenie Connect na jednej z kontrolek. Kliknij link **Utwórz połączenie** i użyj interfejsu użytkownika dostarczonego przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formant, aby utworzyć połączenie między kontrolkami. Jest to druga metoda tworzenia połączenia. Należy pamiętać, że zaraz po nawiązaniu połączenia ostatni ciąg wprowadzony w kontrolce dostawcy (który nie powiódł się, ponieważ formanty zostały rozłączone) nagle pojawia się na odbiorcy, ponieważ połączenie zostało utworzone ponownie. Kliknij przycisk **Rozłącz** , aby zakończyć bieżące połączenie, które właśnie zostało utworzone. Zwróć stronę do trybu przeglądania. Wprowadź nowy tekst w dostawcy, aby zademonstrować, że tekst nie jest aktualizowany i czy kontrolki są ponownie rozłączone.  
  
 Zwróć stronę, aby połączyć się z trybem wyświetlania. Zamiast klikać zlecenie połączenia, kliknij przycisk **kontrolki WebPart** , który ilustruje trzecią metodę tworzenia połączenia. Takie podejście umożliwia programowe łączenie formantów w jednym prostym kroku bez konieczności używania <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formantu. Należy pamiętać, że w przypadku utworzenia połączenia ostatni ciąg wprowadzony w dostawcy nagle jest wyświetlany w kontrolce odbiorcy.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Omówienie połączeń składniki Web Part</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor jest publiczny, tak aby Analizator ASP.NET mógł utworzyć wystąpienie w przypadku zadeklarowania połączenia w znaczniku strony sieci Web; ten konstruktor nie jest przeznaczony do użycia w kodzie dewelopera.  
  
 Aby programowo utworzyć <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt, należy <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> użyć lub <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> metody podanej w <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolce. Te metody obsługują wiele szczegółów tworzenia połączenia i zwracają <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Konstruktor`true`dla klasy ustawia wartości właściwości ina.<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> W związku z tym Domyślnym stanem nowego połączenia jest statyczny (oznacza to, że jest on zadeklarowany w znaczniku zawierającej strony sieci Web) i udostępniony (widoczny dla wszystkich użytkowników strony). Będzie to miało zastosowanie w przypadku dodania połączenia w typowym scenariuszu przez zadeklarowanie połączenia w znaczniku strony z `<asp:webpartconnection>` elementem. Jednak w innych przypadkach połączenie będzie miało różne wartości dla tych właściwości. Na przykład po dodaniu połączenia programowo przez utworzenie obiektu połączenia w kodzie, a użytkownik przegląda stronę w domyślnym zakresie personalizacji użytkownika, połączenie jest tworzone jako dynamiczne, dla użytkownika (widoczne tylko dla określonego użytkownika). połączenia.  
  
> [!NOTE]
>  Właściwości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager> i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> są tylko do odczytu, a te właściwości, które określają charakter połączenia, są ustawiane wewnętrznie przez formant w zależności od sposobu tworzenia połączenia (w sposób deklaratywny w znaczniku strony lub programowo za pomocą kodu lub interfejsu użytkownika.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> Pobiera obiekt, który działa jako kontrola klienta w połączeniu.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> Reprezentuje kontrolkę składniki Web Part działającą jako odbiorca w ramach połączenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde połączenie składniki Web Part obejmuje dwie kontrolki, które współdzielą dane. Jedna kontrola działa jako dostawca danych, a inna kontrola działa jako odbiorca, otrzymywanie i przetwarzanie danych od dostawcy. Właściwość pobiera odwołanie <xref:System.Web.UI.WebControls.WebParts.WebPart> do kontrolki działającej jako odbiorca w relacji połączenia. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> programistyczne właściwości.  
  
 Przykład kodu ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy dla dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów, który służy jako odbiorca i dostawca połączenia oraz interfejs używany dla punktów połączenia. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest kod strony sieci Web, która hostuje kontrolki i demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> właściwości. W górnej części strony znajdują się `Register` dyrektywy kontrolki użytkownika i kontrolek niestandardowych. Ponieważ w tym przykładzie jest `Register` stosowana kompilacja dynamiczna, dyrektywa dla pliku źródłowego nie musi odwoływać się do nazwy zestawu; zawiera tylko dowolny Prefiks tagu i przestrzeń nazw formantów. W metodzie kod uzyskuje dostęp do obiektu połączenia <xref:System.Web.UI.WebControls.WebParts.WebPartManager> za pomocą kontrolki i pobiera odwołanie do kontrolki odbiorcy. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce użyj kontrolki lista rozwijana **tryb wyświetlania** , aby przełączyć stronę do trybu połączenia. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) na jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów i kliknij zlecenie Connect. Aby utworzyć **** połączenie między dwoma kontrolkami, użyj przycisku Controls webwebpart lub podanego interfejsu użytkownika połączenia. Kliknij przycisk **Wyświetl informacje o użytkowniku** , aby uruchomić kod, który <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> demonstruje właściwość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Długość <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> właściwości wynosi zero.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który służy jako punkt połączenia dla kontrolki działającego jako odbiorca w ramach połączenia.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> Skojarzone z kontrolką konsumenta w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednym z kroków wymaganych do utworzenia połączenia między dwoma <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolkami jest utworzenie punktów połączenia dla każdej kontrolki. Punkt połączenia klienta to obiekt, który zawiera informacje o sposobach łączenia się z kontrolką działającą jako klient. W kodzie źródłowym konsumenta jedna z metod musi być identyfikowana przy użyciu `ConnectionConsumer` atrybutu. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Obiekt skojarzony z kontrolką klienta zawiera szczegółowe informacje o metodzie i atrybucie, w tym identyfikator metody, nazwę wyświetlaną do użycia w interfejsie użytkownika (UI) oraz typ interfejsu, który może pobrać Metoda. Ten zestaw informacji na temat konsumenta, jego metody tworzenia połączeń i typ interfejsu, który rozumie, wspólnie stanowi punkt połączenia z klientem.  
  
 Domyślnie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt może łączyć się tylko z jednym <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektem naraz. Odbiorca może mieć wiele metod zidentyfikowanych jako możliwe punkty połączenia z klientem, ale konsument może uczestniczyć tylko w jednym połączeniu jako odbiorca (w związku z tym tylko jeden z tych punktów połączenia z klientem może być aktywny). W przeciwieństwie do <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> programu można łączyć się z dowolną <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> liczbą obiektów. To zachowanie domyślne można zmienić, zastępując <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> Właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> programistyczne właściwości.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy dla dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów, który służy jako odbiorca i dostawca połączenia oraz interfejs używany dla punktów połączenia. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest kod strony sieci Web, która hostuje kontrolki i demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości. W metodzie tworzone są wszystkie obiekty wymagane do utworzenia połączenia, w <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> tym obiekt. `Button1_Click` Wszystkie te obiekty są przesyłane do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metody w celu utworzenia połączenia. W metodzie kod uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> do właściwości i wyświetla niektóre szczegóły punktu połączenia. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce użyj kontrolki lista rozwijana **tryb wyświetlania** , aby przełączyć stronę do trybu połączenia. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) na jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów i kliknij zlecenie Connect. Aby utworzyć połączenie między dwoma kontrolkami, użyj przycisku **kontrolki WebPart** lub podanego połączenia. Kliknij przycisk **szczegóły ConnectionPoint** , aby uruchomić kod, który demonstruje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwość.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości dla połączenia, które odwołuje się do identyfikatora obiektu pełniącego rolę punktu połączenia klienta dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator punktu połączenia odbiorcy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku połączenia statycznego zadeklarowanego w znacznikach strony sieci Web deweloperzy mogą określić, który punkt połączenia klienta będzie używany do połączenia przez przypisanie wartości do `ConsumerConnectionPointID` atrybutu `<asp:webpartconnection>` w elemencie. Jeśli wartość nie jest przypisana do atrybutu, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> zostanie użyta wartość właściwości.  
  
 Podczas tworzenia połączeń dynamicznych (programistycznych) zwykle nie należy ustawiać wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości. Można po prostu wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę <xref:System.Web.UI.WebControls.WebParts.WebPartManager> w kontrolce, przekazać ją do obiektów punktu połączenia konsumenta i klienta (wraz z innymi wymaganymi parametrami), a ta metoda określa poprawny identyfikator do użycia w przypadku połączenia konsumenta. moment. Podobnie po rozłączeniu można wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodę bez konieczności <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> określania wartości właściwości.  
  
> [!NOTE]
>  Identyfikator punktu połączenia konsumenta można określić w przypadku wyznaczania <xref:System.Web.UI.WebControls.WebParts.WebPart> lub innej kontrolki serwera jako odbiorcy. Należy zidentyfikować metodę w odbiorcy pobierającą wystąpienie interfejsu dostarczonego przez formant dostawcy lub transformator. Aby zidentyfikować metodę, oznacz ją `ConnectionConsumer` atrybutem Code. Po dodaniu tego atrybutu można dodać opcjonalny parametr wartości ciągu, który służy jako identyfikator <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu odbiorcy. Jeśli podasz wartość dla opcjonalnego parametru ID, ta wartość będzie wartością <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości połączenia. Jeśli nie podasz wartości identyfikatora, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> zostanie użyta wartość właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje deklaratywne i programistyczne użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. Należy zauważyć, że połączenie jest zadeklarowane w znaczniku strony przy `<StaticConnections>` użyciu `<asp:WebPartsConnection>` elementów i. Deklaracja połączenia zawiera wymagany `ConsumerConnectionPointID` atrybut. Druga metoda tworzenia połączenia pojawia się w metodzie `Button1_Click`, w której kod tworzy nowe połączenie, używając punktu połączenia zdefiniowanego w kontrolce konsumenta. Następnie w metodzie `Button2_Click` kod uzyskuje dostęp do właściwości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne zadeklarowane na stronie. Wprowadź tekst w kontrolce dostawcy i zwróć uwagę na to, że jest on wyświetlany w odbiorcy z powodu połączenia. Następnie odłącz formanty. Przy użyciu kontrolki lista rozwijana **tryb wyświetlania** Przełącz stronę do trybu połączenia. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) na jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów i kliknij zlecenie Connect. Kliknij przycisk **Rozłącz** . Użyj przycisku **kontrolki WebPart** , aby ponownie utworzyć połączenie między dwoma kontrolkami. Kliknij przycisk **szczegóły ConnectionPoint** , aby uruchomić kod, który uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> do wartości właściwości. Wartość jest zapisywana w etykiecie poniżej kontrolek.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości dla połączenia, które odwołuje się do identyfikatora <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontrolki działającej jako odbiorca tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator kontrolki działającej jako odbiorca w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest wymagana podczas tworzenia połączenia między <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolkami. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Jeśli wartość nie jest przypisana do właściwości, zostanie zgłoszony wyjątek, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolka podejmie próbę aktywowania połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje deklaratywne i programistyczne użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> właściwości.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. Należy zauważyć, że połączenie jest zadeklarowane w znaczniku strony przy `<StaticConnections>` użyciu `<asp:WebPartsConnection>` elementów i. Deklaracja połączenia zawiera wymagany `ConsumerID` atrybut. Druga metoda tworzenia połączenia pojawia się w metodzie `Button1_Click`, w której kod tworzy nowe połączenie, używając punktu połączenia zdefiniowanego w kontrolce konsumenta. Następnie, w `Button2_Click` metodzie, kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> właściwości i wyświetla ją w etykiecie.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne zadeklarowane na stronie. Wprowadź tekst w kontrolce dostawcy i zwróć uwagę na to, że jest on wyświetlany w odbiorcy z powodu połączenia. Następnie odłącz formanty. Przy użyciu kontrolki lista rozwijana **tryb wyświetlania** Przełącz stronę do trybu połączenia. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) na jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów i kliknij zlecenie Connect. Kliknij przycisk **Rozłącz** . Użyj przycisku **kontrolki WebPart** , aby ponownie utworzyć połączenie między dwoma kontrolkami. Kliknij przycisk **szczegóły konsumenta** , aby uruchomić kod, który uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> do wartości właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiektu.</summary>
        <value>Ciąg, który zawiera identyfikator <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt ma unikatową wartość przypisaną do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> jego właściwości. Ma to na celu zagwarantowanie, że istnieje sposób rozróżnienia między wieloma połączeniami.  
  
 Jeśli utworzysz połączenie statyczne przez zadeklarowanie `<asp:webpartconnection>` elementu na stronie sieci Web i nie przypiszesz `ID` atrybutu dla połączenia, zostanie zgłoszony <xref:System.Web.UI.WebControls.WebParts.WebPartManager> wyjątek, gdy kontrolka podejmie próbę aktywowania połączenia.  
  
 Gdy formant tworzy nowe połączenie dynamiczne, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> wywołuje metodę w celu wygenerowania unikatowego identyfikatora dla połączenia. <xref:System.Web.UI.WebControls.WebParts.WebPartManager>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje deklaratywne i programistyczne użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> właściwości.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. Należy zauważyć, że połączenie jest zadeklarowane w znaczniku strony przy `<StaticConnections>` użyciu `<asp:WebPartsConnection>` elementów i. Deklaracja połączenia zawiera wymagany `ID` atrybut. Druga metoda tworzenia połączenia pojawia się w metodzie `Button1_Click`, w której kod tworzy nowe połączenie, używając punktu połączenia zdefiniowanego w kontrolce konsumenta. W tym miejscu Właściwość ID nie jest wymagana, ponieważ połączenie jest dynamiczne, a <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolka przypisuje identyfikator do połączenia. W metodzie kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> właściwości i wyświetla ją w etykiecie. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne zadeklarowane na stronie. Wprowadź tekst w kontrolce dostawcy i zwróć uwagę na to, że jest on wyświetlany w odbiorcy z powodu połączenia. Następnie odłącz formanty. Przy użyciu kontrolki lista rozwijana **tryb wyświetlania** Przełącz stronę do trybu połączenia. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) na jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów i kliknij zlecenie Connect. Kliknij przycisk **Rozłącz** . Użyj przycisku **kontrolki WebPart** , aby ponownie utworzyć połączenie między dwoma kontrolkami. Kliknij przycisk **szczegóły połączenia** , aby uruchomić kod, który uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> do wartości właściwości.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiekt jest obecnie ustanowiony i może wymieniać dane między jego dostawcą i kontrolkami konsumenta.</summary>
        <value><see langword="true" />Jeśli połączenie jest aktywne; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość wskazuje stan <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektu. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Gdy połączenie jest w tym stanie, formanty dostawcy i konsumenta w połączeniu komunikują się i mogą wymieniać dane za pomocą wspólnego interfejsu lub <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu.  
  
 Gdy użytkownik przegląda wyrenderowaną stronę, która zawiera ustanowione połączenie w normalnym trybie przeglądania, połączenie jest zazwyczaj aktywne (chyba że nie można go aktywować z powodu konfliktu lub innego problemu podczas ładowania strony). We wczesnych etapach cyklu życia strony i kontroli wartość właściwości to `false`. Połączenie jest aktywowane zaraz po <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> <xref:System.Web.UI.WebControls.WebParts.WebPartManager> podniesieniu zdarzenia na kontrolce. Połączenie jest aktywowane po pobraniu przez konsumenta wystąpienia określonego interfejsu od dostawcy lub <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu.  
  
 Warto wiedzieć, czy połączenie jest aktywne w sytuacjach, w których mogą wystąpić konflikty lub problemy z synchronizacją z powodu wielu połączeń na stronie. Na przykład, jeśli wystąpi jakiś rodzaj konfliktu między dwoma połączeniami, <xref:System.Web.UI.WebControls.WebParts.WebPartManager> formant ma opcję nieaktywacji jednego z połączeń, aby uniknąć konfliktu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> właściwości.  
  
 Przykład ma trzy części:  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 Drugą częścią przykładu kodu jest strona sieci Web. W górnej części znajduje `Register` się dyrektywa odwołująca się do kodu źródłowego dla dwóch dynamicznie skompilowanych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek. Połączenie statyczne jest zadeklarowane w obrębie `<StaticConnections>` elementu na stronie. W obrębie `<script>` elementu są cztery programy obsługi zdarzeń. Każdy program obsługi zdarzeń sprawdza wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> właściwości w połączeniu statycznym i zapisuje komunikat <xref:System.Web.UI.WebControls.Label> do kontrolki wskazujący, czy połączenie jest aktywne, czy nieaktywne, w tym stanie strony i kontroli cyklu życia. Pokazuje to, w którym momencie połączenie zostanie uaktywnione i pozostaje aktywne po wyrenderowaniu strony.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Załaduj stronę w przeglądarce. Połączenie statyczne zostało już utworzone, a wiadomości zostały już zapisaną do etykiet wskazujących, czy połączenie było aktywne w różnych punktach na stronie i w cyklu życia kontroli. Kliknij przycisk **szczegóły połączenia** i pamiętaj, że połączenie nie jest aktywne w tym momencie, ale połączenie jest ponownie uaktywniane za każdym razem po <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> zdarzeniu i nadal aktywne (i pozostanie <xref:System.Web.UI.Control.PreRender> dalej) po wystąpieniu zdarzenia Strona.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiekt jest widoczny dla wszystkich użytkowników, czy tylko dla bieżącego użytkownika.</summary>
        <value><see langword="true" />Jeśli połączenie jest udostępniane; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podobnie jak w <xref:System.Web.UI.WebControls.WebParts.WebPart> przypadku poszczególnych formantów <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> , obiekt może być wystąpieniem udostępnionym lub na użytkownika. Wystąpienie udostępnione oznacza, że połączenie jest widoczne dla wszystkich użytkowników strony sieci Web, a wystąpienie dla każdego użytkownika oznacza, że połączenie jest widoczne tylko dla określonego użytkownika.  
  
 Ogólnie rzecz biorąc, sposób, w jaki połączenie jest dodawane do strony, określa, czy połączenie jest udostępniane. Jeśli połączenie jest zadeklarowane w znaczniku strony sieci Web, połączenie jest udostępniane, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> wartość właściwości to. `true` Ponadto, jeśli po dodaniu połączenia strona sieci Web znajduje się w zakresie współużytkowanego zakresu personalizacji, połączenie jest również udostępniane. Zwykle gdy użytkownik używa `<asp:connectionszone>` interfejsu użytkownika do dodawania połączenia, strona jest w zakresie personalizacji użytkownika, więc połączenie nie jest udostępniane, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> a wartość właściwości to `false`.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje programistyczne użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> właściwości.  
  
 Przykład kodu ma pięć części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wpis w pliku Web. config, który jest wymagany do uruchomienia przykładu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. W metodzie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> sprawdza Właściwość istniejącego połączenia i wyświetla wynik na stronie. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Czwartą częścią przykładu kodu jest wpis w pliku Web. config, który jest wymagany dla konta użytkownika, które będzie uruchamiać przykład, aby można było edytować stronę w zakresie współużytkowanych personalizacji. Aby to umożliwić, musisz mieć wpis w pliku `<system.web>` Web. config w sekcji, która wygląda podobnie do poniższego przykładu.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Po załadowaniu strony w przeglądarce użyj kontrolki lista rozwijana **tryb wyświetlania** , aby przełączyć stronę do trybu wyświetlania połączenia. Kliknij przycisk **Połącz składnik WebPart** , aby utworzyć połączenie. Następnie kliknij przycisk **szczegóły połączenia** , aby wyświetlić, czy połączenie jest udostępniane. Jeśli połączenie zostało utworzone z użyciem strony w domyślnym zakresie personalizacji użytkownika, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> wartość właściwości powinna być `false` dla tego połączenia.  
  
 W menu zlecenia jednego z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek (wskazywanym przez strzałkę w dół na pasku tytułu) kliknij Zlecenie Połącz. Gdy zostanie wyświetlony interfejs użytkownika połączenia, kliknij **** przycisk Rozłącz, aby zakończyć połączenie. Użyj kontrolki **tryb wyświetlania** , aby przywrócić stronę do trybu przeglądania.  
  
 W kontrolce **tryb wyświetlania** wybierz opcję **udostępnianie** , aby przełączyć stronę do zakresu personalizacji współużytkowanej. Wykonaj te same czynności jak powyższe, aby utworzyć połączenie, a następnie kliknij przycisk **szczegóły połączenia** , aby wyświetlić, czy połączenie jest udostępniane. W takim przypadku wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> właściwości powinna być. `true`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiekt jest zadeklarowany w znaczniku strony sieci Web, czy tworzony programowo.</summary>
        <value><see langword="true" />Jeśli połączenie jest statyczne; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenia między kontrolkami składniki Web Part mogą być statyczne lub dynamiczne. Połączenie statyczne jest zadeklarowane w znaczniku strony sieci Web przy użyciu `<asp:WebPartConnection>` elementu. Połączenia dynamiczne są tworzone programowo lub podczas tworzenia połączenia za pomocą interfejsu użytkownika (UI) zdefiniowanego przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formant.  
  
 Połączenia statyczne są obiektami udostępnionymi, co oznacza, że są one dostępne dla wszystkich użytkowników strony sieci Web. Ponadto są one zasadniczo trwałe, ponieważ takie jak kontrolka <xref:System.Web.UI.WebControls.WebParts.WebPart> statyczna nie mogą zostać trwale usunięte.  
  
> [!NOTE]
>  Gdy nie można trwale usunąć obiektu połączenia statycznego, może on zostać trwale odłączony. W takim przypadku obiekt odłączony będzie istniał na serwerze, ale użytkownik końcowy nigdy nie wie o istnieniu obiektu na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> programistyczne właściwości.  
  
 Przykład kodu ma trzy części:  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 Drugą częścią przykładu kodu jest strona sieci Web. W górnej części znajduje `Register` się dyrektywa odwołująca się do kodu źródłowego dla dwóch dynamicznie skompilowanych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek. Połączenie statyczne jest zadeklarowane w obrębie `<StaticConnections>` elementu na stronie. Metoda uzyskuje dostęp do właściwości w celu sprawdzenia, czy połączenie jest statyczne. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> `Button1_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Załaduj stronę w przeglądarce. Połączenie statyczne zostało już utworzone. Wprowadź tekst w kontrolce dostawcy i Zauważ, że tekst jest wyświetlany w kontrolce odbiorcy. Kliknij przycisk **szczegóły połączenia** , aby wyświetlić wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> Pobiera formant, który działa jako dostawca w ramach połączenia składniki Web Part.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> który działa jako dostawca danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde połączenie składniki Web Part składa się <xref:System.Web.UI.WebControls.WebParts.WebPart> z dwóch kontroli — odbiorcy i dostawcy — <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> a właściwość zwraca odwołanie do kontrolki dostawcy w połączeniu.  
  
 Podobnie jak w przypadku jego odpowiednika w połączeniu (kontrolka odbiorcy), kontrola dostawcy jest wymagana do nawiązania połączenia. Niezależnie od tego, czy tworzysz połączenie programowo, czy przez zadeklarowanie go w formacie trwałości strony, należy określić kontrolkę, która będzie pełnić rolę dostawcy połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwości.  
  
 Przykład kodu ma trzy części:  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 Drugą częścią przykładu kodu jest strona sieci Web. W górnej części znajduje `Register` się dyrektywa odwołująca się do kodu źródłowego dla dwóch dynamicznie skompilowanych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek. Połączenie statyczne jest zadeklarowane w obrębie `<StaticConnections>` elementu na stronie. Zwróć uwagę, że `<asp:webpartconnection>` w elemencie `ProviderID` atrybut ma identyfikator przypisanego do niego kontrolki dostawcy. Jest to wymagane do zidentyfikowania dostawcy dla połączenia statycznego. Metoda uzyskuje dostęp do właściwości i zapisuje niektóre jej szczegóły w etykiecie. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> `Button1_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Załaduj stronę w przeglądarce. Połączenie statyczne zostało już utworzone. Wprowadź tekst w kontrolce dostawcy i Zauważ, że tekst jest wyświetlany w kontrolce odbiorcy. Kliknij przycisk **szczegóły dostawcy** , aby wyświetlić niektóre wartości właściwości, do których można uzyskać <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> dostęp za pomocą właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Długość <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> wartości właściwości wynosi zero.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który służy jako punkt połączenia dla <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontrolki działającej jako dostawca połączenia.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> Skojarzone z kontrolką dostawcy w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednym z kroków wymaganych do utworzenia połączenia między dwoma <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolkami jest utworzenie punktów połączenia dla każdej kontrolki. Punkt połączenia dostawcy jest obiektem, który zawiera informacje dotyczące sposobu nawiązywania połączenia z kontrolką działającą jako dostawca. W kodzie źródłowym dostawcy jedna z metod musi być identyfikowana przy użyciu `ConnectionProvider` atrybutu. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Skojarzona z kontrolką dostawcy zawiera szczegółowe informacje o metodzie i atrybucie, w tym identyfikator metody, nazwę wyświetlaną do użycia w interfejsie użytkownika (UI), a także typ wystąpienia interfejsu, które Metoda może zwrócić do konsumenta kontroli. Ten zestaw informacji o dostawcy, jego metodzie tworzenia połączeń i typ interfejsu, który zapewnia, stanowi zbiorczo punkt połączenia dostawcy.  
  
 Domyślnie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> można łączyć się tylko z jednym <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektem naraz. Odbiorca może mieć wiele metod zidentyfikowanych jako możliwe punkty połączenia z klientem, ale konsument może uczestniczyć tylko w jednym połączeniu jako odbiorca (w związku z tym tylko jeden z tych punktów połączenia z klientem może być aktywny). W przeciwieństwie do <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> programu można domyślnie łączyć się z <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> dowolną liczbą obiektów. Na przykład kontrolka dostawcy udostępniająca kod pocztowy może być połączona z wieloma kontrolkami odbiorców, które używają kodu pocztowego do tworzenia różnych rodzajów danych na podstawie kodu pocztowego, takiego jak dane pogodowe, wiadomości i tak dalej. To zachowanie domyślne można zmienić, zastępując <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> Właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> programistyczne właściwości.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy dla dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów, który służy jako odbiorca i dostawca połączenia oraz interfejs używany dla punktów połączenia. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest kod strony sieci Web, która hostuje kontrolki i demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości. W metodzie tworzone są wszystkie obiekty wymagane do utworzenia połączenia, w <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> tym obiekt. `Button1_Click` Zwróć uwagę na wywołanie <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager> na kontrolce. Różne utworzone obiekty są przenoszone do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metody w celu utworzenia połączenia. W metodzie kod uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> do właściwości i wyświetla niektóre szczegóły punktu połączenia. `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce użyj kontrolki lista rozwijana **tryb wyświetlania** , aby przełączyć stronę do trybu połączenia. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) na jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów i kliknij zlecenie Connect. Aby utworzyć połączenie między dwoma kontrolkami, użyj przycisku **kontrolki WebPart** lub podanego połączenia. Kliknij przycisk **szczegóły ConnectionPoint** , aby uruchomić kod, który demonstruje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwość.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości dla połączenia, które odwołuje się do identyfikatora obiektu pełniącego rolę punktu połączenia dostawcy dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator obiektu punktu połączenia dostawcy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku połączenia statycznego zadeklarowanego w znacznikach strony sieci Web deweloperzy mogą określić, który punkt połączenia dostawcy będzie używany dla połączenia przez przypisanie wartości do `ProviderConnectionPointID` atrybutu `<asp:webpartconnection>` w elemencie. Jeśli wartość nie jest przypisana do atrybutu, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> zostanie użyta wartość właściwości.  
  
 Podczas tworzenia połączeń dynamicznych (programistycznych) zwykle nie należy ustawiać wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości. Można po prostu wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę <xref:System.Web.UI.WebControls.WebParts.WebPartManager> w kontrolce, przekazać ją do obiektów punktu połączenia dostawcy i dostawcy (wraz z innymi wymaganymi parametrami), a ta metoda określa prawidłowy identyfikator do użycia dla połączenia dostawcy. moment. Podobnie po rozłączeniu można wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodę bez konieczności <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> określania wartości właściwości.  
  
> [!NOTE]
>  Identyfikator punktu połączenia dostawcy można określić w przypadku wyznaczania <xref:System.Web.UI.WebControls.WebParts.WebPart> lub innego formantu serwera jako dostawcy. Należy zidentyfikować metodę wywołania zwrotnego w dostawcy, która obsługuje wystąpienie interfejsu zawierające dane dla konsumenta. Aby zidentyfikować metodę, oznacz ją `ConnectionProvider` atrybutem Code. Po dodaniu tego atrybutu można dodać opcjonalny parametr wartości ciągu, który służy jako identyfikator <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu dostawcy. Jeśli podasz wartość dla opcjonalnego parametru ID, ta wartość będzie wartością <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości połączenia. Jeśli nie podasz wartości identyfikatora, <xref:System.Web.UI.WebControls.WebParts.WebPartManager> formant przypisze domyślny identyfikator podczas tworzenia obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje deklaratywne i programistyczne użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. Należy zauważyć, że połączenie jest zadeklarowane w znaczniku strony przy `<StaticConnections>` użyciu `<asp:WebPartsConnection>` elementów i. Deklaracja połączenia zawiera wymagany `ProviderConnectionPointID` atrybut. Druga metoda tworzenia połączenia pojawia się w `Button1_Click` metodzie, gdzie kod tworzy nowe połączenie, przy użyciu punktu połączenia (i identyfikatora) zdefiniowanego w kontrolce dostawcy. Następnie w metodzie `Button2_Click` kod uzyskuje dostęp do właściwości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne zadeklarowane na stronie. Wprowadź tekst w kontrolce dostawcy i zwróć uwagę na to, że jest on wyświetlany w odbiorcy z powodu połączenia. Następnie odłącz formanty. Przy użyciu kontrolki lista rozwijana **tryb wyświetlania** Przełącz stronę do trybu połączenia. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) na jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów i kliknij zlecenie Connect. Kliknij przycisk **Rozłącz** . Użyj przycisku **kontrolki WebPart** , aby ponownie utworzyć połączenie między dwoma kontrolkami. Kliknij przycisk **szczegóły ConnectionPoint** , aby uruchomić kod, który uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> do wartości właściwości. Wartość jest zapisywana w etykiecie poniżej kontrolek.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości dla połączenia, które odwołuje się do identyfikatora <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontrolki działającego jako dostawca dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator kontrolki dostawcy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest wymagana podczas tworzenia połączenia między dwoma <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolkami. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Jeśli wartość nie jest przypisana do właściwości, zostanie zgłoszony wyjątek, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolka podejmie próbę aktywowania połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje deklaratywne i programistyczne użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> właściwości.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. Należy zauważyć, że połączenie jest zadeklarowane w znaczniku strony przy `<StaticConnections>` użyciu `<asp:WebPartsConnection>` elementów i. Deklaracja połączenia zawiera wymagany `ProviderID` atrybut. Druga metoda tworzenia połączenia pojawia się w metodzie `Button1_Click`, w której kod tworzy nowe połączenie, używając punktu połączenia zdefiniowanego w kontrolce konsumenta. Następnie, w `Button2_Click` metodzie, kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> właściwości i wyświetla ją w etykiecie.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne zadeklarowane na stronie. Wprowadź tekst w kontrolce dostawcy i zwróć uwagę na to, że jest on wyświetlany w odbiorcy z powodu połączenia. Następnie odłącz formanty. Aby to zrobić, użyj kontrolki listy rozwijanej **tryb wyświetlania** , aby przełączyć stronę do trybu połączenia. Kliknij menu czasowniki (reprezentowane przez strzałkę w dół na pasku tytułu) na jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów i kliknij zlecenie Connect. Kliknij przycisk **Rozłącz** , a kontrolki są rozłączone. Następnie użyj przycisku **Controls webwebpart** , aby ponownie utworzyć połączenie między dwoma kontrolkami. Kliknij przycisk **szczegóły konsumenta** , aby uruchomić kod, który uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> do wartości właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesłania metodę dziedziczoną <see cref="M:System.Object.ToString" /> i zwraca nazwę krótkiego typu dla obiektu połączenia.</summary>
        <returns>Ciąg, który zawiera krótką (niekwalifikowaną) nazwę <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana głównie dla wygody projektanta formantów. Usprawnia ona sposób wyświetlania obiektów połączeń w widok Projekt przy użyciu krótszej nazwy typu, w przeciwieństwie do w pełni kwalifikowanej nazwy typu. Jednak metodę można wywołać w dowolnym momencie w kodzie, gdzie chcesz znać nazwę typu obiektu połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób wywołania <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metody w celu zwrócenia nazwy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> krótkiego typu obiektu.  
  
 Przykład kodu ma trzy części:  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszą częścią przykładu kodu jest kod źródłowy interfejsu oraz kontrolki odbiorca i dostawca. Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 Drugą częścią przykładu kodu jest strona sieci Web. W górnej części znajduje `Register` się dyrektywa odwołująca się do kodu źródłowego dla dwóch dynamicznie skompilowanych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek. Połączenie statyczne jest zadeklarowane w obrębie `<StaticConnections>` elementu na stronie. `Button1_Click` Metoda<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> wywołuje metodę w celu zapisania nazwy typu połączenia z etykietą.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Załaduj stronę w przeglądarce. Połączenie statyczne zostało już utworzone. Wprowadź tekst w kontrolce dostawcy i Zauważ, że tekst jest wyświetlany w kontrolce odbiorcy. Kliknij przycisk **szczegóły połączenia** , aby wykonać <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metodę.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> Pobiera obiekt, który jest używany do przekształcania danych między dwoma niezgodnymi punktami połączenia w ramach połączenia składniki Web Part.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku połączenia składniki Web Part istnieją dwa sposoby nawiązywania połączenia przez dostawcę i kontrolki konsumenta w połączeniu. Mogą łączyć się bezpośrednio za pomocą odpowiednich <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiektów i typu interfejsu, który jest zrozumiały dla obu formantów. Lub, jeśli są niezgodne, mogą łączyć się pośrednio przy użyciu <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu, który przekształca wystąpienie interfejsu od dostawcy na typ zrozumiały dla konsumenta.  
  
 Gdy transformator jest wymagany w ramach połączenia, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> Właściwość zawiera odwołanie <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> do obiektu. Można w sposób deklaratywny dodać transformator do połączenia w znaczniku strony sieci Web, dodając tag dla transformatora niestandardowego (lub jedną z transformatorów dostarczonych z zestawem kontrolek składniki Web Part) w obrębie `<asp:WebPartConnection>` elementu. Możesz również programowo dodać transformator, tworząc jego wystąpienie w kodzie i wywołując <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> metodę <xref:System.Web.UI.WebControls.WebParts.WebPartManager> na kontrolce, aby utworzyć połączenie, przekazując do niego obiekt transformatora wraz z innymi wymaganymi parametrami.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> obiektów używanych wewnętrznie przez zestaw kontrolek składniki Web Part.</summary>
        <value>Obiekty <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> zawierające <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Właściwość nigdy nie jest przeznaczona do użycia przez deweloperów. Aby uzyskać dostęp do transformatora skojarzonego z połączeniem, deweloperzy muszą zawsze używać <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> właściwości.  
  
 Właściwość jest używana wewnętrznie przez zestaw kontrolek składniki Web Part, aby umożliwić deweloperom stron zadeklarować elementy Transformer w `<asp:webpartconnection>` obrębie elementu w znaczniku strony sieci Web. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>
