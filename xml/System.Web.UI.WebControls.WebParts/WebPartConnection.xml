<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d33323212fbf6275393a23d262fe4884aeb7fc1a" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59354462" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia obiekt, który umożliwia dwa <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> formantów w celu utworzenia połączenia. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W Web Part zestawu sterującego połączenie jest łączem lub skojarzenie między dwoma <xref:System.Web.UI.WebControls.WebParts.WebPart> (lub innego serwera lub użytkownika) formantów, które pozwala im na współużytkowanie danych. Ta możliwość udostępniania danych umożliwia połączonych kontrolki ma być używany w sposób przewyższający funkcje oferowane przez formanty izolowanym. Na przykład jeśli jeden formant udostępnia dane kod pocztowy, inny formant może odczytywać i te dane zawierają informacje o lokalnych prognoz pogody na podstawie kodu pocztowego, połączonych możliwości dwóch kontrolek zapewnia więcej korzyści dla użytkowników. Aby rozszerzyć ten przykład, inne formanty może zostać utworzony w to również wyświetlanie informacje w zależności od kod pocztowy, takie jak formant wraz z łączami do wiadomości lokalnych i tych kontrolek, które można pracować z danymi kod pocztowy może udostępniać dane z jednego formantu, który zawiera Kod pocztowy. Użytkownicy końcowi aplikacji Web Part można tworzyć i zarządzać połączeń między takie formanty zgodna bezpośrednio z przeglądarki sieci Web, przy użyciu standardowych połączeń interfejsu użytkownika (UI) dostarczonego przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> sterowania lub za pomocą niestandardowego interfejsu użytkownika, dostarczone przez dla deweloperów.  
  
 To <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Przegląd klasy jest ogólnym zestawieniu podstawowe szczegóły dotyczące tworzenia połączenia. Aby uzyskać więcej informacji na konkretnych składnikach i wymagania związane z tworzeniem połączeń, zobacz [Omówienie połączeń części sieci Web](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)), lub Zobacz klasy odniesienia i wymienionych w dyskusji następujące przykłady kodu. Istnieje kilka podstawowych aspektów połączenia składnika Web Part:  
  
-   Dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Każde połączenie części sieci Web składa się z dwóch kontrolek. Istnieje możliwość, że formant do wzięcia udziału w więcej niż jedno połączenie jednocześnie, ale każdego pojedynczego połączenia składa się dokładnie z dwóch kontrolek. Formanty mogą dziedziczyć bezpośrednio <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy bazowej lub może być innych formantów serwera, łącznie z formantami ASP.NET, niestandardowych kontrolek serwera i kontrolki użytkownika. Formanty, które nie pochodzą z <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy, jeśli wprowadzone w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy, automatycznie są ujęte w nawiasy <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> obiektu w czasie wykonywania, który umożliwia im dziedziczyć <xref:System.Web.UI.WebControls.WebParts.WebPart> klas i funkcji jako środowiska wykonawczego <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki.  
  
-   Kontrolek znajdujących się w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy. Zarówno <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek i typu formantem serwera musi znajdować się w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy, aby móc uczestniczyć w połączenia części sieci Web (i większość funkcji części sieci Web).  
  
-   Konsumenci i dostawcy. W każdym połączenia składnika Web Part, istnieją dwie opcje: Dostawca danych i konsumentów danych. Dostawca dostarcza danych do konsumenta za pośrednictwem metodą określonego wywołania zwrotnego, która zwraca dane w formie interfejsu. (Na przykład sposobu tworzenia i określić metodę wywołania zwrotnego, zobacz sekcji przykład tego tematu). Ta metoda wywołania zwrotnego jest określana jako punkt połączenia z dostawcą. Szczegóły tego punktu połączenia (nazwy "przyjaznym", identyfikator i typ zwracany interfejsu) są zawarte w <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt skojarzony z formantu dostawcy. Użytkownik odbiera dane za pomocą określonej metody, który może akceptować wystąpienia interfejsu. Ta metoda jest określana jako punkt połączenia z odbiorców i szczegóły punktu połączenia (nazwa, identyfikator i typ interfejsu) są zawarte w <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt skojarzony z formantu konsumenta.  
  
-   Formanty zgodna lub prawidłowy przekształcania. W przypadku połączenia do pracy klienta oraz dostawcy musi być zgodne (oznacza to, ich metod punktu określonego połączenia mogą pracować z tego samego typu interface) lub może być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> zdolne do tłumaczenia typu oferowane przez obiekt Dostawca na typ rozpoznawane przez konsumenta.  
  
-   Element <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu. Połączenie istnieje, musi istnieć wystąpienie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> klasę, która zawiera odwołania do formantów dostawcy i konsumentów, wraz ze szczegółami ich punkty połączenia. Jeśli dostawcy i klienta są niezgodne, a zamiast tego użyć <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt, aby nawiązać połączenie, połączenie odwołuje się funkcja przekształcania.  
  
-   Sposób nawiązywania połączenia. Po zgodne kontrolki odbiorców i dostawcy zostały prawidłowo o metodach punktu połączenia i umieszczane w strefie, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt jest dostępny, ostatni niezbędne podstawowe krok polega na zainicjowanie połączenia. Jednym ze sposobów, przyczyną może być jest przeznaczony dla użytkowników utworzyć połączenie za pośrednictwem interfejsu użytkownika. Jeśli umieścisz `<asp:connectionszone>` elementu na stronie, a druga wymaganych składników dla połączenia są w miejscu, w czasie wykonywania, które użytkownik może przełączać strony do trybu wyświetlania connect, kliknij przycisk zlecenia Połącz w menu zleceń dostawcy lub odbiorcy i połączenia interfejsu użytkownika (na podstawie <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontroli) będą wyświetlane. Za pomocą tego interfejsu użytkownika użytkownik może zainicjować połączenie. Innym sposobem, aby zainicjować połączenie, jest to zrobić programowo. W obu przypadkach jest taka sama czy za pośrednictwem interfejsu użytkownika lub programowo, metody podstawowej, inicjuje połączenie. Wywołania aplikacji <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> — metoda (lub <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę, jeśli używanie transformatora) na <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolować, przekazując do niej dostawcę, użytkownika i ich odpowiednich punktów obiekty połączenia, a metoda zwraca <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klasy definiuje obiekt, który hermetyzuje niezbędne szczegóły połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Klasa składa się prawie całkowicie właściwości powiązanych z szczegóły danego połączenia. Kilka właściwości dotyczą formantu konsumenta w połączeniu. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Właściwości odwołuje się do formantu konsumenta i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> właściwości odwołuje się do identyfikatora klienta. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Obiekt, który zawiera szczegółowe informacje o punkt połączenia z konsumenta, odwołuje się do niej konsumenta <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Właściwość Identyfikatora odwołuje się do <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. Te właściwości połączenia związane z konsumenta musi mieć wartość przypisaną do utworzenia połączenia.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klasa ma również kilka właściwości, które odnoszą się do formantu dostawcy w połączeniu, a odpowiadają one właściwości konsumenta. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Właściwości odwołuje się do dostawcy samej kontrolce, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> właściwości odwołuje się do jego identyfikator. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Odwołania do właściwości <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości odwołuje się do Identyfikatora punktu połączenia dostawcy.  
  
 Kilka właściwości dotyczą stan połączenia. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Właściwość wskazuje, czy połączenie jest aktywne (obecnie wymiana danych) lub nieaktywnych (nadal połączony, ale nie jest aktywnie udostępniania danych). <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Właściwość wskazuje, czy połączenie jest udostępnione (dostępne dla wszystkich użytkowników na stronę) lub połączenia specyficzne dla użytkownika i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwość wskazuje, czy kontrolka jest statyczny (deklaracja w znaczniku strony i w związku z tym stałe) lub dynamiczne (utworzony programowo, co oznacza że można go usunąć).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób tworzenia prostego połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. W przykładzie pokazano trzy sposoby tworzenia połączenia: deklaratywne, umieszczając tagów dla połączenia w znaczniku strony sieci Web; programowo tworząc połączenie w kodzie i za pośrednictwem interfejsu użytkownika, umieszczając <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolki na stronie, która umożliwia użytkownikom nawiązanie połączenia.  
  
 Przykładowy kod ma cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> klasę o nazwie `ZipCodeWebPart` który implementuje interfejs i działa jako formantu dostawcy. Jego `ProvideIZipCode` metoda to metoda wywołania zwrotnego, która implementuje składową tylko. Metoda po prostu zwraca wystąpienia interfejsu. Należy zauważyć, że metoda jest oznaczona atrybutem `ConnectionProvider` atrybutu w metadanych. Jest to mechanizm do identyfikowania metody jako metodę wywołania zwrotnego dla punktu połączenia dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> nosi nazwę klasy `WeatherWebPart`, i działa jako odbiorcy połączenia. Ta klasa ma metodę o nazwie `GetZipCode` wystąpienie, które pobiera `IZipCode` interfejs z formantu dostawcy. Należy pamiętać, że ta metoda jest oznaczona jako metoda punktu połączenia klienta za pomocą `ConnectionConsumer` atrybutu w metadanych.  
  
 Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. U góry są `Register` dyrektywy dla kontrolki użytkownika i niestandardowej <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Ponieważ przykładu kompilacji dynamicznej kontroli przyjmuje się, że kod źródłowy dla formantów musi należeć do podfolderu App_Code; `Register` tagu na stronie odwołuje się tag dowolnego prefiksu i obszaru nazw kontrolek. Niestandardowy <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów (dostawcy i konsumenta) są zadeklarowane w obrębie strony sieci Web `<asp:webpartzone>` elementu, wewnątrz `<zonetemplate>` elementu.  
  
 Na stronie jest połączenie między usługą niestandardowe formanty formularza na trzy sposoby. Pierwsza metoda jest deklaratywnego. W znaczniku strony <`StaticConnections>` elementu jest zadeklarowany, a w ramach którego jest `<asp:WebPartConnections>` elementu przy użyciu różnych klientów i dostawcy szczegółów połączenie, określona jako atrybuty. To jest jednym ze sposobów, aby utworzyć połączenie, deklarując ją bezpośrednio na stronie sieci Web, w szczególności w ramach `<asp:WebPartManager>` elementu. Ze względu na to połączenie statyczne tworzone jest połączenie między dwoma niestandardowe formanty natychmiast po raz pierwszy strona ładuje się.  
  
 Druga metoda stanowiących połączenie między usługą formanty są dostarczane przez `<asp:connectionszone>` elementu na stronie. Jeśli użytkownik zmienia strony do trybu wyświetlania connect w czasie wykonywania i kliknie czasownik connect na jednym z niestandardowych formantów `<asp:connectionszone>` elementu automatycznie wyświetla pełny interfejs użytkownika do utworzenia połączenia.  
  
 Strona przedstawia również trzeci sposób tworzenia połączenia, który jest zrobienie tego programowo. W `Button1_Click` tworzy kod w metodzie <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu dla formantu dostawcy i pobiera punkt połączenia z jego szczegóły, wywołując <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metody. Wykonuje podobne zadanie dla formantu konsumenta, wywołanie <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metody. Na koniec tworzy nowy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony sieci Web w przeglądarce pierwsze połączenie już istnieje, ponieważ jest zadeklarowany w `<StaticConnections>` elementu. Wprowadź tekst w **dostawcy kod POCZTOWY** kontroli, a pojawi się w kontrolce konsumenta. Następnie rozłączenia dwóch kontrolek. Za pomocą **trybu wyświetlania** listy rozwijanej formant listy, Zmień stronę, aby połączyć trybu wyświetlania. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) dla każdego z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje i zwróć uwagę, że każdy ma **Connect** opcji. To jest connect czasownika, który jest wyświetlany w menu zleceń tylko wtedy, gdy strona jest w trybie connect. Kliknij przycisk Zlecenie connect na jednym z kontrolki i połączenia interfejsu użytkownika z <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formant jest widoczny. Kliknij przycisk **rozłączenia** przycisk, aby zakończyć statyczne połączenie między kontrolkami. Użyj **tryb wyświetlania** formantu, aby powrócić na stronę, aby tryb przeglądania. Spróbuj ponownie wprowadzić nowy tekst w dostawcy i należy zwrócić uwagę, ponieważ formanty są odłączone, tekst nie może zaktualizować formantu konsumenta.  
  
 Następnie użyj tej samej metody opisanych powyżej, aby ponownie przełączyć strony do trybu wyświetlania connect. Kliknij przycisk Połącz czasownika w jednej z kontrolek. Kliknij przycisk **utworzyć połączenie** połączyć, a za pomocą interfejsu użytkownika, dostarczone przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> sterowania, aby utworzyć połączenie między kontrolkami. Jest to druga metoda tworzenia połączeń. Należy pamiętać, tak szybko, jak połączenie jest tworzone, ostatni ciąg wprowadzony w kontrolce dostawcy (co oznacza, że nie są wyświetlane, ponieważ formanty rozłączonych) nagle pojawia się u odbiorcy, ponieważ połączenie zostało utworzone ponownie. Kliknij przycisk **rozłączenia** przycisku do końca bieżącego połączenia, który został utworzony. Wróć na stronę, aby tryb przeglądania. Wprowadź nowy tekst w dostawcy, aby zademonstrować tekst nie jest aktualizowany i że formanty ponownie bez dostępu do sieci.  
  
 Zwraca stronę, aby połączyć trybu wyświetlania. Zamiast klikać zlecenie connect, kliknij przycisk **połączyć składnik Web Part formantów** przycisk, który ilustruje Trzecia metoda tworzenia połączenia. To podejście łączy kontrolki programowo w jednym prostym kroku bez konieczności używania <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontroli. Należy pamiętać, że podczas tworzenia połączenia ostatni wprowadzony w dostawcy nagle ciąg jest wyświetlany w kontrolce konsumenta.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Przegląd połączenia części sieci Web</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor jest publiczny, tak aby analizator platformy ASP.NET można utworzyć wystąpienie, gdy połączenie jest zadeklarowany w znaczniku strony sieci Web; ten konstruktor nie jest przeznaczony do użycia w kodzie dewelopera.  
  
 Jeśli chcesz utworzyć <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> programowo, obiektu, należy użyć <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> lub <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> podany w metodzie <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli. Te metody obsługi wielu szczegółów tworzenia połączenia i zwracają <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> klasy ustawia wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwości `true`. Dlatego domyślny stan nowego połączenia ma być statyczne (co oznacza, że zostanie ona zadeklarowana w deklaracyjnym strony sieci Web zawierającej) i udostępnione (widoczne dla wszystkich użytkowników strony). Będzie to miało miejsce podczas dodawania połączenia w typowym scenariuszu, deklarując połączenia w znaczniku strony z `<asp:webpartconnection>` elementu. Jednak w innych okolicznościach połączenie będzie miało innej wartości tych właściwości. Na przykład programowo dodać połączenie, tworząc obiekt połączenia w kodzie, a użytkownik jest wyświetlanie strony w zakresie personalizacji użytkownika domyślnego, połączenie zostanie utworzona jako dynamiczny, na user(visible only to the specific user) połączenie.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> są właściwości tylko do odczytu, a te właściwości, które określają charakter połączenia są ustawiane wewnętrznie przez <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli w zależności od tego, jak tworzone jest połączenie (deklaratywnie w znaczniku strony, lub programowo przy użyciu kodu lub interfejsu użytkownika).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> obiekt, który działa jako formantu konsumenta w połączeniu.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> reprezentujący, kontrola części sieci Web, działając jako użytkownik w przypadku połączenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde połączenie części sieci Web składa się z dwóch kontrolek, które udostępniają dane. Jeden formant działa jako dostawca danych i inne kontrolki pełni rolę konsumenta, odbieranie i przetwarzanie danych od dostawcy. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Właściwości pobiera odwołanie do <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolować działania jako konsument w relacji połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> właściwości.  
  
 Przykładowy kod ma cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kodem źródłowym dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów, które służą jako konsument i dostawcę pod kątem połączenia i interfejs używany dla punktów połączenia. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest kodem strony sieci Web, który obsługuje formanty i demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> właściwości. W górnej części strony są `Register` dyrektywy dla kontrolki użytkownika i kontrolki niestandardowe. Ponieważ w tym przykładzie użyto kompilacji dynamicznej `Register` dyrektywy dla pliku źródłowego nie musi odwoływać się do nazwy zestawu; zawiera tag dowolnego prefiksu i obszaru nazw kontrolek. W `Button2_Click` metody, ten kod uzyskuje dostęp do obiektu połączenia za pośrednictwem <xref:System.Web.UI.WebControls.WebParts.WebPartManager> sterowania, a następnie pobiera odwołanie do formantu konsumenta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce, należy użyć **tryb wyświetlania** kontrolka listy rozwijanej do przełączania strony Aby połączyć z trybu. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenie. Użyj **połączyć składnik Web Part formantów** przycisku lub wybrane połączenie interfejsu użytkownika (UI), aby utworzyć połączenie między dwoma formantami. Kliknij przycisk **Wyświetl informacje konsumenta** przycisk, aby uruchomić kod, który pokazuje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Długość <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> właściwość ma wartość zero.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który służy jako punkt połączenia dla formantu, który działa jako użytkownik w przypadku połączenia.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> skojarzonego z kontrolką konsumenta w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedną z czynności wymagane do utworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów polega na utworzeniu punkty połączenia dla każdego formantu. Punkt połączenia klienta jest obiektem, który zawiera informacje o tym, jak połączyć się z kontrolki, działając jako użytkownik. W kodzie źródłowym konsumenta, musi być jedną z metod identyfikowany za pomocą `ConnectionConsumer` atrybutu. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Obiektu, który jest skojarzony z formantu konsumenta zawiera szczegółowe informacje o metodzie i atrybutu, łącznie z Identyfikatora dla metody do użycia w interfejsie użytkownika (UI), nazwę wyświetlaną i typ interfejsu, które metody można pobrać. Ten zbiór informacji na temat użytkownika, jego metodę tworzącą połączenia i typu interfejsu, który ją obsługuje, zbiorczo stanowi punkt połączenia klientów.  
  
 Domyślnie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu mogą łączyć się tylko jeden z <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektów w danym momencie. Odbiorcy mogą być identyfikowane jako konsument możliwych punktów połączenia na wiele sposobów, ale odbiorcy mogą tylko brać udział w jedno połączenie jako użytkownik (w związku z tym, tylko do jednego z jej punktów połączeń klientów można aktywować) w danym momencie. Z kolei <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> może nawiązać połączenia z dowolną liczbą <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektów. To zachowanie domyślne można zmienić poprzez zastąpienie <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kodem źródłowym dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów, które służą jako konsument i dostawcę pod kątem połączenia i interfejs używany dla punktów połączenia. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest kodem strony sieci Web, który obsługuje formanty i demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości. W `Button1_Click` metody, wszystkie obiekty, które są wymagane w celu utworzenia połączenia są tworzone, w tym <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. Te obiekty są przekazywane do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę, aby utworzyć połączenie. W `Button2_Click` uzyskuje dostęp do kodu w metodzie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości i wyświetla niektóre szczegóły połączenia punktu.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce, należy użyć **tryb wyświetlania** kontrolka listy rozwijanej do przełączania strony Aby połączyć z trybu. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenie. Użyj **połączyć składnik Web Part formantów** przycisku lub wybrane połączenie interfejsu użytkownika, aby utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły Element ConnectionPoint** przycisk, aby uruchomić kod, który pokazuje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się do Identyfikatora obiektu służy jako punkt połączenia klientów dla tego połączenia.</summary>
        <value>Ciąg zawierający identyfikator połączenia klienta punktu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Statyczne połączenia zadeklarowane w znaczniku strony sieci Web, deweloperzy można określić, które punkt połączenia odbiorcy będą używane połączenia przez przypisywanie wartości do `ConsumerConnectionPointID` atrybutu na `<asp:webpartconnection>` elementu. Jeśli wartość nie jest przypisana do atrybutu <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> zostanie użyta wartość właściwości.  
  
 Po utworzeniu dynamicznych połączeń (programowy), zwykle nie należy ustawiać wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości. Wystarczy zadzwonić <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager> i przekazanie do niego klientów i połączeń klientów punktu obiektów (wraz z wymaganych parametrów), a tej metody określa poprawny identyfikator na potrzeby połączenia klienta punkt. Podobnie w przypadku rozłączenia, można wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metody bez konieczności określania <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> wartości właściwości.  
  
> [!NOTE]
>  Identyfikator punktu połączenia klienta można określić po wskazaniu <xref:System.Web.UI.WebControls.WebParts.WebPart> lub innych formantów serwera jako użytkownik. Należy określić metodę u odbiorcy, która pobiera wystąpienie interfejsu, który został dostarczony przez formantu dostawcy lub transformatora. Aby określić metodę, oznacz go za pomocą `ConnectionConsumer` atrybutu kod. Po dodaniu tego atrybutu, można dodać parametru wartości opcjonalny ciąg, który służy jako identyfikator dla użytkownika <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. Jeśli podana wartość dla parametru opcjonalnego identyfikator tej wartości staje się wartością <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości połączenia. Jeśli nie zostanie podana wartość Identyfikatora <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> zostanie użyta wartość właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano sposób użycia deklaracyjne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony za pomocą `<StaticConnections>` i `<asp:WebPartsConnection>` elementów. Deklaracja połączenia zawiera wymagane `ConsumerConnectionPointID` atrybutu. Druga metoda tworzenia połączenia pojawia się w metodzie `Button1_Click`, w której kod tworzy nowe połączenie, używając punktu połączenia zdefiniowanego w kontrolce konsumenta. Następnie w metodzie `Button2_Click` kod uzyskuje dostęp do właściwości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne, zadeklarowany na stronie. Wprowadź jakiś tekst w kontrolce dostawcy i należy pamiętać, że jest wyświetlany u odbiorcy, ze względu na połączenie. Następnie można odłączyć kontrolki. Za pomocą **tryb wyświetlania** listy rozwijanej formant listy, przejdź na stronę, aby połączyć trybu. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenie. Kliknij przycisk **rozłączenia** przycisku. Użyj **połączyć składnik Web Part formantów** przycisk, aby ponownie utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły Element ConnectionPoint** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> wartości właściwości. Wartość jest zapisywany w etykiecie poniżej kontrolki.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się do Identyfikatora <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontrolować działania jako konsument dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator kontrolki, działając jako użytkownik w przypadku połączenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Wartość właściwości jest wymagana podczas tworzenia połączenia między <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Jeśli wartość nie jest przypisana do właściwości, wyjątek jest generowany, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli umożliwia przeprowadzenie próby aktywacji połączenia.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano sposób użycia deklaracyjne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> właściwości.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony za pomocą `<StaticConnections>` i `<asp:WebPartsConnection>` elementów. Deklaracja połączenia zawiera wymagane `ConsumerID` atrybutu. Druga metoda tworzenia połączenia pojawia się w metodzie `Button1_Click`, w której kod tworzy nowe połączenie, używając punktu połączenia zdefiniowanego w kontrolce konsumenta. Następnie w `Button2_Click` metody, ten kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> właściwości i wyświetla go w etykietę.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne, zadeklarowany na stronie. Wprowadź jakiś tekst w kontrolce dostawcy i należy pamiętać, że jest wyświetlany u odbiorcy, ze względu na połączenie. Następnie można odłączyć kontrolki. Za pomocą **tryb wyświetlania** listy rozwijanej formant listy, przejdź na stronę, aby połączyć trybu. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenie. Kliknij przycisk **rozłączenia** przycisku. Użyj **połączyć składnik Web Part formantów** przycisk, aby ponownie utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły konsumenta** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> wartości właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiektu.</summary>
        <value>Ciąg, który zawiera identyfikator <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt ma unikatową wartość przypisana do jego <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> właściwości. To, aby upewnić się, że jest sposobem rozróżnienia wielu połączeń.  
  
 Jeśli tworzysz połączenie statyczne przez zadeklarowanie `<asp:webpartconnection>` element strony sieci Web, a nie przypisuj wartości do `ID` atrybutu połączenia, wyjątek jest generowany, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli umożliwia przeprowadzenie próby aktywacji połączenia.  
  
 Gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli tworzy nowego połączenia dynamicznego, wywoływanych przez nią <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> metodę w celu wygenerowania unikatowego Identyfikatora dla połączenia.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano sposób użycia deklaracyjne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> właściwości.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony za pomocą `<StaticConnections>` i `<asp:WebPartsConnection>` elementów. Deklaracja połączenia zawiera wymagane `ID` atrybutu. Druga metoda tworzenia połączenia pojawia się w metodzie `Button1_Click`, w której kod tworzy nowe połączenie, używając punktu połączenia zdefiniowanego w kontrolce konsumenta. W tym miejscu właściwość ID nie jest wymagane, ponieważ połączenie jest dynamiczny i <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli przypisuje identyfikator do połączenia. W `Button2_Click` metody, ten kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> właściwości i wyświetla go w etykietę.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne, zadeklarowany na stronie. Wprowadź jakiś tekst w kontrolce dostawcy i należy pamiętać, że jest wyświetlany u odbiorcy, ze względu na połączenie. Następnie można odłączyć kontrolki. Za pomocą **tryb wyświetlania** listy rozwijanej formant listy, przejdź na stronę, aby połączyć trybu. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenie. Kliknij przycisk **rozłączenia** przycisku. Użyj **połączyć składnik Web Part formantów** przycisk, aby ponownie utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły połączenia** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> wartości właściwości.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiekt jest obecnie dane programu exchange stanie między kontrolkami jego dostawcy i klienta.</summary>
        <value><see langword="true" /> Jeśli połączenie jest aktywne; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Właściwość wskazuje stan <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu. Gdy połączenie jest w tym stanie, dostawcy i konsumentów kontrolek w połączeniu są komunikujące się i możliwość wymiany danych za pośrednictwem wspólnego interfejsu lub <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu.  
  
 Gdy użytkownik przegląda renderowanej strony zawiera ustanowionego połączenia w trybie normalnym przeglądania, połączenie jest zazwyczaj aktywnych (chyba że nie można aktywować ze względu na konflikt niektórych lub inny problem podczas ładowania strony). Na wczesnym etapie cyklu życia strony i kontrolki, wartość właściwości jest `false`. Połączenie jest aktywowany tylko po <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> zdarzenie na <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli jest wywoływane. Ściślej mówiąc, połączenie jest aktywowana po użytkownik pobierze wystąpienie określonego interfejsu od dostawcy lub <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu.  
  
 Warto wiedzieć, czy połączenie jest aktywny w sytuacjach, gdzie mogą występować konflikty lub problemy z synchronizacją z powodu wielu połączeń na stronie. Na przykład, jeśli istnieje pewnego rodzaju konfliktu między dwoma połączeniami <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli ma możliwość powstrzymanie się jednego z połączeń w celu uniknięcia konfliktu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> właściwości.  
  
 W przykładzie przedstawiono trzy części:  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w przykładzie kodu jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 Druga część przykładowy kod jest strona sieci Web. W prawym górnym jest `Register` dyrektywę, który odwołuje się do kodu źródłowego dla dwa dynamicznie kompilowany <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Statyczne połączenia jest zadeklarowany w `<StaticConnections>` elementu na stronie. W ramach `<script>` elementu są cztery procedury obsługi zdarzeń. Każdy program obsługi zdarzeń sprawdza wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> właściwości połączenia statyczne i zapisuje komunikat do <xref:System.Web.UI.WebControls.Label> kontroli wskazującą, czy połączenie jest aktywne lub nieaktywne w danym stanie cyklu życia strony i kontrolki. W tym przykładzie pokazano, w którym momencie połączenie stanie się aktywny, i że pozostanie aktywne po stronie jest renderowany.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Ładowanie strony w przeglądarce. Statyczne połączenie jest już utworzony, a już zapisanych wiadomości do etykiet, wyświetlanie, czy połączenie zostało active na różnych etapach cyklu życia strony i kontrolki. Kliknij przycisk **szczegóły połączenia** przycisk i należy pamiętać, że połączenie nie jest aktywny w tym momencie, ale że połączenie jest ponownie uaktywnione każdorazowo po <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> zdarzeń i czy jest nadal aktywne (i pozostanie więc) po <xref:System.Web.UI.Control.PreRender> zdarzeń strony.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiekt jest widoczny dla wszystkich użytkowników lub tylko dla bieżącego użytkownika.</summary>
        <value><see langword="true" /> Jeśli połączenie jest udostępniane; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podobnie jak w przypadku poszczególnych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt może być udostępnionego lub wystąpienia dla użytkownika. Wystąpienie udostępnione oznacza, że połączenie jest widoczna dla wszystkich użytkowników, strony sieci Web i wystąpienia dla poszczególnych użytkowników oznacza, że połączenie jest widoczna tylko dla określonego użytkownika.  
  
 Ogólnie rzecz biorąc sposób połączenie jest dodawane do strony określa, czy połączenie jest udostępniane. Jeśli połączenie jest zadeklarowany w znaczniku strony sieci Web, a następnie połączenie jest udostępniane i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> wartość właściwości jest `true`. Ponadto jeśli strony sieci Web jest w zakresie personalizacji udostępnionego, gdy połączenie zostanie dodany, połączenie jest również udostępniane. Zazwyczaj, gdy użytkownik używa `<asp:connectionszone>` interfejsu użytkownika (UI), aby dodać połączenie strony jest w zakresie personalizacji użytkowników, więc połączenie nie jest udostępniony i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> wartość właściwości jest `false`.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> właściwości.  
  
 Przykładowy kod ma pięć części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wpis w pliku Web.config, który jest wymagany do uruchomienia przykładu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. W `Button2_Click` metody sprawdza <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> właściwość istniejące połączenie i wyświetla wyniki na stronie.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Czwartej części w przykładzie kodu to wpis w pliku Web.config, który jest wymagany dla konta użytkownika, który będzie działać z przykładu, aby móc edytować strony w zakresie personalizacji udostępnionych. Aby je włączyć, musi istnieć wpis w pliku Web.config w `<system.web>` sekcji, która wygląda podobnie jak w poniższym przykładzie.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Po załadowaniu strony w przeglądarce, należy użyć **trybu wyświetlania** kontrolka listy rozwijanej do przełączania strony Aby połączyć z trybu wyświetlania. Kliknij przycisk **połączyć składnik Web Part formantów** przycisku w celu utworzenia połączenia. Następnie kliknij przycisk **szczegóły połączenia** przycisk, aby wyświetlić, czy połączenie jest udostępniane. Jeśli utworzono połączenie ze stroną w zakresie personalizacji użytkowników dla domyślnego <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> wartość właściwości powinny być `false` dla połączenia.  
  
 Menu zleceń jednego z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów (wskazywanym przez strzałki w dół na pasku tytułu), kliknij przycisk Zlecenie connect. Gdy pojawi się połączenie interfejsu użytkownika, kliknij przycisk **rozłączenia** przycisk, aby zakończyć połączenie. Użyj **tryb wyświetlania** formantu, aby powrócić na stronę, aby tryb przeglądania.  
  
 W **tryb wyświetlania** sterowania, wybierz opcję **Shared** opcja przełączania strony do udostępnionych zakres personalizacji. Te same czynności opisanych powyżej utworzyć połączenie, a następnie ponownie kliknij przycisk **szczegóły połączenia** przycisk, aby wyświetlić, czy połączenie jest udostępniane. W tym przypadku wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> właściwość powinna być `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiektu jest zadeklarowany w znaczniku strony sieci Web lub utworzony.</summary>
        <value><see langword="true" /> Jeśli połączenie jest statyczny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenia między formanty części sieci Web może być statyczne lub dynamiczne. Statyczne połączenia jest zadeklarowany w znaczniku strony sieci Web przy użyciu `<asp:WebPartConnection>` elementu. Dynamiczne połączenia są tworzone programowo lub gdy użytkownik tworzy połączenie za pośrednictwem interfejsu użytkownika (UI), zdefiniowane przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontroli.  
  
 Statyczne połączenia są obiektów udostępnionych, co oznacza, że są one dostępne dla wszystkich użytkowników na stronie sieci Web. Ponadto są zasadniczo stałych, ponieważ statycznych, takich jak <xref:System.Web.UI.WebControls.WebParts.WebPart> control, nie można trwale usunąć.  
  
> [!NOTE]
>  Gdy obiekt połączenia statycznych nie można usunąć trwale, można trwale odłączony. W tym przypadku odłączony obiekt będzie istnieć na serwerze, ale użytkownik końcowy nigdy nie są świadomi istnienia obiektu na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwości.  
  
 Przykładowy kod ma trzy części:  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do hostowania kontrolki, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w przykładzie kodu jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 Druga część przykładowy kod jest strona sieci Web. W prawym górnym jest `Register` dyrektywę, który odwołuje się do kodu źródłowego dla dwa dynamicznie kompilowany <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Statyczne połączenia jest zadeklarowany w `<StaticConnections>` elementu na stronie. `Button1_Click` Uzyskuje dostęp do metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwość do sprawdzenia, czy połączenie jest statyczne.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Ładowanie strony w przeglądarce. Statyczne połączenie jest już utworzony. Wprowadź jakiś tekst w kontrolce dostawcy i należy pamiętać, że tekst jest wyświetlany formantu konsumenta. Kliknij przycisk **szczegóły połączenia** przycisk, aby wyświetlić wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> formant, który działa jako dostawca, połączenie części sieci Web.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> działający jako dostawcę danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde połączenie części sieci Web, który składa się z dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek — klienta i dostawcy — i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwość zwraca odwołanie do formantu dostawcy w połączeniu.  
  
 Podobnie jak jego odpowiednika w przypadku połączenia (formantu konsumenta) formantu dostawcy jest wymagany do nawiązania połączenia. Czy zostanie utworzone połączenie, programowo lub deklarując ją w formacie trwałości strony, należy określić formant do działania jako dostawca połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwości.  
  
 Przykładowy kod ma trzy części:  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do hostowania kontrolki, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w przykładzie kodu jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 Druga część przykładowy kod jest strona sieci Web. W prawym górnym jest `Register` dyrektywę, który odwołuje się do kodu źródłowego dla dwa dynamicznie kompilowany <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Statyczne połączenia jest zadeklarowany w `<StaticConnections>` elementu na stronie. Należy zauważyć, że w `<asp:webpartconnection>` elementu `ProviderID` atrybut ma identyfikator formantu dostawcy do niej przypisany. Jest to wymagane do identyfikowania dostawcy połączenia statyczne. `Button1_Click` Uzyskuje dostęp do metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwości i zapisuje niektóre z jego szczegóły do etykiety.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Ładowanie strony w przeglądarce. Statyczne połączenie jest już utworzony. Wprowadź jakiś tekst w kontrolce dostawcy i należy pamiętać, że tekst jest wyświetlany formantu konsumenta. Kliknij przycisk **szczegóły dostawcy** przycisk, aby wyświetlić niektóre z wartości właściwości dostępne za pośrednictwem <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Długość <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> wartość właściwości jest równa zero.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który służy jako punkt połączenia dla <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontrolować działający jako dostawcę połączenia.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> skojarzonego z kontrolką dostawcy w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedną z czynności wymagane do utworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów polega na utworzeniu punkty połączenia dla każdego formantu. Punkt połączenia z dostawcą jest obiektem, który zawiera informacje o tym, jak połączyć się z formant działający jako dostawcę. W kodzie źródłowym dostawcy, musi być jedną z metod identyfikowany za pomocą `ConnectionProvider` atrybutu. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> To znaczy skojarzone z dostawcą kontrolki zawiera szczegóły dotyczące metody i atrybutu, łącznie z Identyfikatora dla metody do użycia w interfejsie użytkownika (UI), nazwę wyświetlaną i typu wystąpienia interfejsu, które metoda może zwrócić z klientem formant. Ten zestaw informacji o dostawcy, jego metodę tworzącą połączenia i typu interfejsu, którą zapewnia, zbiorczo stanowi punkt połączenia z dostawcą.  
  
 Domyślnie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> mogą łączyć się tylko jeden z <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektów w danym momencie. Odbiorcy mogą być identyfikowane jako konsument możliwych punktów połączenia na wiele sposobów, ale odbiorcy mogą tylko brać udział w jedno połączenie jako użytkownik (w związku z tym, tylko do jednego z jej punktów połączeń klientów można aktywować) w danym momencie. Z kolei <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> może nawiązać połączenia z dowolną liczbą <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektów domyślnie. Na przykład formantu dostawcy, który zawiera kod pocztowy można połączyć wiele formantów konsumenta, które umożliwia tworzenie różnych rodzajów danych, w oparciu o kod pocztowy, takich jak dane o pogodzie, wiadomości i tak dalej przez kod pocztowy. To zachowanie domyślne można zmienić poprzez zastąpienie <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kodem źródłowym dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów, które służą jako konsument i dostawcę pod kątem połączenia i interfejs używany dla punktów połączenia. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest kodem strony sieci Web, który obsługuje formanty i demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości. W `Button1_Click` metody, wszystkie obiekty, które są wymagane w celu utworzenia połączenia są tworzone, w tym <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu. Należy pamiętać, wywołanie <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli. Różne obiekty utworzone są przekazywane do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę, aby utworzyć połączenie. W `Button2_Click` uzyskuje dostęp do kodu w metodzie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości i wyświetla niektóre szczegóły połączenia punktu.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce, należy użyć **tryb wyświetlania** kontrolka listy rozwijanej do przełączania strony Aby połączyć z trybu. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenie. Użyj **połączyć składnik Web Part formantów** przycisku lub wybrane połączenie interfejsu użytkownika, aby utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły Element ConnectionPoint** przycisk, aby uruchomić kod, który pokazuje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się do Identyfikatora obiektu służy jako punkt połączenia dostawcy dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator obiektu punktu połączenia dostawcy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Statyczne połączenia zadeklarowane w znaczniku strony sieci Web, deweloperzy można określić punktu połączenia dostawcy, które będą używane dla połączenia przez przypisywanie wartości do `ProviderConnectionPointID` atrybutu na `<asp:webpartconnection>` elementu. Jeśli wartość nie jest przypisana do atrybutu <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> zostanie użyta wartość właściwości.  
  
 Po utworzeniu dynamicznych połączeń (programowy), zwykle nie należy ustawiać wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości. Wystarczy zadzwonić <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager> i przekazanie do niej dostawcę i połączenia dostawcy punktu obiektów (wraz z wymaganych parametrów), a tej metody określa poprawny identyfikator na potrzeby połączenia dostawcy punkt. Podobnie w przypadku rozłączenia, można wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metody bez konieczności określania <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> wartości właściwości.  
  
> [!NOTE]
>  Identyfikator punktu połączenia z dostawcą można określić po wskazaniu <xref:System.Web.UI.WebControls.WebParts.WebPart> lub innych formantów serwera jako dostawca. Należy określić metodę wywołania zwrotnego w dostawcy, który służy do wystąpienia interfejsu zawierające dane z klientem. Aby określić metodę, oznacz go za pomocą `ConnectionProvider` atrybutu kod. Po dodaniu tego atrybutu, możesz dodać parametr wartości opcjonalny ciąg, który służy jako identyfikator dla dostawcy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu. Jeśli podana wartość dla parametru opcjonalnego identyfikator tej wartości staje się wartością <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości połączenia. Jeśli nie zostanie podana wartość Identyfikatora <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli przypisuje domyślny identyfikator, gdy obiekt zostanie utworzony.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano sposób użycia deklaracyjne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony za pomocą `<StaticConnections>` i `<asp:WebPartsConnection>` elementów. Deklaracja połączenia zawiera wymagane `ProviderConnectionPointID` atrybutu. Druga metoda do tworzenia połączenia jest wyświetlana w `Button1_Click` metoda, w przypadku, gdy kod tworzy nowe połączenie przy użyciu punktu połączenia (i identyfikator) zdefiniowana w formancie dostawcy. Następnie w metodzie `Button2_Click` kod uzyskuje dostęp do właściwości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne, zadeklarowany na stronie. Wprowadź jakiś tekst w kontrolce dostawcy i należy pamiętać, że jest wyświetlany u odbiorcy, ze względu na połączenie. Następnie można odłączyć kontrolki. Za pomocą **tryb wyświetlania** listy rozwijanej formant listy, przejdź na stronę, aby połączyć trybu. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenie. Kliknij przycisk **rozłączenia** przycisku. Użyj **połączyć składnik Web Part formantów** przycisk, aby ponownie utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły Element ConnectionPoint** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> wartości właściwości. Wartość jest zapisywany w etykiecie poniżej kontrolki.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się do Identyfikatora <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontrolować działającą jako dostawca dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator formantu dostawcy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Wartość właściwości jest wymagana podczas tworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Jeśli wartość nie jest przypisana do właściwości, wyjątek jest generowany, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli umożliwia przeprowadzenie próby aktywacji połączenia.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano sposób użycia deklaracyjne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> właściwości.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony za pomocą `<StaticConnections>` i `<asp:WebPartsConnection>` elementów. Deklaracja połączenia zawiera wymagane `ProviderID` atrybutu. Druga metoda tworzenia połączenia pojawia się w metodzie `Button1_Click`, w której kod tworzy nowe połączenie, używając punktu połączenia zdefiniowanego w kontrolce konsumenta. Następnie w `Button2_Click` metody, ten kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> właściwości i wyświetla go w etykietę.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje ze względu na połączenie statyczne, zadeklarowany na stronie. Wprowadź jakiś tekst w kontrolce dostawcy i należy pamiętać, że jest wyświetlany u odbiorcy, ze względu na połączenie. Następnie można odłączyć kontrolki. Aby to zrobić, należy użyć **tryb wyświetlania** kontrolka listy rozwijanej do przełączania strony Aby połączyć z trybu. Kliknij menu zleceń (reprezentowany przez strzałki w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenie. Kliknij przycisk **rozłączenia** przycisk i formanty są odłączone. Następnie użyj **połączyć składnik Web Part formantów** przycisk, aby ponownie utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły konsumenta** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> wartości właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zastępuje dziedziczonego <see cref="M:System.Object.ToString" /> metodę i zwraca typ krótkich nazw dla obiektu połączenia.</summary>
        <returns>Ciąg, który zawiera nazwę typu krótkiego (niekwalifikowanej) <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana przede wszystkim dla wygody przez projektantów kontroli. Zwiększa się, jak obiekty połączenia jest wyświetlany w widoku Projekt przy użyciu krótszą nazwę typu, a nie w pełni kwalifikowaną nazwę typu. Jednakże metody można wywołać w dowolnym momencie w kodzie którego znasz nazwę typu obiektu połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywołania <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metodę, aby zwrócić nazwę typu krótkiego <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 Przykładowy kod ma trzy części:  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do hostowania kontrolki, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w przykładzie kodu jest kod źródłowy dla interfejsu i formantów klienta oraz dostawcy. Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 Druga część przykładowy kod jest strona sieci Web. W prawym górnym jest `Register` dyrektywę, który odwołuje się do kodu źródłowego dla dwa dynamicznie kompilowany <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Statyczne połączenia jest zadeklarowany w `<StaticConnections>` elementu na stronie. `Button1_Click` Wywołania metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metodę, aby zapisać nazwę typu połączenia etykietę.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Ładowanie strony w przeglądarce. Statyczne połączenie jest już utworzony. Wprowadź jakiś tekst w kontrolce dostawcy i należy pamiętać, że tekst jest wyświetlany formantu konsumenta. Kliknij przycisk **szczegóły połączenia** przycisk, aby wykonać <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> obiekt, który jest używany do przekształcania danych między dwoma punktami połączenia w przeciwnym razie niezgodne w przypadku połączenia składnika Web Part.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku połączenia składnika Web Part istnieją dwa sposoby, w których podłączeniem formantów dostawcy i klienta w połączeniu. Można połączyć bezpośrednio, za pomocą odpowiednich <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiektów i typu interfejsu który jest zrozumiałe obie kontrolki. Lub, jeśli są one niezgodne, może łączą się bezpośrednio, przy użyciu <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt, który przekształca wystąpienia interfejsu dostawcę w zrozumieniu przez konsumenta typu.  
  
 Gdy transformatora będzie potrzebny w ramach połączenia <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> właściwość zawiera odwołanie do <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu. Transformer połączenia deklaratywnie w znaczniku strony sieci Web można dodać przez dodanie znacznika dla niestandardowych transformatora (lub jeden transformatorów udostępniony zestaw formantów części sieci Web), w ramach `<asp:WebPartConnection>` elementu. Można również dodać transformatora programowo, tworzenia wystąpienia obiektu go w kodzie i wywoływania <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager> formantu, aby utworzyć połączenie, przekazując do niej obiektu transformatora wraz z wymaganych parametrów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> obiekty używane wewnętrznie przez zestaw formantów części sieci Web.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> zawierający <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Właściwość nigdy nie jest przeznaczona do użycia przez deweloperów. Dostępu transformatora skojarzone z połączeniem, zawsze należy używać deweloperzy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> właściwości.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Jest używana wewnętrznie przez formant Web Part, skonfigurować, aby włączyć programistom stron zadeklarować transformatora elementów w obrębie `<asp:webpartconnection>` elementem w znacznikach strony sieci Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Formantów na części sieci Web platformy ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>