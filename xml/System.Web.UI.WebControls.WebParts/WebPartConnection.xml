<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9876a0ff584b9342112f635529e62289ab52c444" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30689039" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia obiekt, który umożliwia dwa <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> służy do utworzenia połączenia. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W zestawie formantu części sieci Web połączenie jest łączem lub skojarzenie między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> (lub innego serwera lub użytkownika) formantów, które pozwalają na udostępnianie danych. Ta możliwość udostępniania danych umożliwia połączonych formanty do użycia w sposób, który przekracza funkcje oferowane przez formanty izolowanym. Na przykład jeśli jeden formant zawiera kod pocztowy danych, a inny formant mógł odczytywania danych i udostępniać informacji o pogodzie lokalnych, na podstawie kodu pocztowego, możliwości połączenia dwóch formantów zawiera więcej wartości dla użytkowników. Aby rozszerzyć w tym przykładzie, inne formanty może zostać utworzony to również wyświetlane informacje oparte na kod pocztowy, takich jak kontrola wraz z łączami do lokalnych wiadomości i tych kontrolek, które mogą pracować z danymi kod pocztowy może udostępniać dane z pojedynczego formant, który zawiera Kod pocztowy. Tworzyć i zarządzać połączeń między takich kontroli zgodne z przeglądarki sieci Web, przy użyciu standardowych połączeń interfejsu użytkownika (UI) udostępniane przez użytkowników końcowych w aplikacji sieci Web części <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formant lub przy użyciu niestandardowego interfejsu użytkownika, dostarczone przez Developer.  
  
 To <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Przegląd klasy jest ogólnym zestawieniu podstawowe szczegóły dotyczące tworzenia połączenia. Aby uzyskać więcej informacji na temat określonych składników i wymagania związane z tworzeniem połączeń, zobacz [Omówienie połączeń części sieci Web](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b), lub Zobacz klasy odwołania i wspomnianego dyskusji następujące przykłady kodu. Istnieje kilka podstawowych aspektów połączenia części sieci Web:  
  
-   Dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Połączenie każdej części sieci Web składa się z dwóch formantów. Istnieje możliwość sterowania jednocześnie brać udziału w więcej niż jedno połączenie, ale każdego pojedynczego połączenia składa się z dokładnie dwóch formantów. Formanty mogą dziedziczyć bezpośrednio po <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy podstawowej ani ich nie mogą być inne formanty serwera, łącznie z formantami, niestandardowe kontrolki serwera i kontrolek użytkownika programu ASP.NET. Formanty, które nie pochodzą z <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy, jeśli umieszczone w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy, automatycznie są ujęte w <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> obiektu w czasie wykonywania, która umożliwi im dziedziczyć <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy i funkcja jako środowiska wykonawczego <xref:System.Web.UI.WebControls.WebParts.WebPart> formanty.  
  
-   Formanty znajdującej się w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy. Zarówno <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek i innego typu kontrolki serwera musi znajdować się w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy, aby można było uczestniczyć w połączeń części sieci Web (i większość funkcji części sieci Web).  
  
-   Konsumenci i dostawcy. W związku z każdej części sieci Web istnieją dwie opcje: Dostawca danych i konsumentów danych. Dostawca dostarcza danych do konsumenta za pomocą metody określonej wywołania zwrotnego, która zwraca dane w postaci interfejsu. (Na przykład sposobu tworzenia i określić metodę wywołania zwrotnego, zobacz przykład części tego tematu). Ta metoda wywołania zwrotnego jest znany jako punkt połączenia dostawcy. Szczegóły tego punktu połączenia (jego nazwa "przyjaznym", identyfikator i typ zwróconego interface) są zawarte w <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt skojarzony z formantem dostawcy. Klient odbiera dane za pomocą określonej metody, który może zaakceptować wystąpienia interfejsu. Ta metoda jest znany jako punkt połączenia klienta i szczegóły punktu połączenia (nazwa, identyfikator i typ interfejsu) są zawarte w <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt skojarzony z formantem konsumenta.  
  
-   Formanty zgodny lub nieprawidłowy transformatora. W przypadku połączenia do pracy klienta oraz dostawcy musi być zgodne (co oznacza, że ich metod punktu określonego połączenia może współpracować z tego samego typu interfejsu) lub może być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> stanie tłumaczenia oferowane przez typ obiektu Dostawca na typ zrozumiał przez klienta.  
  
-   A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu. Połączenia z istnieje, musi być wystąpieniem elementu <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> klasę, która zawiera odwołania do formantów dostawcy i klienta oraz szczegóły dotyczące ich punkty połączenia. Jeśli dostawcy i klienta są niezgodne, a zamiast tego użyć <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt, aby połączyć, transformator odwołuje się do połączenia.  
  
-   Sposób nawiązywania połączenia. Po zgodne kontroli klienta i dostawcy zostały prawidłowo zaprojektowane z metody punktu połączenia i umieścić w strefie, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt jest dostępny, ostatniego konieczne podstawowe kroku jest zainicjowanie połączenia. Jednym ze sposobów przyczyną może być jest przeznaczony dla użytkowników utworzyć połączenie za pośrednictwem interfejsu użytkownika. Jeśli umieścisz `<asp:connectionszone>` elementu na stronie, a drugi wymaganych składników dla połączenia są w miejscu, w czasie wykonywania użytkownika można przełączać strony do trybu wyświetlania connect, kliknij przycisk Zlecenie Połącz w menu zleceń dostawcy lub konsumenta , jak i połączenie interfejsu użytkownika (na podstawie <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontroli) pojawi się. Za pośrednictwem tego interfejsu użytkownika użytkownik może inicjować połączenia. Innym sposobem jest zainicjowanie połączenia jest przeprowadzenie programowo. W obu przypadkach jest taka sama czy za pośrednictwem interfejsu użytkownika, lub programowo, metody podstawowej inicjuje połączenie. Wywołania aplikacji <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> — metoda (lub <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę, jeśli używanie transformatora) na <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolować, przekazanie do niego, dostawca, konsumenta i ich obiekty punktu odpowiednie połączenie, a metoda zwraca <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klasy definiuje obiekt, który hermetyzuje istotne szczegóły połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Klasa zawiera prawie tylko właściwości powiązanych z szczegóły danego połączenia. Kilka właściwości dotyczą kontroli klienta w połączeniu. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Właściwość odwołuje się do samego, formantu użytkownika i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> właściwość odwołuje się identyfikator klienta. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Odwołuje się obiekt, który zawiera szczegółowe informacje o punkt połączenia klienta, że użytkownik <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Właściwość odwołuje się identyfikator <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. Te właściwości związanych z odbiorców połączenia musi mieć wartość do nich przypisane do utworzenia połączenia.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klasa ma również kilka właściwości, które odnoszą się do sterowania dostawcy w połączeniu i odpowiadają one właściwości dla konsumenta. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Właściwość odwołuje się do dostawcy samej kontrolce, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> właściwość odwołuje się do jej identyfikatora. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Odwołań do właściwości <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwość odwołuje się identyfikator punktu połączenia dostawcy.  
  
 Kilka właściwości dotyczą stan połączenia. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Właściwość wskazuje, czy połączenie jest aktywne (obecnie wymiana danych) lub (nadal połączony, ale nie jest aktywnie udostępniania danych nieaktywnych). <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Właściwość wskazuje, czy połączenie jest udostępnione (dostępne dla wszystkich użytkowników strony) lub połączenie specyficzne dla użytkownika i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwość wskazuje, czy formant jest statyczny (deklaracja w znaczniku strony i w związku z tym stałe) lub dynamiczne (utworzone programowo, co oznacza że można usunięte).  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia prostego połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. W przykładzie pokazano trzy sposoby tworzenia połączenia: deklaratywnie, umieszczając tagi dla połączenia w znaczniku strony sieci Web; programowo tworząc połączenia w kodzie; za pośrednictwem interfejsu użytkownika, umieszczając <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolki na stronie, co pozwala użytkownikom nawiązać połączenie.  
  
 Przykładowy kod ma czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kodu źródłowego dla interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy o nazwie `ZipCodeWebPart` który implementuje interfejs i działa jako kontrolka dostawcy. Jego `ProvideIZipCode` metoda to metoda wywołania zwrotnego, który implementuje element członkowski tylko. Metoda zwraca po prostu wystąpienia interfejsu. Należy pamiętać, że metoda jest oznaczona atrybutem `ConnectionProvider` atrybutu w metadanych. Jest to mechanizm identyfikację metodę jako metoda wywołania zwrotnego dla punktu połączenia dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> nosi nazwę klasy `WeatherWebPart`, i pełni rolę użytkownika dla połączenia. Ta klasa ma metodę o nazwie `GetZipCode` który pobiera wystąpienie elementu `IZipCode` interfejsu z formantu dostawcy. Należy pamiętać, że ta metoda jest oznaczona jako metoda punkt połączenia klienta z `ConnectionConsumer` atrybutu w metadanych.  
  
 Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. U góry są `Register` dyrektywy dla formantu użytkownika i niestandardowej <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. W przykładzie założono kompilacji dynamicznej kontroli, kod źródłowy dla formantów należy w podfolderze App_Code; `Register` znaczników na stronie odwołuje się do tagu dowolnego prefiksu i przestrzeni nazw formantów. Niestandardowa <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów (dostawcy i klienta) są zadeklarowane na stronie sieci Web `<asp:webpartzone>` element, wewnątrz `<zonetemplate>` elementu.  
  
 Ta strona zawiera trzy sposoby stanowią połączenie między formantów niestandardowych. Pierwsza metoda jest deklaratywne. W znaczniku strony <`StaticConnections>` elementu zadeklarowano i w ramach którego jest `<asp:WebPartConnections>` elementu przy użyciu różnych szczegółów klienta i dostawcy połączenia określony jako atrybuty. To jest jednym ze sposobów tworzenia połączenia przez zadeklarowanie go bezpośrednio na stronie sieci Web, w szczególności w `<asp:WebPartManager>` elementu. Ze względu na to statyczne połączenie natychmiast po raz pierwszy ładuje strony tworzone jest połączenie między dwoma formanty niestandardowe.  
  
 Druga metoda stanowiących połączenie między formantami są dostarczane przez `<asp:connectionszone>` elementu na stronie. Jeśli użytkownik zmienia stronę w trybie wyświetlania connect w czasie wykonywania, a następnie klika przycisk Połącz zlecenie na jednym z niestandardowych formantów `<asp:connectionszone>` elementu automatycznie renderuje interfejsu użytkownika dla tworzenia połączenia.  
  
 Strona przedstawiono również trzeci sposób tworzenia połączenia, który jest przeprowadzenie programowo. W `Button1_Click` tworzy kod metody <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu dostawcy kontroli i pobiera szczegóły punktu połączenia przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metody. Wykonuje podobne zadanie dla formantu użytkownika podczas wywoływania <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metody. Na koniec tworzy nowy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu w przeglądarce strony sieci Web pierwszego połączenia już istnieje, ponieważ jest zadeklarowany w `<StaticConnections>` elementu. Wprowadź tekst w **dostawcy kodu POCZTOWEGO** formant który będzie wyświetlana w formancie użytkownika. Następnie rozłączenia dwóch formantów. Przy użyciu **tryb wyświetlania** listy rozwijanej formant listy, Zmień stronę, aby połączyć tryb wyświetlania. Kliknij menu zleceń (reprezentowane za pomocą strzałki w dół na pasku tytułu) dla każdego z <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje i zwróć uwagę, że każdy ma **Connect** opcji. Jest to zlecenie connect, która jest wyświetlana w menu zleceń tylko wtedy, gdy strona działają w trybie connect. Kliknij przycisk Zlecenie połączenia na jednym z formantów i połączenia udostępniane przez interfejs użytkownika <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formant jest widoczny. Kliknij przycisk **rozłączenia** przycisk, aby zakończyć statyczne połączenie między formantami. Użyj **tryb wyświetlania** formantu, aby przywrócić do trybu przeglądania strony. Spróbuj ponownie wprowadzić nowy tekst w dostawcy i należy pamiętać, że ponieważ formantów jest odłączony, tekst nie może zaktualizować w formancie użytkownika.  
  
 Następnie użyj tej samej metody jako powyżej przełączenia się na stronie do trybu wyświetlania Połącz ponownie. Kliknij przycisk Połącz zlecenie na formantów. Kliknij przycisk **utworzyć połączenie** link i użyć dostarczonych przez interfejs użytkownika <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> sterowania, aby utworzyć połączenie między formantami. Jest to drugi metoda tworzenia połączeń. Należy zwrócić uwagę, czy jak połączenie został utworzony, ostatni ciąg wprowadzono w formancie dostawcy (które nie są wyświetlane, ponieważ rozłączonych formanty) nagle pojawia się w konsumenta, ponieważ połączenie zostało utworzone ponownie. Kliknij przycisk **rozłączenia** przycisku do końca bieżącego połączenia, który został właśnie utworzony. Zwraca stronę, aby tryb przeglądania. Wprowadź nowy tekst w dostawcy, aby zademonstrować tekst nie zostanie zaktualizowana i ponownie rozłączenia kontrolki.  
  
 Zwraca stronę, aby połączyć tryb wyświetlania. Zamiast klikać zlecenie connect, kliknij przycisk **połączyć składnik Web Part formanty** przycisku, który przedstawia trzeci metody tworzenia połączenia. To rozwiązanie łączy kontrolek w jednym kroku proste bez konieczności używania <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formantu. Należy pamiętać, że co połączenie, jest tworzony, ostatni ciąg, wprowadzona w dostawcy nagle pojawia się w formancie użytkownika.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor jest publiczny, dzięki czemu analizatora składni ASP.NET można utworzyć wystąpienia, gdy połączenie jest zadeklarowany w znaczniku strony sieci Web; ten konstruktor nie jest przeznaczona do użycia w kodzie developer.  
  
 Jeśli chcesz utworzyć <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> programowo, obiekt, należy użyć <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> lub <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> metody w <xref:System.Web.UI.WebControls.WebParts.WebPartManager> formantu. Te metody obsługi wielu szczegółów tworzenia połączenia, a następnie wróć <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> klasy ustawia wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwości `true`. W związku z tym domyślny stan nowego połączenia ma być statyczne (co oznacza, że jest on zadeklarowany w znaczniku strony sieci Web zawierającej) i udostępnionych (widoczny dla wszystkich użytkowników strony). Będzie to miało miejsce podczas dodawania połączenia w typowy scenariusz przez zadeklarowanie połączenia w znaczniku strony z `<asp:webpartconnection>` elementu. Jednak w innych warunkach połączenia będą miały różne wartości tych właściwości. Na przykład programowo dodać połączenie przez utworzenie obiektu połączenia w kodzie, a użytkownik jest wyświetlanie strony w zakresie personalizacji użytkownika domyślnego, połączenie zostanie utworzona jako dynamiczny, na — user(visible only to the specific user) połączenie.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwości są tylko do odczytu, a te właściwości, które określają rodzaj połączenia są ustawiane wewnętrznie przez <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli w zależności od sposobu tworzenia połączenia (deklaratywnie w znacznikach strony lub programowo przy użyciu kodu lub interfejsu użytkownika).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> obiekt, który działa jako kontrolka użytkownika w połączeniu.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> reprezentujący kontroli składników Web Part działający jako odbiorców w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenie każdej części sieci Web składa się z dwóch formantów, które udostępniają danych. Jeden formant zachowuje się jak dostawcy danych, a inny formant zachowuje się jak konsumenta, otrzymywanie i przetwarzania danych od dostawcy. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Właściwości pobiera odwołanie do <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolować działając jako klient w relacji połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje programowy użycia <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> właściwości.  
  
 Przykładowy kod ma czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formanty służące jako klienta i dostawcy dla połączenia i interfejs używany dla punktów połączenia. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładu kodu jest kodem strony sieci Web, który obsługuje formantów i pokazuje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> właściwości. W górnej części strony są `Register` dyrektywy do kontrolki użytkownika i kontrolek niestandardowych. Ponieważ w tym przykładzie użyto kompilacji dynamicznej `Register` dyrektywę dla pliku źródłowego nie musi odwoływać się nazwy zestawu; zawiera tag dowolnego prefiksu i przestrzeni nazw formantów. W `Button2_Click` metody kod uzyskuje dostęp do obiektu połączenia za pośrednictwem <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli i pobiera odwołanie do kontrolki użytkownika.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce, za pomocą **tryb wyświetlania** Przełącz stronę, aby połączyć tryb formant listy rozwijanej. Kliknij menu zleceń (reprezentowane przez strzałkę w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenia. Użyj **połączyć składnik Web Part formanty** przycisku lub podane połączenie interfejsu użytkownika (UI), można utworzyć połączenia między formantami dwa. Kliknij przycisk **wyświetlania informacji konsumenta** przycisk, aby uruchomić kod, który demonstruje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Długość <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> właściwości jest równa zero.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który służy jako punkt połączenia dla formantu, który działa jako klient w połączeniu.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> skojarzony z formantem odbiorców w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeden z kroków wymaganych do utworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów jest utworzenie punktów połączenia dla każdego formantu. Punkt połączenia klienta jest obiekt, który zawiera informacje o sposobie połączyć z kontrolą, działając jako klient. W kodzie źródłowym konsumenta, musi być jedną z metod identyfikowany z `ConnectionConsumer` atrybutu. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Obiekt, który jest skojarzony z formantem konsumenta zawiera szczegółowe informacje dotyczące metody i atrybut, tym identyfikator dla metody do użycia w interfejsie użytkownika (UI), nazwa wyświetlana i typ interfejsu, które metody można pobrać. Ten zestaw informacje na temat konsumenta, jego metodę tworzące połączenia i typ interfejsu, który obsługuje usługę, zbiorczo stanowi punkt połączenia klienta.  
  
 Domyślnie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu mogą łączyć się tylko jeden z <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu naraz. Klient może mieć wiele metod zidentyfikowane jako punkty połączenia możliwe konsumenta, ale konsumenta tylko mogą uczestniczyć w ramach jednego połączenia klientów (w związku z tym tylko jednego z jego punktów połączenia klienta mogą być aktywne) w czasie. Z kolei <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> można nawiązać połączenia z dowolną liczbę <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektów. To zachowanie domyślne można zmienić przez zastąpienie <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje programowy użycia <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formanty służące jako klienta i dostawcy dla połączenia i interfejs używany dla punktów połączenia. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładu kodu jest kodem strony sieci Web, który obsługuje formantów i pokazuje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości. W `Button1_Click` metody, wszystkie obiekty, które są wymagane do utworzenia połączenia są tworzone, w tym <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. Te obiekty są przekazywane do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę w celu utworzenia połączenia. W `Button2_Click` uzyskuje dostęp do kodu metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości i wyświetla niektóre szczegóły połączenia punktu.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce, za pomocą **tryb wyświetlania** Przełącz stronę, aby połączyć tryb formant listy rozwijanej. Kliknij menu zleceń (reprezentowane przez strzałkę w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenia. Użyj **połączyć składnik Web Part formanty** przycisku lub podane połączenie interfejsu użytkownika, aby utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły Element ConnectionPoint** przycisk, aby uruchomić kod, który demonstruje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się do Identyfikatora obiektu służy jako punkt połączenia klienta dla tego połączenia.</summary>
        <value>Ciąg zawierający identyfikator połączenia klienta punktu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenia statyczne zadeklarowany w znaczniku strony sieci Web, deweloperzy można określić punkt połączenia klienta, które będą używane dla połączenia przez przypisanie wartości do `ConsumerConnectionPointID` atrybutu `<asp:webpartconnection>` elementu. Jeśli wartość nie jest przypisany do atrybutu, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> jest używana wartość właściwości.  
  
 Podczas tworzenia dynamicznych połączeń (programowe), zwykle nie należy ustawiać wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości. Możesz po prostu wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolować, przekazanie do niego konsumenta i połączenia klienta punktu obiekty (wraz z wymaganych parametrów), a ta metoda określa identyfikator jest prawidłowy dla połączenia klienta punkt. Podobnie podczas odłączania, możesz wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metody bez konieczności określ <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> wartości właściwości.  
  
> [!NOTE]
>  Identyfikator punkt połączenia klienta można określić po wskazaniu <xref:System.Web.UI.WebControls.WebParts.WebPart> lub inny formant serwera klientów. Należy określić metody pobierającej wystąpienia interfejs dostarczony przez formant dostawcy lub transformatora konsumenta. Aby zidentyfikować metody, oznacz go z `ConnectionConsumer` atrybutu kod. Po dodaniu tego atrybutu można dodać parametru wartości opcjonalny ciąg, który służy jako identyfikator dla klienta <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. Jeśli zostanie podana wartość dla parametru opcjonalnego identyfikator tej wartości staje się wartością <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości dla połączenia. Jeśli nie zostanie podana wartość Identyfikatora <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> jest używana wartość właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia deklaratywne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony przy użyciu `<StaticConnections>` i `<asp:WebPartsConnection>` elementy. Deklaracja połączenia zawiera wymagane `ConsumerConnectionPointID` atrybutu. Druga metoda tworzenia połączenia zostanie wyświetlony w `Button1_Click` metody, gdy kod tworzy nowe połączenie, za pomocą punktu połączenia, zdefiniowanego w formancie użytkownika. Następnie w `Button2_Click` uzyskuje dostęp do kodu metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> właściwości.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje z powodu statyczne połączenie zadeklarowane na stronie. Wprowadź tekst w formancie dostawcy i należy pamiętać, że jest wyświetlany w konsumentów ze względu na połączenie. Następnie odłącz kontrolki. Przy użyciu **tryb wyświetlania** listy rozwijanej formant listy, Przełącz stronę, aby połączyć tryb. Kliknij menu zleceń (reprezentowane przez strzałkę w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenia. Kliknij przycisk **rozłączenia** przycisku. Użyj **połączyć składnik Web Part formanty** przycisk, aby ponownie utworzyć połączenie między dwa formanty. Kliknij przycisk **szczegóły Element ConnectionPoint** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> wartości właściwości. Wartość jest zapisywany w etykiecie poniżej kontrolki.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się identyfikator <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontroli działania klientów dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator formantu, działając jako klient w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Wartość właściwości jest wymagana podczas tworzenia połączenia między <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Jeśli wartość nie jest przypisany do właściwości, jest zwracany wyjątek, kiedy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli umożliwia przeprowadzenie próby aktywacji połączenia.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia deklaratywne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> właściwości.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony przy użyciu `<StaticConnections>` i `<asp:WebPartsConnection>` elementy. Deklaracja połączenia zawiera wymagane `ConsumerID` atrybutu. Druga metoda tworzenia połączenia zostanie wyświetlony w `Button1_Click` metody, gdy kod tworzy nowe połączenie, za pomocą punktu połączenia, zdefiniowanego w formancie użytkownika. Następnie w `Button2_Click` metody kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> właściwości i wyświetla je w etykiecie.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje z powodu statyczne połączenie zadeklarowane na stronie. Wprowadź tekst w formancie dostawcy i należy pamiętać, że jest wyświetlany w konsumentów ze względu na połączenie. Następnie odłącz kontrolki. Przy użyciu **tryb wyświetlania** listy rozwijanej formant listy, Przełącz stronę, aby połączyć tryb. Kliknij menu zleceń (reprezentowane przez strzałkę w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenia. Kliknij przycisk **rozłączenia** przycisku. Użyj **połączyć składnik Web Part formanty** przycisk, aby ponownie utworzyć połączenie między dwa formanty. Kliknij przycisk **szczegóły konsumenta** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> wartości właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiektu.</summary>
        <value>Ciąg zawierający identyfikator <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekt ma unikatową wartość przypisana do jego <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> właściwości. To, aby upewnić się, że istnieje możliwość rozróżnienia wielu połączeń.  
  
 W przypadku utworzenia statyczne połączenie przez zadeklarowanie `<asp:webpartconnection>` element strony sieci Web, a nie należy przypisywać wartości do `ID` atrybutu dla połączenia wyjątek jest zgłaszany, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli umożliwia przeprowadzenie próby aktywacji połączenia.  
  
 Gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli tworzy nowe połączenie dynamicznych, wywołuje <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> metodę, aby wygenerować unikatowego Identyfikatora dla połączenia.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia deklaratywne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> właściwości.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony przy użyciu `<StaticConnections>` i `<asp:WebPartsConnection>` elementy. Deklaracja połączenia zawiera wymagane `ID` atrybutu. Druga metoda tworzenia połączenia zostanie wyświetlony w `Button1_Click` metody, gdy kod tworzy nowe połączenie, za pomocą punktu połączenia, zdefiniowanego w formancie użytkownika. W tym miejscu właściwości ID nie jest wymagana, ponieważ połączenie jest dynamiczny i <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli przypisuje identyfikator połączenia. W `Button2_Click` metody kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> właściwości i wyświetla je w etykiecie.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje z powodu statyczne połączenie zadeklarowane na stronie. Wprowadź tekst w formancie dostawcy i należy pamiętać, że jest wyświetlany w konsumentów ze względu na połączenie. Następnie odłącz kontrolki. Przy użyciu **tryb wyświetlania** listy rozwijanej formant listy, Przełącz stronę, aby połączyć tryb. Kliknij menu zleceń (reprezentowane przez strzałkę w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenia. Kliknij przycisk **rozłączenia** przycisku. Użyj **połączyć składnik Web Part formanty** przycisk, aby ponownie utworzyć połączenie między dwa formanty. Kliknij przycisk **szczegóły połączenia** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> wartości właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiekt jest obecnie stanie wymiany danych między formantami dostawcy i klienta.</summary>
        <value>
          <see langword="true" /> Jeśli połączenie jest aktywne; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Właściwość wskazuje stan <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu. Gdy połączenie jest w tym stanie, formantów dostawcy i klienta w połączeniu są komunikujące się i wymieniać dane za pomocą wspólnego interfejsu lub <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu.  
  
 Gdy użytkownik odwiedza renderowanej strony zawiera nawiązane połączenie w trybie normalnym przeglądania, połączenie jest zwykle active (chyba że nie można aktywować ze względu na konflikt niektórych lub innych problem podczas ładowania strony). Na wczesnym etapie cyklu życia strony i kontrolki, wartość właściwości jest `false`. Tuż po aktywowaniu połączenie <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> zdarzenia w <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli jest wywoływane. W szczególności połączenia została aktywowana po klienta ma pobrać wystąpienia określonego interfejsu od dostawcy lub <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu.  
  
 Warto wiedzieć, czy połączenie jest aktywne w sytuacjach, w których mogą wystąpić konflikty lub problemy z synchronizacją ze względu na wiele połączeń na stronie. Na przykład, jeśli istnieje jakaś konflikt między dwa połączenia <xref:System.Web.UI.WebControls.WebParts.WebPartManager> formant ma opcję nie aktywacji jednego z połączeń, aby uniknąć konfliktu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> właściwości.  
  
 Przykład ma trzy części:  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 Druga część przykładowy kod jest strony sieci Web. U góry jest `Register` dyrektywy, która odwołuje się do kodu źródłowego dla dwóch dynamicznie skompilowanych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Połączenia statyczne jest zadeklarowany w `<StaticConnections>` elementu na stronie. W ramach `<script>` elementu są cztery procedury obsługi zdarzeń. Każdy program obsługi zdarzeń sprawdza wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> właściwości połączenia statyczne i zapisuje komunikat do <xref:System.Web.UI.WebControls.Label> kontroli wskazującą, czy połączenie jest aktywne lub nieaktywne w danym stanie cyklu życia strony i kontrolki. Oznacza to, w jakim punkcie połączenia staje się aktywny, i że pozostaje aktywne po stronie jest renderowany.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Ładowanie strony w przeglądarce. Statyczne połączenie jest już utworzony, a wiadomości ma już zapisane etykiety pokazujący, czy połączenie było aktywne na różnych etapach cyklu życia strony i kontrolki. Kliknij przycisk **szczegóły połączenia** przycisk i pamiętaj, że połączenie nie jest aktywny w tym momencie, ale czy każdorazowo po uaktywnieniu połączenia <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> zdarzeń oraz czy jest nadal aktywne (i dlatego pozostanie) po <xref:System.Web.UI.Control.PreRender> zdarzeń strony.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiekt jest widoczny dla wszystkich użytkowników lub tylko do bieżącego użytkownika.</summary>
        <value>
          <see langword="true" /> Jeśli połączenie jest udostępniana; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku poszczególnych <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu mogą być udostępniane wystąpienia użytkownika. Udostępnione wystąpienie oznacza, że połączenie jest widoczne dla wszystkich użytkowników strony sieci Web i wystąpienia użytkownika oznacza, że połączenie jest widoczna tylko dla określonego użytkownika.  
  
 Ogólnie rzecz biorąc sposób połączenia jest dodany do strony określa, czy połączenie jest udostępnione. Jeśli połączenie jest zadeklarowany w znaczniku strony sieci Web, a następnie połączenie jest udostępnione i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> wartość właściwości jest `true`. Ponadto jeśli strony sieci Web wspólnego zakresu personalizacji po dodaniu połączenia, połączenie jest również udostępniony. Zazwyczaj, gdy użytkownik używa `<asp:connectionszone>` interfejsu użytkownika (UI), aby dodać połączenie strony jest w zakresie personalizacji użytkownika, więc połączenie nie jest udostępniana i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> wartość właściwości jest `false`.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje programowy użycia <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> właściwości.  
  
 Przykładowy kod ma pięć części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wpis w pliku Web.config, który jest wymagany do uruchamiania w przykładzie.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. W `Button2_Click` metody sprawdza <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> właściwości istniejące połączenie i wyświetlane na stronie.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Czwarty część przykładowy kod jest wpisu w pliku Web.config, który jest wymagany dla konta użytkownika, który będzie działać na przykład, aby można było edytować stronę w wspólnego zakresu personalizacji. Aby je włączyć, musi mieć wpis w pliku Web.config w `<system.web>` sekcji, która wygląda jak w następującym przykładzie.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Po załadowaniu strony w przeglądarce, za pomocą **tryb wyświetlania** kontroli listy rozwijanej, aby przełączyć stronę, aby połączyć tryb wyświetlania. Kliknij przycisk **połączyć składnik Web Part formanty** przycisku do utworzenia połączenia. Następnie kliknij przycisk **szczegóły połączenia** przycisk, aby wyświetlić, czy jest ono udostępnione. Jeśli utworzono połączenie ze stroną w zakresie personalizacji użytkownika domyślnego, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> wartość właściwości powinny być `false` dla połączenia.  
  
 W menu zleceń jednego z <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów (wskazywanym przez strzałkę w dół na pasku tytułu), kliknij przycisk Połącz zlecenie. Gdy pojawi się połączenia interfejsu użytkownika, kliknij przycisk **rozłączenia** przycisk, aby zakończyć połączenie. Użyj **tryb wyświetlania** formantu, aby przywrócić do trybu przeglądania strony.  
  
 W **tryb wyświetlania** sterowania, wybierz opcję **Shared** można przełączać strony do udostępnionego zakresu personalizacji. Wykonaj te same czynności, jak te powyżej, aby utworzyć połączenie, a następnie ponownie kliknij przycisk **szczegóły połączenia** przycisk, aby wyświetlić, czy jest ono udostępnione. W takim przypadku wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> właściwość powinna być `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> obiektu jest zadeklarowany w znaczniku strony sieci Web lub utworzone programowo.</summary>
        <value>
          <see langword="true" /> Jeśli połączenie jest statyczny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenia między formantami części sieci Web może być statyczne lub dynamiczne. Połączenia statyczne jest zadeklarowany w znaczniku strony sieci Web przy użyciu `<asp:WebPartConnection>` elementu. Dynamiczne połączenia są tworzone programowo lub gdy użytkownik tworzy połączenie za pośrednictwem interfejsu użytkownika (UI), zdefiniowane przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formantu.  
  
 Połączenia statyczne są obiekty udostępnione, co oznacza, że są one dostępne dla wszystkich użytkowników strony sieci Web. Ponadto są zasadniczo trwałe, ponieważ statycznych, takich jak <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroli, nie może być trwale usunięte.  
  
> [!NOTE]
>  Gdy obiekt statyczne połączenie nie może trwale usunięte, może trwale rozłączona. W takim przypadku odłączony obiekt czy istnieje na serwerze, ale użytkownik końcowy nie będzie świadomość istnienia obiektu na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje programowy użycia <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwości.  
  
 Przykładowy kod ma trzy części:  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strona sieci Web do hostowania kontrolki i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 Druga część przykładowy kod jest strony sieci Web. U góry jest `Register` dyrektywy, która odwołuje się do kodu źródłowego dla dwóch dynamicznie skompilowanych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Połączenia statyczne jest zadeklarowany w `<StaticConnections>` elementu na stronie. `Button1_Click` Uzyskuje dostęp do metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwość do sprawdzenia, czy połączenie jest statyczne.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Ładowanie strony w przeglądarce. Statyczne połączenie jest już utworzony. Wprowadź tekst w formancie dostawcy i należy pamiętać, że tekst jest wyświetlany w formancie użytkownika. Kliknij przycisk **szczegóły połączenia** przycisk, aby wyświetlić wartość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> formant, który działa jako dostawca w połączeniu składników Web Part.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> działający jako dostawca danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenie każdej części sieci Web składa się z dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formanty — klienta i dostawcy — i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwość zwraca odwołanie do formantu dostawcy w połączeniu.  
  
 Podobnie jak jego odpowiednik w przypadku połączenia (kontrola użytkownika) kontrola dostawcy jest niezbędny do ustanowienia połączenia. Czy należy utworzyć połączenie programowe lub przez zadeklarowanie go w formacie trwałości strony, należy określić formantu, który ma działać jako dostawca dla połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwości.  
  
 Przykładowy kod ma trzy części:  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strona sieci Web do hostowania kontrolki i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 Druga część przykładowy kod jest strony sieci Web. U góry jest `Register` dyrektywy, która odwołuje się do kodu źródłowego dla dwóch dynamicznie skompilowanych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Połączenia statyczne jest zadeklarowany w `<StaticConnections>` elementu na stronie. Zwróć uwagę, że w `<asp:webpartconnection>` elementu `ProviderID` atrybut ma identyfikator formantu dostawcy przypisane do niej. Jest to wymagane do identyfikowania dostawcy dla statycznych połączenia. `Button1_Click` Uzyskuje dostęp do metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwości i zapisuje niektóre z jego szczegóły etykiety.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Ładowanie strony w przeglądarce. Statyczne połączenie jest już utworzony. Wprowadź tekst w formancie dostawcy i należy pamiętać, że tekst jest wyświetlany w formancie użytkownika. Kliknij przycisk **szczegóły dostawcy** przycisk, aby wyświetlić niektóre z wartości właściwości dostępne za pośrednictwem <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Długość <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> wartość właściwości jest równa zero.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który służy jako punkt połączenia dla <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontrolować działający jako dostawca dla połączenia.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> skojarzony z formantem dostawcy w połączeniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeden z kroków wymaganych do utworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> formantów jest utworzenie punktów połączenia dla każdego formantu. Punkt połączenia dostawcy jest obiekt, który zawiera informacje o sposobie połączyć z kontrolą pełnią funkcję dostawcy usług. W kodzie źródłowym dostawcy, musi być jedną z metod identyfikowany z `ConnectionProvider` atrybutu. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Który jest skojarzony z dostawcą formant zawiera szczegółowe informacje dotyczące metody i atrybut, tym identyfikator dla metody, nazwa wyświetlana do użycia w interfejsie użytkownika (UI), i wpisz wystąpienie interfejsu, które metody można wrócić do konsumenta formant. Ten zestaw informacji o dostawcy, jego metodę tworzące połączenia i typ interfejsu, który zapewnia, zbiorczo stanowi punkt połączenia dostawcy.  
  
 Domyślnie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> mogą łączyć się tylko jeden z <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu naraz. Klient może mieć wiele metod zidentyfikowane jako punkty połączenia możliwe konsumenta, ale konsumenta tylko mogą uczestniczyć w ramach jednego połączenia klientów (w związku z tym tylko jednego z jego punktów połączenia klienta mogą być aktywne) w czasie. Z kolei <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> można nawiązać połączenia z dowolną liczbę <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektów domyślnie. Na przykład formant dostawcy, który zawiera kod pocztowy może zostać połączona z wielu formantów konsumenta, które używają kodu pocztowego można utworzyć różne rodzaje danych oparte na kod pocztowy, takich jak dane o pogodzie, wiadomości i tak dalej. To zachowanie domyślne można zmienić przez zastąpienie <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje programowy użycia <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> formanty służące jako klienta i dostawcy dla połączenia i interfejs używany dla punktów połączenia. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładu kodu jest kodem strony sieci Web, który obsługuje formantów i pokazuje użycie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości. W `Button1_Click` metody, wszystkie obiekty, które są wymagane do utworzenia połączenia są tworzone, w tym <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu. Należy pamiętać, wywołanie <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager> formantu. Różne obiekty utworzone są przekazywane do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę w celu utworzenia połączenia. W `Button2_Click` uzyskuje dostęp do kodu metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości i wyświetla niektóre szczegóły połączenia punktu.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce, za pomocą **tryb wyświetlania** Przełącz stronę, aby połączyć tryb formant listy rozwijanej. Kliknij menu zleceń (reprezentowane przez strzałkę w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenia. Użyj **połączyć składnik Web Part formanty** przycisku lub podane połączenie interfejsu użytkownika, aby utworzyć połączenie między dwoma formantami. Kliknij przycisk **szczegóły Element ConnectionPoint** przycisk, aby uruchomić kod, który demonstruje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się do Identyfikatora obiektu służy jako punkt połączenia dostawcy dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator dla obiekt punkt połączenia dostawcy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenia statyczne zadeklarowany w znaczniku strony sieci Web, deweloperzy można określić punktu połączenia dostawcy, który będzie używany dla połączenia przez przypisanie wartości do `ProviderConnectionPointID` atrybutu `<asp:webpartconnection>` elementu. Jeśli wartość nie jest przypisany do atrybutu, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> jest używana wartość właściwości.  
  
 Podczas tworzenia dynamicznych połączeń (programowe), zwykle nie należy ustawiać wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości. Możesz po prostu wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolować, przekazanie do niego dostawcy i połączenia z dostawcą punktu obiekty (wraz z wymaganych parametrów), a ta metoda określa poprawny identyfikator do użycia na potrzeby połączenia dostawcy punkt. Podobnie podczas odłączania, możesz wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metody bez konieczności określ <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> wartości właściwości.  
  
> [!NOTE]
>  Po wyznaczeniu można ustalić Identyfikatora punkt połączenia dostawcy <xref:System.Web.UI.WebControls.WebParts.WebPart> lub inny formant serwera jako dostawca. Należy określić, metody wywołania zwrotnego w dostawcy, który służy wystąpienie interfejsu zawierający dane z klientem. Aby zidentyfikować metody, oznacz go z `ConnectionProvider` atrybutu kod. Po dodaniu tego atrybutu można dodać parametru wartości opcjonalny ciąg, który służy jako identyfikator dla dostawcy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu. Jeśli zostanie podana wartość dla parametru opcjonalnego identyfikator tej wartości staje się wartością <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości dla połączenia. Jeśli nie zostanie podana wartość Identyfikatora <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli przypisuje domyślny identyfikator podczas tworzenia obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia deklaratywne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony przy użyciu `<StaticConnections>` i `<asp:WebPartsConnection>` elementy. Deklaracja połączenia zawiera wymagane `ProviderConnectionPointID` atrybutu. Druga metoda tworzenia połączenia zostanie wyświetlony w `Button1_Click` metoda, w przypadku, gdy kod tworzy nowe połączenie, przy użyciu punktu połączenia (i identyfikator) zdefiniowana w formancie dostawcy. Następnie w `Button2_Click` uzyskuje dostęp do kodu metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> właściwości.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje z powodu statyczne połączenie zadeklarowane na stronie. Wprowadź tekst w formancie dostawcy i należy pamiętać, że jest wyświetlany w konsumentów ze względu na połączenie. Następnie odłącz kontrolki. Przy użyciu **tryb wyświetlania** listy rozwijanej formant listy, Przełącz stronę, aby połączyć tryb. Kliknij menu zleceń (reprezentowane przez strzałkę w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenia. Kliknij przycisk **rozłączenia** przycisku. Użyj **połączyć składnik Web Part formanty** przycisk, aby ponownie utworzyć połączenie między dwa formanty. Kliknij przycisk **szczegóły Element ConnectionPoint** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> wartości właściwości. Wartość jest zapisywany w etykiecie poniżej kontrolki.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się identyfikator <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> kontroli działania jako dostawcę dla tego połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator formantu dostawcy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Wartość właściwości jest wymagana podczas tworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Jeśli wartość nie jest przypisany do właściwości, jest zwracany wyjątek, kiedy <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontroli umożliwia przeprowadzenie próby aktywacji połączenia.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia deklaratywne i programowe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> właściwości.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. Należy pamiętać, że połączenie jest zadeklarowany w znaczniku strony przy użyciu `<StaticConnections>` i `<asp:WebPartsConnection>` elementy. Deklaracja połączenia zawiera wymagane `ProviderID` atrybutu. Druga metoda tworzenia połączenia zostanie wyświetlony w `Button1_Click` metody, gdy kod tworzy nowe połączenie, za pomocą punktu połączenia, zdefiniowanego w formancie użytkownika. Następnie w `Button2_Click` metody kod uzyskuje dostęp do wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> właściwości i wyświetla je w etykiecie.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce połączenie już istnieje z powodu statyczne połączenie zadeklarowane na stronie. Wprowadź tekst w formancie dostawcy i należy pamiętać, że jest wyświetlany w konsumentów ze względu na połączenie. Następnie odłącz kontrolki. Aby to zrobić, użyj **tryb wyświetlania** Przełącz stronę, aby połączyć tryb formant listy rozwijanej. Kliknij menu zleceń (reprezentowane przez strzałkę w dół na pasku tytułu) na jednym z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki, a następnie kliknij przycisk Połącz zlecenia. Kliknij przycisk **rozłączenia** przycisk i formantów jest odłączony. Następnie użyj **połączyć składnik Web Part formanty** przycisk, aby ponownie utworzyć połączenie między dwa formanty. Kliknij przycisk **szczegóły konsumenta** przycisk, aby uruchomić kod, który uzyskuje dostęp do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> wartości właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zastępuje dziedziczonego <see cref="M:System.Object.ToString" /> metodę i zwraca wartość typu krótkich nazw dla obiekt połączenia.</summary>
        <returns>Ciąg zawierający nazwę krótką (niekwalifikowane) typu <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana głównie dla wygody przez projektantów formantu. Powoduje to zwiększenie, jak obiekty połączenia są wyświetlane w widoku Projekt przy użyciu krótszej nazwy typu, zamiast w pełni kwalifikowaną nazwę typu. Jednak można wywołać metody w dowolnym momencie w kodzie miejscu znasz nazwę typu obiektu połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metodę, aby zwrócić krótką nazwę typu <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 Przykładowy kod ma trzy części:  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strona sieci Web do hostowania kontrolki i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część przykładowy kod jest kod źródłowy interfejs i kontroli klienta i dostawcy. Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 Druga część przykładowy kod jest strony sieci Web. U góry jest `Register` dyrektywy, która odwołuje się do kodu źródłowego dla dwóch dynamicznie skompilowanych <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolki. Połączenia statyczne jest zadeklarowany w `<StaticConnections>` elementu na stronie. `Button1_Click` Wywołania metody <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metodę, aby zapisać nazwę typu połączenia z etykietą.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Ładowanie strony w przeglądarce. Statyczne połączenie jest już utworzony. Wprowadź tekst w formancie dostawcy i należy pamiętać, że tekst jest wyświetlany w formancie użytkownika. Kliknij przycisk **szczegóły połączenia** przycisk, aby wykonać <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> obiekt, który jest używany do transformacji danych między dwoma punktami połączenia niezgodnymi w połączeniu składników Web Part.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W związku z części sieci Web istnieją dwa sposoby, w których można połączyć formantów dostawcy i klienta w połączeniu. Można połączyć bezpośrednio, za pomocą odpowiednich <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiektów i typu interfejsu, który jest rozpoznawany przez oba formanty. Lub, jeśli są one zgodne, może nawiązać połączenie pośrednio, za pomocą <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt, który przekształca wystąpienia interfejsu od dostawcy na typ rozpoznawany przez konsumenta.  
  
 Gdy w ramach połączenia, potrzebny jest transformatora <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> właściwość zawiera odwołanie do <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu. Można dodać transformatora połączenia deklaratywnie w znacznikach strony sieci Web, dodając tag dla niestandardowych transformatora (lub jeden z transformatory podaną w zestawie formantu części sieci Web) w ramach `<asp:WebPartConnection>` elementu. Można również dodać transformatora programowe tworzenie wystąpienie w kodzie i wywoływania <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager> formantu do utworzenia połączenia, przekazywanie do niego obiekt transformatora wraz z wymaganych parametrów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> obiekty używane wewnętrznie zestaw kontroli części sieci Web.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> zawierający <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Właściwość nigdy nie jest przeznaczony do użytku przez deweloperów. Dostęp transformatora skojarzone z połączeniem, do deweloperów zawsze należy używać <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> właściwości.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Właściwość jest używana wewnętrznie przez formant składników Web Part ustawioną umożliwiają deweloperom strony zadeklarować transformatora elementów w obrębie `<asp:webpartconnection>` elementu w znaczniku strony sieci Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>