<Type Name="ConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3820b1d28d7d0da147eee2b14823ff6256fc47f1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69395728" /></Metadata><TypeSignature Language="C#" Value="public abstract class ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConnectionPoint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConnectionPoint abstract" />
  <TypeSignature Language="F#" Value="type ConnectionPoint = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Służy jako klasa bazowa do definiowania obiektów punktu połączenia, które umożliwiają kontrolce klienta i kontrolkę dostawcy w składniki Web Part połączenie z udostępnianiem danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde połączenie składniki Web Part składa się z dwóch formantów serwera, które udostępniają dane: jeden formant jest odbiorcą, a drugi to dostawca. Aby zapoznać się z najważniejszymi składnikami połączenia składniki Web Part i samym obiektem połączenia, zobacz <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Omówienie klasy. Każde połączenie składniki Web Part wymaga punktów połączenia. Dostawca i kontrolka odbiorcy muszą mieć co najmniej jeden zdefiniowany <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiekt (każda z nich może opcjonalnie mieć wiele punktów połączenia), które zawierają szczegółowe informacje dotyczące sposobu, w jaki formant może połączyć się z inną kontrolką i typem danych, które mogą być udostępniane. W rzeczywistym połączeniu dostawca ma własny typ obiektu punktu połączenia (pochodzący z klasy bazowej <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> ) <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , wystąpienie i odbiorca ma własny obiekt, <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> wystąpienie.  
  
 Aby utworzyć punkt połączenia dostawcy, deweloperzy muszą dodać do dostawcy metodę wywołania zwrotnego, która zwróci zaimplementowane wystąpienie interfejsu do konsumenta. Muszą oznaczyć metodę wywołania zwrotnego w kodzie źródłowym przy użyciu `ConnectionProvider` atrybutu kodu ( <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> patrz Klasa). Podobnie aby utworzyć punkt połączenia klienta, deweloperzy muszą dodać metodę do konsumenta, który odbiera wystąpienie interfejsu, i musi oznaczyć tę metodę `ConnectionConsumer` atrybutem ( <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> patrz Klasa).  
  
 Gdy deweloperzy tworzą połączenia na stronie sieci Web, mogą być tworzone jako połączenia statyczne lub dynamiczne. Połączenia statyczne są deklarowane w znacznikach strony sieci Web. Po zadeklarowaniu połączenia statycznego deweloperzy mogą wyznaczyć, które punkty połączenia są używane zarówno dla konsumenta, jak i dostawcy, przypisując wartości `ProviderConnectionPointID` do `<asp:webpartconnection>` atrybutów i `ConsumerConnectionPointID` w tagu elementu. Ta metoda jest szczególnie przydatna, jeśli istnieje wiele punktów połączenia zdefiniowanych w ramach kontroli klienta i dostawcy, ponieważ umożliwia ona połączenie statyczne umożliwiające zidentyfikowanie punktów połączenia do użycia w ramach połączenia.  
  
 Połączenia dynamiczne są tworzone programowo przez kod dewelopera lub przez użytkowników za pomocą interfejsu użytkownika (UI) dostarczonego przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> formant. Aby utworzyć połączenie w kodzie, deweloperzy muszą uzyskać wystąpienie <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu przez <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> wywołanie metody na <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolce. Aby można było wywołać tę metodę, deweloperzy muszą mieć odwołania do kontrolek serwera odbiorcy i dostawcy oraz ich odpowiednich obiektów punktu połączenia. Aby uzyskać odwołania do punktów połączenia dla dostawcy i kontroli klienta, deweloperzy najpierw wywołują <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metody i <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> na <xref:System.Web.UI.WebControls.WebParts.WebPartManager> kontrolce. Te metody zwracają odpowiednie obiekty punktu połączenia, które z kolei mogą być przesyłane do metody tworzenia połączenia.  
  
 Gdy obiekty punktu połączenia dostawcy i użytkownika działają w tym samym typie interfejsu, są one zgodne i mogą tworzyć bezpośrednie połączenie do udostępniania danych. Jeśli nie współpracują z tym samym typem interfejsu, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt musi być używany do translacji wystąpienia interfejsu od dostawcy na typ, z którym odbiorca może współpracować.  
  
 Klasa abstrakcyjna <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> zawiera podstawowe szczegóły punktów połączenia, które są współużytkowane przez kontrolki użytkownika i dostawcy. Kilka właściwości zawiera te szczegóły. Właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> wskazuje, czy punkt połączenia może uczestniczyć w więcej niż jednym połączeniu jednocześnie. Domyślnie punkty połączenia dostawcy mogą uczestniczyć w wielu połączeniach i punkty połączenia z klientem nie mogą. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> Właściwość wskazuje typ kontrolki serwera skojarzonej z punktem połączenia. Należy zauważyć, że <xref:System.Web.UI.WebControls.WebParts.WebPart> nie tylko kontrolki mogą tworzyć połączenia; każda kontrola serwera, czy kontrolka ASP.NET, kontrolka niestandardowa lub kontrolka użytkownika, może być włączona w połączeniach, <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> jeśli są umieszczane w strefie. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Właściwość zawiera przyjazną nazwę punktu połączenia, który może być wyświetlany w interfejsie użytkownika w celu ułatwienia użytkownikom tworzenia połączeń. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Właściwość służy jako identyfikator ciągu dla samego obiektu punktu połączenia. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Właściwość wskazuje typ wystąpienia interfejsu, który jest zrozumiały dla punktu połączenia. Czy dany punkt połączenia udostępnia lub zużywa wystąpienie tego interfejsu, zależy od tego, czy jest to <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt, czy też.  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Klasa ma jedną metodę. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> Metoda zwraca wartość logiczną wskazującą, czy punkt połączenia jest obecnie w stanie uczestniczyć w połączeniach.  
  
 Klasa ma również jedno pole publiczne, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> To pole zawiera wartość używaną do identyfikowania domyślnego punktu połączenia w połączeniu.  
  
> [!NOTE]
>  Atrybuty określające metody punktu połączenia mają tylko jeden wymagany parametr `displayName`, dlatego można utworzyć domyślny atrybut punktu połączenia bez określania identyfikatora. W takich przypadkach <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> pole dostarcza wartość bazową do użycia.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje tworzenie połączenia składniki Web Part zawierającego wymagane <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiekty. Ponieważ Klasa jest abstrakcyjną klasą bazową, wystąpienia jego klas podrzędnych--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> i <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--są rzeczywistymi obiektami używanymi do tworzenia połączenia. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa o nazwie `ZipCodeWebPart` implementująca interfejs i działająca jako formant dostawcy. Jego `ProvideIZipCode` Metoda jest metodą wywołania zwrotnego implementującą tylko element członkowski interfejsu. Metoda po prostu zwraca wystąpienie interfejsu. Należy zauważyć, że metoda jest oznaczona `ConnectionProvider` atrybutem w metadanych. Jest to mechanizm identyfikacji metody jako metody wywołania zwrotnego dla punktu połączenia dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa ma nazwę `WeatherWebPart`i działa jako odbiorca połączenia. Ta klasa ma metodę o nazwie `GetZipCode` , która pobiera wystąpienie `IZipCode` interfejsu z kontrolki dostawcy. Należy zauważyć, że ta metoda jest oznaczona jako metoda punktu połączenia konsumenta z `ConnectionConsumer` atrybutem w metadanych. Jest to mechanizm identyfikacji metody punktu połączenia w kontrolce odbiorcy.  
  
 Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. W górnej części znajdują się `Register` dyrektywy umożliwiające zarejestrowanie kontrolek niestandardowych, które tworzą połączenie, oraz kontrolki użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie. Samo połączenie jest tworzone w sposób deklaratywny w `<staticconnections>` obrębie elementu na stronie. Możesz również programowo utworzyć połączenie. kod, który jest zawarty w `Button1_Click` metodzie. Niezależnie od tego, czy połączenie jest tworzone w sposób deklaratywny, czy programowo, punkty połączenia muszą być zawsze określone dla dostawcy i konsumenta. Metoda uzyskuje dostęp do obiektów zarówno dla dostawcy, jak i dla konsumenta, a następnie zapisuje niektóre wartości właściwości do etykiety na stronie. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce kliknij przycisk **Szczegóły punktu połączenia** . Pojawią się informacje o punktach połączenia dostawcy i klienta ustanowionych w połączeniu deklaratywnym. Następnie użyj formantu listy rozwijanej **tryb wyświetlania** , aby przełączyć stronę do trybu połączenia. W menu czasowniki jednej z <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek (reprezentowanej przez strzałkę w dół na pasku tytułu) kliknij zlecenie Connect. Zostanie wyświetlony interfejs użytkownika połączenia, który `<asp:connectionszone>` został utworzony automatycznie przez kontrolkę zadeklarowaną na stronie. Kliknij przycisk **Rozłącz** , aby przerwać istniejące połączenie. Użyj kontrolki **tryb wyświetlania** , aby przywrócić stronę do trybu przeglądania. Następnie kliknij przycisk **połączenie dynamiczne** , aby programowo utworzyć połączenie. Kliknij ponownie przycisk **Szczegóły punktu połączenia** , aby wskazać szczegóły dotyczące dwóch obiektów punktu połączenia.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Omówienie połączeń składniki Web Part</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName="AllowsMultipleConnections">
      <MemberSignature Language="C#" Value="public bool AllowsMultipleConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowsMultipleConnections As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsMultipleConnections { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowsMultipleConnections : bool" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy punkt połączenia obsługuje wiele jednoczesnych połączeń.</summary>
        <value><see langword="true" />Jeśli punkt połączenia obsługuje wiele połączeń; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiekty mają <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> ustawioną wartość właściwości (wedługklasy),ponieważkontrolkaskładnikiWebPartustawionadomyślniewłączapunktypołączeniadostawcydotworzeniapołączeńzwielomakonsumentami.`true`  
  
 Z kolei obiekty <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> `false` mają<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> ustawioną wartość właściwości (przez klasę), ponieważ kontrolka składniki Web Part domyślnie zezwala na punkty połączenia z klientem w celu nawiązania połączenia z tylko jednym dostawcą w pierwszym.  
  
 Można zmienić domyślne zachowanie dotyczące wielu połączeń, przypisując różne wartości do <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType> właściwości (dla dostawców) <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType> lub właściwość (dla odbiorców) na dwóch <xref:System.Attribute> klasach używanych do atrybutów połączenia. W przypadku włączenia punktów połączenia z klientem w celu nawiązania połączenia z wieloma dostawcami w tym samym czasie kod musi obsłużyć wszelkie problemy z synchronizacją.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> właściwości zarówno <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dla obiektów, jak i <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> . Ten przykład kodu pokazuje tylko stronę sieci Web, która zawiera kod, aby uzyskać dostęp do właściwości; Aby uzyskać pełny kod wymagany do uruchomienia tego przykładu, zobacz sekcję <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> przykład omówienia klasy.  
  
 Kod w `Button2_Click` metodzie strony sieci Web uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> do właściwości w każdym z obiektów punktu połączenia i zapisuje każdą wartość w etykiecie. Wykonaj kod, klikając przycisk **Szczegóły punktu połączenia** po załadowaniu strony w przeglądarce.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ControlType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ControlType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Type" /> Pobiera formant serwera, z którym jest skojarzony punkt połączenia.</summary>
        <value><see cref="T:System.Type" /> Reprezentujący typ formantu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> właściwości jest <xref:System.Web.UI.WebControls.WebParts.WebPart> często typem. Jednak ponieważ każdy typ kontrolki użytkownika lub kontrolki serwerowej może uczestniczyć w połączeniach <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> , jeśli jest prawidłowo włączony i umieszczony w strefie, właściwość może zwrócić jeden z tych innych typów formantów serwera.  
  
 Gdy kontrolki serwera, które <xref:System.Web.UI.WebControls.WebParts.WebPart> nie są kontrolkami, <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> są umieszczane w strefie, są <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> zawijane z obiektem w czasie wykonywania, <xref:System.Web.UI.WebControls.WebParts.WebPart> dzięki czemu mogą działać jako kontrolki i uczestniczyć w połączeniach. Ale jeśli te kontrolki są wykorzystywane w połączeniach <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> , wartość właściwości nie <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> zwraca typu; <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> zwraca typ kontrolki podrzędnej obiektu, który jest typem serwera lub kontrolki użytkownika.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> właściwości zarówno <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dla obiektów, jak i <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> . Ten przykład kodu pokazuje tylko stronę sieci Web, która zawiera kod, aby uzyskać dostęp do właściwości; Aby uzyskać pełny kod wymagany do uruchomienia tego przykładu, zobacz sekcję <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> przykład omówienia klasy.  
  
 Kod w `Button2_Click` metodzie strony sieci Web uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> do właściwości w każdym z obiektów punktu połączenia i zapisuje każdą wartość w etykiecie. Wykonaj kod, klikając przycisk **Szczegóły punktu połączenia** po załadowaniu strony w przeglądarce.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultID">
      <MemberSignature Language="C#" Value="public static readonly string DefaultID;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultID As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ DefaultID;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje ciąg używany do identyfikowania domyślnego punktu połączenia w kolekcji punktów połączenia skojarzonych z kontrolką serwera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu punktu połączenia można określić identyfikator dla punktu połączenia w kodzie źródłowym kontroli klienta lub dostawcy <xref:System.Web.UI.WebControls.WebParts.WebPart> <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> przy użyciu <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> atrybutu lub lub. Jednak po dodaniu atrybutu do punktu połączenia w kodzie źródłowym, `ID` parametr jest opcjonalny. Jeśli w atrybucie nie określono identyfikatora, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> pole zawiera ciąg, który służy do identyfikowania domyślnego punktu połączenia.  
  
 W przypadku zdefiniowania wielu punktów połączenia w kontroli klienta lub dostawcy należy określić identyfikator dla każdego punktu połączenia, dzięki czemu punkty połączenia mogą być rozróżniane podczas tworzenia połączeń.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ciąg, który służy jako przyjazna nazwa wyświetlana do reprezentowania punktu połączenia w interfejsie użytkownika.</summary>
        <value>Ciąg, który zawiera przyjazną nazwę wyświetlaną dla <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby utworzyć połączenie składniki Web Part, dostawca i kontrolki konsumenta dla połączenia muszą określać co najmniej jeden punkt połączenia, metodę, która umożliwia im komunikację i udostępnianie danych. Aby zidentyfikować te metody punktu połączenia, deweloper określa atrybut w wybranych metodach. W dostawcy `ConnectionProvider` atrybut jest ustawiany na wybranej metodzie wywołania zwrotnego i w odbiorcy `ConnectionConsumer` jest ustawiony atrybut dla metody, która odbiera wystąpienie interfejsu, który zawiera dane od dostawcy. Dla obu tych atrybutów, jeden parametr, który jest zawsze wymagany, bez względu na to, które Przeciążenie zostało zadeklarowane do utworzenia atrybutu, `displayName` jest parametrem. Deweloper musi przypisać ciąg, który ma być używany jako przyjazna nazwa wyświetlana punktu połączenia, a ten ciąg będzie wartością <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwości.  
  
 Wartość <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwości jest wyświetlana w interfejsie użytkownika strony sieci Web podczas tworzenia połączeń przez użytkowników. Na przykład po <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> dodaniu kontrolki do strony tworzy ona interfejs użytkownika, który umożliwia użytkownikom tworzenie połączeń między kontrolkami. Po przełączeniu strony do trybu wyświetlania połączenia i kliknięciu czasownika połączenia w <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolce zostanie wyświetlony interfejs użytkownika połączenia. Każda kontrolka, która może uczestniczyć w połączeniu, jest wymieniona w interfejsie użytkownika, a obok każdej kontrolki jest formant listy rozwijanej, który wyświetla przyjazne nazwy dostępnych punktów połączenia. Aby nawiązać połączenie, użytkownicy muszą wybrać co najmniej jeden punkt połączenia. Wartości, które pojawiają się na liście punktów połączenia są uzyskiwane z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwości. Jeśli deweloperzy tworzą niestandardowy interfejs użytkownika do tworzenia połączeń, mogą użyć <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwości w podobny sposób, aby podać przyjazną nazwę, która reprezentuje punkt połączenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnabled">
      <MemberSignature Language="C#" Value="public virtual bool GetEnabled (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetEnabled(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GetEnabled(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetEnabled : System.Web.UI.Control -&gt; bool&#xA;override this.GetEnabled : System.Web.UI.Control -&gt; bool" Usage="connectionPoint.GetEnabled control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> Lub inny formant serwera, który jest skojarzony z punktem połączenia.</param>
        <summary>Zwraca wartość wskazującą, czy punkt połączenia może uczestniczyć w połączeniach.</summary>
        <returns><see langword="true" />Jeśli formant może utworzyć punkt połączenia, aby wziąć udział w połączeniu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true` `control` `true` `false` Metoda w klasie bazowej <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> zawsze zwraca, ale klasy pochodne mogą przesłaniać metodę w celu zwrócenia lub w różnym czasie, w zależności od stanu. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> metody dla obu <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektów i <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> . Ten przykład kodu pokazuje tylko stronę sieci Web, która zawiera kod, aby uzyskać dostęp do właściwości; Aby uzyskać pełny kod wymagany do uruchomienia tego przykładu, zobacz sekcję <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> przykład omówienia klasy.  
  
 Kod w `Button2_Click` metodzie strony sieci Web uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> do metody na każdym z obiektów punktu połączenia i zapisuje każdą wartość w etykiecie. Wykonaj kod, klikając przycisk **Szczegóły punktu połączenia** po załadowaniu strony w przeglądarce.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ciąg, który zawiera identyfikator punktu połączenia.</summary>
        <value>Ciąg, który zawiera identyfikator punktu połączenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy deweloper deklaruje <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> lub atrybut metody w kodzie źródłowym kontrolki, tak że metoda może być używana jako punkt połączenia, `ID` nie jest wymagane deklarowanie parametru dla atrybutu punktu połączenia. Jedynym wymaganym atrybutem jest `displayName` tylko parametr. Domyślny identyfikator jest przypisywany do punktu połączenia, przy użyciu wartości z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> pola.  
  
 Jeśli istnieje tylko jedna metoda w kontrolce, która jest używana jako punkt połączenia, nie trzeba określać identyfikatora dla punktu połączenia. Jeśli określono wiele metod jako punktów połączenia, należy określić identyfikator dla każdego z nich. w przeciwnym razie zostanie zgłoszony wyjątek. Przypisując identyfikator do każdego punktu połączenia, można również określić, który punkt połączenia ma być używany podczas deklarowania połączeń na stronach sieci Web lub tworzyć je w kodzie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> właściwości zarówno <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dla obiektów, jak i <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> . Ten przykład kodu pokazuje tylko stronę sieci Web, która zawiera kod, aby uzyskać dostęp do właściwości; Aby uzyskać pełny kod wymagany do uruchomienia tego przykładu, zobacz sekcję <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> przykład omówienia klasy.  
  
 Kod w `Button2_Click` metodzie strony sieci Web uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> do właściwości w każdym z obiektów punktu połączenia i zapisuje każdą wartość w etykiecie. Wykonaj kod, klikając przycisk **Szczegóły punktu połączenia** po załadowaniu strony w przeglądarce.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InterfaceType">
      <MemberSignature Language="C#" Value="public Type InterfaceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterfaceType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InterfaceType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ InterfaceType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InterfaceType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ interfejsu używanego przez punkt połączenia.</summary>
        <value><see cref="T:System.Type" /> Odnosi się do typu interfejsu dostarczonego lub wykorzystywanego przez kontrolkę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Właściwość wskazuje typ interfejsu używanego przez punkt połączenia. Może to pomóc w ustaleniu, czy dwie kontrolki są zgodne i mogą tworzyć połączenia. Jeśli punkt <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> połączenia dostawcy różni się od <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>punktu połączenia klienta, to dwie kontrolki są niezgodne (oznacza to, że nie mogą być połączone bezpośrednio bez <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> transformatora), a obiekt musi służy do nawiązywania połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> właściwości zarówno <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dla obiektów, jak i <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> . Ten przykład kodu pokazuje tylko stronę sieci Web, która zawiera kod, aby uzyskać dostęp do właściwości; Aby uzyskać pełny kod wymagany do uruchomienia tego przykładu, zobacz sekcję <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> przykład omówienia klasy.  
  
 Kod w `Button2_Click` metodzie strony sieci Web uzyskuje dostęp <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> do właściwości w każdym z obiektów punktu połączenia i zapisuje każdą wartość w etykiecie. Wykonaj kod, klikając przycisk **Szczegóły punktu połączenia** po załadowaniu strony w przeglądarce.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>
