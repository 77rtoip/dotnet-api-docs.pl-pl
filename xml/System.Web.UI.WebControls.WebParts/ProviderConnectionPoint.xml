<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64b02411247bc4383c9d0ba96309240f908373f9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69394865" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje obiekt punktu połączenia, który umożliwia kontrolce serwera działającej jako dostawca w celu utworzenia połączenia z klientem.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W każdym składniki Web Part połączenia między dwoma kontrolkami serwera każda kontrolka musi mieć (między innymi) skojarzony obiekt punktu połączenia, który umożliwia działowi IT łączenie się z drugą kontrolką i dostarczanie lub używanie danych, w zależności od tego, czy formant jest wyznaczeni jako dostawca lub odbiorca połączenia. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Obiekt ogólnie zawiera szczegółowe informacje dotyczące sposobu łączenia kontrolki z inną kontrolką i typu danych, które mogą być udostępniane. W przypadku kontrolki działającej jako dostawca w ramach połączenia punkt połączenia musi być <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektem. Aby uzyskać szczegółowe informacje o składniki Web Part połączeniach i punktach połączeń, zobacz tematy wymienione w sekcji Zobacz też poniżej.  
  
 Aby utworzyć <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt, wymagane jest wykonanie kilku czynności:  
  
1.  Utwórz interfejs. Gdy dostawca udostępnia dane odbiorcom, robi to przez pobranie wystąpienia interfejsu i zwrócenie tego wystąpienia do konsumenta.  
  
2.  Zaimplementuj interfejs w dostawcy. Lub inny formant serwera (można użyć dowolnego typu kontrolki serwera <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> w strefie), który będzie dostawcą musi implementować interfejs utworzony w pierwszym kroku. <xref:System.Web.UI.WebControls.WebParts.WebPart>  
  
3.  Zidentyfikuj metodę wywołania zwrotnego. Metoda w dostawcy musi być zidentyfikowana jako metoda wywołania zwrotnego, aby nawiązać połączenie. Ta metoda zwraca wystąpienie zaimplementowanego interfejsu do odbiorcy. Składniki Web Part podejście do identyfikowania metody wywołania zwrotnego w dostawcy polega na dodaniu `ConnectionProvider` atrybutu metadanych (zdefiniowanego <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> przez klasę) do metody, która zwraca wystąpienie interfejsu. Po dodaniu atrybutu jedynym wymaganym parametrem jest nazwa wyświetlana, która ma być używana dla punktu połączenia dostawcy. Można również dodać opcjonalne parametry, takie jak identyfikator punktu połączenia.  
  
 Po dodaniu kontrolki do działania jako dostawca, kontrolka może uczestniczyć w połączeniach (przy założeniu, że kontrola konsumenta jest podobna i dostępna). Aby utworzyć statyczne, deklaratywne połączenie w adjustacji strony sieci Web, deweloperzy mogą używać `<asp:webpartconnection>` elementu. Jeśli atrybut w kodzie źródłowym dostawcy, który identyfikuje metodę wywołania zwrotnego określa identyfikator punktu połączenia, ta wartość musi być przypisana `ProviderConnectionPointID` do atrybutu w `<asp:webpartconnection>` elemencie na stronie. `ConnectionProvider` Jednym z powodów, dla których deweloper może określić identyfikator punktu połączenia dostawcy, to jeśli w kontrolce dostawcy istnieje wiele punktów połączenia. Jeśli nie określono identyfikatora dla punktu połączenia dostawcy w kontrolce dostawcy, wartość nie musi być przypisana do `ProviderConnectionPointID` atrybutu na stronie, ponieważ połączenie zostanie utworzone przy użyciu wartości domyślnej uzyskanej z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> polami.  
  
 Aby utworzyć połączenie w kodzie, deweloperzy muszą utworzyć nowy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt przez <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> wywołanie metody i przekazanie do niej identyfikatora kontrolki dostawcy wraz z identyfikatorem lub indeksem zdefiniowanego <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu w formancie dostawcy. Zwrócony <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt, wraz z odwołaniem do kontrolki dostawcy, odwołaniem do kontrolki konsumenta i odpowiednim <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektem, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> są wszystkie przesyłane do metody w celu utworzenia nowego <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 Chociaż deweloperzy mogą korzystać z punktów połączenia dostawcy w ramach ustanawiania połączeń deklaratywnie lub programowo, użytkownicy mogą również korzystać z punktów połączenia dostawcy, aby nawiązywać połączenia za pomocą interfejsu użytkownika (UI). Jeśli deweloperzy deklarują <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolę na stronie sieci Web, udostępnia interfejs użytkownika czasu wykonywania, który umożliwia użytkownikom tworzenie połączeń. Jeśli użytkownik wybierze kontrolkę odbiorcy jako punkt początkowy do ustanowienia połączenia, klikając jego zlecenie połączenia (może również wybrać dostawcę; nie ma żadnych różnic w połączeniu wynikowym), w interfejsie użytkownika zostanie wyświetlona kontrolka listy rozwijanej z Nazwa wyświetlana dostępnego punktu połączenia dostawcy (lub punkty, jeśli istnieje wiele z nich). Aby utworzyć połączenie, użytkownicy muszą wybrać punkt połączenia dostawcy.  
  
 Obiekt kojarzy się bezpośrednio z konkretną kontrolką dostawcy i zapisuje szczegółowe informacje o połączeniu we właściwościach, które dziedziczy z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy bazowej. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Na przykład we właściwości dziedziczonej <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> punkt połączenia dostawcy utrzymuje typ interfejsu zwróconego przez dostawcę. Jeśli dostawca i odbiorca w połączeniu współpracują z tym samym typem interfejsu, formanty są zgodne i mogą tworzyć bezpośrednie połączenie. Jeśli dostawca i konsument nie mogą współdziałać z tym samym typem interfejsu, są one niezgodne i <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> muszą użyć obiektu, aby przetłumaczyć <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> wartość punktu połączenia dostawcy na typ, z którym odbiorca może współdziałać. Kolejną ważną właściwością jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwość, która zapewnia przyjazną nazwę wyświetlaną w interfejsie użytkownika dla użytkowników, którzy wybierają punkt połączenia dostawcy podczas tworzenia połączeń. Nazwa wyświetlana jest parametrem wymaganym, gdy deweloperzy dodają `ConnectionProvider` atrybut do metody wywołania zwrotnego w formancie dostawcy. Właściwość dziedziczona <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> jest również przydatna, jak wskazano powyżej, ponieważ zapewnia unikatowy identyfikator punktu połączenia dostawcy w przypadku, gdy dostawca ma wiele punktów połączenia. Dostawca może mieć zdefiniowaną <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> wiele obiektów, a w tym przypadku, gdy deweloperzy `ConnectionProvider` dodają atrybut do metody, powinny określić wartość identyfikatora, aby odróżnić każdy punkt połączenia. Jedną z istotnych właściwości dziedziczonych jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> właściwość, która wskazuje, czy punkt połączenia dostawcy może się łączyć jednocześnie z wieloma użytkownikami. Ta wartość właściwości jest `true` domyślnie dla punktów połączenia dostawcy (w `false` ustawieniach domyślnych dla punktów połączenia klienta).  
  
 Klasa dodaje kilka unikatowych metod do elementów członkowskich, które dziedziczy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> z klasy. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Metoda pobiera wystąpienie interfejsu, który Metoda wywołania zwrotnego zwróci do odbiorców. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Metoda pobiera dodatkowe interfejsy klienta, które są częścią istniejącego połączenia, ale nie są interfejsami używanymi do nawiązania połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje proste sposoby tworzenia połączenia deklaratywnie, programowo lub za pomocą interfejsu użytkownika w każdym przypadku przy użyciu punktu połączenia dostawcy.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa o nazwie `ZipCodeWebPart` implementująca interfejs i działająca jako formant dostawcy. Jego `ProvideIZipCode` Metoda jest metodą wywołania zwrotnego implementującą tylko element członkowski interfejsu. Metoda po prostu zwraca wystąpienie interfejsu. Należy zauważyć, że metoda jest oznaczona `ConnectionProvider` atrybutem w metadanych. Jest to mechanizm identyfikacji metody jako metody wywołania zwrotnego dla punktu połączenia dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa ma nazwę `WeatherWebPart`i działa jako odbiorca połączenia. Ta klasa ma metodę o nazwie `GetZipCode` , która pobiera wystąpienie `IZipCode` interfejsu z kontrolki dostawcy. Należy zauważyć, że ta metoda jest oznaczona jako metoda punktu połączenia konsumenta z `ConnectionConsumer` atrybutem w metadanych. Jest to mechanizm identyfikacji metody punktu połączenia w kontrolce odbiorcy.  
  
 Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. W górnej części znajdują się `Register` dyrektywy umożliwiające zarejestrowanie kontrolek niestandardowych, które tworzą połączenie, oraz kontrolki użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie. Samo połączenie jest tworzone w sposób deklaratywny w `<staticconnections>` obrębie elementu na stronie. Ilustruje to jeden ze sposobów tworzenia połączenia — należy zwrócić uwagę `ProviderConnectionPointID` na atrybut `<asp:webpartconnection>` w elemencie. Możesz również programowo utworzyć połączenie. kod do wykonania, który znajduje się w `Button1_Click` metodzie. W takim przypadku <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt zostanie utworzony, a następnie przeszedł do metody, która tworzy rzeczywiste połączenie. Niezależnie od tego, czy połączenie jest tworzone w sposób deklaratywny, czy programowo, punkty połączenia muszą być zawsze określone dla dostawcy i konsumenta. Metoda uzyskuje dostęp do obiektów zarówno dla dostawcy, jak i dla konsumenta, a następnie zapisuje niektóre wartości właściwości do etykiety na stronie. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce kliknij przycisk **Szczegóły punktu połączenia** . Pojawią się informacje o punktach połączenia dostawcy i klienta ustanowionych w połączeniu deklaratywnym. Następnie użyj formantu listy rozwijanej **tryb wyświetlania** , aby przełączyć stronę do trybu połączenia. W menu czasowniki w kontrolce<xref:System.Web.UI.WebControls.WebParts.WebPart> **odbiorcy kodu pocztowego** (reprezentowanej przez strzałkę w dół na pasku tytułu) kliknij zlecenie Connect. Zostanie wyświetlony interfejs użytkownika połączenia, który `<asp:connectionszone>` został utworzony automatycznie przez kontrolkę zadeklarowaną na stronie. Jest to inny sposób tworzenia połączenia (za pomocą interfejsu użytkownika), a także metod deklaratywnych i programistycznych omówionych wcześniej. Kliknij przycisk **Rozłącz** , aby przerwać istniejące połączenie statyczne. Kliknij link **Utwórz połączenie z dostawcą** . Interfejs użytkownika wyświetla teraz kontrolkę listy rozwijanej, która wyświetla nazwę wyświetlaną punktu połączenia dostawcy. Wybierz punkt połączenia z listy rozwijanej, a następnie kliknij przycisk **Połącz** , aby zakończyć połączenie. Następnie kliknij ponownie **** przycisk Rozłącz. Następnie kliknij przycisk **połączenie dynamiczne** , aby programowo utworzyć połączenie. Użyj kontrolki **tryb wyświetlania** , aby przywrócić stronę do trybu przeglądania. Kliknij ponownie przycisk **Szczegóły punktu połączenia** , aby jeszcze raz wskazać szczegóły dotyczące obiektu punktu połączenia dostawcy.  
  
 Przykład przedstawia ustanowienie połączenia i użycie punktu połączenia dostawcy na trzy sposoby: połączenie statyczne zadeklarowane w znaczniku strony sieci Web; połączenie utworzone w kodzie, który użył <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu, i połączenie utworzone przez użytkownika za pomocą interfejsu użytkownika połączenia.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Omówienie połączeń składniki Web Part</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metoda w formancie dostawcy zwracająca wystąpienie interfejsu do odbiorców w celu nawiązania połączenia.</param>
        <param name="interfaceType"><see cref="T:System.Type" /> Interfejs, który jest używany przez dostawcę dla klientów.</param>
        <param name="controlType"><see cref="T:System.Type" /> Kontrolki dostawcy, z którą jest skojarzony punkt połączenia dostawcy.</param>
        <param name="displayName">Przyjazna nazwa wyświetlana punktu połączenia dostawcy, który pojawia się dla użytkowników w interfejsie użytkownika połączenia.</param>
        <param name="id">Unikatowy identyfikator punktu połączenia dostawcy.</param>
        <param name="allowsMultipleConnections">Wartość logiczna wskazująca, czy punkt połączenia dostawcy może mieć wiele jednoczesnych połączeń z klientami.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Konstruktor<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy po prostu wywołuje konstruktora podstawowego, przekazując do niego różne parametry i inicjując klasę bazową.  
  
 Konstruktor klasy bazowej sprawdza liczbę parametrów punktu połączenia i może zgłosić kilka wyjątków. Listę możliwych wyjątków można znaleźć w sekcji wyjątki.  
  
 Można wywołać <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> konstruktora, aby utworzyć własne wystąpienie <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy. Jednak w przypadkach, gdy po prostu nawiążesz połączenie i nie rozszerzasz klasy, należy wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodę zwracającą istniejący obiekt punktu połączenia od dostawcy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób wyprowadzania z <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy w celu utworzenia punktu połączenia dostawcy niestandardowego.  
  
 Przykład kodu ma trzy części:  
  
-   Plik źródłowy, który zawiera kontrolkę <xref:System.Web.UI.WebControls.WebParts.WebPart> dostawcy, kontrolę klienta <xref:System.Web.UI.WebControls.WebParts.WebPart> i obiekt niestandardowy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> .  
  
-   Strona sieci Web, która hostuje kontrolki w połączeniu statycznym.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowego kodu.  
  
 Pierwszą częścią przykładu kodu jest źródło dla kontrolek dostawca i odbiorca <xref:System.Web.UI.WebControls.WebParts.WebPart> oraz Klasa niestandardowa <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> o nazwie `TableProviderConnectionPoint`. Należy zauważyć, że Konstruktor `TableProviderConnectionPoint` klasy wywołuje konstruktora podstawowego, przekazując go wymagane parametry, jak wskazano w sekcji Parameters. Należy również zauważyć, że `TableProviderWebPart` w klasie `GetConnectionInterface` Metoda jest określona jako metoda wywołania zwrotnego `ConnectionProvider` dla połączeń, a atrybut deklaruje niestandardowy `TableProviderConnectionPoint` jako parametr. Przedstawiono w nim sposób tworzenia punktu połączenia dostawcy niestandardowego, a następnie kojarzenia go z kontrolką dostawcy. W tym przykładzie przyjęto założenie, że kod źródłowy jest kompilowany dynamicznie, dlatego należy umieścić plik kodu źródłowego w podfolderze App_Code aplikacji sieci Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Drugą częścią przykładu kodu jest strona sieci Web, która hostuje niestandardowe kontrolki w statycznej składniki Web Part połączenie. W górnej części strony jest `Register` dyrektywa, aby zadeklarować prefiks i przestrzeń nazw dla formantów niestandardowych. Połączenie jest zadeklarowane za pomocą `<asp:webpartconnection>` elementu, a formanty dostawca i odbiorca są zadeklarowane `<asp:webpartzone>` w obrębie elementu.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Załaduj stronę w przeglądarce. Połączenie między kontrolkami już istnieje, a odbiorca wyświetla dane od dostawcy, ponieważ połączenie zostało zadeklarowane jako połączenie statyczne na stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="interfaceType" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="controlType" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="displayName" />jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" />nie jest tym samym typem co formant dostawcy (lub prawidłowa Klasa pochodna).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Kontrolka działająca jako dostawca w ramach połączenia składniki Web Part.</param>
        <summary>Wywołuje metodę wywołania zwrotnego w kontrolce dostawcy, która pobiera wystąpienie interfejsu w celu powrotu do odbiorców.</summary>
        <returns>Jest to wystąpienie interfejsu, któredostawcazwracadoodbiorcówwcelunawiązaniapołączenia.<see cref="T:System.Object" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca obiekt z kontrolki dostawcy, który jest wystąpieniem interfejsu używanego do nawiązywania połączenia. Typ obiektu będzie typem zaimplementowanego interfejsu. Na przykład dwa interfejsy, które są zaimplementowane dla połączeń w zestawie kontrolek składniki Web Part są <xref:System.Web.UI.WebControls.WebParts.IWebPartField> i <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Gdy metoda jest wywoływana w obiekcie, jeśli skojarzony dostawca implementuje jeden z tych interfejsów, zwracany obiekt będzie tego samego typu. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>  
  
 Metoda jest wywoływana przez obiekty <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> , gdy połączenie jest uaktywniane. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Jest to krytyczny krok, który faktycznie inicjuje połączenie i rozpoczyna proces, który umożliwia dwóm kontrolkom udostępnianie danych.  
  
 Kontrolka odbiorcy w połączeniu musi mieć możliwość pracy z tym samym typem interfejsu co dostawca. Jeśli tak nie jest, formanty są niezgodne, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt musi zostać użyty do nawiązania połączenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Kontrolka działająca jako dostawca w ramach połączenia składniki Web Part.</param>
        <summary>Pobiera opcjonalną kolekcję dodatkowych interfejsów, które mogą być obsługiwane przez punkt połączenia dostawcy.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> Z dodatkowych interfejsów dostarczonych przez kontrolkę działającą jako dostawca.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt punktu połączenia dostawcy zawsze ma domyślny interfejs, który jest używany do nawiązywania połączenia z klientami. Wystąpienie interfejsu domyślnego jest pobierane przez wywołanie <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metody <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> w obiekcie.  
  
 Jednak niektóre formanty dostawcy zaimplementują wiele interfejsów, aby zapewnić odbiorcom w ramach połączenia. Te interfejsy, które nie są domyślnymi używanymi do nawiązywania połączenia, są nazywane interfejsami pomocniczymi. Metoda umożliwia zwracanie kolekcji odwołań do interfejsów pomocniczych, tak <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> jak metoda zwraca odwołanie do interfejsu domyślnego. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> Metoda<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> w klasie nie zawiera żadnej implementacji; zwraca pustą kolekcję interfejsów dodatkowych. Aby zaimplementować tę metodę, należy dziedziczyć z <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> klasy i zastąpić tę metodę, zwracając z niej określony zestaw interfejsów pomocniczych.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
