<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a89f471ebf510f4c98fbb34bac13429460f0b44f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36385728" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje obiekt punktu połączenia, który umożliwia formantu serwera pełnią funkcję dostawcy do utworzenia połączenia z konsumenta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W związku z każdej części sieci Web między dwoma kontrolki serwera, każda kontrolka musi mieć (między innymi wymagania) skojarzona z połączeniem obiektu punktu, który umożliwia nawiązywania połączenia z innymi formantu i zapewnij albo wykorzystują dane, w zależności od tego, czy formant jest wyznaczony jako dostawcy lub odbiorcy dla połączenia. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiekt ogólnie zawiera szczegóły dotyczące sposobu formantu mogą łączyć się inny formant i typu danych, można go udostępniać. W przypadku formantu pełnią funkcję dostawcy usług w przypadku połączenia punktu połączenia musi być <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu. Szczegółowe informacje dotyczące połączeń części sieci Web i punkty połączenia Zobacz tematy wymienione w poniższej sekcji Zobacz też.  
  
 Aby utworzyć <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu, wymagane jest wykonanie kilku kroków:  
  
1.  Tworzenie interfejsu. Gdy dostawca udostępnia dane z konsumenta, robi to pierwsze wystąpienie interfejsu i zwracanie tego wystąpienia z klientem.  
  
2.  Zaimplementuj interfejs u dostawcy. A <xref:System.Web.UI.WebControls.WebParts.WebPart> lub inny formant serwera (dowolnego typu kontrolki serwera w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy można użyć) który będzie stanowić dostawca musi implementować interfejs utworzonego w pierwszym kroku.  
  
3.  Określ metodę wywołania zwrotnego. Metoda w dostawcy muszą być określone jako metoda wywołania zwrotnego można ustanowić połączenia. Ta metoda zwraca wystąpienie klasy zaimplementowany interfejs z klientem. Podejście części sieci Web do identyfikacji Metoda wywołania zwrotnego w dostawcy jest dodanie `ConnectionProvider` atrybutu metadanych (zdefiniowane przez <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> klasy) do metody, która zwraca wystąpienie interfejsu. Po dodaniu atrybutu tylko wymaganego parametru jest wyświetlana nazwa do użycia na potrzeby punkt połączenia dostawcy. Parametry opcjonalne można również dodać, takich jak identyfikator punktu połączenia.  
  
 Po formantu ma został przystosowany do działania jako dostawcę, formantu może uczestniczyć w połączeniach (przy założeniu, że formant konsumenta podobnie wyposażone i dostępna). Aby utworzyć połączenie statycznych, deklaratywne w znaczniku strony sieci Web, deweloperzy mogą używać `<asp:webpartconnection>` elementu. Jeśli `ConnectionProvider` atrybutu w kodzie źródłowym dostawcy, który identyfikuje metodę wywołania zwrotnego Określa identyfikator punktu połączenia, a następnie ta wartość musi być przypisany do `ProviderConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu na stronie. Jedną z przyczyn że deweloper może określić identyfikator punkt połączenia dostawcy jest, jeśli istnieje wiele punktów połączenia w formancie dostawcy. Jeśli nie określono Identyfikatora punktu połączenia dostawcy w formancie dostawcy, nie ma wartość do przypisania do `ProviderConnectionPointID` atrybutu na stronie albo, ponieważ połączenie zostanie utworzony przy użyciu wartości domyślnej uzyskane z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> pole.  
  
 Można utworzyć połączenia w kodzie, należy utworzyć nową deweloperzy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> — metoda i przekazanie do niego identyfikator formantu dostawcy, wraz z Identyfikatora lub zdefiniowane indeks <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu w formancie dostawcy. Zwrócona <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt wraz z odwołaniem do sterowania dostawcy odwołanie do formantu użytkownika, a odpowiadające mu <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektów, wyświetlane są wszystkie przekazany do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metody, aby utworzyć nową <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 Mimo że deweloperzy mogą używać punktów połączenia dostawcy podczas ustanawiania połączenia deklaratywnie lub programowo, również interakcji użytkowników z dostawcy punkty połączenia do ustanawiania połączeń za pośrednictwem interfejsu użytkownika (UI). Jeśli deweloperzy zadeklarować <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolki na stronie sieci Web zapewnia czasu wykonywania interfejsu użytkownika dla użytkowników w celu utworzenia połączenia. Jeśli użytkownik wybierze kontroli klienta jako punktu wyjścia do nawiązywania połączenia, klikając jej połączyć zlecenie (one również wybrać dostawcę; nie ma żadnej różnicy w wynikowej połączenia), w Interfejsie użytkownika zostanie wyświetlona formantu listy rozwijanej o wyświetlana nazwa dostawcy dostępne połączenia punktu (lub punktów, jeśli istnieje wiele migawek). Użytkownicy muszą wybrać punkt połączenia dostawcy, aby utworzyć połączenie.  
  
 A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt kojarzy bezpośrednio za pomocą formantu określonego dostawcy i przechowuje szczegółowe informacje o połączeniu we właściwościach jego pochodząca od klasy podstawowej <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy. Na przykład w dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> właściwości, typ interfejsu zwrócony przez dostawcę śledzi punkt połączenia dostawcy. Jeśli typ interfejsu dostawcy i klienta w ramach połączenia, które działać z tym samym, formanty są zgodne i nadaje się do tworzenia bezpośrednie połączenie. Jeśli dostawcy i klienta nie może działać z tego samego typu interfejsu, są niezgodne i musi być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu tłumaczenie punkt połączenia dostawcy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> wartość do typu, który użytkownik może współpracować z. Inną ważną właściwość dziedziczona jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwość, która zapewnia przyjazna nazwa wyświetlana w Interfejsie użytkownika dla użytkowników wybrać połączenie z dostawcą punktu podczas tworzenia połączenia. Nazwa wyświetlana jest wymaganego parametru, gdy deweloperzy dodają `ConnectionProvider` atrybut do metody wywołania zwrotnego w formancie dostawcy. Dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> właściwość przydaje się również, jak wspomniano powyżej, ponieważ zawiera unikatowy identyfikator dla punktu połączenia dostawcy w przypadku, gdy dostawca ma wiele punktów połączenia. Dostawca może mieć wielu <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektów zdefiniowanych w nim, a w tym przypadku, gdy deweloperzy dodają `ConnectionProvider` atrybut do metody, należy określić wartość Identyfikatora odróżnienie każdego punktu połączenia. Jest jednym innych istotnych Dziedziczona właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> właściwość, która wskazuje, czy punkt połączenia dostawcy mogą jednocześnie połączyć się z wielu klientów. Wartość tej właściwości jest `true` domyślnie dla dostawcy punkty połączenia (natomiast domyślnie `false` dla konsumentów punkty połączenia).  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klasa dodaje kilka metod unikatowy członkom dziedziczy z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Metoda pobiera wystąpienie interfejsu, który zwróci Metoda wywołania zwrotnego dla konsumentów. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Metoda pobiera dodatkowe interfejsy, które są częścią istniejącego połączenia, ale są nie interfejsy używane do nawiązania połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje prostych sposobów deklaratywnie utworzyć połączenie, programowo lub za pośrednictwem interfejsu użytkownika, w każdym przypadku tworzeniu korzystanie z punktu połączenia dostawcy.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kodu źródłowego dla interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy o nazwie `ZipCodeWebPart` który implementuje interfejs i działa jako kontrolka dostawcy. Jego `ProvideIZipCode` metoda to metoda wywołania zwrotnego, który implementuje element członkowski tylko. Metoda zwraca po prostu wystąpienia interfejsu. Należy pamiętać, że metoda jest oznaczona atrybutem `ConnectionProvider` atrybutu w metadanych. Jest to mechanizm identyfikację metodę jako metoda wywołania zwrotnego dla punktu połączenia dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> nosi nazwę klasy `WeatherWebPart`, i pełni rolę użytkownika dla połączenia. Ta klasa ma metodę o nazwie `GetZipCode` który pobiera wystąpienie elementu `IZipCode` interfejsu z formantu dostawcy. Należy pamiętać, że ta metoda jest oznaczona jako metoda punkt połączenia klienta z `ConnectionConsumer` atrybutu w metadanych. Jest to mechanizm identyfikowania metodę punktu połączenia w formancie użytkownika.  
  
 Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. U góry są `Register` dyrektywy zarejestrowanie formantów niestandardowych, które tworzą połączenia i kontrolki użytkownika, który umożliwia użytkownikom zmianę tryby wyświetlania na stronie. Samo połączenie jest tworzony deklaratywnie poziomu `<staticconnections>` elementu na stronie. Oznacza to jeden ze sposobów tworzenia połączenia — Uwaga `ProviderConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu. Można również utworzyć połączenie programowe; kod dla czynności, które znajduje się w `Button1_Click` metody. W takim przypadku <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt jest tworzony i następnie przekazywane do metody, która tworzy rzeczywistego połączenia. Określanie, czy połączenie jest tworzone deklaratywnie lub programowo, zawsze należy określać punkty połączenia dla dostawcy i klienta. `Button2_Click` Uzyskuje dostęp do metody <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiektów na klienta i dostawcy i zapisuje niektóre z ich wartości właściwości etykiety na stronie.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce, kliknij przycisk **szczegóły punktu połączenia** przycisku. Zostanie wyświetlone informacje o dostawcy i klienta punkty połączeń ustanowionych w deklaratywne połączenia. Następnie użyj **tryb wyświetlania** kontrolka listy rozwijanej, aby przełączyć strony w trybie łączenia. W menu zleceń **kodu POCZTOWEGO klienta** <xref:System.Web.UI.WebControls.WebParts.WebPart> formantu (reprezentowane za pomocą strzałki w dół na pasku tytułu), kliknij przycisk Połącz zlecenia. Połączenie, zostanie wyświetlony interfejs użytkownika, są tworzone automatycznie przez `<asp:connectionszone>` kontroli zadeklarowane na stronie. Jest to inny sposób tworzenia połączenia (za pośrednictwem interfejsu użytkownika), oraz metody deklaratywne i programowe opisane wcześniej. Kliknij przycisk **rozłączenia** przycisk, aby zakończyć istniejące połączenie statycznych. Kliknij przycisk **Utwórz połączenie z dostawcą** łącza. Interfejs użytkownika wyświetla teraz kontrolka listy rozwijanej, która zawiera nazwę wyświetlaną punkt połączenia dostawcy. Wybierz punkt połączenia z listy rozwijanej, a następnie kliknij przycisk **Connect** Aby nawiązać połączenie. Następnie kliknij przycisk **rozłączenia** ponownie. Następnie kliknij przycisk **połączenia dynamicznego** przycisk, aby utworzyć połączenie programowo. Użyj **tryb wyświetlania** formantu, aby przywrócić do trybu przeglądania strony. Kliknij przycisk **szczegóły punktu połączenia** przycisk ponownie, aby ponownie wskazać szczegóły obiektu punktu połączenia dostawcy.  
  
 Przykład wykazała ustanawiania połączenia i przy użyciu punktu połączenia dostawcy na trzy sposoby: statyczne połączenie zadeklarowany w znaczniku strony sieci Web; Połączenie utworzone w kodzie, który używany <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt; i połączenie utworzone przez użytkownika za pośrednictwem połączenia interfejsu użytkownika.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metoda w formancie dostawcy, który zwraca wystąpienie interfejsu dla konsumentów, aby nawiązać połączenie.</param>
        <param name="interfaceType">
          <see cref="T:System.Type" /> Interfejsu, który dostawca służy do odbiorców.</param>
        <param name="controlType">
          <see cref="T:System.Type" /> Formantu dostawca, z którym skojarzony jest punkt połączenia dostawcy.</param>
        <param name="displayName">Przyjazną nazwę wyświetlaną dla wyświetlany w interfejsie użytkownika (UI) połączenia punkt połączenia dostawcy.</param>
        <param name="id">Unikatowy identyfikator punkt połączenia dostawcy.</param>
        <param name="allowsMultipleConnections">Wartość logiczna wskazująca, czy punkt połączenia dostawcy mogą mieć wiele równoczesnych połączeń z konsumentów.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Konstruktor <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy po prostu wywołuje konstruktora podstawowego, przekazywanie do niego różnych parametrów i inicjowania klasy podstawowej.  
  
 Konstruktor klasy podstawowej sprawdza liczbę parametrów dla punktu połączenia i może zgłosić kilkoma wyjątkami. Listę możliwych wyjątków zobacz sekcję wyjątków.  
  
 Możesz wywołać <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Konstruktor do tworzenia własnego wystąpienia <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy. Jednak w przypadku należy po prostu ustanawiania połączenia i nie rozszerzania klasy, należy wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metody do zwrócenia z istniejącym obiektem z punktu połączenia z dostawcą.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak pochodzi od <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy w celu utworzenia punktu połączenia dostawcy niestandardowego.  
  
 Przykładowy kod ma trzy części:  
  
-   Plik źródłowy, który zawiera dostawcę <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolować konsumenta <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroli i niestandardowej <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu.  
  
-   Strona sieci Web obsługuje formantów w statycznej połączenia.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowy kod.  
  
 Pierwsza część przykładowy kod jest źródłem informacji o dostawcy i klienta <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek i niestandardowej <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasę o nazwie `TableProviderConnectionPoint`. Należy pamiętać, że konstruktora `TableProviderConnectionPoint` klasy wywołania konstruktora podstawowego, przekazanie jej wymagane parametry opisane w sekcji parametrów. Należy również zauważyć, że w `TableProviderWebPart` klasy `GetConnectionInterface` metody jest określony jako metoda wywołania zwrotnego w przypadku połączeń i `ConnectionProvider` niestandardowego deklaruje atrybutu `TableProviderConnectionPoint` jako parametr. Oznacza to, jak utworzyć punkt połączenia dostawcy niestandardowego i skojarzyć go z formantem dostawcy. W tym przykładzie założono, że kod źródłowy jest dynamicznie skompilowanych, należy umieścić plik kodu źródłowego w podfolderze App_Code aplikacji sieci Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Druga część przykładowy kod jest stronę sieci Web, która obsługuje niestandardowe formanty w statycznej połączeń części sieci Web. W górnej części strony jest `Register` dyrektywy deklaruje prefiks i przestrzeń nazw dla kontrolek niestandardowych. Połączenie jest zadeklarowany za pomocą `<asp:webpartconnection>` kontrolki elementu i dostawcy i klienta są zadeklarowane w `<asp:webpartzone>` elementu.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Ładowanie strony w przeglądarce. Połączenie między formantami już istnieje, a konsumenta wyświetla danych od dostawcy, ponieważ połączenie został zadeklarowany jako statyczny połączenia na stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> jest <see langword="null" />.  \- lub - <paramref name="interfaceType" /> jest <see langword="null" />.  \- lub - <paramref name="controlType" /> jest <see langword="null" />.  \- lub - <paramref name="displayName" /> jest <see langword="null" /> lub ciąg pusty ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> nie jest taki sam typ jak kontrola dostawcy (lub nieprawidłową klasę pochodzić od niego).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Formant pełnią funkcję dostawcy usług w związku z części sieci Web.</param>
        <summary>Wywołuje metodę wywołania zwrotnego w formancie dostawcy, który pobiera wystąpienie interfejsu, aby powrócić do odbiorców.</summary>
        <returns>
          <see cref="T:System.Object" /> To wystąpienie interfejsu dostawcy zwraca klientom nawiązanie połączenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca obiekt spod kontroli dostawcy, który jest wystąpieniem interfejs używany do ustanawiania połączenia. Typ obiektu będzie typ zaimplementowanego interfejsu. Na przykład dwa interfejsy, które są wdrażane dla połączeń w części sieci Web są zestaw kontroli <xref:System.Web.UI.WebControls.WebParts.IWebPartField> i <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Gdy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> wywoływana jest metoda <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu, jeśli dostawca skojarzone implementuje jednej z tych interfejsów, zwrócony obiekt będzie tego samego typu.  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Metoda jest wywoływana przez <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektów po uaktywnieniu połączeń. Jest to krytycznym kroku, który faktycznie inicjuje połączenie i rozpocznie się proces, który umożliwia dwóch formantów udostępniania danych.  
  
 Formant użytkownika w przypadku połączenia musi mieć możliwość pracy tego samego typu interfejsu, ponieważ dostawca. Jeśli nie, kontrolki są niezgodne i <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu musi być używany do nawiązania połączenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Formant pełnią funkcję dostawcy usług w związku z części sieci Web.</param>
        <summary>Pobiera opcjonalne zbiór interfejsów pomocniczych, które mogą być obsługiwane przez punkt połączenia dostawcy.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> dodatkowych interfejsów udostępniane przez formant pełnią funkcję dostawcy usług.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt punktu połączenia dostawcy zawsze ma domyślnego interfejsu, który jest używany do ustanawiania połączenia z konsumentów. Wystąpienie interfejsu domyślnego są pobierane przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metoda <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu.  
  
 Jednak niektóre formanty dostawcy wdroży wiele interfejsów, aby zapewnić klientom w ramach połączenia. Te interfejsy, które nie są domyślnie używane do nawiązania połączenia, są nazywane interfejsów pomocniczych. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> — Metoda udostępnia sposób zwrócenia kolekcję odwołań do interfejsów pomocniczych, podobnie jak <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metoda zwraca odwołanie do domyślnego interfejsu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> Metoda <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> klasy zawiera żadnej implementacji; zwraca pustą kolekcję interfejsów pomocniczych. Aby zaimplementować tę metodę, musi dziedziczyć z <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> klasy i przesłonić tę metodę, zwracanie z niego określony zbiór interfejsów pomocniczych.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>