<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="77bc2e4454c903d6f8a37939bf1e818d61170a9d" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39946416" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje obiektu punktu połączenia, który umożliwia formant serwera działający jako dostawcę w celu utworzenia połączenia z konsumentem.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde połączenie między dwoma formantami serwera części sieci Web każda kontrolka musi mieć (między innymi wymagania) skojarzone z nimi połączenie obiektu punktu, który umożliwia nawiązać połączenia z innej kontrolki i albo zapewniają lub zużywają danych, w zależności od tego, czy kontrolka jest wyznaczony jako dostawcy lub odbiorcy połączenia. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiekt ogólnie rzecz biorąc zawiera szczegółowe informacje dotyczące jak kontrolki mogą łączyć się kolejną kontrolkę i typu danych, które można udostępniać. W przypadku formantu działający jako dostawcę, w przypadku połączenia jego punkt połączenia musi być <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu. Szczegółowe informacje dotyczące połączenia składników Web Part i punkty połączenia Zobacz tematy wymienione w poniższej sekcji Zobacz też.  
  
 Aby utworzyć <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu, wymagane jest wykonanie kilku kroków:  
  
1.  Utwórz interfejs. Gdy dostawca udostępnia dane z konsumentem, robi to przez uzyskanie wystąpienia interfejsu i zwracanie tego wystąpienia z klientem.  
  
2.  Implementowanie interfejsu dostawcy. A <xref:System.Web.UI.WebControls.WebParts.WebPart> lub inny formant serwera (dowolnego typu formantem serwera w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy można użyć) który będzie stanowić dostawca musi implementować interfejs, który został utworzony w pierwszym kroku.  
  
3.  Określ metodę wywołania zwrotnego. Metoda w dostawcy musi zostać określony jako metoda wywołania zwrotnego do nawiązania połączenia. Ta metoda zwraca wystąpienie zaimplementowanego interfejsu użytkownika. Podejście składników Web Part do identyfikowania metodę wywołania zwrotnego w dostawcy jest dodanie `ConnectionProvider` atrybutu metadanych (zdefiniowany przez <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> klasy) do metody, która zwraca wystąpienie interfejsu. Gdy ten atrybut zostanie dodany, wymagany jest tylko parametr nazwę wyświetlaną dla punktu połączenia dostawcy. Opcjonalne parametry mogą być również dodawane, takie jak identyfikator dla punktu połączenia.  
  
 Po zostały wyposażone formantu do działania jako dostawca kontrolki mogą uczestniczyć w połączenia (przy założeniu, że formantu konsumenta podobnie wyposażone i dostępna). Aby utworzyć połączenie statycznych i deklaracyjny w znaczniku strony sieci Web, deweloperzy mogą używać `<asp:webpartconnection>` elementu. Jeśli `ConnectionProvider` atrybutu w kodzie źródłowym dostawcy, który identyfikuje metodę wywołania zwrotnego Określa identyfikator dla punktu połączenia, a następnie ta wartość musi być przypisany do `ProviderConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu na stronie. Jedną z przyczyn, deweloper może określić identyfikator dla punktu połączenia dostawcy jest na tym, czy wiele punktów połączenia w formancie dostawcy. Jeśli nie określono Identyfikatora dla punktu połączenia dostawcy w formancie dostawcy, wartość nie ma być przypisane do `ProviderConnectionPointID` atrybutu na stronie albo, ponieważ połączenie zostanie utworzony przy użyciu wartości domyślnej, uzyskany z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> pole.  
  
 Do utworzenia połączenia w kodzie, deweloperzy należy utworzyć nowy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metody i przekazanie do niego identyfikator formantu dostawcy, wraz z Identyfikatora lub zdefiniowane indeks <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt w kontrolce dostawcy. Zwrócony <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu wraz z odwołaniem do formantu dostawcy odwołanie do formantu konsumenta i odpowiadający mu <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektów, wyświetlane są wszystkie przekazane do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę, aby utworzyć nową <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 Mimo że deweloperzy mogą używać punktów połączenia dostawcy, jako część nawiązywanie połączeń w sposób deklaratywny lub programowo, również interakcji użytkowników z dostawcy punkty połączenia można nawiązywać połączenia za pomocą interfejsu użytkownika (UI). Jeśli deweloperzy deklaruje <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolki na stronie sieci Web zapewnia czasu wykonywania interfejsu użytkownika dla użytkowników pod kątem tworzenia połączeń. Jeśli użytkownik wybierze formantu konsumenta jako punktu wyjścia do nawiązywania połączenia, klikając jej połączyć zlecenie (ich można również wybrać dostawcę; nie ma żadnej różnicy w wynikowej połączenia) w interfejsie użytkownika zostanie wyświetlony kontrolkę listy rozwijanej z wyświetlana nazwa dostępnego dostawcę połączenia punktu (lub punkty, jeśli istnieje wiele migawek). Użytkownicy muszą wybrać punkt połączenia dostawcy, aby utworzyć połączenie.  
  
 A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt kojarzy bezpośrednio z kontrolką określonego dostawcy i szczegółowe informacje o połączeniu są przechowywane we właściwościach dziedziczy od podstawy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy. Na przykład w dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> właściwości punktu połączenia dostawcy przechowuje typ interfejsu zwróconym przez dostawcę. Jeśli typ interfejsu dostawcę i konsumentów w przypadku połączenia działają zarówno z takimi samymi, formanty są zgodne i zdolne do tworzenia połączenia bezpośredniego. Jeśli dostawcy i klienta nie może działać przy użyciu tego samego typu interfejsu, są niezgodne i musi być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu do translacji punktu połączenia dostawcy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> wartości do typu, który użytkownik może pracować. Inną właściwość dziedziczona ważne jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwość, która zawiera przyjazną nazwę do wyświetlenia w Interfejsie użytkownika dla użytkowników wybrać połączenie dostawcy punktu podczas tworzenia połączenia. Nazwa wyświetlana jest wymagany parametr, gdy deweloperzy dodać `ConnectionProvider` atrybutu do metody wywołania zwrotnego w kontrolce dostawcy. Dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> właściwość przydaje się także, jak wskazano powyżej, ponieważ zawiera ono Unikatowy identyfikator dla punktu połączenia dostawcy w przypadku, gdy dostawca ma wiele punktów połączenia. Dostawca może mieć wiele <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekty zdefiniowane w nim, a w tym przypadku, gdy deweloperzy dodać `ConnectionProvider` atrybutu do metody, należy określić wartość Identyfikatora w celu rozróżnienia każdego punktu połączenia. Jest jednym innych istotnych dziedziczone właściwości <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> właściwość, która wskazuje, czy punkt połączenia z dostawcą mogą się łączyć jednocześnie do wielu odbiorców. Wartość tej właściwości jest `true` domyślnie dla dostawcy punktów połączenia (a jego wartość domyślna to `false` dla konsumentów punkty połączenia).  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klasa dodaje kilka metod unikatowy do elementów członkowskich dziedziczy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Metoda pobiera wystąpienie interfejsu, który zwróci Metoda wywołania zwrotnego dla klientów. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Metoda pobiera interfejsy dodatkowe, które są dostępne w ramach istniejącego połączenia, ale są nie interfejsy używane do nawiązania połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje prosty sposób do utworzenia połączenia w sposób deklaratywny, programowo lub za pośrednictwem interfejsu użytkownika w każdym przypadku tworzeniu używać punktu połączenia dostawcy.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web Part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> klasę o nazwie `ZipCodeWebPart` który implementuje interfejs i działa jako formantu dostawcy. Jego `ProvideIZipCode` metoda to metoda wywołania zwrotnego, która implementuje składową tylko. Metoda po prostu zwraca wystąpienia interfejsu. Należy zauważyć, że metoda jest oznaczona atrybutem `ConnectionProvider` atrybutu w metadanych. Jest to mechanizm do identyfikowania metody jako metodę wywołania zwrotnego dla punktu połączenia dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> nosi nazwę klasy `WeatherWebPart`, i działa jako odbiorcy połączenia. Ta klasa ma metodę o nazwie `GetZipCode` wystąpienie, które pobiera `IZipCode` interfejs z formantu dostawcy. Należy pamiętać, że ta metoda jest oznaczona jako metoda punktu połączenia klienta za pomocą `ConnectionConsumer` atrybutu w metadanych. Jest to mechanizm do identyfikowania metody punktu połączenia w formancie konsumenta.  
  
 Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [wskazówki: tworzenie i używanie kontrolki serwera sieci Web niestandardowego](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. U góry są `Register` dyrektywy rejestracji Kontrolki niestandardowe, które tworzą połączenie i kontrolki użytkownika, który umożliwia użytkownikom zmianę tryby wyświetlania na stronie. Samo połączenie jest tworzony w sposób deklaratywny poziomu `<staticconnections>` elementu na stronie. W tym przykładzie pokazano jednym ze sposobów tworzenia połączenia — Uwaga `ProviderConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu. Można również utworzyć połączenie programowe; kod dla tych czynności znajduje się w `Button1_Click` metody. W tym przypadku <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiekt jest tworzony i następnie przekazywany do metody, która tworzy rzeczywistych połączenie. Określanie, czy połączenie jest tworzone deklaratywne lub programowo, zawsze należy określać punkty połączenia dla konsumentów i dostawcy. `Button2_Click` Uzyskuje dostęp do metody <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiektów dla konsumentów i dostawcy, a następnie zapisuje niektóre z ich wartości właściwości etykiety na stronie.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce kliknij **szczegóły punktu połączenia** przycisku. Informacje o dostawcy i konsumentów punkty połączeń ustanowionych w deklaratywne połączenia są wyświetlane. Następnie użyj **tryb wyświetlania** kontrolkę listy rozwijanej tę stronę w trybie łączenia. W menu zleceń **kod POCZTOWY odbiorcy** <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroli (reprezentowany przez strzałki w dół na pasku tytułu), kliknij przycisk Połącz zlecenie. Połączenie, zostanie wyświetlony interfejs użytkownika, są tworzone automatycznie przez `<asp:connectionszone>` kontroli zadeklarowany na stronie. Jest to inny sposób tworzenia połączenia (za pośrednictwem interfejsu użytkownika), wraz z metody deklaracyjne i programowe opisane wcześniej. Kliknij przycisk **rozłączenia** przycisk, aby zakończyć istniejącej statycznych połączenie. Kliknij przycisk **Utwórz połączenie z dostawcą** łącza. Interfejs użytkownika wyświetli teraz kontrolkę listy rozwijanej, która zawiera nazwę wyświetlaną dostawcy połączenia punktu. Wybierz punkt połączenia z listy rozwijanej, a następnie kliknij przycisk **Connect** Aby nawiązać połączenie. Następnie kliknij przycisk **rozłączenia** ponownie. Następnie kliknij przycisk **połączenia dynamicznego** przycisk, aby utworzyć połączenie programowe. Użyj **tryb wyświetlania** formantu, aby powrócić na stronę, aby tryb przeglądania. Kliknij przycisk **szczegóły punktu połączenia** przycisk ponownie, aby wskazać, po bardziej szczegółowe informacje dotyczące obiektu punktu połączenia dostawcy.  
  
 Przykład wykazała nawiązywania połączenia i użycie punktu połączenia dostawcy na trzy sposoby: statyczne połączenia zadeklarowane w znaczniku strony sieci Web; Połączenie utworzone w kodzie, który jest używany <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu; i połączenia utworzonego przez użytkownika za pośrednictwem połączenia interfejsu użytkownika.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metoda w formancie dostawca, który zwraca wystąpienie interfejsu dla konsumentów, aby ustanowić połączenie.</param>
        <param name="interfaceType">
          <see cref="T:System.Type" /> Interfejsu dostawcę służy do klientów.</param>
        <param name="controlType">
          <see cref="T:System.Type" /> Formantu dostawcy, z którą jest skojarzony punkt połączenia z dostawcą.</param>
        <param name="displayName">Przyjazną nazwę wyświetlaną dla punktu połączenia dostawcy, który pojawia się dla użytkowników w interfejsie użytkownika (UI) połączenia.</param>
        <param name="id">Unikatowy identyfikator dla punktu połączenia dostawcy.</param>
        <param name="allowsMultipleConnections">Wartość logiczna wskazująca, czy punkt połączenia z dostawcą może mieć wiele jednoczesnych połączeń z klientami.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Konstruktor <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy po prostu wywołuje konstruktora bazowego, przekazując do niej różnych parametrów i Inicjowanie klasy bazowej.  
  
 Konstruktor klasy bazowej sprawdza, czy liczba parametrów dla punktu połączenia i może generować wyjątki kilka. Aby uzyskać listę możliwych wyjątków zobacz sekcję wyjątki.  
  
 Możesz wywołać <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> konstruktora, aby utworzyć wystąpienie elementu <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy. Jednak w przypadku możesz po prostu nawiązywania połączenia i nie rozszerzania klasy, należy wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodę, aby powrócić na istniejący obiekt punktu połączenia z dostawcą.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak dziedziczyć <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasy w celu utworzenia punktu połączenia niestandardowego dostawcy.  
  
 Przykładowy kod ma trzy części:  
  
-   Plik źródłowy, który zawiera dostawcę <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolować konsumenta <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroli i niestandardowego <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu.  
  
-   Strona sieci Web, który obsługuje formanty w statycznych połączenia.  
  
-   Wyjaśnienie sposobu uruchamiania kodu przykładu.  
  
 Pierwsza część w przykładzie kodu jest źródłem dla dostawcy i konsumentów <xref:System.Web.UI.WebControls.WebParts.WebPart> formanty i niestandardowego <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> klasę o nazwie `TableProviderConnectionPoint`. Należy pamiętać, że Konstruktor `TableProviderConnectionPoint` klasa wywołuje konstruktora bazowego, podając mu wymaganych parametrów, zgodnie z instrukcjami w sekcji parametrów. Należy również zauważyć, że w `TableProviderWebPart` klasy `GetConnectionInterface` metody jest określony jako metoda wywołania zwrotnego w przypadku połączeń i `ConnectionProvider` atrybut deklaruje niestandardowej `TableProviderConnectionPoint` jako parametr. To pokazuje, jak utworzyć punkt połączenia niestandardowego dostawcy i skojarz ją z formantu dostawcy. W tym przykładzie przyjęto założenie, że kod źródłowy jest dynamicznie kompilowany, więc należy umieścić plik kodu źródłowego w podfolderze App_Code aplikacji sieci Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Druga część przykładowy kod jest stronę sieci Web, która obsługuje niestandardowe formanty w statycznych połączenia składnika Web Part. W górnej części strony jest `Register` dyrektywy do deklarowania prefiksu i obszaru nazw, w przypadku kontrolek niestandardowych. Połączenie jest zadeklarowana za pomocą `<asp:webpartconnection>` kontrolki elementu i dostawcy i klienta są zadeklarowane w obrębie `<asp:webpartzone>` elementu.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Ładowanie strony w przeglądarce. Połączenie między kontrolkami, już istnieje, a konsumenta wyświetla danych od dostawcy, ponieważ połączenie został zadeklarowany jako statyczny połączenia na stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> jest <see langword="null" />.  \- lub - <paramref name="interfaceType" /> jest <see langword="null" />.  \- lub - <paramref name="controlType" /> jest <see langword="null" />.  \- lub - <paramref name="displayName" /> jest <see langword="null" /> ani być pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> nie jest taki sam jak formantu dostawcy (lub prawidłową klasę pochodzić od niego).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Formant działający jako dostawcę w połączenia składnika Web Part.</param>
        <summary>Wywołuje metodę wywołania zwrotnego w kontrolce dostawcy, która pobiera wystąpienia interfejsu, aby powrócić do odbiorców.</summary>
        <returns>
          <see cref="T:System.Object" /> To wystąpienie interfejsu dostawcę zwraca dla konsumentów, aby ustanowić połączenie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca obiekt z formantu dostawcy, który jest wystąpieniem interfejsu używany do ustanawiania połączenia. Typ obiektu będzie typ zaimplementowany interfejs. Na przykład dwa interfejsy, które są implementowane dla połączeń w zestawem formantów części sieci Web <xref:System.Web.UI.WebControls.WebParts.IWebPartField> i <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Gdy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> wywoływana jest metoda <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu, jeśli skojarzone dostawcy implementuje jedną z tych interfejsów, zwracany obiekt będzie tego samego typu.  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Metoda jest wywoływana przez <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekty, gdy połączenie jest aktywowane. Jest to niezwykle ważne faktycznie inicjuje połączenie i rozpoczyna się proces, który umożliwia dwie kontrolki do udostępniania danych.  
  
 Formantu konsumenta w przypadku połączenia musi mieć możliwość pracy z tym samym typem interfejsu jako dostawcy. Jeśli nie, formanty są niezgodne i <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu należy używać do nawiązania połączenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Formant działający jako dostawcę w połączenia składnika Web Part.</param>
        <summary>Pobiera opcjonalne zbiór interfejsów pomocniczych, które mogą być obsługiwane przez punkt połączenia z dostawcą.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> dodatkowe interfejsy dostarczane przez formant działający jako dostawcę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawca obiektu punktu połączenia ma zawsze domyślny interfejs, który jest używany do ustanawiania połączenia z klientami. Wystąpienie interfejsu domyślny jest pobierany przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metody <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektu.  
  
 Jednak niektóre formanty dostawca wdroży wiele interfejsów zapewnienie konsumentów w ramach połączenia. Te interfejsy, które nie są domyślne używane do nawiązania połączenia, są nazywane interfejsów pomocniczych. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Metoda zapewnia sposób zwracają kolekcję odwołań do interfejsów pomocniczych, podobnie jak <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metoda zwraca odwołanie do domyślnego interfejsu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> Method in Class metoda <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> klasy zawiera implementacji; zwraca pustą kolekcję interfejsów pomocniczych. Aby zaimplementować tę metodę, musi dziedziczyć <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> klasy i przesłonić tę metodę, zwracając z niego określony zbiór interfejsów pomocniczych.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>