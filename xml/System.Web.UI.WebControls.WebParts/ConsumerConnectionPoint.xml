<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90a1296f3cec431b86462bba13a24e323a76a691" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53391806" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje obiektu punktu połączenia, który umożliwia formant serwera, działając jako użytkownik w celu utworzenia połączenia z dostawcą.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde połączenie między dwoma formantami serwera części sieci Web każda kontrolka musi mieć (między innymi wymagania) skojarzone z nimi połączenie obiektu punktu, który umożliwia nawiązać połączenia z innej kontrolki i albo zapewniają lub zużywają danych, w zależności od tego, czy kontrolka jest wyznaczony jako dostawcy lub odbiorcy połączenia. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiekt ogólnie rzecz biorąc zawiera szczegółowe informacje dotyczące jak kontrolki mogą łączyć się kolejną kontrolkę i typu danych, które można udostępniać. W przypadku formantu działania jako użytkownik w przypadku połączenia jego punkt połączenia musi być <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. Aby uzyskać szczegółowe informacje na temat składników Web Part połączenia i punkty połączenia, przeczytaj tematy wymienione w poniższej sekcji Zobacz też.  
  
 Aby utworzyć <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu, wymagane jest wykonanie kilku kroków:  
  
1.  Włącz formantu konsumenta odwoływać się do wystąpienia interfejsu. A <xref:System.Web.UI.WebControls.WebParts.WebPart> lub inny formant serwera (dowolnego typu formantem serwera, który zostanie dodany do <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy można użyć) musi mieć możliwość pracy z danymi z wystąpienia określonego interfejsu. Formant nie należy implementować interfejs; jedynym dostawcą, należy go zaimplementować. Konsument albo może współpracować z typu interfejsu dokładnie, obsługiwane przez dostawcę lub, jeśli nie, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt może służyć do przekształcania danych z typu interfejsu dostawcę z typem rozpoznawane przez konsumenta. Typowy sposób, aby umożliwić odbiorcy jest deklarować pole prywatne zawiera odwołanie do typu żądanego interfejsu.  
  
2.  Określ metodę wywołania zwrotnego. Metody konsumenta musi zostać określony jako metoda wywołania zwrotnego do nawiązania połączenia z dostawcą. Ta metoda pobiera wystąpienie interfejsu implementuje dostawcy, a następnie przypisuje go do (na przykład) pola prywatnego utworzony w pierwszym kroku. Podejście składników Web Part do identyfikowania w konsumencie metodę wywołania zwrotnego jest dodanie `ConnectionConsumer` atrybutu metadanych (zdefiniowany przez <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> klasy) do metody, która otrzymuje wystąpienie interfejsu. Gdy ten atrybut zostanie dodany, wymagany jest tylko parametr nazwę wyświetlaną dla punktu połączenia klientów. Opcjonalne parametry mogą być również dodawane, takie jak identyfikator.  
  
3.  Proces i wyjścia danych z wystąpienia interfejsu. Wykonywać żadnego przetwarzania wewnętrznego, stosownie do potrzeb dotyczących danych, a następnie zazwyczaj formantu konsumenta spowoduje, że dane ze stroną. Często stosowaną metodą wykonać to zadanie jest zastąpienie formantu <xref:System.Web.UI.Control.OnPreRender%2A> metody.  
  
    > [!NOTE]
    >  Podczas synchronicznego żądania, użytkownik powinien dane żądania bezpośrednio od dostawcy podczas lub bezpośrednio po <xref:System.Web.UI.Control.PreRender> zdarzeń. Podczas żądania asynchronicznego Jeśli metoda wywołania zwrotnego dostawcy nie jest wywoływana w dowolnym momencie podczas renderowania, deweloper założyć, że żadne dane nie została wysłana do konsumenta.  
  
 Po formant został wyposażony w do działania jako konsument, kontrolki mogą uczestniczyć w połączenia (przy założeniu, że formantu dostawcy jest również wyposażony i dostępne). Aby utworzyć połączenie statycznych i deklaracyjny w znaczniku strony sieci Web, deweloperzy mogą używać `<asp:webpartconnection>` elementu. Jeśli `ConnectionConsumer` atrybutu w kodzie źródłowym konsumenta, który identyfikuje metodę wywołania zwrotnego Określa identyfikator dla punktu połączenia, a następnie ta wartość musi być przypisany do `ConsumerConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu na stronie. Przyczynę, deweloper może określić identyfikator dla punktu połączenia klienta jest, jeśli wiele punktów połączenia zdefiniowany w formancie konsumenta. Jeśli nie określono Identyfikatora dla punktu połączenia klientów w formancie konsumenta, wartość nie ma ma być przypisane do `ConsumerConnectionPointID` atrybutu na stronie albo, ponieważ połączenie zostanie utworzony przy użyciu wartości domyślnej, uzyskany z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> pole.  
  
 Do utworzenia połączenia w kodzie, deweloperzy należy utworzyć nowy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metody i przekazanie do niego identyfikator formantu konsumenta, wraz z Identyfikatora lub zdefiniowane indeks <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt w kontrolce konsumenta. Zwrócony <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu wraz z odwołaniem do formantu konsumenta, odwołanie do formantu dostawcy i odpowiadający mu <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektów, wyświetlane są wszystkie przekazane do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodę, aby utworzyć nową <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 Mimo że deweloperzy mogą używać punktów połączenia klientów jako część nawiązywanie połączeń w sposób deklaratywny lub programowo, również interakcji użytkowników z punktów połączenia klienta do nawiązania połączenia za pośrednictwem interfejsu użytkownika (UI). Jeśli deweloperzy deklaruje <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolki na stronie sieci Web zapewnia czasu wykonywania interfejsu użytkownika dla użytkowników pod kątem tworzenia połączeń. Jeśli użytkownik wybierze formantu dostawcy jako punktu wyjścia do nawiązywania połączenia, klikając jej połączyć zlecenie (ich można również wybrać konsumenta; nie ma żadnej różnicy w wynikowej połączenia) w interfejsie użytkownika zostanie wyświetlony kontrolkę listy rozwijanej z Wyświetlanie nazw dostępnych odbiorcy połączenia punktu (lub punkty, jeśli istnieje wiele migawek), dostawca może przesyłać dane. Użytkownicy muszą wybrać punkt połączenia klienta do nawiązania połączenia.  
  
 A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt kojarzy bezpośrednio z kontrolką określonych odbiorców i szczegółowe informacje o połączeniu są przechowywane we właściwościach dziedziczy od podstawy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy. Na przykład w dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> właściwości punkt połączenia odbiorcy zachowuje typ używa interfejsu. Jeśli dostawcy i klienta w przypadku połączenia zarówno zrozumieć typu interfejsu, formanty są zgodne i zdolne do tworzenia połączenia bezpośredniego. Jeśli dostawcy i klienta nie może działać przy użyciu tego samego typu interfejsu, są niezgodne i musi być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu do translacji punktu połączenia dostawcy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> właściwość do typu, który użytkownik może pracować. Inną właściwość dziedziczona ważne jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwość, która zawiera przyjazną nazwę do wyświetlenia w Interfejsie użytkownika dla użytkowników wybrać połączenie klienta punktu podczas tworzenia połączenia. Nazwa wyświetlana jest wymagany parametr, gdy deweloperzy dodać `ConnectionConsumer` atrybutu do metody wywołania zwrotnego w kontrolce konsumenta. Dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> właściwość przydaje się także, jak wskazano powyżej, ponieważ zawiera ono Unikatowy identyfikator dla punktu połączenia klientów w przypadku, gdy użytkownik ma wiele punktów połączenia. Użytkownik może mieć wiele <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekty zdefiniowane w nim, a w tym przypadku, gdy deweloperzy dodać `ConnectionConsumer` atrybutu do metody, należy określić wartość Identyfikatora w celu rozróżnienia każdego punktu połączenia. Jest jednym innych istotnych dziedziczone właściwości <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> właściwość, która wskazuje, czy punkt połączenia klientów może jednocześnie łączą się z wielu dostawców. Wartość tej właściwości jest `false` domyślnie dla konsumentów punktów połączenia (a jego wartość domyślna to `true` dla dostawcy punkty połączenia).  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasa dodaje kilka metod unikatowy do elementów członkowskich dziedziczy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Metoda wywołuje metodę wywołania zwrotnego konsumenta własne zdefiniowane, który można pobrać wystąpienia interfejsu od dostawcy. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Metoda zwraca wartość logiczną wskazującą, czy punkt połączenia jest w stanie nawiązać połączenia, w oparciu o bieżący stan formantu konsumenta skojarzone.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje prosty sposób do utworzenia połączenia w sposób deklaratywny, programowo lub za pośrednictwem interfejsu użytkownika w każdym przypadku tworzeniu używać punktu połączenia klientów.  
  
 W przykładzie przedstawiono cztery części:  
  
-   Tryb wyświetlania w kontrolkę użytkownika, który umożliwia zmianę składników Web Part na stronie.  
  
-   Źródła kodu interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroluje działający jako dostawcę i konsumentów dla połączenia.  
  
-   Strona sieci Web do obsługi wszystkich kontrolek, a następnie uruchomić przykładowy kod.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowej stronie.  
  
 Pierwsza część w tym przykładzie kodu jest kontrolki użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy do pliku ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony sieci Web hostingu. Wyświetlane szczegóły dotyczące trybów i opis kodu źródłowego w tym elemencie sterującym, w temacie [instruktażu: Zmiana trybów wyświetlania w sieci Web części strony](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kod źródłowy dla interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> klasę o nazwie `ZipCodeWebPart` który implementuje interfejs i działa jako formantu dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> nosi nazwę klasy `WeatherWebPart`, i działa jako odbiorcy połączenia. Ta klasa ma metodę o nazwie `GetZipCode` wystąpienie, które pobiera `IZipCode` interfejs z formantu dostawcy. Należy pamiętać, że ta metoda jest oznaczona jako metoda punktu połączenia klienta za pomocą `ConnectionConsumer` atrybutu w metadanych. Jest to mechanizm do identyfikowania metody punktu połączenia w formancie konsumenta.  
  
 Aby uzyskać przykładowy kod zadziałał należy skompilować ten kod źródłowy. Można skompilować go jawnie i umieścić Wynikowy zestaw w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, gdzie go zostanie dynamicznie skompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby wskazówki, który demonstruje, jak skompilować, zobacz [instruktażu: Tworzenie i używanie niestandardowej kontrolki serwera internetowej](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzecia część przykładowy kod jest strony sieci Web. U góry są `Register` dyrektywy rejestracji Kontrolki niestandardowe, które tworzą połączenie i kontrolki użytkownika, który umożliwia użytkownikom zmianę tryby wyświetlania na stronie. Samo połączenie jest tworzony w sposób deklaratywny poziomu `<staticconnections>` elementu na stronie. W tym przykładzie pokazano jednym ze sposobów tworzenia połączenia — Uwaga `ConsumerConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu. Można również utworzyć połączenie programowe; kod dla tych czynności znajduje się w `Button1_Click` metody. W tym przypadku <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt jest tworzony i następnie przekazywany do metody, która tworzy rzeczywistych połączenie. Określanie, czy połączenie jest tworzone deklaratywne lub programowo, zawsze należy określać punkty połączenia dla konsumentów i dostawcy. `Button2_Click` Uzyskuje dostęp do metody <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiektów dla konsumentów i dostawcy, a następnie zapisuje niektóre z ich wartości właściwości etykiety na stronie.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce kliknij **szczegóły punktu połączenia** przycisku. Informacje o dostawcy i konsumentów punkty połączeń ustanowionych w deklaratywne połączenia są wyświetlane. Następnie użyj **tryb wyświetlania** kontrolkę listy rozwijanej tę stronę w trybie łączenia. W menu zleceń **dostawcy kod POCZTOWY** <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroli (reprezentowany przez strzałki w dół na pasku tytułu), kliknij przycisk Połącz zlecenie. Połączenie, zostanie wyświetlony interfejs użytkownika, są tworzone automatycznie przez `<asp:connectionszone>` kontroli zadeklarowany na stronie. Jest to inny sposób tworzenia połączenia (za pośrednictwem interfejsu użytkownika), wraz z metody deklaracyjne i programowe opisane wcześniej. Kliknij przycisk **rozłączenia** przycisk, aby zakończyć istniejącej statycznych połączenie. Kliknij przycisk **Utwórz połączenie z klientem** łącza. Interfejs użytkownika wyświetli teraz kontrolkę listy rozwijanej, która jest nazwa wyświetlana punktu połączenia klientów. Wybierz punkt połączenia z listy rozwijanej, a następnie kliknij przycisk **Connect** Aby nawiązać połączenie. Następnie kliknij przycisk **rozłączenia** ponownie. Kliknij przycisk **połączenia dynamicznego** przycisk, aby utworzyć połączenie programowe. Użyj **tryb wyświetlania** formantu, aby powrócić na stronę, aby tryb przeglądania. Kliknij przycisk **szczegóły punktu połączenia** przycisk ponownie, aby wskazać, szczegółowe informacje dotyczące obiektu punktu połączenia klientów po więcej.  
  
 Przykład wykazała nawiązywania połączenia i użycie punktu połączenia klientów na trzy sposoby: statyczne połączenia zadeklarowane w znaczniku strony sieci Web; Połączenie utworzone w kodzie, który jest używany <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu; i połączenia utworzonego przez użytkownika za pośrednictwem połączenia interfejsu użytkownika.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Części sieci Web platformy ASP.NET, stron</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Przegląd połączenia części sieci Web</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metoda w formancie konsumenta, która zwraca wystąpienie interfejsu dla konsumentów, aby nawiązać połączenie.</param>
        <param name="interfaceType"><see cref="T:System.Type" /> Interfejsu, który użytkownik otrzymuje od dostawcy.</param>
        <param name="controlType"><see cref="T:System.Type" /> Formantu konsumenta, za pomocą którego punkt połączenia klienta jest skojarzony.</param>
        <param name="displayName">Przyjazną nazwę wyświetlaną dla punktu połączenia konsumenta, wyświetlany w interfejsie użytkownika (UI) połączenia.</param>
        <param name="id">Unikatowy identyfikator dla punktu połączenia klientów.</param>
        <param name="allowsMultipleConnections">Wartość logiczna wskazująca, czy punkt połączenia klientów może mieć wiele jednoczesnych połączeń z dostawcami.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> Konstruktor <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy po prostu wywołuje konstruktora bazowego, przekazując do niej różnych parametrów i Inicjowanie klasy bazowej.  
  
 Konstruktor klasy bazowej sprawdza, czy liczba parametrów dla punktu połączenia i może generować wyjątki kilka. Aby uzyskać listę możliwych wyjątków zobacz sekcję wyjątki.  
  
 Możesz wywołać <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> konstruktora, aby utworzyć wystąpienie elementu <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy. Jednak w przypadku możesz po prostu nawiązywania połączenia i nie rozszerzania klasy, należy wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodę, aby zwracać obiektu punktu połączenia z dostawcą.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak dziedziczyć <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy w celu utworzenia punktu połączenia niestandardowego dostawcy.  
  
 Przykładowy kod ma trzy części:  
  
-   Plik źródłowy, który zawiera dostawcę <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolować konsumenta <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroli i niestandardowego <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu.  
  
-   Strona sieci Web, który obsługuje formanty w statycznych połączenia.  
  
-   Wyjaśnienie sposobu uruchamiania kodu przykładu.  
  
 Pierwsza część w przykładzie kodu jest źródłem dla dostawcy i konsumentów <xref:System.Web.UI.WebControls.WebParts.WebPart> formanty i niestandardowego <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasę o nazwie `TableConsumerConnectionPoint`. Należy pamiętać, że Konstruktor `TableConsumerConnectionPoint` klasa wywołuje konstruktora bazowego, podając mu wymaganych parametrów, zgodnie z instrukcjami w sekcji parametrów. Należy również zauważyć, że w `TableConsumer` klasy `SetConnectionInterface` metody jest określony jako metoda wywołania zwrotnego w przypadku połączeń i `ConnectionConsumer` atrybut deklaruje niestandardowej `TableConsumerConnectionPoint` jako parametr. To pokazuje, jak utworzyć punkt połączenia klientów niestandardowych i skojarz ją z formantu konsumenta. W tym przykładzie przyjęto założenie, że kod źródłowy jest dynamicznie kompilowany, więc należy umieścić plik kodu źródłowego w podfolderze App_Code aplikacji sieci Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Druga część przykładowy kod jest stronę sieci Web, która obsługuje niestandardowe formanty w statycznych połączenie części sieci Web. W górnej części strony jest `Register` dyrektywy do deklarowania prefiksu i obszaru nazw, w przypadku kontrolek niestandardowych. Połączenie jest zadeklarowana za pomocą `<asp:webpartconnection>` kontrolki elementu i dostawcy i klienta są zadeklarowane w obrębie `<asp:webpartzone>` elementu.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Ładowanie strony w przeglądarce. Połączenie między kontrolkami, już istnieje, a konsumenta wyświetla danych od dostawcy, ponieważ połączenie został zadeklarowany jako statyczny połączenia na stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="interfaceType" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="controlType" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="displayName" /> jest <see langword="null" /> ani być pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> nie jest taki sam jak formantu konsumenta (lub prawidłową klasę pochodzić od niego).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Części sieci Web platformy ASP.NET, stron</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Skojarzone z punktem połączenia klientów z formantu konsumenta.</param>
        <param name="data">Wystąpienie interfejsu jest zwracana z formantu dostawcy.</param>
        <summary>Wywołuje metodę wywołania zwrotnego w kontrolce odbiorców i pobiera wystąpienie interfejsu z formantu dostawcy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda otrzymuje wystąpienie interfejsu od dostawcy, który zawiera dane dla formantu konsumenta.  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Metoda jest wywoływana przez <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiekty, gdy połączenie jest aktywowane. Jest to niezwykle ważne, który jest częścią inicjowania połączenia i włączenie dwóch kontrolek w celu udostępniania danych.  
  
 Formantu konsumenta w przypadku połączenia musi mieć możliwość pracy z tym samym typem interfejsu jako dostawcy. Jeśli nie, formanty są niezgodne i <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu należy używać do nawiązania połączenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Skojarzony formant konsumenta <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> dodatkowej interfejsów, które uczestniczą w przypadku połączenia.</param>
        <summary>Określa, czy punkt połączenia klienta jest obecnie możliwe nawiązywania połączenia.</summary>
        <returns><see langword="true" /> Jeśli punkt połączenia z obecnie można ustanowić połączenia; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Metoda zaimplementowanego zawsze zwraca `true` we wszystkich przypadkach dla <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy. Celem tej metody polega na uzyskaniu sprawdzić stan `control` i `secondaryInterfaces` w niektórych punktach krytycznych, aby określić, czy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt jest obecnie w stanie utworzyć połączenie.  
  
 Może istnieć scenariusze gdzie `control` jest w stanie, który uniemożliwia w celu utworzenia połączenia, gdy `secondaryInterfaces` połączenie mogą być tworzone, musi istnieć. W takich przypadkach deweloperzy mogą dziedziczyć <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy, a także Przesłoń <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> metody, zapewniając implementację niestandardową, aby określić, kiedy punkt połączenia jest gotowy do obsługi połączeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>