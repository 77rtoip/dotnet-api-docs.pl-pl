<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb9fefe53ca0dc6efecfbfa06ad64f25a529c339" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30688772" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje obiekt punktu połączenia, który umożliwia formantu serwer działający jako odbiorców do utworzenia połączenia z dostawcą.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W związku z każdej części sieci Web między dwoma kontrolki serwera, każda kontrolka musi mieć (między innymi wymagania) skojarzona z połączeniem obiektu punktu, który umożliwia nawiązywania połączenia z innymi formantu i zapewnij albo wykorzystują dane, w zależności od tego, czy formant jest wyznaczony jako dostawcy lub odbiorcy dla połączenia. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiekt ogólnie zawiera szczegóły dotyczące sposobu formantu mogą łączyć się inny formant i typu danych, można go udostępniać. W przypadku formantu działający jako użytkownik w przypadku połączenia punktu połączenia musi być <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu. Aby uzyskać więcej informacji na składniki Web Part połączenia i punkty połączenia, przeczytaj tematy wymienione w poniższej sekcji Zobacz też.  
  
 Aby utworzyć <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu, wymagane jest wykonanie kilku kroków:  
  
1.  Włącz formantu konsumentów do odwołania wystąpienia interfejsu. A <xref:System.Web.UI.WebControls.WebParts.WebPart> lub inny formant serwera (dowolnego typu formantu serwera, który zostanie dodany do <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> strefy można użyć) musi mieć możliwość pracy z danymi z wystąpienia określonego interfejsu. Formant nie muszą implementować interfejs; tylko dostawca musi implementować go. Konsument albo może współpracować z typu interfejs obsługiwane przez dostawcę lub, jeśli nie, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt może służyć do przekształcania danych z typu interfejsu dostawcy do typu zrozumiał przez klienta. Typowy sposób włączania konsumenta jest aby zadeklarować pole prywatne zawiera odwołanie do typu żądanego interfejsu.  
  
2.  Określ metodę wywołania zwrotnego. Metody konsumenta musi zostać określony jako metoda wywołania zwrotnego do nawiązania połączenia z dostawcą. Ta metoda pobiera wystąpienie interfejsu implementuje dostawcy i przypisuje go do (na przykład) pole prywatne utworzony w pierwszym kroku. Podejście części sieci Web do identyfikacji metody wywołania zwrotnego w konsumenta jest dodanie `ConnectionConsumer` atrybutu metadanych (zdefiniowane przez <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> klasy) do metody, która otrzymuje wystąpienie interfejsu. Po dodaniu atrybutu tylko wymaganego parametru jest wyświetlana nazwa do użycia na potrzeby punkt połączenia klienta. Parametry opcjonalne można również dodać, takich jak identyfikator.  
  
3.  Proces i wyjścia danych z wystąpienia interfejsu. Wykonaj wszystkie wewnętrzne przetwarzanie w danych w razie potrzeby, a następnie zwykle formantu użytkownika spowoduje, że dane na stronie. Typowy sposób wykonać to zadanie jest zastąpienie formantu <xref:System.Web.UI.Control.OnPreRender%2A> metody.  
  
    > [!NOTE]
    >  Podczas synchronicznego żądania, klient powinien zażądać danych bezpośrednio od dostawcy, podczas lub bezpośrednio po <xref:System.Web.UI.Control.PreRender> zdarzeń. Podczas żądania asynchronicznego Jeśli metoda wywołania zwrotnego dostawcy nie jest wywoływana w dowolnym momencie podczas renderowania, deweloper można założyć, że żadne dane nie został wysyłane do użytkownika.  
  
 Po formantu ma został przystosowany do działania klientów, formantu może uczestniczyć w połączeniach (przy założeniu, że formant dostawcy również wyposażone i dostępna). Aby utworzyć połączenie statycznych, deklaratywne w znaczniku strony sieci Web, deweloperzy mogą używać `<asp:webpartconnection>` elementu. Jeśli `ConnectionConsumer` atrybutu w kodzie źródłowym konsumenta, który identyfikuje metodę wywołania zwrotnego Określa identyfikator punktu połączenia, a następnie ta wartość musi być przypisany do `ConsumerConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu na stronie. Dlatego, że deweloper może określić identyfikator punkt połączenia klienta jest, jeśli istnieje wiele punktów połączenia zdefiniowane w formancie użytkownika. Jeśli nie określono Identyfikatora dla punkt połączenia klienta w formancie konsumenta, nie ma wartość do przypisania do `ConsumerConnectionPointID` atrybutu na stronie albo, ponieważ połączenie zostanie utworzony przy użyciu wartości domyślnej uzyskane z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> pole.  
  
 Można utworzyć połączenia w kodzie, należy utworzyć nową deweloperzy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> — metoda i przekazanie do niego identyfikator formantu konsumenta, wraz z Identyfikatora lub zdefiniowane indeks <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu w formancie użytkownika. Zwrócona <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt wraz z odwołaniem do sterowania konsumenta odwołanie do formantu dostawcy, a odpowiadające mu <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektów, wyświetlane są wszystkie przekazany do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metody, aby utworzyć nową <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 Mimo że deweloperzy mogą używać punktów połączenia klienta podczas ustanawiania połączenia deklaratywnie lub programowo, również interakcji użytkowników z punktów połączenia klienta do nawiązywania połączeń za pośrednictwem interfejsu użytkownika (UI). Jeśli deweloperzy zadeklarować <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolki na stronie sieci Web zapewnia czasu wykonywania interfejsu użytkownika dla użytkowników w celu utworzenia połączenia. Jeśli użytkownik wybierze kontroli dostawcy jako punktu wyjścia do nawiązywania połączenia, klikając jej połączyć zlecenie (one również wybrać konsumenta; nie ma żadnej różnicy w wynikowej połączenia), w Interfejsie użytkownika zostanie wyświetlona formantu listy rozwijanej o Wyświetlanie nazw dostępnych odbiorców połączenia punktu (lub punktów, jeśli istnieje wiele migawek) czy dostawca może wysyłać dane. Użytkownicy muszą wybrać punkt połączenia klienta, aby nawiązać połączenie.  
  
 A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu kojarzy bezpośrednio za pomocą formantu określonego użytkownika i przechowuje szczegółowe informacje o połączeniu we właściwościach jego pochodząca od klasy podstawowej <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy. Na przykład w dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> właściwości, typ interfejsu używa śledzi punkt połączenia klienta. Jeśli dostawcy i klienta w połączeniu obu rozpoznaje typ interfejsu, formanty są zgodne i nadaje się do tworzenia bezpośrednie połączenie. Jeśli dostawcy i klienta nie może działać z tego samego typu interfejsu, są niezgodne i musi być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu tłumaczenie punkt połączenia dostawcy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> właściwość do typu, który użytkownik może współpracować z. Inną ważną właściwość dziedziczona jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwość, która zapewnia przyjazną nazwę wyświetlaną w Interfejsie użytkownika dla użytkowników wybrać połączenia klienta punktu podczas tworzenia połączenia. Nazwa wyświetlana jest wymaganego parametru, gdy deweloperzy dodają `ConnectionConsumer` atrybut do metody wywołania zwrotnego w formancie użytkownika. Dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> właściwość przydaje się również, jak wspomniano powyżej, ponieważ zawiera unikatowy identyfikator dla punkt połączenia klienta w przypadku, gdy klient ma wiele punktów połączenia. Klient może mieć wielu <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektów zdefiniowanych w nim, a w tym przypadku, gdy deweloperzy dodają `ConnectionConsumer` atrybut do metody, należy określić wartość Identyfikatora odróżnienie każdego punktu połączenia. Jest jednym innych istotnych Dziedziczona właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> właściwość, która wskazuje, czy punkt połączenia klienta mogą jednocześnie połączyć się z wielu dostawców. Wartość tej właściwości jest `false` domyślnie dla konsumentów punkty połączenia (natomiast domyślnie `true` punktów połączenia dostawcy).  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasa dodaje kilka metod unikatowy członkom dziedziczy z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> — Metoda wywołuje metodę wywołania zwrotnego klienta własnych zdefiniowane można pobrać wystąpienia interfejsu od dostawcy. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Metoda zwraca wartość logiczną wskazującą, czy punkt połączenia jest w stanie nawiązywać połączenia na podstawie bieżącego stanu formantu skojarzony konsumenta.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje proste sposoby programowo lub za pośrednictwem interfejsu użytkownika, w każdym przypadku tworzeniu używanie punkt połączenia klienta, utworzyć połączenie deklaratywnie.  
  
 W przykładzie przedstawiono czterech części:  
  
-   Formant użytkownika, który umożliwia zmianę części sieci Web trybu wyświetlania na stronie.  
  
-   Źródła kodu interfejsu i dwa <xref:System.Web.UI.WebControls.WebParts.WebPart> steruje działania jako dostawcy i klienta dla połączenia.  
  
-   Strony sieci Web do hosta wszystkich kontrolek i uruchamiania przykładów kodu.  
  
-   Wyjaśnienie sposobu uruchamiania przykładową stronę.  
  
 Pierwsza część w tym przykładzie kodu jest kontrola użytkownika, który umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz poniższy kod źródłowy plik .ascx nadanie mu nazwy pliku, który jest przypisany do `Src` atrybutu `Register` dyrektywy dla tego formantu użytkownika, który jest w górnej części strony hostingu sieci Web. Aby uzyskać szczegółowe informacje dotyczące wyświetlania tryby i opis kodu źródłowego w tym formancie, zobacz [wskazówki: Zmiana trybów wyświetlania na stronie sieci Web części](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Druga część przykładowy kod jest kodu źródłowego dla interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> klasy o nazwie `ZipCodeWebPart` który implementuje interfejs i działa jako kontrolka dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> nosi nazwę klasy `WeatherWebPart`, i pełni rolę użytkownika dla połączenia. Ta klasa ma metodę o nazwie `GetZipCode` który pobiera wystąpienie elementu `IZipCode` interfejsu z formantu dostawcy. Należy pamiętać, że ta metoda jest oznaczona jako metoda punkt połączenia klienta z `ConnectionConsumer` atrybutu w metadanych. Jest to mechanizm identyfikowania metodę punktu połączenia w formancie użytkownika.  
  
 Na przykład kodu do uruchomienia należy skompilować ten kod źródłowy. Można go skompilować jawnie i umieścić wynikowego zestawu w folder Bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można ustawić kodu źródłowego w folderze App_Code witryny, gdzie ona zostanie dynamicznie skompilowany w czasie wykonywania. W tym przykładzie kodu używane kompilacji dynamicznej. Aby uzyskać wskazówki, który demonstruje sposób kompilowania, zobacz [wskazówki: tworzenie i używanie niestandardowej kontrolki serwera sieci Web](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzeci część przykładowy kod jest strony sieci Web. U góry są `Register` dyrektywy zarejestrowanie formantów niestandardowych, które tworzą połączenia i kontrolki użytkownika, który umożliwia użytkownikom zmianę tryby wyświetlania na stronie. Samo połączenie jest tworzony deklaratywnie poziomu `<staticconnections>` elementu na stronie. Oznacza to jeden ze sposobów tworzenia połączenia — Uwaga `ConsumerConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu. Można również utworzyć połączenie programowe; kod dla czynności, które znajduje się w `Button1_Click` metody. W takim przypadku <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt jest tworzony i następnie przekazywane do metody, która tworzy rzeczywistego połączenia. Określanie, czy połączenie jest tworzone deklaratywnie lub programowo, zawsze należy określać punkty połączenia dla dostawcy i klienta. `Button2_Click` Uzyskuje dostęp do metody <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> obiektów na klienta i dostawcy i zapisuje niektóre z ich wartości właściwości etykiety na stronie.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce, kliknij przycisk **szczegóły punktu połączenia** przycisku. Zostanie wyświetlone informacje o dostawcy i klienta punkty połączeń ustanowionych w deklaratywne połączenia. Następnie użyj **tryb wyświetlania** kontrolka listy rozwijanej, aby przełączyć strony w trybie łączenia. W menu zleceń **dostawcy kodu POCZTOWEGO** <xref:System.Web.UI.WebControls.WebParts.WebPart> formantu (reprezentowane za pomocą strzałki w dół na pasku tytułu), kliknij przycisk Połącz zlecenia. Połączenie, zostanie wyświetlony interfejs użytkownika, są tworzone automatycznie przez `<asp:connectionszone>` kontroli zadeklarowane na stronie. Jest to inny sposób tworzenia połączenia (za pośrednictwem interfejsu użytkownika), oraz metody deklaratywne i programowe opisane wcześniej. Kliknij przycisk **rozłączenia** przycisk, aby zakończyć istniejące połączenie statycznych. Kliknij przycisk **Utwórz połączenie z klientem** łącza. Interfejs użytkownika wyświetla teraz kontrolka listy rozwijanej, która zawiera nazwę wyświetlaną punkt połączenia klienta. Wybierz punkt połączenia z listy rozwijanej, a następnie kliknij przycisk **Connect** Aby nawiązać połączenie. Następnie kliknij przycisk **rozłączenia** ponownie. Kliknij przycisk **połączenia dynamicznego** przycisk, aby utworzyć połączenie programowo. Użyj **tryb wyświetlania** formantu, aby przywrócić do trybu przeglądania strony. Kliknij przycisk **szczegóły punktu połączenia** przycisk ponownie, aby wskazać szczegółowych informacji o obiektu punktu połączenia klienta raz więcej.  
  
 Przykład wykazała ustanawiania połączenia i przy użyciu punkt połączenia klienta na trzy sposoby: statyczne połączenie zadeklarowany w znaczniku strony sieci Web; Połączenie utworzone w kodzie, który używany <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt; i połączenie utworzone przez użytkownika za pośrednictwem połączenia interfejsu użytkownika.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metoda w formancie użytkownika, który zwraca wystąpienie interfejsu dla konsumentów, aby nawiązać połączenie.</param>
        <param name="interfaceType">
          <see cref="T:System.Type" /> Interfejsu, który użytkownik otrzyma od dostawcy.</param>
        <param name="controlType">
          <see cref="T:System.Type" /> Formantu konsumenta, z którym skojarzony jest punkt połączenia klienta.</param>
        <param name="displayName">Przyjazną nazwę wyświetlaną dla wyświetlany w interfejsie użytkownika (UI) połączenia punkt połączenia klienta.</param>
        <param name="id">Unikatowy identyfikator punkt połączenia klienta.</param>
        <param name="allowsMultipleConnections">Wartość logiczna wskazująca, czy punkt połączenia klienta mogą mieć wiele równoczesnych połączeń z dostawcami.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> Konstruktor <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy po prostu wywołuje konstruktora podstawowego, przekazywanie do niego różnych parametrów i inicjowania klasy podstawowej.  
  
 Konstruktor klasy podstawowej sprawdza liczbę parametrów dla punktu połączenia i może zgłosić kilkoma wyjątkami. Listę możliwych wyjątków zobacz sekcję wyjątków.  
  
 Możesz wywołać <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> Konstruktor do tworzenia własnego wystąpienia <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy. Jednak w przypadku należy po prostu ustanawiania połączenia i nie rozszerzania klasy, należy wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metoda zwraca obiekt punktu połączenia z dostawcą.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak pochodzi od <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy w celu utworzenia punktu połączenia dostawcy niestandardowego.  
  
 Przykładowy kod ma trzy części:  
  
-   Plik źródłowy, który zawiera dostawcę <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolować konsumenta <xref:System.Web.UI.WebControls.WebParts.WebPart> kontroli i niestandardowej <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu.  
  
-   Strona sieci Web obsługuje formantów w statycznej połączenia.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowy kod.  
  
 Pierwsza część przykładowy kod jest źródłem informacji o dostawcy i klienta <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek i niestandardowej <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasę o nazwie `TableConsumerConnectionPoint`. Należy pamiętać, że konstruktora `TableConsumerConnectionPoint` klasy wywołania konstruktora podstawowego, przekazanie jej wymagane parametry opisane w sekcji parametrów. Należy również zauważyć, że w `TableConsumer` klasy `SetConnectionInterface` metody jest określony jako metoda wywołania zwrotnego w przypadku połączeń i `ConnectionConsumer` niestandardowego deklaruje atrybutu `TableConsumerConnectionPoint` jako parametr. Oznacza to, jak utworzyć punkt połączenia klienta niestandardowych i skojarzyć go z formantem konsumenta. W tym przykładzie założono, że kod źródłowy jest dynamicznie skompilowanych, należy umieścić plik kodu źródłowego w podfolderze App_Code aplikacji sieci Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Druga część przykładowy kod jest stronę sieci Web, która obsługuje niestandardowe formanty w statycznej połączeń części sieci Web. W górnej części strony jest `Register` dyrektywy deklaruje prefiks i przestrzeń nazw dla kontrolek niestandardowych. Połączenie jest zadeklarowany za pomocą `<asp:webpartconnection>` kontrolki elementu i dostawcy i klienta są zadeklarowane w `<asp:webpartzone>` elementu.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Ładowanie strony w przeglądarce. Połączenie między formantami już istnieje, a konsumenta wyświetla danych od dostawcy, ponieważ połączenie został zadeklarowany jako statyczny połączenia na stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="interfaceType" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="controlType" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="displayName" /> jest <see langword="null" /> lub ciąg pusty ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> nie jest taki sam typ jak kontrolka użytkownika (lub nieprawidłową klasę pochodzić od niego).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Formant użytkownika skojarzonego z punktem połączenia klienta.</param>
        <param name="data">Zwrócił wystąpienie interfejsu za pomocą formantu dostawcy.</param>
        <summary>Wywołuje metodę wywołania zwrotnego w formancie konsumenta i pobiera wystąpienie interfejsu za pomocą formantu dostawcy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda otrzymuje wystąpienie interfejsu od dostawcy, który zawiera dane dla kontrolki użytkownika.  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Metoda jest wywoływana przez <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektów po uaktywnieniu połączeń. Jest to krytycznym kroku, będącej częścią inicjowania połączenia i włączenie dwóch formantów udostępniania danych.  
  
 Formant użytkownika w przypadku połączenia musi mieć możliwość pracy tego samego typu interfejsu, ponieważ dostawca. Jeśli nie, kontrolki są niezgodne i <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiektu musi być używany do nawiązania połączenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Formant użytkownika skojarzonego z <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> z interfejsami dodatkowej uczestniczących w połączeniu.</param>
        <summary>Określa, czy punkt połączenia klienta jest obecnie możliwe ustanawiania połączenia.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt połączenia można obecnie nawiązać połączenie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Metody zaimplementowanego zawsze zwraca `true` we wszystkich przypadkach dla <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy. Celem tej metody jest ona sprawdzić stan `control` i `secondaryInterfaces` w niektórych punktach krytycznych, aby określić, czy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt jest obecnie w stanie utworzyć połączenie.  
  
 Może istnieć scenariusze gdzie `control` jest w stanie, który uniemożliwia do utworzenia połączenia, lub gdy `secondaryInterfaces` muszą istnieć przed połączenie mogą być tworzone. W takich przypadkach, deweloperzy mogą dziedziczyć <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy, a następnie zastąpić <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> metody, zapewniając implementacja niestandardowa, aby określić, gdy punkt połączenia jest gotowe do obsługi połączeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>