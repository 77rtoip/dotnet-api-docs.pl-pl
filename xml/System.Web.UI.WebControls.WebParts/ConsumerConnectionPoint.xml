<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="194e2a1c164244ca14c63e1d5a3c3366754fdd7e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69395668" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje obiekt punktu połączenia, który umożliwia kontrolce serwera działającej jako konsument do utworzenia połączenia z dostawcą.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W każdym składniki Web Part połączenia między dwoma kontrolkami serwera każda kontrolka musi mieć (między innymi) skojarzony obiekt punktu połączenia, który umożliwia działowi IT łączenie się z drugą kontrolką i dostarczanie lub używanie danych, w zależności od tego, czy formant jest wyznaczeni jako dostawca lub odbiorca połączenia. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Obiekt ogólnie zawiera szczegółowe informacje dotyczące sposobu łączenia kontrolki z inną kontrolką i typu danych, które mogą być udostępniane. W przypadku kontrolki działającej jako odbiorca połączenia punkt połączenia musi być <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektem. Aby uzyskać szczegółowe informacje o składniki Web Part połączeniach i punktach połączenia, zapoznaj się z tematami wymienionymi w sekcji Zobacz też poniżej.  
  
 Aby utworzyć <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt, wymagane jest wykonanie kilku czynności:  
  
1.  Umożliwienie formantowi odbiorcy odwoływania się do wystąpienia interfejsu. Lub inny formant serwera (można użyć dowolnego typu kontrolki serwera, który zostanie dodany <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> do strefy) musi być w stanie wykorzystywać dane z określonego wystąpienia interfejsu. <xref:System.Web.UI.WebControls.WebParts.WebPart> Kontrolka nie musi implementować interfejsu; tylko dostawca musi go zaimplementować. Konsument może współdziałać z dokładnym typem interfejsu obsługiwanym przez dostawcę lub, jeśli tak nie jest, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt może służyć do przekształcania danych z typu interfejsu dostawcy na typ zrozumiały dla konsumenta. Typowym sposobem na umożliwienie konsumentowi jest zadeklarowanie pola prywatnego w celu uwzględnienia odwołania do żądanego typu interfejsu.  
  
2.  Zidentyfikuj metodę wywołania zwrotnego. Metoda w odbiorcy musi być zidentyfikowana jako metoda wywołania zwrotnego w celu nawiązania połączenia z dostawcą. Ta metoda pobiera wystąpienie interfejsu, który implementuje dostawca, i przypisuje go do (na przykład) pola prywatnego utworzonego w pierwszym kroku. Składniki Web Part podejście do identyfikowania metody wywołania zwrotnego w odbiorcy polega na dodaniu `ConnectionConsumer` atrybutu metadanych (zdefiniowanego <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> przez klasę) do metody, która odbiera wystąpienie interfejsu. Po dodaniu atrybutu jedynym wymaganym parametrem jest nazwa wyświetlana, która ma być używana dla punktu połączenia odbiorcy. Można również dodać opcjonalne parametry, takie jak identyfikator.  
  
3.  Przetwarzaj i wyprowadzaj dane z wystąpienia interfejsu. W razie potrzeby wykonaj wszystkie wewnętrzne procesy przetwarzania danych, a następnie na stronie będą renderowane dane. Typowym sposobem wykonania tej operacji jest przesłonięcie <xref:System.Web.UI.Control.OnPreRender%2A> metody kontrolki.  
  
    > [!NOTE]
    >  W trakcie żądania synchronicznego odbiorca powinien żądać danych bezpośrednio od dostawcy w trakcie lub bezpośrednio po <xref:System.Web.UI.Control.PreRender> zdarzeniu. W trakcie żądania asynchronicznego, jeśli metoda wywołania zwrotnego dostawcy nie jest wywoływana w żadnym momencie podczas renderowania, deweloper może założyć, że żadne dane nie zostały wysłane do konsumenta.  
  
 Po dodaniu kontrolki do działania jako odbiorca kontrolka może uczestniczyć w połączeniach (przy założeniu, że kontrolka dostawcy jest również wyposażona i dostępna). Aby utworzyć statyczne, deklaratywne połączenie w adjustacji strony sieci Web, deweloperzy mogą używać `<asp:webpartconnection>` elementu. Jeśli atrybut w kodzie źródłowym konsumenta, który identyfikuje metodę wywołania zwrotnego określa identyfikator punktu połączenia, ta wartość musi być przypisana `ConsumerConnectionPointID` do atrybutu w `<asp:webpartconnection>` elemencie na stronie. `ConnectionConsumer` Przyczyną, że deweloper może określić identyfikator punktu połączenia klienta, jest w przypadku zdefiniowania w kontrolce konsumenta wielu punktów połączenia. Jeśli dla punktu połączenia klienta w kontroli klienta nie określono identyfikatora, wartość nie musi być przypisana do `ConsumerConnectionPointID` atrybutu na stronie, ponieważ połączenie zostanie utworzone przy użyciu wartości domyślnej uzyskanej z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> polami.  
  
 Aby utworzyć połączenie w kodzie, deweloperzy muszą utworzyć nowy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt przez <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> wywołanie metody i przekazanie do niej identyfikatora kontrolki odbiorcy wraz z identyfikatorem lub indeksem zdefiniowanego <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu w kontrolce odbiorcy. Zwrócony <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt, wraz z odwołaniem do kontrolki odbiorcy, odwołaniem do kontrolki dostawcy i odpowiednim <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> obiektem, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> są wszystkie przesyłane do metody w celu utworzenia nowego <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> obiektu.  
  
 Chociaż deweloperzy mogą korzystać z punktów połączenia z klientem w ramach ustanawiania połączeń w sposób deklaratywny lub programowo, użytkownicy mogą również korzystać z punktów połączenia z klientem w celu nawiązywania połączeń za pomocą interfejsu użytkownika. Jeśli deweloperzy deklarują <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> kontrolę na stronie sieci Web, udostępnia interfejs użytkownika czasu wykonywania, który umożliwia użytkownikom tworzenie połączeń. Jeśli użytkownik wybierze kontrolkę dostawca jako punkt początkowy do ustanowienia połączenia, klikając jego zlecenie połączenia (mogą także wybrać konsumenta), a w interfejsie użytkownika zostanie wyświetlona kontrolka listy rozwijanej z Wyświetla nazwy dostępnego punktu połączenia z klientem (lub punkty, jeśli istnieją różne), do których dostawca może wysyłać dane. Aby nawiązać połączenie, użytkownicy muszą wybrać punkt połączenia z klientem.  
  
 Obiekt kojarzy się bezpośrednio z konkretną kontrolką klienta i zapisuje szczegółowe informacje o połączeniu we właściwościach, które dziedziczy z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> klasy bazowej. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Na przykład we właściwości dziedziczonej <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> punkt połączenia klienta utrzymuje typ interfejsu, którego używa. Jeśli dostawca i odbiorca w połączeniu rozumieją typ interfejsu, formanty są zgodne i mogą tworzyć bezpośrednie połączenie. Jeśli dostawca i odbiorca nie mogą współdziałać z tym samym typem interfejsu, są niezgodne i <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> muszą użyć obiektu, aby przetłumaczyć <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Właściwość punktu połączenia dostawcy na typ, z którym odbiorca może współdziałać. Inną ważną właściwością dziedziczoną jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> właściwość, która zapewnia przyjazną nazwę wyświetlaną w interfejsie użytkownika dla użytkowników, którzy wybierają punkt połączenia z klientem podczas tworzenia połączeń. Nazwa wyświetlana jest parametrem wymaganym, gdy deweloperzy dodają `ConnectionConsumer` atrybut do metody wywołania zwrotnego w kontrolce odbiorcy. Właściwość dziedziczona <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> jest również przydatna, jak wskazano powyżej, ponieważ zapewnia unikatowy identyfikator punktu połączenia odbiorcy w przypadku, gdy konsument ma wiele punktów połączenia. Odbiorca może mieć zdefiniowane <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> wiele obiektów, a w tym przypadku, gdy deweloperzy `ConnectionConsumer` dodają atrybut do metody, powinny określić wartość identyfikatora, aby odróżnić każdy punkt połączenia. Jedną z istotnych właściwości dziedziczonych jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> właściwość, która wskazuje, czy punkt połączenia klienta może nawiązywać połączenie jednocześnie z wieloma dostawcami. Ta wartość właściwości jest `false` domyślnie dla punktów połączenia z klientem (w `true` przypadku których domyślnie są używane punkty połączenia dostawcy).  
  
 Klasa dodaje kilka unikatowych metod do elementów członkowskich, które dziedziczy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> z klasy. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Metoda wywołuje własną metodę wywołania zwrotnego konsumenta, aby pobrać wystąpienie interfejsu od dostawcy. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Metoda zwraca wartość logiczną wskazującą, czy punkt połączenia może nawiązywać połączenia na podstawie bieżącego stanu skojarzonej kontroli klienta.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje proste sposoby tworzenia połączenia deklaratywnie, programowo lub za pomocą interfejsu użytkownika w każdym przypadku przy użyciu punktu połączenia odbiorcy.  
  
 Przykład ma cztery części:  
  
-   Kontrolka użytkownika, która umożliwia zmianę trybu wyświetlania składniki Web Part na stronie.  
  
-   Kod źródłowy dla interfejsu i dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart> kontrolek działających jako dostawca i odbiorca połączenia.  
  
-   Strona sieci Web do hostowania wszystkich formantów i uruchamiania przykładowego kodu.  
  
-   Wyjaśnienie, jak uruchomić stronę przykładową.  
  
 Pierwszym elementem tego przykładu kodu jest kontrolka użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie sieci Web. Zapisz następujący kod źródłowy w pliku. ascx, nadając mu nazwę pliku, która jest przypisana do `Src` atrybutu `Register` dyrektywy dla tej kontrolki użytkownika, która znajduje się w górnej części strony sieci Web hostingu. Aby uzyskać szczegółowe informacje na temat trybów wyświetlania i Opis kodu źródłowego w tej kontrolce, [zobacz Przewodnik: Zmienianie trybów wyświetlania na stronie](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)składniki Web Part.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Drugą częścią przykładu kodu jest kod źródłowy interfejsu i kontrolek. Plik źródłowy zawiera prosty interfejs o nazwie `IZipCode`. Istnieje również <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa o nazwie `ZipCodeWebPart` implementująca interfejs i działająca jako formant dostawcy. Druga <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa ma nazwę `WeatherWebPart`i działa jako odbiorca połączenia. Ta klasa ma metodę o nazwie `GetZipCode` , która pobiera wystąpienie `IZipCode` interfejsu z kontrolki dostawcy. Należy zauważyć, że ta metoda jest oznaczona jako metoda punktu połączenia konsumenta z `ConnectionConsumer` atrybutem w metadanych. Jest to mechanizm identyfikacji metody punktu połączenia w kontrolce odbiorcy.  
  
 Aby przykład kodu był uruchamiany, należy skompilować ten kod źródłowy. Można ją skompilować jawnie i umieścić zestaw w folderze bin witryny sieci Web lub w globalnej pamięci podręcznej zestawów. Alternatywnie można umieścić kod źródłowy w folderze App_Code witryny, w którym będzie on dynamicznie kompilowany w czasie wykonywania. Ten przykład kodu używa kompilacji dynamicznej. Aby zapoznać się z przewodnikiem, który ilustruje sposób [kompilowania, zobacz Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Trzecią częścią przykładu kodu jest strona sieci Web. W górnej części znajdują się `Register` dyrektywy umożliwiające zarejestrowanie kontrolek niestandardowych, które tworzą połączenie, oraz kontrolki użytkownika, która umożliwia użytkownikom zmianę trybów wyświetlania na stronie. Samo połączenie jest tworzone w sposób deklaratywny w `<staticconnections>` obrębie elementu na stronie. Ilustruje to jeden ze sposobów tworzenia połączenia — należy zwrócić uwagę `ConsumerConnectionPointID` na atrybut `<asp:webpartconnection>` w elemencie. Możesz również programowo utworzyć połączenie. kod do wykonania, który znajduje się w `Button1_Click` metodzie. W takim przypadku <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiekt zostanie utworzony, a następnie przeszedł do metody, która tworzy rzeczywiste połączenie. Niezależnie od tego, czy połączenie jest tworzone w sposób deklaratywny, czy programowo, punkty połączenia muszą być zawsze określone dla dostawcy i konsumenta. Metoda uzyskuje dostęp do obiektów zarówno dla dostawcy, jak i dla konsumenta, a następnie zapisuje niektóre wartości właściwości do etykiety na stronie. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Po załadowaniu strony w przeglądarce kliknij przycisk **Szczegóły punktu połączenia** . Pojawią się informacje o punktach połączenia dostawcy i klienta ustanowionych w połączeniu deklaratywnym. Następnie użyj formantu listy rozwijanej **tryb wyświetlania** , aby przełączyć stronę do trybu połączenia. W menu czasowniks formantu<xref:System.Web.UI.WebControls.WebParts.WebPart> **dostawcy kodu pocztowego** (reprezentowanego przez strzałkę w dół na pasku tytułu) kliknij zlecenie Connect. Zostanie wyświetlony interfejs użytkownika połączenia, który `<asp:connectionszone>` został utworzony automatycznie przez kontrolkę zadeklarowaną na stronie. Jest to inny sposób tworzenia połączenia (za pomocą interfejsu użytkownika), a także metod deklaratywnych i programistycznych omówionych wcześniej. Kliknij przycisk **Rozłącz** , aby przerwać istniejące połączenie statyczne. Kliknij link **Utwórz połączenie z klientem** . Interfejs użytkownika wyświetla teraz kontrolkę listy rozwijanej, która wyświetla nazwę wyświetlaną punktu połączenia odbiorcy. Wybierz punkt połączenia z listy rozwijanej, a następnie kliknij przycisk **Połącz** , aby zakończyć połączenie. Następnie kliknij ponownie **** przycisk Rozłącz. Kliknij przycisk **połączenie dynamiczne** , aby programowo utworzyć połączenie. Użyj kontrolki **tryb wyświetlania** , aby przywrócić stronę do trybu przeglądania. Kliknij ponownie przycisk **Szczegóły punktu połączenia** , aby wskazać szczegóły dotyczące obiektu punktu połączenia z klientem.  
  
 W przykładzie pokazano, jak nawiązać połączenie i korzystać z punktu połączenia klienta na trzy sposoby: połączenie statyczne zadeklarowane w znaczniku strony sieci Web; połączenie utworzone w kodzie, który użył <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> obiektu, i połączenie utworzone przez użytkownika za pomocą interfejsu użytkownika połączenia.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Omówienie połączeń składniki Web Part</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metoda w kontroli klienta zwracająca wystąpienie interfejsu do odbiorców w celu nawiązania połączenia.</param>
        <param name="interfaceType"><see cref="T:System.Type" /> Interfejs, który odbiorca odbiera od dostawcy.</param>
        <param name="controlType"><see cref="T:System.Type" /> Kontrolka odbiorcy, z którą jest skojarzony punkt połączenia z klientem.</param>
        <param name="displayName">Przyjazna nazwa wyświetlana punktu połączenia klienta, który pojawia się dla użytkowników w interfejsie użytkownika połączenia.</param>
        <param name="id">Unikatowy identyfikator punktu połączenia z klientem.</param>
        <param name="allowsMultipleConnections">Wartość logiczna wskazująca, czy punkt połączenia klienta może mieć wiele jednoczesnych połączeń z dostawcami.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> Konstruktor<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy po prostu wywołuje konstruktora podstawowego, przekazując do niego różne parametry i inicjując klasę bazową.  
  
 Konstruktor klasy bazowej sprawdza liczbę parametrów punktu połączenia i może zgłosić kilka wyjątków. Listę możliwych wyjątków można znaleźć w sekcji wyjątki.  
  
 Można wywołać <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> konstruktora, aby utworzyć własne wystąpienie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy. Jednak w przypadkach, gdy po prostu nawiążesz połączenie i nie rozszerzasz klasy, należy wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodę, aby zwrócić obiekt punktu połączenia od dostawcy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób wyprowadzania z <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy w celu utworzenia punktu połączenia dostawcy niestandardowego.  
  
 Przykład kodu ma trzy części:  
  
-   Plik źródłowy, który zawiera kontrolkę <xref:System.Web.UI.WebControls.WebParts.WebPart> dostawcy, kontrolę klienta <xref:System.Web.UI.WebControls.WebParts.WebPart> i obiekt niestandardowy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> .  
  
-   Strona sieci Web, która hostuje kontrolki w połączeniu statycznym.  
  
-   Wyjaśnienie sposobu uruchamiania przykładowego kodu.  
  
 Pierwszą częścią przykładu kodu jest źródło dla kontrolek dostawca i odbiorca <xref:System.Web.UI.WebControls.WebParts.WebPart> oraz Klasa niestandardowa <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> o nazwie `TableConsumerConnectionPoint`. Należy zauważyć, że Konstruktor `TableConsumerConnectionPoint` klasy wywołuje konstruktora podstawowego, przekazując go wymagane parametry, jak wskazano w sekcji Parameters. Należy również zauważyć, że `TableConsumer` w klasie `SetConnectionInterface` Metoda jest określona jako metoda wywołania zwrotnego `ConnectionConsumer` dla połączeń, a atrybut deklaruje niestandardowy `TableConsumerConnectionPoint` jako parametr. Przedstawiono w nim sposób tworzenia niestandardowego punktu połączenia klienta, a następnie kojarzenia go z kontrolką klienta. W tym przykładzie przyjęto założenie, że kod źródłowy jest kompilowany dynamicznie, dlatego należy umieścić plik kodu źródłowego w podfolderze App_Code aplikacji sieci Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Drugą częścią przykładu kodu jest strona sieci Web, która hostuje niestandardowe kontrolki w statycznym połączeniu części sieci Web. W górnej części strony jest `Register` dyrektywa, aby zadeklarować prefiks i przestrzeń nazw dla formantów niestandardowych. Połączenie jest zadeklarowane za pomocą `<asp:webpartconnection>` elementu, a formanty dostawca i odbiorca są zadeklarowane `<asp:webpartzone>` w obrębie elementu.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Załaduj stronę w przeglądarce. Połączenie między kontrolkami już istnieje, a odbiorca wyświetla dane od dostawcy, ponieważ połączenie zostało zadeklarowane jako połączenie statyczne na stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="interfaceType" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="controlType" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="displayName" />jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" />nie jest tym samym typem co kontrolka odbiorcy (lub prawidłowa Klasa pochodna).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Kontrolki składniki Web Part ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Kontrola klienta skojarzona z punktem połączenia z klientem.</param>
        <param name="data">Wystąpienie interfejsu zwrócone przez kontrolkę dostawcy.</param>
        <summary>Wywołuje metodę wywołania zwrotnego w kontrolce odbiorcy i Pobiera wystąpienie interfejsu z kontrolki dostawcy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda odbiera wystąpienie interfejsu od dostawcy, który zawiera dane dla kontrolki konsumenta.  
  
 Metoda jest wywoływana przez obiekty <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> , gdy połączenie jest uaktywniane. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Jest to krytyczny krok, który jest częścią inicjowania połączenia i włączania dwóch formantów do udostępniania danych.  
  
 Kontrolka odbiorcy w połączeniu musi mieć możliwość pracy z tym samym typem interfejsu co dostawca. Jeśli tak nie jest, formanty są niezgodne, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> obiekt musi zostać użyty do nawiązania połączenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Kontrolka odbiorcy skojarzona z <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces"><see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> Wszystkich dodatkowych interfejsów, które uczestniczą w połączeniu.</param>
        <summary>Określa, czy punkt połączenia klienta jest obecnie w stanie nawiązać połączenie.</summary>
        <returns><see langword="true" />Jeśli punkt połączenia może obecnie nawiązać połączenie; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zaimplementowana zawsze zwraca `true` wszystkie przypadki dla <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Celem tej metody jest sprawdzenie stanu `control` i `secondaryInterfaces` w określonych <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> punktach krytycznych w celu ustalenia, czy obiekt jest obecnie w stanie utworzyć połączenie.  
  
 Mogą istnieć sytuacje, `control` w których w stanie nie można utworzyć połączenia lub gdzie `secondaryInterfaces` musi istnieć przed nawiązaniem połączenia. W takich przypadkach deweloperzy mogą dziedziczyć z <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> klasy i <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> przesłonić metodę, zapewniając implementację niestandardową, aby określić, kiedy punkt połączenia jest gotowy do obsługi połączeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
