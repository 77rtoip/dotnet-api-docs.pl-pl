<Type Name="Behavior" FullName="System.Windows.Forms.Design.Behavior.Behavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="506fe7fb1a03e80996ae29e95e579fa2f1062111" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30700616" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Behavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Behavior extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.Behavior.Behavior" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Behavior" />
  <TypeSignature Language="C++ CLI" Value="public ref class Behavior abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> obiektów, które są zarządzane przez <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa może zostać rozszerzony do opracowywania dowolnego typu zachowania interfejsu użytkownika, w tym wybór, przeciągania, a następnie zmień rozmiar zachowania.  
  
 Aby uzyskać więcej informacji, zobacz [Omówienie usługi zachowanie](http://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f).  
  
> [!NOTE]
>  Twoje <xref:System.Windows.Forms.Design.Behavior.Behavior> typu musi być skojarzone z <xref:System.Windows.Forms.Design.Behavior.Glyph> typu. Niezależne od symbolu zachowania nie są obsługiwane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć własne klasy na podstawie <xref:System.Windows.Forms.Design.Behavior.Behavior> klasy, która odpowiada użytkownik klika polecenie. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Windows.Forms.Design.Behavior.BehaviorService> klasy.  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Behavior ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Behavior();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zainicjować nowe wystąpienie klasy <xref:System.Windows.Forms.Design.Behavior.Behavior> klasy. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Windows.Forms.Design.Behavior.BehaviorService> klasy.  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Behavior (bool callParentBehavior, System.Windows.Forms.Design.Behavior.BehaviorService behaviorService);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool callParentBehavior, class System.Windows.Forms.Design.Behavior.BehaviorService behaviorService) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor(System.Boolean,System.Windows.Forms.Design.Behavior.BehaviorService)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Behavior(bool callParentBehavior, System::Windows::Forms::Design::Behavior::BehaviorService ^ behaviorService);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callParentBehavior" Type="System.Boolean" />
        <Parameter Name="behaviorService" Type="System.Windows.Forms.Design.Behavior.BehaviorService" />
      </Parameters>
      <Docs>
        <param name="callParentBehavior">
          <see langword="true" /> Jeśli działanie nadrzędne powinna być wywoływana, jeśli istnieje; w przeciwnym razie <see langword="false" />.</param>
        <param name="behaviorService">
          <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> Do użycia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> klasy z danym <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie nadrzędny jest zachowanie dalej na stosie zachowanie obsługiwanego przez <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Jeśli `callParentBehavior` parametr jest `true`, a następnie `behaviorService` parametr nie może być `null`.  
  
 `callParentBehavior` Wskazuje, czy podstawowym <xref:System.Windows.Forms.Design.Behavior.Behavior> klasy należy wywołać zachowanie nadrzędnej, a następnie pozwól <xref:System.Windows.Forms.Design.Behavior.BehaviorService> wybierz zachowanie poprawne nadrzędnej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callParentBehavior" /> jest <see langword="true" />, i <paramref name="behaviorService" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Behavior.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Cursor ^ Cursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kursor, który powinien być wyświetlany dla tego zachowania.</summary>
        <value>A <see cref="T:System.Windows.Forms.Cursor" /> reprezentujący kursora, która powinna być wyświetlana dla tego zachowania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableAllCommands">
      <MemberSignature Language="C#" Value="public virtual bool DisableAllCommands { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisableAllCommands" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisableAllCommands As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DisableAllCommands { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.ComponentModel.Design.MenuCommand" /> obiekty powinny być wyłączone.</summary>
        <value>
          <see langword="true" /> Jeśli wszystkie <see cref="T:System.ComponentModel.Design.MenuCommand" /> obiektów odbiera projektanta powinien mieć ustawioną stanów <c>Enabled = false</c> podczas to <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> jest aktywne, a w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `true` wartość <xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A> wskazuje właściwość, aby <xref:System.Windows.Forms.Design.Behavior.BehaviorService> który wszystkich <xref:System.ComponentModel.Design.MenuCommand> obiektów odbiera projektanta powinien mieć ich stan wyłączone, gdy to zachowanie jest aktywny.  
  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A> Właściwości działa w połączeniu z <xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A> metody, można dostosować, interakcja między symboli i zachowania. W poniższej tabeli przedstawiono wyniki wywołania <xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A> dla konkretnej <xref:System.ComponentModel.Design.MenuCommand>.  
  
||<xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A> jest `true`|<xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A> jest `false`|  
|-|-|-|  
|Przetestowane trafień symbolu zachowanie jest przypisany|Jeśli <xref:System.ComponentModel.Design.MenuCommand> z określonym `command ID` znajduje się w <xref:System.ComponentModel.Design.IMenuCommandService>, że <xref:System.ComponentModel.Design.MenuCommand> jest wyłączona, a zwrócona. W przeciwnym razie `null` jest zwracany.|<xref:System.ComponentModel.Design.MenuCommandService.FindCommand%2A> wywoływana jest zachowanie oraz, jeśli znaleziono zachowanie <xref:System.ComponentModel.Design.MenuCommand> jest zwracany. W przeciwnym razie wynik <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType> z określonym `command ID` jest zwracany.|  
|Nie przypisane zachowanie ma przetestowane trafień symbolu|Wynik <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType> z określonym `command ID` jest zwracany.|Wynik <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType> z określonym `command ID` jest zwracany.|  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Domyślna implementacja zawsze zwraca <see langword="false" />.</para>
        </block>
        <altmember cref="Overload:System.ComponentModel.Design.MenuCommandService.FindCommand" />
        <altmember cref="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandId" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> obiektu.</param>
        <summary>Przechwytuje polecenia.</summary>
        <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" />. Domyślnie <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" /> zwraca <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A> Metoda jest wywoływana z <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Zapewnia możliwość <xref:System.Windows.Forms.Design.Behavior.Behavior> do zwrócenia własne niestandardowe <xref:System.ComponentModel.Design.MenuCommand>, a tym samym przechwytywaniu tego komunikatu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="public virtual void OnDragDrop (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragDrop (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragDrop(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> obiekt do wywołania zachowanie przeciągania i upuszczania.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zezwala na niestandardowe zachowanie przeciągania i upuszczania.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Można zastąpić <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" /> metody, aby <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> można określić własne zasady przeciągania i upuszczania.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="public virtual void OnDragEnter (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragEnter(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragEnter (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragEnter(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> do wywołania przeciągnij wprowadź zachowanie.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zezwala niestandardowych przeciągnij wprowadź zachowanie.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Można zastąpić <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragEnter(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" /> metody, aby <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> można określić własne zasady drag-enter.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="public virtual void OnDragLeave (System.Windows.Forms.Design.Behavior.Glyph g, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragLeave(class System.Windows.Forms.Design.Behavior.Glyph g, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragLeave(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragLeave (g As Glyph, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragLeave(System::Windows::Forms::Design::Behavior::Glyph ^ g, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> do wywołania zachowanie pozostaw przeciągania.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Pozwala na zachowanie niestandardowych pozostaw przeciągania.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Można zastąpić <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragLeave(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" /> metody, aby <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> można określić własne zasady pozostaw przeciągania.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="public virtual void OnDragOver (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragOver (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragOver(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> do wywołania przez przeciąganie zachowanie.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zezwala na niestandardowe zachowanie over przeciągania.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Można zastąpić <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" /> metody, aby <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> można określić własne zasady over przeciągania.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="public virtual void OnGiveFeedback (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnGiveFeedback(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnGiveFeedback (g As Glyph, e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnGiveFeedback(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> do wywołania zachowanie przeciągania i upuszczania.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Pozwala na zachowanie niestandardowych feedback przeciągania i upuszczania.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Można zastąpić <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnGiveFeedback(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.GiveFeedbackEventArgs)" /> metody, aby <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> można określić własne zasady przeciągania i upuszczania.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnLoseCapture">
      <MemberSignature Language="C#" Value="public virtual void OnLoseCapture (System.Windows.Forms.Design.Behavior.Glyph g, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLoseCapture(class System.Windows.Forms.Design.Behavior.Glyph g, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnLoseCapture (g As Glyph, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnLoseCapture(System::Windows::Forms::Design::Behavior::Glyph ^ g, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> do wywołania zachowanie przeciągania i upuszczania.</param>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane przez moduł definiowania układu okna, gdy jego traci przechwytywanie myszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie mogą żądać przechwytywanie myszy za pośrednictwem usługi zachowanie wypychając się na stosie zachowanie z <xref:System.Windows.Forms.Design.Behavior.BehaviorService.PushCaptureBehavior%2A> metody. Jeśli jednak zostanie powiadomiony poprzez <xref:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture%2A> metodą podczas przechwytywania zostaną utracone. Ogólnie rzecz biorąc zachowanie usuwa się ze stosu w tej chwili. Przechwytywanie jest utracone, gdy wystąpi jedno z następujących czynności:  
  
-   Ktoś żądań przechwytywania.  
  
-   Inne zachowanie jest naciśnięty.  
  
-   To zachowanie jest usuwany.  
  
 W każdym z tych przypadków <xref:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture%2A> zostanie wywołana na zachowanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseDoubleClick (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseDoubleClick(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseDoubleClick (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseDoubleClick(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <param name="button">A <see cref="T:System.Windows.Forms.MouseButtons" /> wartość wskazującą, który przycisk został kliknięty.</param>
        <param name="mouseLoc">Lokalizacja, w którym wystąpił kliknij.</param>
        <summary>Wywoływane, gdy moduł definiowania układu okna wprowadza wiadomości kliknij dwukrotnie <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
        <returns>
          <see langword="true" /> Jeśli komunikat został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A> Metoda jest wywoływana po przekroczeniu wiadomości kliknij dwukrotnie `WndProc` okna modułu definiowania układu kodu z <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Najpierw przekazywania wiadomości w tym miejscu na początku najczęściej <xref:System.Windows.Forms.Design.Behavior.Behavior> w stos zachowań. Zwracanie `true` z tej metody oznacza, że komunikat został obsłużony przez <xref:System.Windows.Forms.Design.Behavior.Behavior> i nie powinno być kontynuowane do przetworzenia. W tym miejscu komunikat jest wysyłany do zachowania.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób obsługi wiadomości kliknij dwukrotnie. Listy pełnego kodu, zobacz [porady: rozszerzanie wygląd i zachowanie formantów w trybie projektowania](http://msdn.microsoft.com/library/68f85054-2253-47f5-a4f2-3f1ac8c9f27b).  
  
 [!code-csharp[System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs/CS/DesignerDemoControl.cs#10)]
 [!code-vb[System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs/VB/DesignerDemoControl.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseDown (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseDown(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDown(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseDown (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseDown(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <param name="button">A <see cref="T:System.Windows.Forms.MouseButtons" /> wartość wskazującą, który przycisk został kliknięty.</param>
        <param name="mouseLoc">Lokalizacja, w którym wystąpił kliknij.</param>
        <summary>Wywoływane, gdy moduł definiowania układu okna wprowadza wiadomości myszy w dół <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
        <returns>
          <see langword="true" /> Jeśli komunikat został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A> Metoda jest wywoływana po przekroczeniu żadnych komunikatów myszy w dół `WndProc` okna modułu definiowania układu kodu z <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Najpierw przekazywania wiadomości w tym miejscu na początku najczęściej <xref:System.Windows.Forms.Design.Behavior.Behavior> w stos zachowań. Zwracanie `true` z tej metody oznacza, że komunikat został obsłużony przez <xref:System.Windows.Forms.Design.Behavior.Behavior> i nie powinno być kontynuowane do przetworzenia. W tym miejscu komunikat jest wysyłany do zachowania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseEnter (System.Windows.Forms.Design.Behavior.Glyph g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseEnter(class System.Windows.Forms.Design.Behavior.Glyph g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseEnter(System.Windows.Forms.Design.Behavior.Glyph)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseEnter (g As Glyph) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseEnter(System::Windows::Forms::Design::Behavior::Glyph ^ g);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <summary>Wywołuje się, gdy wszystkie wiadomości mouse-enter wprowadza moduł definiowania układu okna <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
        <returns>
          <see langword="true" /> Jeśli komunikat został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A> Metoda jest wywoływana po przekroczeniu dowolny komunikat mouse-enter `WndProc` okna modułu definiowania układu kodu z <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. W tym miejscu komunikat jest wysyłany do zachowania.  
  
 Gdy wskaźnik myszy znajduje się w pozytywnie trafień przetestowane z innym <xref:System.Windows.Forms.Design.Behavior.Glyph> niż powyższych testów trafień, ta metoda jest wywoływana na <xref:System.Windows.Forms.Design.Behavior.Behavior> skojarzone z <xref:System.Windows.Forms.Design.Behavior.Glyph>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseHover (System.Windows.Forms.Design.Behavior.Glyph g, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseHover(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseHover(System.Windows.Forms.Design.Behavior.Glyph,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseHover (g As Glyph, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseHover(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Drawing::Point mouseLoc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <param name="mouseLoc">Lokalizacja, jaką wystąpił aktywowany.</param>
        <summary>Wywoływane, gdy moduł definiowania układu okna wprowadza wiadomości przesuwania myszy <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
        <returns>
          <see langword="true" /> Jeśli komunikat został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A> Metoda jest wywoływana po przekroczeniu wiadomości przesuwania myszy `WndProc` okna modułu definiowania układu kodu z <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Najpierw przekazywania wiadomości w tym miejscu na początku najczęściej <xref:System.Windows.Forms.Design.Behavior.Behavior> w stos zachowań. Zwracanie `true` z tej metody oznacza, że komunikat został obsłużony przez <xref:System.Windows.Forms.Design.Behavior.Behavior> i nie powinno być kontynuowane do przetworzenia. W tym miejscu komunikat jest wysyłany do zachowania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseLeave (System.Windows.Forms.Design.Behavior.Glyph g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseLeave(class System.Windows.Forms.Design.Behavior.Glyph g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseLeave(System.Windows.Forms.Design.Behavior.Glyph)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseLeave (g As Glyph) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseLeave(System::Windows::Forms::Design::Behavior::Glyph ^ g);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <summary>Wywołuje się, gdy wszystkie wiadomości pozostaw myszy wprowadza moduł definiowania układu okna <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
        <returns>
          <see langword="true" /> Jeśli komunikat został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A> Metoda jest wywoływana po przekroczeniu żadnych komunikatów myszy pozostaw `WndProc` okna modułu definiowania układu kodu z <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. W tym miejscu komunikat jest wysyłany do zachowania.  
  
 Gdy wskaźnik myszy opuści pozytywnie trafień przetestowane przez <xref:System.Windows.Forms.Design.Behavior.Glyph> z prawidłowym <xref:System.Windows.Forms.Design.Behavior.Behavior>, ta metoda jest wywoływana.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseMove (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseMove(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseMove(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseMove (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseMove(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <param name="button">A <see cref="T:System.Windows.Forms.MouseButtons" /> wartość wskazującą, który przycisk został kliknięty.</param>
        <param name="mouseLoc">Lokalizacja, w którym wystąpił przeniesienie.</param>
        <summary>Wywoływane, gdy moduł definiowania układu okna wprowadza wiadomości Przenieś wskaźnik myszy <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
        <returns>
          <see langword="true" /> Jeśli komunikat został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A> Metoda jest wywoływana po przekroczeniu wiadomości ruchu myszy `WndProc` okna modułu definiowania układu kodu z <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Najpierw przekazywania wiadomości w tym miejscu na początku najczęściej <xref:System.Windows.Forms.Design.Behavior.Behavior> w stos zachowań. Zwracanie `true` z tej metody oznacza, że komunikat został obsłużony przez <xref:System.Windows.Forms.Design.Behavior.Behavior> i nie powinno być kontynuowane do przetworzenia. W tym miejscu komunikat jest wysyłany do zachowania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseUp (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseUp(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseUp(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseUp (g As Glyph, button As MouseButtons) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseUp(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <param name="button">A <see cref="T:System.Windows.Forms.MouseButtons" /> wartość wskazującą, który przycisk został kliknięty.</param>
        <summary>Wywołuje się, gdy wszystkie wiadomości w górę myszy wprowadza moduł definiowania układu okna <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
        <returns>
          <see langword="true" /> Jeśli komunikat został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A> Metoda jest wywoływana po przekroczeniu wszystkie wiadomości w górę myszy `WndProc` okna modułu definiowania układu kodu z <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Najpierw przekazywania wiadomości w tym miejscu na początku najczęściej <xref:System.Windows.Forms.Design.Behavior.Behavior> w stos zachowań. Zwracanie `true` z tej metody oznacza, że komunikat został obsłużony przez <xref:System.Windows.Forms.Design.Behavior.Behavior> i nie powinno być kontynuowane do przetworzenia. W tym miejscu komunikat jest wysyłany do zachowania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="public virtual void OnQueryContinueDrag (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnQueryContinueDrag(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnQueryContinueDrag (g As Glyph, e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnQueryContinueDrag(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wysyła to zdarzenie przeciągania i upuszczania z okna modułu definiowania układu kodu do odpowiedniego <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> lub badane trafień <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Można zastąpić <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnQueryContinueDrag(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.QueryContinueDragEventArgs)" /> metody, aby <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> można określić własne zasady przeciągania i upuszczania.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
  </Members>
</Type>