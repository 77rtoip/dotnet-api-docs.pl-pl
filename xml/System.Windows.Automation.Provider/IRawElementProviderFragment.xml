<Type Name="IRawElementProviderFragment" FullName="System.Windows.Automation.Provider.IRawElementProviderFragment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36f8e926cdbdc7e66d61f8953d98893203a6e85d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69225428" /></Metadata><TypeSignature Language="C#" Value="public interface IRawElementProviderFragment : System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRawElementProviderFragment implements class System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IRawElementProviderFragment" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRawElementProviderFragment&#xA;Implements IRawElementProviderSimple" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRawElementProviderFragment : System::Windows::Automation::Provider::IRawElementProviderSimple" />
  <TypeSignature Language="F#" Value="type IRawElementProviderFragment = interface&#xA;    interface IRawElementProviderSimple" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Automation.Provider.IRawElementProviderSimple</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("f7063da8-8359-439c-9297-bbc5299a7d87")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Opisuje metody i właściwości elementów interfejsu użytkownika, które są częścią struktury więcej niż jeden poziom głębokiego, takiego jak pole listy lub element listy. Zaimplementowane przez dostawców automatyzacji interfejsu użytkownika.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Węzeł główny fragmentu musi obsługiwać <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot> interfejs, który dziedziczy z. <xref:System.Windows.Automation.Provider.IRawElementProviderFragment>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-providers-overview.md">Przegląd dostawców automatyzacji interfejsu użytkownika</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms771502(v=vs.90)">Przykład dostawcy fragmentu</related>
  </Docs>
  <Members>
    <Member MemberName="BoundingRectangle">
      <MemberSignature Language="C#" Value="public System.Windows.Rect BoundingRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect BoundingRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BoundingRectangle As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect BoundingRectangle { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.BoundingRectangle : System.Windows.Rect" Usage="System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prostokąt związany z tym elementem.</summary>
        <value>Prostokąt ograniczający, we współrzędnych ekranu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie jest wymagane przycinanie, jeśli element jest częściowo zasłaniany lub częściowo wyłączony. <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen%2A> Właściwość powinna być ustawiona, aby wskazać, czy prostokąt jest widoczny.  
  
 Nie wszystkie punkty w prostokącie obwiedni są koniecznie klikania.  
  
   
  
## Examples  
 W poniższym przykładowym kodzie stan wewnętrzny prostokąta granicy jest przechowywany w <xref:System.Drawing.Rectangle?displayProperty=nameWithType>, który jest konwertowany na a <xref:System.Windows.Rect?displayProperty=nameWithType> przed zwróceniem.  
  
 [!code-csharp[UIAFragmentProvider_snip#104](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#104)]
 [!code-vb[UIAFragmentProvider_snip#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#104)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="FragmentRoot">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FragmentRoot As IRawElementProviderFragmentRoot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Provider::IRawElementProviderFragmentRoot ^ FragmentRoot { System::Windows::Automation::Provider::IRawElementProviderFragmentRoot ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FragmentRoot : System.Windows.Automation.Provider.IRawElementProviderFragmentRoot" Usage="System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragmentRoot</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera węzeł główny fragmentu.</summary>
        <value>Węzeł główny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawca, który implementuje <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot> , powinien zwrócić sam siebie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację elementu w fragmencie, taki jak element listy w polu listy.  
  
 [!code-csharp[UIAFragmentProvider_snip#105](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#105)]
 [!code-vb[UIAFragmentProvider_snip#105](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#105)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="GetEmbeddedFragmentRoots">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetEmbeddedFragmentRoots" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEmbeddedFragmentRoots () As IRawElementProviderSimple()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::IRawElementProviderSimple ^&gt; ^ GetEmbeddedFragmentRoots();" />
      <MemberSignature Language="F#" Value="abstract member GetEmbeddedFragmentRoots : unit -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple[]" Usage="iRawElementProviderFragment.GetEmbeddedFragmentRoots " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera tablicę katalogów głównych fragmentów, które są osadzone [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] w drzewie elementów root w bieżącym elemencie.</summary>
        <returns>Tablica fragmentów głównych lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca tablicę fragmentów tylko wtedy, gdy bieżący element obsługuje inną [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] strukturę. Większość dostawców zwraca `null`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeId">
      <MemberSignature Language="C#" Value="public int[] GetRuntimeId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32[] GetRuntimeId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRuntimeId () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetRuntimeId();" />
      <MemberSignature Language="F#" Value="abstract member GetRuntimeId : unit -&gt; int[]" Usage="iRawElementProviderFragment.GetRuntimeId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera identyfikator środowiska uruchomieniowego elementu.</summary>
        <returns>Unikatowy identyfikator czasu wykonywania elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje powinny `null` zwracać dla elementu, który odnosi się do uchwytu okna. Inne elementy powinny zwracać tablicę, która <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId>zawiera, a po niej wartość, która jest unikatowa w obrębie fragmentu.  
  
 Jest on odpowiedzialny za zapewnienie unikalności w obrębie fragmentu. na przykład każdy element na liście musi być pojedynczo numerowany. Aparat zapewnia, że identyfikator jest unikatowy we wszystkich wystąpieniach, przez przetłumaczenie <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId> wartości. [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację tej metody przez element w obrębie fragmentu, taki jak element w polu listy. Element ma własny unikatowy identyfikator w tym wystąpieniu fragmentu, a <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId> wartość zapewnia, że identyfikator zwracany przez metodę jest unikatowy [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] w drzewie.  
  
 [!code-csharp[UIAFragmentProvider_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#101)]
 [!code-vb[UIAFragmentProvider_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#101)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragment Navigate (System.Windows.Automation.Provider.NavigateDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderFragment Navigate(valuetype System.Windows.Automation.Provider.NavigateDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function Navigate (direction As NavigateDirection) As IRawElementProviderFragment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::IRawElementProviderFragment ^ Navigate(System::Windows::Automation::Provider::NavigateDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member Navigate : System.Windows.Automation.Provider.NavigateDirection -&gt; System.Windows.Automation.Provider.IRawElementProviderFragment" Usage="iRawElementProviderFragment.Navigate direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Automation.Provider.NavigateDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Kierunek, w którym ma zostać przechodzenie.</param>
        <summary>[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Pobiera element w określonym kierunku w drzewie.</summary>
        <returns>Element w określonym kierunku lub <see langword="null" /> Jeśli w tym kierunku nie ma elementu</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje tej metody [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] serweradefiniująstrukturędrzewaelementów.[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]  
  
 Nawigacja musi być obsługiwana w górę do elementu nadrzędnego, w dół do pierwszego i ostatniego elementu podrzędnego, a później do następnych i poprzednich elementów równorzędnych, zgodnie z wymaganiami.  
  
 Każdy węzeł podrzędny ma tylko jeden element nadrzędny i musi być umieszczony w łańcuchu elementów równorzędnych osiągniętych od elementu <xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild> nadrzędnego <xref:System.Windows.Automation.Provider.NavigateDirection.LastChild>przez i.  
  
 Relacje między elementami równorzędnymi muszą być identyczne w obu kierunkach: Jeśli A jest <xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling>b, a następnie b to <xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling>. A <xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild> nie <xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling>ma i<xref:System.Windows.Automation.Provider.NavigateDirection.LastChild> nie ma <xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling>.  
  
 Elementy główne fragmentów nie umożliwiają nawigowania do elementów nadrzędnych ani równorzędnych; Nawigowanie między elementami głównymi fragmentów jest obsługiwane przez domyślnych dostawców okien. Elementy w fragmentach muszą nawigować tylko do innych elementów w tym fragmencie.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate%2A> elementu głównego fragmentu, który ma pojedynczy element podrzędny. Ponieważ element implementujący jest korzeniem fragmentu, nie umożliwia nawigowania do elementu nadrzędnego ani elementów równorzędnych.  
  
 [!code-csharp[UIAProvider_snip#105](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/FragmentRoot.cs#105)]
 [!code-vb[UIAProvider_snip#105](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAProvider_snip/VisualBasic/FragmentRoot.vb#105)]  
  
 Poniższy przykład pokazuje implementację przez fragment, który reprezentuje pojedynczy element w polu listy. W tym przypadku element umożliwia nawigację do jego elementu nadrzędnego i elementów równorzędnych, ale nie do żadnych elementów podrzędnych.  
  
 [!code-csharp[UIAFragmentProvider_snip#103](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#103)]
 [!code-vb[UIAFragmentProvider_snip#103](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#103)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.SetFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus();" />
      <MemberSignature Language="F#" Value="abstract member SetFocus : unit -&gt; unit" Usage="iRawElementProviderFragment.SetFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia fokus na ten element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Struktura zapewni, że część interfejsu, która obsługuje ten fragment, jest już skoncentrowana przed wywołaniem tej metody. Twoja implementacja powinna aktualizować tylko stan wewnętrzny fokusu. na przykład przez odświeżenie elementu listy, aby pokazać, że ma fokus. Jeśli wolisz, [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] aby nie skupić się na oknie nadrzędnym <xref:System.Windows.Automation.Provider.ProviderOptions.ProviderOwnsSetFocus> , ustaw <xref:System.Windows.Automation.Provider.ProviderOptions> opcję w polu dla elementu głównego fragmentu.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
  </Members>
</Type>
