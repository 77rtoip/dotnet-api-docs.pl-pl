<Type Name="IRawElementProviderFragment" FullName="System.Windows.Automation.Provider.IRawElementProviderFragment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76106a382d18b1179258ac943159d15e19b8c6bc" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51917844" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRawElementProviderFragment : System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRawElementProviderFragment implements class System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IRawElementProviderFragment" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRawElementProviderFragment&#xA;Implements IRawElementProviderSimple" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRawElementProviderFragment : System::Windows::Automation::Provider::IRawElementProviderSimple" />
  <TypeSignature Language="F#" Value="type IRawElementProviderFragment = interface&#xA;    interface IRawElementProviderSimple" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Automation.Provider.IRawElementProviderSimple</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("f7063da8-8359-439c-9297-bbc5299a7d87")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia metody i właściwości elementów interfejsu użytkownika, które są częścią struktury więcej niż jednego poziomu głębokie, takich jak okno Lista lub element listy. Implementowany przez dostawców automatyzacji interfejsu użytkownika.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Węzeł główny fragmentu musi obsługiwać <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot> interfejs, który dziedziczy z <xref:System.Windows.Automation.Provider.IRawElementProviderFragment>.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-providers-overview.md">Przegląd dostawców automatyzacji interfejsu użytkownika</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms771502(v=vs.90)">Przykład dostawcy fragmentu</related>
  </Docs>
  <Members>
    <Member MemberName="BoundingRectangle">
      <MemberSignature Language="C#" Value="public System.Windows.Rect BoundingRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect BoundingRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BoundingRectangle As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect BoundingRectangle { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.BoundingRectangle : System.Windows.Rect" Usage="System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prostokąt otaczający tego elementu.</summary>
        <value>Prostokąt otaczający we współrzędnych ekranu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie wycinka jest wymagany, jeśli element jest częściowo zasłonięte lub częściowo poza ekranem. <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen%2A> Właściwość powinna być ustawiona tak, aby wskazać, czy prostokąta jest faktycznie widoczne.  
  
 Nie wszystkie punkty w ramach prostokąt otaczający są zawsze możesz klikać.  
  
   
  
## Examples  
 W poniższym przykładowym kodzie wewnętrzny stan prostokąt otaczający jest przechowywany w <xref:System.Drawing.Rectangle?displayProperty=nameWithType>, który jest konwertowany na <xref:System.Windows.Rect?displayProperty=nameWithType> przed zwróceniem.  
  
 [!code-csharp[UIAFragmentProvider_snip#104](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#104)]
 [!code-vb[UIAFragmentProvider_snip#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#104)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="FragmentRoot">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FragmentRoot As IRawElementProviderFragmentRoot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Provider::IRawElementProviderFragmentRoot ^ FragmentRoot { System::Windows::Automation::Provider::IRawElementProviderFragmentRoot ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FragmentRoot : System.Windows.Automation.Provider.IRawElementProviderFragmentRoot" Usage="System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragmentRoot</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera węzeł główny fragmentu.</summary>
        <value>Węzeł główny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawca implementujący <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot> powinna zwrócić sam.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację elementu w fragmentu, takie jak element listy w polu listy.  
  
 [!code-csharp[UIAFragmentProvider_snip#105](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#105)]
 [!code-vb[UIAFragmentProvider_snip#105](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#105)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="GetEmbeddedFragmentRoots">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetEmbeddedFragmentRoots" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEmbeddedFragmentRoots () As IRawElementProviderSimple()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::IRawElementProviderSimple ^&gt; ^ GetEmbeddedFragmentRoots();" />
      <MemberSignature Language="F#" Value="abstract member GetEmbeddedFragmentRoots : unit -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple[]" Usage="iRawElementProviderFragment.GetEmbeddedFragmentRoots " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera tablicę obiektów głównych fragmentu, które są osadzone w [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewo elementów począwszy od bieżącego elementu.</summary>
        <returns>Tablica fragmenty głównego lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca tablicę fragmentów, tylko wtedy, gdy bieżący element jest hostem innego [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] framework. Większość dostawców zwracają `null`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeId">
      <MemberSignature Language="C#" Value="public int[] GetRuntimeId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32[] GetRuntimeId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRuntimeId () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetRuntimeId();" />
      <MemberSignature Language="F#" Value="abstract member GetRuntimeId : unit -&gt; int[]" Usage="iRawElementProviderFragment.GetRuntimeId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera identyfikator środowiska uruchomieniowego elementu.</summary>
        <returns>Unikatowy identyfikator czasu wykonywania tego elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje powinny zwrócić `null` element, który odnosi się do uchwytu okna. Inne elementy powinna zwrócić tablicę zawierającą <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId>, a następnie wartość, która jest unikatowa w obrębie fragmentu.  
  
 Jest odpowiedzialny za dostawcy w celu zapewnienia unikatowości w obrębie fragmentu; na przykład każdy element na liście musi indywidualnie numerowane. [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Aparatu gwarantuje, że identyfikator jest unikatowa wśród wszystkich wystąpień, w miarę możliwości zamieniane <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId> wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia implementację tej metody przez element w obrębie fragmentu, takie jak element w obrębie pola listy. Element ma swój własny unikatowy identyfikator w tej instancji tego fragmentu i <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId> wartość zapewnia, że identyfikator zwracany przez metodę jest unikatowa w [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewa.  
  
 [!code-csharp[UIAFragmentProvider_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#101)]
 [!code-vb[UIAFragmentProvider_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#101)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragment Navigate (System.Windows.Automation.Provider.NavigateDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderFragment Navigate(valuetype System.Windows.Automation.Provider.NavigateDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function Navigate (direction As NavigateDirection) As IRawElementProviderFragment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::IRawElementProviderFragment ^ Navigate(System::Windows::Automation::Provider::NavigateDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member Navigate : System.Windows.Automation.Provider.NavigateDirection -&gt; System.Windows.Automation.Provider.IRawElementProviderFragment" Usage="iRawElementProviderFragment.Navigate direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Automation.Provider.NavigateDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Kierunek, w której chcesz przejść.</param>
        <summary>Pobiera [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] elementu w określonym kierunku w drzewie.</summary>
        <returns>Element w określonym kierunku lub <see langword="null" /> Jeśli nie ma żadnego elementu, w tym kierunku</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Serwera implementacje tej metody definiują strukturę [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewo elementów.  
  
 Nawigacja musi być obsługiwane w górę do elementu nadrzędnego, dół pierwszy i ostatni element podrzędny i bok następnej i poprzedniej elementów równorzędnych, jeśli ma to zastosowanie.  
  
 Każdy węzeł podrzędny ma tylko jedną jednostkę nadrzędną i muszą być umieszczone w łańcuchu osiągnięto z elementu nadrzędnego według elementów równorzędnych <xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild> i <xref:System.Windows.Automation.Provider.NavigateDirection.LastChild>.  
  
 Relacje między elementami równorzędnymi musi być taka sama w obu kierunkach: Jeśli jest B <xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling>, B jest A <xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling>. A <xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild> nie ma przypisanego <xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling>, a <xref:System.Windows.Automation.Provider.NavigateDirection.LastChild> nie ma przypisanego <xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling>.  
  
 Obiekty główne fragment nie należy włączać Nawigacja do elementu nadrzędnego lub elementów równorzędnych; nawigacji między korzenie fragment jest obsługiwany przez domyślnych dostawców okna. Elementy we fragmentach przejść tylko do innych elementów w obrębie tego fragmentu.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia implementację <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate%2A> przez główny fragmentu, który ma jeden typ elementów podrzędnych. Ponieważ implementującej element główny fragmentu, nie umożliwia nawigacji do elementu nadrzędnego lub elementów równorzędnych.  
  
 [!code-csharp[UIAProvider_snip#105](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/FragmentRoot.cs#105)]
 [!code-vb[UIAProvider_snip#105](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAProvider_snip/VisualBasic/FragmentRoot.vb#105)]  
  
 Poniższy przykład pokazuje implementację, fragment, który reprezentuje pojedynczy element w obrębie pola listy. W tym przypadku element umożliwia nawigacji do jej nadrzędnej i elementów równorzędnych, ale nie do żadnych elementów podrzędnych.  
  
 [!code-csharp[UIAFragmentProvider_snip#103](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#103)]
 [!code-vb[UIAFragmentProvider_snip#103](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#103)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.SetFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus();" />
      <MemberSignature Language="F#" Value="abstract member SetFocus : unit -&gt; unit" Usage="iRawElementProviderFragment.SetFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia fokus do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Framework zapewni, że część interfejsu, który obsługuje ten fragment koncentruje się już przed wywołaniem tej metody. Implementacji należy zaktualizować tylko swojego stanu wewnętrznego fokus; na przykład przez odświeżenie elementu listy, aby pokazać, że ma ona fokus. Jeśli wolisz, [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] nie skoncentrowane okno nadrzędne, ustaw <xref:System.Windows.Automation.Provider.ProviderOptions.ProviderOwnsSetFocus> opcji <xref:System.Windows.Automation.Provider.ProviderOptions> dla głównego fragmentu.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementacja dostawcy automatyzacji interfejsu użytkownika po stronie serwera</related>
      </Docs>
    </Member>
  </Members>
</Type>