<Type Name="IRawElementProviderFragment" FullName="System.Windows.Automation.Provider.IRawElementProviderFragment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c6be1132cb1c3045f56835f0f3869544d60bbe2d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30696923" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRawElementProviderFragment : System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRawElementProviderFragment implements class System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IRawElementProviderFragment" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRawElementProviderFragment&#xA;Implements IRawElementProviderSimple" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRawElementProviderFragment : System::Windows::Automation::Provider::IRawElementProviderSimple" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Automation.Provider.IRawElementProviderSimple</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("f7063da8-8359-439c-9297-bbc5299a7d87")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia metody i właściwości dla elementów interfejsu użytkownika, które są częścią struktury głębokości, takich jak pole listy lub element listy więcej niż jeden poziom. Implementowany przez dostawców automatyzacji interfejsu użytkownika.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Węzeł główny fragmentu musi obsługiwać <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot> interfejs, który dziedziczy <xref:System.Windows.Automation.Provider.IRawElementProviderFragment>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BoundingRectangle">
      <MemberSignature Language="C#" Value="public System.Windows.Rect BoundingRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect BoundingRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BoundingRectangle As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect BoundingRectangle { System::Windows::Rect get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prostokąt ograniczający tego elementu.</summary>
        <value>Prostokąt ograniczający we współrzędnych ekranu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wycinka nie jest wymagany, jeśli element jest częściowo pośrednie i częściowo ukrytej. <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen%2A> Właściwość powinna być ustawiona tak, aby wskazać, czy prostokąt jest rzeczywiście widoczny.  
  
 Nie wszystkie punkty w prostokątem nie są zawsze aktywne.  
  
   
  
## Examples  
 W poniższym kodzie przykład wewnętrzny stan klasy prostokątem jest przechowywany w <xref:System.Drawing.Rectangle?displayProperty=nameWithType>, który jest konwertowany na <xref:System.Windows.Rect?displayProperty=nameWithType> przed zwróceniem.  
  
 [!code-csharp[UIAFragmentProvider_snip#104](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#104)]
 [!code-vb[UIAFragmentProvider_snip#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FragmentRoot">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FragmentRoot As IRawElementProviderFragmentRoot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Provider::IRawElementProviderFragmentRoot ^ FragmentRoot { System::Windows::Automation::Provider::IRawElementProviderFragmentRoot ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragmentRoot</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera węzeł główny fragmentu.</summary>
        <value>Węzeł główny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawcy, który implementuje <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot> powinien zwrócić się.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację dla elementu w fragmencie, takich jak elementu listy w polu listy.  
  
 [!code-csharp[UIAFragmentProvider_snip#105](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#105)]
 [!code-vb[UIAFragmentProvider_snip#105](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEmbeddedFragmentRoots">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetEmbeddedFragmentRoots" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEmbeddedFragmentRoots () As IRawElementProviderSimple()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::IRawElementProviderSimple ^&gt; ^ GetEmbeddedFragmentRoots();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera tablicę fragmentu katalogów głównych, które są osadzone w [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] element drzewa począwszy od bieżącego elementu.</summary>
        <returns>Tablica fragmenty głównego lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca tablicę fragmenty tylko wtedy, gdy bieżący element jest hostem innego [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] framework. Zwraca dostawców większości `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeId">
      <MemberSignature Language="C#" Value="public int[] GetRuntimeId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32[] GetRuntimeId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRuntimeId () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetRuntimeId();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera identyfikator środowiska uruchomieniowego elementu.</summary>
        <returns>Unikatowy identyfikator czasu wykonywania elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje powinny zwrócić `null` elementu odnosi się do uchwytu okna. Inne elementy powinien zwrócić tablica zawierająca <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId>, a następnie wartość, która jest unikatowa w obrębie fragmentu.  
  
 Odpowiedzialność dostawcy dla zapewnienia unikatowości w obrębie fragmentu; na przykład każdy element na liście musi być indywidualnie numerowany. [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Aparat gwarantuje, że identyfikator jest unikatowa wśród wszystkich wystąpień, tłumaczenia <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId> wartość.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementacja tej metody według elementu w obrębie fragmentu, takich jak elementu w obrębie pola listy. Element ma własny unikatowy identyfikator w ramach tego wystąpienia fragmentu i <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId> wartość zapewnia, że identyfikator zwracany przez metodę jest unikatowa w [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewa.  
  
 [!code-csharp[UIAFragmentProvider_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#101)]
 [!code-vb[UIAFragmentProvider_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragment Navigate (System.Windows.Automation.Provider.NavigateDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderFragment Navigate(valuetype System.Windows.Automation.Provider.NavigateDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function Navigate (direction As NavigateDirection) As IRawElementProviderFragment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::IRawElementProviderFragment ^ Navigate(System::Windows::Automation::Provider::NavigateDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Automation.Provider.NavigateDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Kierunek, w którym można przejść.</param>
        <summary>Pobiera [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] element w określonym kierunku w drzewie.</summary>
        <returns>Element w określonym kierunku lub <see langword="null" /> Jeśli w tym kierunku nie ma elementu</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Serwera implementacje tej metody definiowania struktury [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] element drzewa.  
  
 Nawigacji muszą być obsługiwane w górę do elementu nadrzędnego, dół pierwszy i ostatni element podrzędny i bok do następnego i poprzedniego elementów równorzędnych, zgodnie z wymaganiami.  
  
 Każdy węzeł podrzędny ma tylko jeden nadrzędny i muszą być umieszczone w łańcuchu osiągnięto z obiektu nadrzędnego przez elementy równorzędne <xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild> i <xref:System.Windows.Automation.Provider.NavigateDirection.LastChild>.  
  
 Relacje między równorzędnymi musi być identyczna w obu kierunkach: w przypadku A B <xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling>, a następnie A na serwer B jest <xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling>. A <xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild> nie ma <xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling>, a <xref:System.Windows.Automation.Provider.NavigateDirection.LastChild> nie ma <xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling>.  
  
 Elementy główne fragmentu nie należy włączać Nawigacja do elementu nadrzędnego lub elementy równorzędne; nawigacji między katalogów głównych fragment jest obsługiwany przez domyślnych dostawców okna. Tylko do innych elementów w obrębie tego fragmentu przejść elementów w fragmenty.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate%2A> przez główny fragmentu, którego element pojedynczy element potomny. Ponieważ implementujący element główny fragmentu, nie umożliwia nawigacji do elementu nadrzędnego lub elementów równorzędnych.  
  
 [!code-csharp[UIAProvider_snip#105](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/FragmentRoot.cs#105)]
 [!code-vb[UIAProvider_snip#105](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAProvider_snip/VisualBasic/FragmentRoot.vb#105)]  
  
 Poniższy przykład przedstawia implementację przez fragment, który reprezentuje jeden element w polu listy. W tym przypadku element umożliwia nawigacji z jej nadrzędną i elementów równorzędnych, ale nie do żadnych elementów podrzędnych.  
  
 [!code-csharp[UIAFragmentProvider_snip#103](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#103)]
 [!code-vb[UIAFragmentProvider_snip#103](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.SetFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia fokus do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Framework zapewni, że część interfejsu, który obsługuje ten fragment koncentruje się już przed wywołaniem tej metody. Implementacji, należy zaktualizować tylko jego stanu wewnętrznego fokus; na przykład przez ponownego rysowania elementu listy, aby pokazać, że ma fokus. Jeśli wolisz, który [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] nie dotyczą okno nadrzędne, ustaw <xref:System.Windows.Automation.Provider.ProviderOptions.ProviderOwnsSetFocus> opcji <xref:System.Windows.Automation.Provider.ProviderOptions> dla elementu głównego fragmentu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>