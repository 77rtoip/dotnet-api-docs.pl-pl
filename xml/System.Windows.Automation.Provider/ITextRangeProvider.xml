<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ITextRangeProvider.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c1bb24a3af3df2a2b923b36a2f7d70e5b19004804.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bb24a3af3df2a2b923b36a2f7d70e5b19004804</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Automation.Provider.ITextRangeProvider">
          <source>Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Provider.ITextProvider" /&gt;</ph>.</source>
          <target state="translated">Udostępnia metody i właściwości do obsługi dostępu klientów automatyzacji interfejsu użytkownika do fragment tekstu ciągłej w kontenerze tekstu, który implementuje <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Provider.ITextProvider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Provider.ITextRangeProvider">
          <source>Implemented on a UI Automation provider that must support the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> control pattern.</source>
          <target state="translated">Zaimplementowany w dostawcy automatyzacji interfejsu użytkownika, który musi obsługiwać <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> — wzorzec formantu.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Provider.ITextRangeProvider">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> can represent an insertion point, a subset, or all of the text in a <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> można reprezentuje punkt wstawienia, podzbiór lub cały tekst w <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> kontenera.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
          <source>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">Dodaje do kolekcji wyróżnionego tekstu w kontenerze tekst, który obsługuje wielu rozłączne wybrane opcje.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
          <source>The text insertion point moves to the area of the new selection.</source>
          <target state="translated">Przenosi punkt wstawiania do obszaru nowe zaznaczenie.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
          <source>Providing a degenerate text range moves the insertion point.</source>
          <target state="translated">Zapewniającym zakres tekstu degeneracji przenosi punkt wstawiania.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
          <source>If text provider does not support multiple, disjoint selections (that is, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /&gt;</ph> must have a value of <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</source>
          <target state="translated">Jeśli tekst dostawca nie obsługuje wielu rozłączne opcje (to znaczy <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /&gt;</ph> musi mieć wartość <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /&gt;</ph> identical to the original <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /&gt;</ph> and inheriting all properties of the original.</source>
          <target state="translated">Zwraca nowy <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /&gt;</ph> takie same jak oryginalne <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /&gt;</ph> i dziedziczenia wszystkich właściwości oryginału.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
          <source>The new text range.</source>
          <target state="translated">Nowy zakres tekstu.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) is never returned.</source>
          <target state="translated">Odwołanie o wartości null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> w języku Visual Basic) nigdy nie jest zwracana.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
          <source>The new range can be manipulated independently from the original.</source>
          <target state="translated">Nowy zakres może manipulować niezależnie od oryginału.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
          <source>A text range to compare</source>
          <target state="translated">Zakres tekstu do porównania</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
          <source>Returns a value that indicates whether the span (the <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> endpoint to the <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint) of a text range is the same as another text range.</source>
          <target state="translated">Zwraca wartość wskazującą, czy zakres ( <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> punktu końcowego <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> punktu końcowego) tekstu zakres jest taki sam jak inny zakres tekstu.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the span of both text ranges is identical; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli zakres obu zakresów tekst jest identyczny; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
          <source>If the range being compared does not come from the same text provider.</source>
          <target state="translated">Jeśli porównywane zakres nie pochodzi z tego samego dostawcy tekstu.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint of the caller.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> Lub <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> punktu końcowego obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The target range for comparison.</source>
          <target state="translated">Zakres docelowy dla porównania.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint of the target.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> Lub <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> punktu końcowego obiektu docelowego.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a value that specifies whether two text ranges have identical endpoints.</source>
          <target state="translated">Zwraca wartość określającą, czy dwa zakresy tekstu mają identyczne punkty końcowe.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</source>
          <target state="translated">Zwraca wartość ujemną, jeśli punkt końcowy wywołującego występuje wcześniej w tekście niż docelowego punktu końcowego.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns zero if the caller's endpoint is at the same location as the target endpoint.</source>
          <target state="translated">Zwraca zero, jeśli punkt końcowy wywołującego jest w tej samej lokalizacji co docelowego punktu końcowego.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</source>
          <target state="translated">Zwraca wartość dodatnią, w przypadku punktu końcowego obiektu wywołującego później w tekście niż docelowego punktu końcowego.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If <ph id="ph1">&lt;paramref name="targetRange" /&gt;</ph> is from a different text provider.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;paramref name="targetRange" /&gt;</ph> jest od dostawcy inny tekst.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The textual unit.</source>
          <target state="translated">Jednostka tekstową.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>Expands the text range to the specified text unit.</source>
          <target state="translated">Rozwija zakres tekstu do jednostki określony tekst.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>If the range is already an exact quantity of the specified units then it remains unchanged.</source>
          <target state="translated">Jeśli zakres znajduje się już dokładne ilości określonej jednostki pozostaje bez zmian.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>There is a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">Istnieje szereg czynności są zaangażowane w tle, aby <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> metodę, aby zostać pomyślnie uruchomiony.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> punktu końcowego, co sprawia, że <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> zbędny punktu końcowego.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje <ph id="ph1">`unit`</ph> granice, na przykład "{U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">Wynikowy zakres jest przenoszony do tyłu <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> na początku żądany <ph id="ph2">`unit`</ph> granic.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
          <target state="translated">Zakres zostanie przeniesiona do przodu i do tyłu w <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> przez żądaną liczbę <ph id="ph2">`unit`</ph> granic.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> punktu końcowego o jeden żądany <ph id="ph2">`unit`</ph> granic.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Zakres dostosowania Przenieś &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>zakres dostosowania Przenieś &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</source>
          <target state="translated">Te kroki są niezbędne, ponieważ często czytniki odczytać pełnego wyrazu, zdanie lub całego akapitu w punkt wstawiania lub dowolnej pozycji kursora wirtualnego.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> uwzględnia tekst zarówno ukryte i są widoczne.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> różni się do następnego największy <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> obsługiwanych w przypadku danego <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> nie jest obsługiwana przez formant.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">Poniżej przedstawiono kolejność, od najmniejszego do największej.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>The attribute to search for.</source>
          <target state="translated">Atrybut do wyszukania.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>The attribute value to search for.</source>
          <target state="translated">Wartość atrybutu do wyszukania.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>This value must match the type specified for the attribute.</source>
          <target state="translated">Ta wartość musi odpowiadać typowi określona dla atrybutu.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ma zostać zwrócony ostatni zakres tekstu występującą zamiast pierwszy; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>Returns a text range subset that has the specified attribute value.</source>
          <target state="translated">Zwraca podzestaw zakres tekstu zawierającego wartość określonego atrybutu.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>A text range having a matching attribute and attribute value; otherwise null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Zakres tekstu pasującego atrybut i wartość atrybutu; w przeciwnym razie wartość null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Nie ma rozróżnienia między tekstu ukrytego i są widoczne.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source>The text string to search for.</source>
          <target state="translated">Ciąg tekstowy do wyszukania.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ma zostać zwrócony ostatni zakres tekstu występującą zamiast pierwszy; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if case should be ignored; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli należy zignorować w przypadku; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source>Returns a text range subset that contains the specified text.</source>
          <target state="translated">Zwraca podzestaw zakres tekstu zawiera określony tekst.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source>A text range matching the specified text; otherwise null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Zakres tekstu pasującego tekstu określonego; w przeciwnym razie wartość null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Nie ma rozróżnienia między tekstu ukrytego i są widoczne.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>The text attribute.</source>
          <target state="translated">Atrybut tekstu.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>Retrieves the value of the specified attribute across the text range.</source>
          <target state="translated">Pobiera wartość określonego atrybutu w zakresie tekstu.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>Retrieves an object representing the value of the specified attribute.</source>
          <target state="translated">Pobiera obiekt reprezentujący wartość określonego atrybutu.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>For example, <bpt id="p1">&lt;c&gt;</bpt>GetAttributeValue(TextPattern.FontNameAttribute)<ept id="p1">&lt;/c&gt;</ept> would return a string that represents the font name of the text range while <bpt id="p2">&lt;c&gt;</bpt>GetAttributeValue(TextPattern.IsItalicAttribute)<ept id="p2">&lt;/c&gt;</ept> would return a value of type <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated">Na przykład <bpt id="p1">&lt;c&gt;</bpt>GetAttributeValue(TextPattern.FontNameAttribute)<ept id="p1">&lt;/c&gt;</ept> zwróci ciąg reprezentujący nazwę czcionki zakres tekstu podczas <bpt id="p2">&lt;c&gt;</bpt>GetAttributeValue(TextPattern.IsItalicAttribute)<ept id="p2">&lt;/c&gt;</ept> zwróci wartość typu <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /&gt;</ph> if the value of the specified attribute varies over the text range.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /&gt;</ph> Jeśli wartość określonego atrybutu zmienia się w zakresie tekstu.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /&gt;</ph> if the specified attribute is not supported by the provider or the control.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /&gt;</ph> Jeśli określony atrybut nie jest obsługiwana przez dostawcę lub kontrolki.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Nie ma rozróżnienia między tekstu ukrytego i są widoczne.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>If the specified attribute is not valid.</source>
          <target state="translated">Jeśli określony atrybut nie jest prawidłowy.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
          <source>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</source>
          <target state="translated">Pobiera kolekcję ograniczenia prostokąty dla pełni lub częściowo widocznych wierszy tekstu w zakresie tekstu.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
          <source>An array of bounding rectangles for each full or partial line of text in a text range.</source>
          <target state="translated">Tablica ograniczenia prostokąty dla każdego wiersza pełnej lub częściowej tekstu w zakres tekstu.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
          <source>An empty array for a degenerate range.</source>
          <target state="translated">Pusta tablica degeneracji zakresu.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
          <source>An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</source>
          <target state="translated">Pusta tablica zakresu tekst, który ma współrzędne ekranu umieszczenia go całkowicie ukrytej przewijane niewidocznymi lub zasłonięty przez nakładające się okna.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
          <source>Retrieves a collection of all embedded objects that fall within the text range.</source>
          <target state="translated">Pobiera kolekcję wszystkich osadzonych obiektów, które wchodzi w zakres tekstu.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
          <source>A collection of child objects that fall within the range.</source>
          <target state="translated">Kolekcja obiektów podrzędnych, które należą do zakresu.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
          <source>Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.</source>
          <target state="translated">Elementy podrzędne, które nakłada się na zakres tekstu, ale nie zostały całkowicie objęte przez nią będą również uwzględniane w kolekcji.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
          <source>Returns an empty collection if there are no child objects.</source>
          <target state="translated">Zwraca pustą kolekcję, jeśli nie ma żadnych obiektów podrzędnych.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
          <source>Returns the innermost control that encloses the text range.</source>
          <target state="translated">Zwraca najbardziej formant, który umieszcza zakres tekstu.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
          <source>The enclosing control, typically the text provider that supplies the text range.</source>
          <target state="translated">Otaczający formant zwykle zawiera zakres tekstu dostawcy tekstu.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
          <source>However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</source>
          <target state="translated">Jednak jeśli dostawca tekstu obsługuje elementy podrzędne, takie jak tabele lub hiperłącza, otaczający element można elementem potomnym dostawcy tekstu.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>The maximum length of the string to return.</source>
          <target state="translated">Maksymalna długość ciągu do zwrócenia.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>Use <bpt id="p1">&lt;c&gt;</bpt>-1<ept id="p1">&lt;/c&gt;</ept> if no limit is required.</source>
          <target state="translated">Użyj <bpt id="p1">&lt;c&gt;</bpt>-1<ept id="p1">&lt;/c&gt;</ept> Jeśli limit nie jest wymagane.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>Retrieves the plain text of the range.</source>
          <target state="translated">Pobiera tekst zwykły zakresu.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>The plain text of the text range, possibly truncated at the specified <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph>.</source>
          <target state="translated">Zwykły tekst zakres tekstu, prawdopodobnie obcięty w określonym <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> uwzględnia tekst zarówno ukryte i są widoczne.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>If <ph id="ph1">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</source>
          <target state="translated">Jeśli <ph id="ph1">`maxLength`</ph> jest większa niż długość zakres tekstu obiektu wywołującego, zwrócony ciąg będzie zwykły tekst zakres tekstu.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> nie zostaną zmienione przez kolejność punkty końcowe w tekście; będzie ona zawsze zwrócić tekst między początkową i końcową punkty końcowe zakres tekstu w kolejności przepływu tekstu logicznego.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> is less than -1.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text unit boundary.</source>
          <target state="translated">Tekst granic jednostki.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of text units to move.</source>
          <target state="translated">Liczba jednostek tekstu do przeniesienia.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</source>
          <target state="translated">Wartość dodatnią przenosi do przodu zakres tekstu, wartości ujemnej przenosi zakres tekstu do tyłu i 0 nie ma wpływu.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Moves the text range the specified number of text units.</source>
          <target state="translated">Przenosi zakres tekstu określoną liczbę jednostek tekstu.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units actually moved.</source>
          <target state="translated">Liczba jednostek w rzeczywistości przenoszone.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This can be less than the number requested if either of the new text range endpoints is greater than or less than the <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /&gt;</ph> endpoints.</source>
          <target state="translated">Może to być mniejsza niż żądana liczba, jeśli spełniony nowych punktów końcowych zakres tekstu jest większa lub mniejsza niż <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /&gt;</ph> punktów końcowych.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">Gdy jest konieczne przechodzenie przez zawartość zakres tekstu, serii kroków są zaangażowane w tle, aby <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> metodę, aby zostać pomyślnie uruchomiony.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> punktu końcowego, co sprawia, że <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> zbędny punktu końcowego.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje <ph id="ph1">`unit`</ph> granice, na przykład "{U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">Wynikowy zakres jest przenoszony do tyłu <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> na początku żądany <ph id="ph2">`unit`</ph> granic.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
          <target state="translated">Zakres zostanie przeniesiona do przodu i do tyłu w <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> przez żądaną liczbę <ph id="ph2">`unit`</ph> granic.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> punktu końcowego o jeden żądany <ph id="ph2">`unit`</ph> granic.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Zakres dostosowania Przenieś &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>zakres dostosowania Przenieś &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated">Zawartość tekstową (lub tekst wewnętrzny) kontenerze tekstu i osadzonego, takich jak komórki hiperłącze lub tabeli jest ujawniona jako strumień jednej, ciągłe tekst w widoku kontrolki i widok zawartości <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> drzewa; obiekt granice są ignorowane.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Zakresy tekstu, objęte osadzonych obiektów. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Zakresy tekstu objęte osadzonych obiektów.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Example of a text stream with embedded objects and their range spans</source>
          <target state="translated">Przykład strumienia tekstu osadzonych obiektów i ich zakresy zakresu</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> uwzględnia tekst zarówno ukryte i są widoczne.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> różni się do następnego największy <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> obsługiwanych w przypadku danego <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> nie jest obsługiwana przez formant.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">Poniżej przedstawiono kolejność, od najmniejszego do największej.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text is not altered in any way, the text range just spans a different part of the text.</source>
          <target state="translated">Tekst nie zostanie zmodyfikowana w dowolny sposób, zakres tekstu obejmuje tylko różnych części tekstu.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The endpoint to move.</source>
          <target state="translated">Punkt końcowy, aby przenieść.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Another range from the same text provider.</source>
          <target state="translated">Inny zakres z tego samego dostawcy tekstu.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>An endpoint on the other range.</source>
          <target state="translated">Punkt końcowy na inny zakres.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Moves one endpoint of a text range to the specified endpoint of a second text range.</source>
          <target state="translated">Przenosi jeden punkt końcowy zakres tekstu do określonego punktu końcowego drugi zakres tekstu.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> is always less than or equal to <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</source>
          <target state="translated">Jeśli punkt końcowy przenoszony przecina punkt końcowy zakresu tekstu, a następnie tego punktu końcowego jest przenoszony Ponadto wynikowa degeneracji zakresu i sprawdzeniu kolejności poprawne punkty końcowe (to znaczy <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> zawsze jest mniejsza niż lub równa <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The endpoint to move.</source>
          <target state="translated">Punkt końcowy, aby przenieść.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual unit for moving.</source>
          <target state="translated">Jednostka tekstową przenoszenia.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units to move.</source>
          <target state="translated">Liczba jednostek, aby przenieść.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A positive value moves the endpoint forward.</source>
          <target state="translated">Wartość dodatnią przenosi do przodu punktu końcowego.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A negative value moves backward.</source>
          <target state="translated">Cofa się wartością ujemną.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A value of 0 has no effect.</source>
          <target state="translated">Wartość 0 nie ma znaczenia.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Moves one endpoint of the text range the specified number of text units within the document range.</source>
          <target state="translated">Przenosi jeden punkt końcowy zakresu tekstu określoną liczbę jednostek tekstu do zakresu dokumentu.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</source>
          <target state="translated">Liczba jednostek w rzeczywistości przenoszone, które można można mniejsza niż liczba żądanych Jeśli przeniesienie punktu końcowego, który jest uruchamiany na początku lub na końcu dokumentu.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">Gdy jest konieczne przechodzenie przez zawartość zakres tekstu, serii kroków są zaangażowane w tle, aby <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> metodę, aby zostać pomyślnie uruchomiony.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> punktu końcowego, co sprawia, że <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> zbędny punktu końcowego.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje <ph id="ph1">`unit`</ph> granice, na przykład "{U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">Wynikowy zakres jest przenoszony do tyłu <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> na początku żądany <ph id="ph2">`unit`</ph> granic.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> punktu końcowego o jeden żądany <ph id="ph2">`unit`</ph> granic.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Zakres dostosowania Przenieś &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>zakres dostosowania Przenieś &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A&gt;</ph> różni się do następnego największy <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> obsługiwanych w przypadku danego <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> nie jest obsługiwana przez formant.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">Poniżej przedstawiono kolejność, od najmniejszego do największej.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
          <source>Removes a highlighted section of text, corresponding to the caller's <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">Usuwa zaznaczony fragment tekstu, odpowiadający wywołującego <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> i <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> punktów końcowych z kolekcji wyróżnionego tekstu w kontenerze tekstu, która obsługuje wiele rozłączne wybrane opcje.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
          <source>The text insertion point will move to the area of the removed highlight.</source>
          <target state="translated">Punkt wstawiania zostanie przeniesione do obszaru usunięto zaznaczenie.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
          <source>Providing a degenerate text range will move the insertion point.</source>
          <target state="translated">Zapewniającym zakres tekstu degeneracji przeniesie punkt wstawiania.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
          <source>If text provider does not support multiple, disjoint selections (for example, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> must have a value of <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</source>
          <target state="translated">Jeśli tekst dostawca nie obsługuje wielu rozłączne opcje (na przykład <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> musi mieć wartość <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the text control should be scrolled so the text range is flush with the top of the viewport; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it should be flush with the bottom of the viewport.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli powinien być przewijane kontrolkę tekstu, więc zakres tekstu jest wyrównana górnej części okienka ekranu; <ph id="ph2">&lt;see langword="false" /&gt;</ph> będą opróżniania do dołu okienka ekranu.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
          <source>Causes the text control to scroll vertically until the text range is visible in the viewport.</source>
          <target state="translated">Powoduje, że kontrolka przewijanie w pionie do momentu wyświetlenia zakres tekstu w okienka ekranu.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A&gt;</ph> uwzględnia tekst zarówno ukryte i są widoczne.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
          <source>If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</source>
          <target state="translated">Jeśli zakres tekstu jest ukryty, kontrolkę tekstu przewinie tylko wtedy, gdy tekstu ukrytego zakotwiczenia w okienka ekranu.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
          <source>Highlights text in the text control corresponding to the text range <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoints.</source>
          <target state="translated">Podświetla tekst w formancie tekst odpowiadający zakres tekstu <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> i <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> punktów końcowych.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
          <source>If a degenerate text range is provided, the text insertion point will move to the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint of the text range.</source>
          <target state="translated">Jeśli podany zakres tekstu degeneracji punkt wstawiania zostanie przeniesiona do <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> punkt końcowy zakres tekstu.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
          <source>Occurs when text selection is not supported by the text control.</source>
          <target state="translated">Występuje, gdy zaznaczony tekst nie jest obsługiwana przez kontrolkę tekstu.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>