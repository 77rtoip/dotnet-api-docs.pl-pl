<Type Name="ITextRangeProvider" FullName="System.Windows.Automation.Provider.ITextRangeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="536feacce0da7079d68f4841565d23f772ba8f86" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682574" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ITextRangeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITextRangeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ITextRangeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITextRangeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITextRangeProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("5347ad7b-c355-46f8-aff5-909033582f63")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia metody i właściwości do obsługi dostępu klientów automatyzacji interfejsu użytkownika do fragment tekstu ciągłej w kontenerze tekstu, który implementuje <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementowany w dostawcy automatyzacji interfejsu użytkownika, który musi obsługiwać <xref:System.Windows.Automation.TextPattern> — wzorzec formantu.  
  
 A <xref:System.Windows.Automation.Text.TextPatternRange> można reprezentuje punkt wstawienia, podzbiór lub cały tekst w <xref:System.Windows.Automation.TextPattern> kontenera.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Text.TextPatternRange" />
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dodaje do kolekcji wyróżnionego tekstu w kontenerze tekst, który obsługuje wielu rozłączne wybrane opcje.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przenosi punkt wstawiania do obszaru nowe zaznaczenie.  
  
 Zapewniającym zakres tekstu degeneracji przenosi punkt wstawiania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Jeśli tekst dostawca nie obsługuje wielu rozłączne opcje (to znaczy <see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /> musi mieć wartość <see langword="Multiple" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca nowy <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> takie same jak oryginalne <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> i dziedziczenia wszystkich właściwości oryginału.</summary>
        <returns>Nowy zakres tekstu. Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) nigdy nie jest zwracana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nowy zakres może manipulować niezależnie od oryginału.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Provider.ITextRangeProvider range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Compare(class System.Windows.Automation.Provider.ITextRangeProvider range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As ITextRangeProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Provider::ITextRangeProvider ^ range);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
      </Parameters>
      <Docs>
        <param name="range">Zakres tekstu do porównania</param>
        <summary>Zwraca wartość wskazującą, czy zakres ( <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> punktu końcowego <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktu końcowego) tekstu zakres jest taki sam jak inny zakres tekstu.</summary>
        <returns>
          <see langword="true" /> Jeśli zakres obu zakresów tekst jest identyczny; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Jeśli porównywane zakres nie pochodzi z tego samego dostawcy tekstu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Provider.ITextRangeProvider targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Provider::ITextRangeProvider ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> Lub <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktu końcowego obiektu wywołującego.</param>
        <param name="targetRange">Zakres docelowy dla porównania.</param>
        <param name="targetEndpoint">
          <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> Lub <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktu końcowego obiektu docelowego.</param>
        <summary>Zwraca wartość określającą, czy dwa zakresy tekstu mają identyczne punkty końcowe.</summary>
        <returns>Zwraca wartość ujemną, jeśli punkt końcowy wywołującego występuje wcześniej w tekście niż docelowego punktu końcowego.  
  
 Zwraca zero, jeśli punkt końcowy wywołującego jest w tej samej lokalizacji co docelowego punktu końcowego.  
  
 Zwraca wartość dodatnią, w przypadku punktu końcowego obiektu wywołującego później w tekście niż docelowego punktu końcowego.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Jeśli <paramref name="targetRange" /> jest od dostawcy inny tekst.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit">Jednostka tekstową.</param>
        <summary>Rozwija zakres tekstu do jednostki określony tekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zakres znajduje się już dokładne ilości określonej jednostki pozostaje bez zmian.  
  
 Istnieje szereg czynności są zaangażowane w tle, aby <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> metodę, aby zostać pomyślnie uruchomiony.  
  
1.  Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punktu końcowego, co sprawia, że <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> zbędny punktu końcowego. Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje `unit` granice, na przykład "{U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.  
  
2.  Wynikowy zakres jest przenoszony do tyłu <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> na początku żądany `unit` granic.  
  
3.  Zakres zostanie przeniesiona do przodu i do tyłu w <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> przez żądaną liczbę `unit` granic.  
  
4.  Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego o jeden żądany `unit` granic.  
  
 ![Zakres dostosowania Przenieś & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "zakres dostosowania Przenieś & ExpandToEnclosingUnit")  
Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()  
  
> [!NOTE]
>  Te kroki są niezbędne, ponieważ często czytniki odczytać pełnego wyrazu, zdanie lub całego akapitu w punkt wstawiania lub dowolnej pozycji kursora wirtualnego.  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> uwzględnia tekst zarówno ukryte i są widoczne.  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> różni się do następnego największy <xref:System.Windows.Automation.Text.TextUnit> obsługiwanych w przypadku danego <xref:System.Windows.Automation.Text.TextUnit> nie jest obsługiwana przez formant.  
  
 Poniżej przedstawiono kolejność, od najmniejszego do największej.  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider FindAttribute (int attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider FindAttribute(int32 attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As Integer, value As Object, backward As Boolean) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ FindAttribute(int attribute, System::Object ^ value, bool backward);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute">Atrybut do wyszukania.</param>
        <param name="value">Wartość atrybutu do wyszukania. Ta wartość musi odpowiadać typowi określona dla atrybutu.</param>
        <param name="backward">
          <see langword="true" /> Jeśli ma zostać zwrócony ostatni zakres tekstu występującą zamiast pierwszy; w przeciwnym razie <see langword="false" />.</param>
        <summary>Zwraca podzestaw zakres tekstu zawierającego wartość określonego atrybutu.</summary>
        <returns>Zakres tekstu pasującego atrybut i wartość atrybutu; w przeciwnym razie wartość null (<see langword="Nothing" /> w języku Visual Basic).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie ma rozróżnienia między tekstu ukrytego i są widoczne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg tekstowy do wyszukania.</param>
        <param name="backward">
          <see langword="true" /> Jeśli ma zostać zwrócony ostatni zakres tekstu występującą zamiast pierwszy; w przeciwnym razie <see langword="false" />.</param>
        <param name="ignoreCase">
          <see langword="true" /> Jeśli należy zignorować w przypadku; w przeciwnym razie <see langword="false" />.</param>
        <summary>Zwraca podzestaw zakres tekstu zawiera określony tekst.</summary>
        <returns>Zakres tekstu pasującego tekstu określonego; w przeciwnym razie wartość null (<see langword="Nothing" /> w języku Visual Basic).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie ma rozróżnienia między tekstu ukrytego i są widoczne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (int attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAttributeValue(int32 attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(int attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attribute">Atrybut tekstu.</param>
        <summary>Pobiera wartość określonego atrybutu w zakresie tekstu.</summary>
        <returns>Pobiera obiekt reprezentujący wartość określonego atrybutu. Na przykład <c>GetAttributeValue(TextPattern.FontNameAttribute)</c> zwróci ciąg reprezentujący nazwę czcionki zakres tekstu podczas <c>GetAttributeValue(TextPattern.IsItalicAttribute)</c> zwróci wartość typu <see cref="T:System.Boolean" />.  
  
 Zwraca <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> Jeśli wartość określonego atrybutu zmienia się w zakresie tekstu.  
  
 Zwraca <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> Jeśli określony atrybut nie jest obsługiwana przez dostawcę lub kontrolki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie ma rozróżnienia między tekstu ukrytego i są widoczne.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Jeśli określony atrybut nie jest prawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public double[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Double()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;double&gt; ^ GetBoundingRectangles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję ograniczenia prostokąty dla pełni lub częściowo widocznych wierszy tekstu w zakresie tekstu.</summary>
        <returns>Tablica ograniczenia prostokąty dla każdego wiersza pełnej lub częściowej tekstu w zakres tekstu.  
  
 Pusta tablica degeneracji zakresu.  
  
 Pusta tablica zakresu tekst, który ma współrzędne ekranu umieszczenia go całkowicie ukrytej przewijane niewidocznymi lub zasłonięty przez nakładające się okna.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As IRawElementProviderSimple()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::IRawElementProviderSimple ^&gt; ^ GetChildren();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję wszystkich osadzonych obiektów, które wchodzi w zakres tekstu.</summary>
        <returns>Kolekcja obiektów podrzędnych, które należą do zakresu. Elementy podrzędne, które nakłada się na zakres tekstu, ale nie zostały całkowicie objęte przez nią będą również uwzględniane w kolekcji.  
  
 Zwraca pustą kolekcję, jeśli nie ma żadnych obiektów podrzędnych.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As IRawElementProviderSimple" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::IRawElementProviderSimple ^ GetEnclosingElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca najbardziej formant, który umieszcza zakres tekstu.</summary>
        <returns>Otaczający formant zwykle zawiera zakres tekstu dostawcy tekstu. Jednak jeśli dostawca tekstu obsługuje elementy podrzędne, takie jak tabele lub hiperłącza, otaczający element można elementem potomnym dostawcy tekstu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">Maksymalna długość ciągu do zwrócenia. Użyj <c>-1</c> Jeśli limit nie jest wymagane.</param>
        <summary>Pobiera tekst zwykły zakresu.</summary>
        <returns>Zwykły tekst zakres tekstu, prawdopodobnie obcięty w określonym <paramref name="maxLength" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> uwzględnia tekst zarówno ukryte i są widoczne.  
  
 Jeśli `maxLength` jest większa niż długość zakres tekstu obiektu wywołującego, zwrócony ciąg będzie zwykły tekst zakres tekstu.  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> nie zostaną zmienione przez kolejność punkty końcowe w tekście; będzie ona zawsze zwrócić tekst między początkową i końcową punkty końcowe zakres tekstu w kolejności przepływu tekstu logicznego.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Jeśli <paramref name="maxLength" /> jest mniejsza niż -1.</exception>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit">Tekst granic jednostki.</param>
        <param name="count">Liczba jednostek tekstu do przeniesienia.  
  
 Wartość dodatnią przenosi do przodu zakres tekstu, wartości ujemnej przenosi zakres tekstu do tyłu i 0 nie ma wpływu.</param>
        <summary>Przenosi zakres tekstu określoną liczbę jednostek tekstu.</summary>
        <returns>Liczba jednostek w rzeczywistości przenoszone. Może to być mniejsza niż żądana liczba, jeśli spełniony nowych punktów końcowych zakres tekstu jest większa lub mniejsza niż <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /> punktów końcowych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jest konieczne przechodzenie przez zawartość zakres tekstu, serii kroków są zaangażowane w tle, aby <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> metodę, aby zostać pomyślnie uruchomiony.  
  
1.  Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punktu końcowego, co sprawia, że <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> zbędny punktu końcowego. Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje `unit` granice, na przykład "{U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.  
  
2.  Wynikowy zakres jest przenoszony do tyłu <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> na początku żądany `unit` granic.  
  
3.  Zakres zostanie przeniesiona do przodu i do tyłu w <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> przez żądaną liczbę `unit` granic.  
  
4.  Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego o jeden żądany `unit` granic.  
  
 ![Zakres dostosowania Przenieś & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "zakres dostosowania Przenieś & ExpandToEnclosingUnit")  
Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()  
  
 Zawartość tekstową (lub tekst wewnętrzny) kontenerze tekstu i osadzonego, takich jak komórki hiperłącze lub tabeli jest ujawniona jako strumień jednej, ciągłe tekst w widoku kontrolki i widok zawartości [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewa; obiekt granice są ignorowane.  
  
 ![Zakresy tekstu, objęte osadzonych obiektów. ] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Zakresy tekstu objęte osadzonych obiektów.")  
Przykład strumienia tekstu osadzonych obiektów i ich zakresy zakresu  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> uwzględnia tekst zarówno ukryte i są widoczne.  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> różni się do następnego największy <xref:System.Windows.Automation.Text.TextUnit> obsługiwanych w przypadku danego <xref:System.Windows.Automation.Text.TextUnit> nie jest obsługiwana przez formant.  
  
 Poniżej przedstawiono kolejność, od najmniejszego do największej.  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 Tekst nie zostanie zmodyfikowana w dowolny sposób, zakres tekstu obejmuje tylko różnych części tekstu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Provider.ITextRangeProvider targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Provider::ITextRangeProvider ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy, aby przenieść.</param>
        <param name="targetRange">Inny zakres z tego samego dostawcy tekstu.</param>
        <param name="targetEndpoint">Punkt końcowy na inny zakres.</param>
        <summary>Przenosi jeden punkt końcowy zakres tekstu do określonego punktu końcowego drugi zakres tekstu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli punkt końcowy przenoszony przecina punkt końcowy zakresu tekstu, a następnie tego punktu końcowego jest przenoszony Ponadto wynikowa degeneracji zakresu i sprawdzeniu kolejności poprawne punkty końcowe (to znaczy <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> zawsze jest mniejsza niż lub równa <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy, aby przenieść.</param>
        <param name="unit">Jednostka tekstową przenoszenia.</param>
        <param name="count">Liczba jednostek, aby przenieść. Wartość dodatnią przenosi do przodu punktu końcowego. Cofa się wartością ujemną. Wartość 0 nie ma znaczenia.</param>
        <summary>Przenosi jeden punkt końcowy zakresu tekstu określoną liczbę jednostek tekstu do zakresu dokumentu.</summary>
        <returns>Liczba jednostek w rzeczywistości przenoszone, które można można mniejsza niż liczba żądanych Jeśli przeniesienie punktu końcowego, który jest uruchamiany na początku lub na końcu dokumentu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jest konieczne przechodzenie przez zawartość zakres tekstu, serii kroków są zaangażowane w tle, aby <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> metodę, aby zostać pomyślnie uruchomiony.  
  
1.  Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punktu końcowego, co sprawia, że <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> zbędny punktu końcowego. Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje `unit` granice, na przykład "{U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.  
  
2.  Wynikowy zakres jest przenoszony do tyłu <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> na początku żądany `unit` granic.  
  
3.  Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego o jeden żądany `unit` granic.  
  
 ![Zakres dostosowania Przenieś & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "zakres dostosowania Przenieś & ExpandToEnclosingUnit")  
Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A> różni się do następnego największy <xref:System.Windows.Automation.Text.TextUnit> obsługiwanych w przypadku danego <xref:System.Windows.Automation.Text.TextUnit> nie jest obsługiwana przez formant.  
  
 Poniżej przedstawiono kolejność, od najmniejszego do największej.  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa zaznaczony fragment tekstu, odpowiadający wywołującego <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> i <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktów końcowych z kolekcji wyróżnionego tekstu w kontenerze tekstu, która obsługuje wiele rozłączne wybrane opcje.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Punkt wstawiania zostanie przeniesione do obszaru usunięto zaznaczenie.  
  
 Zapewniającym zakres tekstu degeneracji przeniesie punkt wstawiania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Jeśli tekst dostawca nie obsługuje wielu rozłączne opcje (na przykład <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> musi mieć wartość <see langword="Multiple" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop">
          <see langword="true" /> Jeśli powinien być przewijane kontrolkę tekstu, więc zakres tekstu jest wyrównana górnej części okienka ekranu; <see langword="false" /> będą opróżniania do dołu okienka ekranu.</param>
        <summary>Powoduje, że kontrolka przewijanie w pionie do momentu wyświetlenia zakres tekstu w okienka ekranu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A> uwzględnia tekst zarówno ukryte i są widoczne.  
  
 Jeśli zakres tekstu jest ukryty, kontrolkę tekstu przewinie tylko wtedy, gdy tekstu ukrytego zakotwiczenia w okienka ekranu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Podświetla tekst w formancie tekst odpowiadający zakres tekstu <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> i <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktów końcowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli podany zakres tekstu degeneracji punkt wstawiania zostanie przeniesiona do <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punkt końcowy zakres tekstu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Występuje, gdy zaznaczony tekst nie jest obsługiwana przez kontrolkę tekstu.</exception>
      </Docs>
    </Member>
  </Members>
</Type>