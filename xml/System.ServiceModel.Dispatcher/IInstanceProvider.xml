<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8d7f5cb8ac72f0db7316c602201327733c3521a0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69235787" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="09fbd-101">Deklaruje metody, które udostępniają obiekt usługi lub odtwarzają obiekt usługi dla usługi Windows Communication Foundation (WCF).</span><span class="sxs-lookup"><span data-stu-id="09fbd-101">Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09fbd-102">Zaimplementuj <xref:System.ServiceModel.InstanceContext> interfejs, aby kontrolować tworzenie i odtwarzanie obiektów usługi, gdy jeden z nich jest żądany lub usuwany przez obiekt. <xref:System.ServiceModel.Dispatcher.IInstanceProvider></span><span class="sxs-lookup"><span data-stu-id="09fbd-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.</span></span>  
  
 <span data-ttu-id="09fbd-103">Po zaimplementowaniu <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> <xref:System.ServiceModel.Description.IEndpointBehavior> <xref:System.ServiceModel.Description.IContractBehavior> interfejsu należy przypisać obiekt niestandardowego dostawcy wystąpień do właściwości przy użyciu zachowania punktu końcowego (obiektu) lub zachowania kontraktu (obiektu). <xref:System.ServiceModel.Dispatcher.IInstanceProvider></span><span class="sxs-lookup"><span data-stu-id="09fbd-103">Once the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).</span></span>  
  
 <span data-ttu-id="09fbd-104">Jeśli mechanizm wstawiania jest zachowaniem punktu końcowego, można również zaimplementować <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> obiekt, który może wstawić niestandardowe zachowanie przy użyciu pliku konfiguracji.</span><span class="sxs-lookup"><span data-stu-id="09fbd-104">If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file.</span></span> <span data-ttu-id="09fbd-105">Jeśli mechanizm wstawiania jest zachowaniem kontraktu, można wstawić zachowanie programowo przed otwarciem hosta usługi lub można zaimplementować atrybut niestandardowy.</span><span class="sxs-lookup"><span data-stu-id="09fbd-105">If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</span></span> <span data-ttu-id="09fbd-106">(Przykład podejścia do zachowania kontraktu zawiera sekcja przykład).</span><span class="sxs-lookup"><span data-stu-id="09fbd-106">(For an example of the contract behavior approach, see the Example section.)</span></span>  
  
 <span data-ttu-id="09fbd-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider>ma dwie metody <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> i <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="09fbd-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span></span> <span data-ttu-id="09fbd-108">Te metody są zwykle zaimplementowane do tworzenia obiektów usługi przy użyciu konstruktora bez parametrów lub do inicjowania lub usuwania pewnego stanu związanego z okresem istnienia obiektu.</span><span class="sxs-lookup"><span data-stu-id="09fbd-108">These methods are typically implemented to create service objects using a non-parameterless constructor or to initialize or dispose of some state related to the lifetime of the object.</span></span> <span data-ttu-id="09fbd-109">Buforowanie obiektów usługi to jeden przykład funkcji niestandardowych <xref:System.ServiceModel.Dispatcher.IInstanceProvider> .</span><span class="sxs-lookup"><span data-stu-id="09fbd-109">Service object pooling is one example of custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> functionality.</span></span>  
  
 <span data-ttu-id="09fbd-110"><xref:System.ServiceModel.InstanceContext> Zazwyczaj <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> wywołuje podczas pierwszego<xref:System.ServiceModel.InstanceContext>tworzenia i wywołuje metodę po zamknięciu. <xref:System.ServiceModel.InstanceContext> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A></span><span class="sxs-lookup"><span data-stu-id="09fbd-110">Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.</span></span>  
  
 <span data-ttu-id="09fbd-111">Istnieją dwa sposoby, aby spowodować, <xref:System.ServiceModel.InstanceContext> <xref:System.ServiceModel.InstanceContext> że obiekt zwolni obiekt usługi przed zamknięciem.</span><span class="sxs-lookup"><span data-stu-id="09fbd-111">There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed.</span></span> <span data-ttu-id="09fbd-112">Pierwsza metoda polega na ustawieniu <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> wartości na <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> lub <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span><span class="sxs-lookup"><span data-stu-id="09fbd-112">The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> or <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span></span> <span data-ttu-id="09fbd-113">Druga metoda polega na wywołaniu <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="09fbd-113">The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method.</span></span> <span data-ttu-id="09fbd-114">Jeśli to zrobisz, <xref:System.ServiceModel.InstanceContext> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> wywołuje metodę dla dostawcy wystąpień dyspozytora.</span><span class="sxs-lookup"><span data-stu-id="09fbd-114">If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider.</span></span> <span data-ttu-id="09fbd-115">Jeśli nowy komunikat dotarł do momentu zwolnienia wystąpienia, program WCF tworzy nowe wystąpienie przy użyciu <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="09fbd-115">If a new message arrives after the instance has been released, WCF creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09fbd-116"><xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> Jeśli jest <xref:System.ServiceModel.InstanceContextMode.Single>to usługa, system nie wywołuje metody lub, nawet jeśli użytkownik nie dostarczył dobrze znanego obiektu usługi, chyba że użytkownik bezpośrednio wywołuje, a następnie wywołuje <xref:System.ServiceModel.InstanceContextMode> <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="09fbd-116">If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode.Single>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09fbd-117">Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ServiceModel.Dispatcher.IInstanceProvider> , który zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.</span><span class="sxs-lookup"><span data-stu-id="09fbd-117">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="09fbd-118">Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-118">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="09fbd-119">Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie z konkretną umową.</span><span class="sxs-lookup"><span data-stu-id="09fbd-119">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="09fbd-120">Zwraca obiekt usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-120">Returns a service object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="09fbd-121">Bieżący <see cref="T:System.ServiceModel.InstanceContext" /> obiekt.</span><span class="sxs-lookup"><span data-stu-id="09fbd-121">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <summary><span data-ttu-id="09fbd-122">Zwraca obiekt usługi podanym <see cref="T:System.ServiceModel.InstanceContext" /> obiektem.</span><span class="sxs-lookup"><span data-stu-id="09fbd-122">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="09fbd-123">Zdefiniowany przez użytkownika obiekt usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-123">A user-defined service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09fbd-124"><xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> Użyj metody do kontrolowania dokładnego obiektu usługi, który usługa WCF otrzymuje podczas próby utworzenia nowego.</span><span class="sxs-lookup"><span data-stu-id="09fbd-124">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09fbd-125">Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ServiceModel.Dispatcher.IInstanceProvider> , który zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.</span><span class="sxs-lookup"><span data-stu-id="09fbd-125">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="09fbd-126">Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-126">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="09fbd-127">Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie z konkretną umową.</span><span class="sxs-lookup"><span data-stu-id="09fbd-127">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="09fbd-128">Bieżący <see cref="T:System.ServiceModel.InstanceContext" /> obiekt.</span><span class="sxs-lookup"><span data-stu-id="09fbd-128">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="09fbd-129">Komunikat, który wyzwolił Tworzenie obiektu usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-129">The message that triggered the creation of a service object.</span></span></param>
        <summary><span data-ttu-id="09fbd-130">Zwraca obiekt usługi podanym <see cref="T:System.ServiceModel.InstanceContext" /> obiektem.</span><span class="sxs-lookup"><span data-stu-id="09fbd-130">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="09fbd-131">Obiekt usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-131">The service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09fbd-132"><xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> Użyj metody do kontrolowania dokładnego obiektu usługi, który usługa WCF otrzymuje podczas próby utworzenia nowego.</span><span class="sxs-lookup"><span data-stu-id="09fbd-132">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09fbd-133">Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ServiceModel.Dispatcher.IInstanceProvider> , który zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.</span><span class="sxs-lookup"><span data-stu-id="09fbd-133">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="09fbd-134">Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-134">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="09fbd-135">Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie z konkretną umową.</span><span class="sxs-lookup"><span data-stu-id="09fbd-135">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="09fbd-136">Kontekst wystąpienia usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-136">The service's instance context.</span></span></param>
        <param name="instance"><span data-ttu-id="09fbd-137">Obiekt usługi do odtworzenia.</span><span class="sxs-lookup"><span data-stu-id="09fbd-137">The service object to be recycled.</span></span></param>
        <summary><span data-ttu-id="09fbd-138">Wywołuje się, <see cref="T:System.ServiceModel.InstanceContext" /> gdy obiekt odtwarza obiekt usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-138">Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09fbd-139">Użyj metody <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> , aby wykonać niektóre niestandardowe usuwanie zasobów lub inne dostosowanie odtwarzania, gdy usługa odtwarza obiekt usługi.</span><span class="sxs-lookup"><span data-stu-id="09fbd-139">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
