<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8d7f5cb8ac72f0db7316c602201327733c3521a0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69235787" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Deklaruje metody, które udostępniają obiekt usługi lub odtwarzają obiekt usługi dla usługi Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.InstanceContext> interfejs, aby kontrolować tworzenie i odtwarzanie obiektów usługi, gdy jeden z nich jest żądany lub usuwany przez obiekt. <xref:System.ServiceModel.Dispatcher.IInstanceProvider>  
  
 Po zaimplementowaniu <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> <xref:System.ServiceModel.Description.IEndpointBehavior> <xref:System.ServiceModel.Description.IContractBehavior> interfejsu należy przypisać obiekt niestandardowego dostawcy wystąpień do właściwości przy użyciu zachowania punktu końcowego (obiektu) lub zachowania kontraktu (obiektu). <xref:System.ServiceModel.Dispatcher.IInstanceProvider>  
  
 Jeśli mechanizm wstawiania jest zachowaniem punktu końcowego, można również zaimplementować <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> obiekt, który może wstawić niestandardowe zachowanie przy użyciu pliku konfiguracji. Jeśli mechanizm wstawiania jest zachowaniem kontraktu, można wstawić zachowanie programowo przed otwarciem hosta usługi lub można zaimplementować atrybut niestandardowy. (Przykład podejścia do zachowania kontraktu zawiera sekcja przykład).  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>ma dwie metody <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> i <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Te metody są zwykle zaimplementowane do tworzenia obiektów usługi przy użyciu konstruktora bez parametrów lub do inicjowania lub usuwania pewnego stanu związanego z okresem istnienia obiektu. Buforowanie obiektów usługi to jeden przykład funkcji niestandardowych <xref:System.ServiceModel.Dispatcher.IInstanceProvider> .  
  
 <xref:System.ServiceModel.InstanceContext> Zazwyczaj <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> wywołuje podczas pierwszego<xref:System.ServiceModel.InstanceContext>tworzenia i wywołuje metodę po zamknięciu. <xref:System.ServiceModel.InstanceContext> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>  
  
 Istnieją dwa sposoby, aby spowodować, <xref:System.ServiceModel.InstanceContext> <xref:System.ServiceModel.InstanceContext> że obiekt zwolni obiekt usługi przed zamknięciem. Pierwsza metoda polega na ustawieniu <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> wartości na <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> lub <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>. Druga metoda polega na wywołaniu <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> metody. Jeśli to zrobisz, <xref:System.ServiceModel.InstanceContext> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> wywołuje metodę dla dostawcy wystąpień dyspozytora. Jeśli nowy komunikat dotarł do momentu zwolnienia wystąpienia, program WCF tworzy nowe wystąpienie przy użyciu <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> metody.  
  
> [!NOTE]
>  <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> Jeśli jest <xref:System.ServiceModel.InstanceContextMode.Single>to usługa, system nie wywołuje metody lub, nawet jeśli użytkownik nie dostarczył dobrze znanego obiektu usługi, chyba że użytkownik bezpośrednio wywołuje, a następnie wywołuje <xref:System.ServiceModel.InstanceContextMode> <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ServiceModel.Dispatcher.IInstanceProvider> , który zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi. Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie z konkretną umową.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca obiekt usługi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Bieżący <see cref="T:System.ServiceModel.InstanceContext" /> obiekt.</param>
        <summary>Zwraca obiekt usługi podanym <see cref="T:System.ServiceModel.InstanceContext" /> obiektem.</summary>
        <returns>Zdefiniowany przez użytkownika obiekt usługi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> Użyj metody do kontrolowania dokładnego obiektu usługi, który usługa WCF otrzymuje podczas próby utworzenia nowego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ServiceModel.Dispatcher.IInstanceProvider> , który zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi. Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie z konkretną umową.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Bieżący <see cref="T:System.ServiceModel.InstanceContext" /> obiekt.</param>
        <param name="message">Komunikat, który wyzwolił Tworzenie obiektu usługi.</param>
        <summary>Zwraca obiekt usługi podanym <see cref="T:System.ServiceModel.InstanceContext" /> obiektem.</summary>
        <returns>Obiekt usługi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> Użyj metody do kontrolowania dokładnego obiektu usługi, który usługa WCF otrzymuje podczas próby utworzenia nowego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ServiceModel.Dispatcher.IInstanceProvider> , który zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi. Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie z konkretną umową.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Kontekst wystąpienia usługi.</param>
        <param name="instance">Obiekt usługi do odtworzenia.</param>
        <summary>Wywołuje się, <see cref="T:System.ServiceModel.InstanceContext" /> gdy obiekt odtwarza obiekt usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> , aby wykonać niektóre niestandardowe usuwanie zasobów lub inne dostosowanie odtwarzania, gdy usługa odtwarza obiekt usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
