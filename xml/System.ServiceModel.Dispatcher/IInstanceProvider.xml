<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6270c1d80674af973b6c957e53bfac75331644f8" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64032626" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Deklaruje metody, które zapewniają obiektu usługi lub Odtwórz obiektem usługi dla usługi Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interfejs do sterowania tworzeniem i odtwarzanie obiektów usługi, gdy jedna jest wymagane lub usunięte przez <xref:System.ServiceModel.InstanceContext> obiektu.  
  
 Raz <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interfejs jest implementowany, należy przypisać obiekt dostawcy niestandardowego wystąpienia mógł <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> właściwości przy użyciu zachowanie punktu końcowego ( <xref:System.ServiceModel.Description.IEndpointBehavior> obiekt) lub zachowanie kontraktu ( <xref:System.ServiceModel.Description.IContractBehavior> obiektu).  
  
 Jeśli mechanizm wstawiania jest zachowanie punktu końcowego można również zaimplementować <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> obiektu, który może wstawić niestandardowe zachowanie przy użyciu pliku konfiguracji. Jeśli mechanizm wstawiania jest zachowanie kontraktu, można wstawić zachowanie programowo przed otwierającym hosta usługi, lub możesz zaimplementować atrybutu niestandardowego. (Na przykład podejście zachowanie kontraktu Zobacz sekcji przykład).  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> posiada dwie metody, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> i <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Te metody są zwykle implementowane do tworzenia obiektów usługi przy użyciu innego niż domyślny konstruktor lub do zainicjowania lub usuwanie pewnego stanu, które dotyczą okres istnienia obiektu. Buforowanie obiektu usługi jest jednym z przykładów niestandardowych <xref:System.ServiceModel.Dispatcher.IInstanceProvider> funkcji.  
  
 Zazwyczaj <xref:System.ServiceModel.InstanceContext> wywołuje <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> podczas <xref:System.ServiceModel.InstanceContext> tworzona jest najpierw, a następnie wywołuje <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> metody podczas <xref:System.ServiceModel.InstanceContext> jest zamknięty.  
  
 Istnieją dwa sposoby, aby spowodować <xref:System.ServiceModel.InstanceContext> obiektu, aby zwolnić obiekt usługi przed <xref:System.ServiceModel.InstanceContext> jest zamknięty. Pierwsza metoda jest ustawienie <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> do <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> lub <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>. Druga metoda polega na wywołaniu <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> metody. Jeśli zostanie to zrobione, <xref:System.ServiceModel.InstanceContext> wywołania <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> metody dla dostawcy wystąpienia dyspozytora. Gdy nadejdzie nowa wiadomość po udostępnieniu wystąpienie, WCF tworzy nowe wystąpienie, używając <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> metody.  
  
> [!NOTE]
>  Jeśli <xref:System.ServiceModel.InstanceContextMode> usługi jest <xref:System.ServiceModel.InstanceContextMode.Single>, system nie mogą wywoływać <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> lub <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> metody nawet wtedy, gdy użytkownik nie dostarczył dobrze znane usługi obiektu, chyba że użytkownik bezpośrednio wywołuje <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> , a następnie wywołuje <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób implementacji <xref:System.ServiceModel.Dispatcher.IInstanceProvider> zapewniający zachowanie "singleton"; zawsze zwraca to samo wystąpienie usługi i nie Kosza.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowe wystąpienie usługodawcy. Implementuje także <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, która wiąże jego użycia określonego kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca obiekt usługi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Bieżący <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</param>
        <summary>Zwraca obiekt usługi, biorąc pod uwagę określony <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</summary>
        <returns>Obiekt usługi zdefiniowane przez użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> metodę, aby kontrolować obiekt dokładnie usługi, który usługa WCF odbiera podczas próby utworzenia nowego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób implementacji <xref:System.ServiceModel.Dispatcher.IInstanceProvider> zapewniający zachowanie "singleton"; zawsze zwraca to samo wystąpienie usługi i nie Kosza.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowe wystąpienie usługodawcy. Implementuje także <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, która wiąże jego użycia określonego kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Bieżący <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</param>
        <param name="message">Komunikat, który powoduje utworzenie obiektu usługi.</param>
        <summary>Zwraca obiekt usługi, biorąc pod uwagę określony <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</summary>
        <returns>Obiekt usługi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> metodę, aby kontrolować obiekt dokładnie usługi, który usługa WCF odbiera podczas próby utworzenia nowego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób implementacji <xref:System.ServiceModel.Dispatcher.IInstanceProvider> zapewniający zachowanie "singleton"; zawsze zwraca to samo wystąpienie usługi i nie Kosza.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zaimplementować niestandardowy atrybut, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowe wystąpienie usługodawcy. Implementuje także <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, która wiąże jego użycia określonego kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Kontekst wystąpienia usługi.</param>
        <param name="instance">Obiekt usługi do odtwarzania.</param>
        <summary>Wywoływane, gdy <see cref="T:System.ServiceModel.InstanceContext" /> obiektu jest odtwarzana obiektu usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> metodę w celu usuwania niektórych zasobów niestandardowych lub innych dostosowań, odtwarzania, gdy usługa jest odtwarzana obiektu usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>