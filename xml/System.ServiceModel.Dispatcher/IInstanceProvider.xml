<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="55c2b59b9a9ddabd3da143f0a84813cb214e52d9" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32692073" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Deklaruje metody Udostępnij obiekt usługi lub Odtwórz obiekt usługi dla usługi Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interfejsu do sterowania tworzenia oraz odzyskiwanie obiektów usługi, gdy jedna jest wymagane lub usunięte przez <xref:System.ServiceModel.InstanceContext> obiektu.  
  
 Raz <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interfejs jest wdrażany, należy przypisać do niestandardowego wystąpienia obiektu dostawcy <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> właściwości przy użyciu zachowania punktu końcowego ( <xref:System.ServiceModel.Description.IEndpointBehavior> obiektu) lub zachowanie kontraktu ( <xref:System.ServiceModel.Description.IContractBehavior> obiektu).  
  
 Jeśli mechanizm wstawiania jest zachowanie punktu końcowego można też wdrożyć <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> obiekt, który można wstawić niestandardowe zachowanie przy użyciu pliku konfiguracji. Jeśli mechanizm wstawiania jest zachowanie kontraktu, można wstawić zachowanie programowo przed otwierającym hosta usługi lub można zaimplementować atrybutu niestandardowego. (Na przykład podejście zachowanie kontraktu Zobacz przykład).  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> ma dwie metody <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> i <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Te metody są zwykle implementowany do tworzenia obiektów usługi za pomocą konstruktora domyślnego z systemem innym niż, albo do zainicjowania lub usunięcia stanu, niektóre powiązane z okresu istnienia obiektu. Buforowanie obiektu usługi jest jednym z przykładów niestandardowe <xref:System.ServiceModel.Dispatcher.IInstanceProvider> funkcji.  
  
 Zazwyczaj <xref:System.ServiceModel.InstanceContext> wywołuje <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> podczas <xref:System.ServiceModel.InstanceContext> utworzenia i wywołuje <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> metody podczas <xref:System.ServiceModel.InstanceContext> jest zamknięty.  
  
 Istnieją dwa sposoby spowodować <xref:System.ServiceModel.InstanceContext> obiektu do zwolnienia obiektu usługi przed <xref:System.ServiceModel.InstanceContext> jest zamknięty. Pierwsza metoda jest skonfigurowanie <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> do <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> lub <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>. Drugi sposób polega na wywołanie <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> metody. Jeśli zostanie to zrobione, <xref:System.ServiceModel.InstanceContext> wywołania <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> metoda dyspozytora wystąpienie dostawcy. Jeśli nowy komunikat po wystąpienie zostało zwolnione, WCF tworzy nowe wystąpienie za pomocą <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> metody.  
  
> [!NOTE]
>  Jeśli <xref:System.ServiceModel.InstanceContextMode> usługi jest <xref:System.ServiceModel.InstanceContextMode.Single>, system nie wywołuje <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> lub <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> obiekt metody nawet wtedy, gdy użytkownik nie dostarczył dobrze znanej usługi, chyba że użytkownik bezpośrednio wywołuje <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> , a następnie wywołuje <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wykonania <xref:System.ServiceModel.Dispatcher.IInstanceProvider> zapewnia zachowanie "singleton"; zawsze zwraca tego samego wystąpienia usługi i nie jest odtwarzana.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykładowy kod przedstawia sposób wykonania atrybutu niestandardowego, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowych wystąpienie usługodawcy. Implementuje również <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże użytkowania z określonym kontraktem.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca obiekt usługi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Bieżący <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</param>
        <summary>Zwraca obiekt usługi na podstawie określonego <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</summary>
        <returns>Obiekt usługi zdefiniowane przez użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> metody kontrolowania obiekt dokładne usługi odbierająca usługi WCF podczas próby utworzenia nowego.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wykonania <xref:System.ServiceModel.Dispatcher.IInstanceProvider> zapewnia zachowanie "singleton"; zawsze zwraca tego samego wystąpienia usługi i nie jest odtwarzana.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykładowy kod przedstawia sposób wykonania atrybutu niestandardowego, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowych wystąpienie usługodawcy. Implementuje również <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże użytkowania z określonym kontraktem.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Bieżący <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</param>
        <param name="message">Komunikat, który powoduje utworzenie obiektu usługi.</param>
        <summary>Zwraca obiekt usługi na podstawie określonego <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</summary>
        <returns>Obiekt usługi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> metody kontrolowania obiekt dokładne usługi odbierająca usługi WCF podczas próby utworzenia nowego.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wykonania <xref:System.ServiceModel.Dispatcher.IInstanceProvider> zapewnia zachowanie "singleton"; zawsze zwraca tego samego wystąpienia usługi i nie jest odtwarzana.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Poniższy przykładowy kod przedstawia sposób wykonania atrybutu niestandardowego, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowych wystąpienie usługodawcy. Implementuje również <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże użytkowania z określonym kontraktem.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Kontekst wystąpienia usługi.</param>
        <param name="instance">Obiekt usługi do odtwarzania.</param>
        <summary>Wywoływane, gdy <see cref="T:System.ServiceModel.InstanceContext" /> obiektu odtwarza obiekt usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> metodę w celu usuwania niektórych zasobów niestandardowych lub inne dostosowania odtwarzania, gdy usługa jest odtwarzana obiekt usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>