<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf2278efb91472b6df53e28d753d2443a7141017" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58562293" /></Metadata><TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje kontrakt implementowany przez inspektorzy parametru niestandardowego, umożliwiająca inspekcji lub zmiana informacji przed i po wywołania po stronie klienta lub usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IParameterInspector> interfejs do tworzenia Inspektor parametru niestandardowego, który można wyświetlać i modyfikować zawartość wywołania zarówno przed wywołaniem, jak i po wywołaniu w aplikacjach klienta lub usługę.  
  
 Na połączenia wychodzące z klienta inspektor jest wywoływana przed zawartość żądania jest serializowany i wysyłane do usługi. Inspektor jest również nazywany po deserializacji odpowiedzi, ale przed zwracane wartości zostały wysłane do metody serwera proxy.  
  
 Na przychodzące wywołania usługi inspektor jest wywoływana po parametry są deserializacji, ale przed ich wysłaniem do operacji usługi.  
  
 Użyj <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> właściwości, aby dodać <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementacji kolekcji inspektorzy dla określonej operacji.  
  
 **Uwaga** deweloperom i administratorom musi zapewnić, że interakcji z innymi <xref:System.ServiceModel.Dispatcher.IParameterInspector> zrozumieniu implementacji.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład <xref:System.ServiceModel.Dispatcher.IParameterInspector> wdrożenia który:  
  
-   Zapisuje nazwy operacji i wartość zwracana konsoli po odpowiedź ma została przeprowadzona przez usługę lub żądanie ma został wydany przy klienta.  
  
-   Zapisuje nazwy operacji w konsoli po deserializacji odpowiedzi na kliencie lub odpowiedzi ma zostały serializacji w usłudze.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> lub <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> do wstawienia <xref:System.ServiceModel.Dispatcher.IParameterInspector> obiektów.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName">Nazwa wywoływanej operacji.</param>
        <param name="outputs">Wszystkie dane wyjściowe są obiekty.</param>
        <param name="returnValue">Wartość zwracana przez operację.</param>
        <param name="correlationState">Każdy stan korelacji zwróciło <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> metody lub <see langword="null" />.</param>
        <summary>Metoda wywoływana po wywołań klienta są zwracane, a przed uruchomieniem usługi są wysyłane odpowiedzi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na połączenia wychodzące z klienta inspektor jest wywoływana przed zawartość żądania jest serializowany i wysyłane do usługi. Inspektor jest również nazywany po deserializacji odpowiedzi, ale przed zwracane wartości zostały wysłane do metody serwera proxy.  
  
 Na przychodzące wywołania usługi inspektor jest wywoływana po parametry są deserializacji, ale przed ich wysłaniem do operacji usługi.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład <xref:System.ServiceModel.Dispatcher.IParameterInspector> wdrożenia który:  
  
-   Zapisuje nazwy operacji i wartość zwracana konsoli po odpowiedź ma została przeprowadzona przez usługę lub żądanie ma został wydany przy klienta.  
  
-   Zapisuje nazwy operacji w konsoli po deserializacji odpowiedzi na kliencie lub odpowiedzi ma zostały serializacji w usłudze.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, lub <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> do wstawienia <xref:System.ServiceModel.Dispatcher.IParameterInspector> obiektów.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName">Nazwa operacji.</param>
        <param name="inputs">Obiekty przekazywany do metody przez klienta.</param>
        <summary>Wywołuje się przed wysłaniem wywołań klienta i po zwróceniu odpowiedzi usługi.</summary>
        <returns>Stan korelacji, który jest zwracany jako <paramref name="correlationState" /> parametru w <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Zwróć <see langword="null" /> Jeśli nie zamierzasz używać stanie korelacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na połączenia wychodzące z klienta inspektor jest wywoływana przed zawartość żądania jest serializowany i wysyłane do usługi. Inspektor jest również nazywany po deserializacji odpowiedzi, ale przed zwracane wartości zostały wysłane do metody serwera proxy.  
  
 Na przychodzące wywołania usługi inspektor jest wywoływana po zawartość żądania jest przeprowadzona i wysyłane do operacji usługi i przed treści odpowiedzi są serializowane i wysłane do klienta.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład <xref:System.ServiceModel.Dispatcher.IParameterInspector> wdrożenia który:  
  
-   Zapisuje nazwy operacji i wartość zwracana konsoli po odpowiedź ma została przeprowadzona przez usługę lub żądanie ma został wydany przy klienta.  
  
-   Zapisuje nazwy operacji w konsoli po deserializacji odpowiedzi na kliencie lub odpowiedzi jest serializowany w usłudze.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> lub <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> do wstawienia <xref:System.ServiceModel.Dispatcher.IParameterInspector> obiektów.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>