<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="89566eb5793aa3f3ad4d0a23250acea1ef5b6913" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30575983" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje kontrakt zaimplementowana przez inspektorzy parametru niestandardowego umożliwiającą inspekcji lub zmiana informacji przed i po wywołania po stronie klienta lub usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IParameterInspector> interfejs do tworzenia inspektora parametru niestandardowego, który można wyświetlać i modyfikować zawartość wywołania przed połączenia i po wywołaniu metody w aplikacjach klienta lub usługi.  
  
 Na wychodzący z klienta inspektor jest wywoływane przed zawartości żądania są serializowane i wysyłane do usługi. Inspektor jest również nazywany po przeprowadzić deserializacji odpowiedzi, ale przed zwracanych wartości zostały wysłane do metody serwera proxy.  
  
 Na przychodzące wywołania usługi inspektor jest wywoływana po deserializacji są parametry, ale przed wysłaniem do operacji usługi.  
  
 Użyj <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> właściwości, aby dodać <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementacji do kolekcji inspektorzy dla określonej operacji.  
  
 **Uwaga** deweloperom i administratorom upewnij się, że interakcji z innymi <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementacji jest rozpoznawany.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementacji który:  
  
-   Zapisuje nazwy operacji oraz wartości zwracanej w konsoli po odpowiedź ma został zdeserializowany przez usługę lub żądanie ma zostać serializowany przez klienta.  
  
-   Zapisuje nazwy operacji w konsoli po deserializacji odpowiedzi na kliencie lub ma zostały serializacji odpowiedzi usługi.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> lub <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> do wstawienia <xref:System.ServiceModel.Dispatcher.IParameterInspector> obiektów.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName">Nazwa wywołanej operacji.</param>
        <param name="outputs">Wszystkie dane wyjściowe obiektów.</param>
        <param name="returnValue">Wartość zwracana operacji.</param>
        <param name="correlationState">Każdy stan korelacji zwrócony z <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> metody, lub <see langword="null" />.</param>
        <summary>Metoda wywoływana po wywołań klienta są zwracane, a przed uruchomieniem usługi są wysyłane odpowiedzi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na wychodzący z klienta inspektor jest wywoływane przed zawartości żądania są serializowane i wysyłane do usługi. Inspektor jest również nazywany po przeprowadzić deserializacji odpowiedzi, ale przed zwracanych wartości zostały wysłane do metody serwera proxy.  
  
 Na przychodzące wywołania usługi inspektor jest wywoływana po deserializacji są parametry, ale przed wysłaniem do operacji usługi.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementacji który:  
  
-   Zapisuje nazwy operacji oraz wartości zwracanej w konsoli po odpowiedź ma został zdeserializowany przez usługę lub żądanie ma zostać serializowany przez klienta.  
  
-   Zapisuje nazwy operacji w konsoli po deserializacji odpowiedzi na kliencie lub ma zostały serializacji odpowiedzi usługi.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, lub <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> do wstawienia <xref:System.ServiceModel.Dispatcher.IParameterInspector> obiektów.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName">Nazwa operacji.</param>
        <param name="inputs">Obiekt przekazywany do metody przez klienta.</param>
        <summary>Wywoływana przed wysłaniem wywołań klienta i po zwróceniu odpowiedzi usługi.</summary>
        <returns>Stan korelacji, który jest zwracany jako <paramref name="correlationState" /> parametru w <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Zwraca <see langword="null" /> Jeśli nie zamierzasz używać stanie korelacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na wychodzący z klienta inspektor jest wywoływane przed zawartości żądania są serializowane i wysyłane do usługi. Inspektor jest również nazywany po przeprowadzić deserializacji odpowiedzi, ale przed zwracanych wartości zostały wysłane do metody serwera proxy.  
  
 Na przychodzące wywołania usługi inspektor jest wywołana po zawartość żądania jest deserializacji i wysyłane do operacji usługi i przed zawartości odpowiedzi są serializowane i wysłane do klienta.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementacji który:  
  
-   Zapisuje nazwy operacji oraz wartości zwracanej w konsoli po odpowiedź ma został zdeserializowany przez usługę lub żądanie ma zostać serializowany przez klienta.  
  
-   Zapisuje nazwy operacji w konsoli po deserializacji odpowiedzi na kliencie lub odpowiedzi jest serializowany w usłudze.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> lub <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> do wstawienia <xref:System.ServiceModel.Dispatcher.IParameterInspector> obiektów.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>