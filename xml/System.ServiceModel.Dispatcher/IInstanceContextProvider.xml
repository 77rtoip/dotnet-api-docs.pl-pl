<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5fe22adabd6c7ddbd809e7be39d5cd041175a39" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69150299" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zaimplementuj, aby wziąć udział w tworzeniu lub wybieraniu <see cref="T:System.ServiceModel.InstanceContext" /> obiektu, szczególnie w celu włączenia udostępnionych sesji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> interfejs, aby zapewnić odpowiedni obiekt systemowi. <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> Zazwyczaj ten interfejs jest implementowany do obsługi udostępnionych sesji, włączania puli wystąpień usług, kontrolowania okresów istnienia wystąpień usług lub grupowania kontekstów między klientami.  
  
 Na przykład, aby zaimplementować udostępnianie, Wstaw niestandardowy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> , aby zdecydować, która sesja lub wywołanie z klienta jest skojarzone z tym <xref:System.ServiceModel.InstanceContext> obiektem. Przykład demonstrujący udostępnianie kontekstów wystąpień można znaleźć w temacie [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
> [!NOTE]
>  Gdy zostanie wstawiony do Windows Communication Foundation (WCF), właściwość normalna kontrolująca <xref:System.ServiceModel.InstanceContext> Tworzenie obiektów ( <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> Właściwość) nie jest już sprawdzana i nie ma żadnego efektu. <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>  
  
 Bardziej ogólny mechanizm, za pomocą którego można inicjować <xref:System.ServiceModel.InstanceContext> obiekty po utworzeniu (na przykład w celu dołączenia rozszerzeń niestandardowych <xref:System.ServiceModel.InstanceContext>do każdego) <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>to.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat przychodzący.</param>
        <param name="channel">Kanał, który odebrał komunikat.</param>
        <summary>Wywoływana po odebraniu nowej wiadomości.</summary>
        <returns>Obiekt, który jest używany do przetwarzania wiadomości; wróć <see langword="null" /> do instrukcji WCF, aby utworzyć nowy <see cref="T:System.ServiceModel.InstanceContext" /> obiekt. <see cref="T:System.ServiceModel.InstanceContext" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> jest wywoływana, gdy zostanie odebrany komunikat. Zwróć obiekt, w którym chcesz przetworzyć komunikat, lub `null`. <xref:System.ServiceModel.InstanceContext> W przypadku programu `null`WCF tworzy nowy <xref:System.ServiceModel.InstanceContext> obiekt dla <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> wiadomości, a następnie wywołuje metodę.  
  
 W przypadku powrotu `null`nowy <xref:System.ServiceModel.InstanceContext> obiekt przechodzi przez system ograniczania i <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>zwiększa liczbę wystąpień.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Nowy <see cref="T:System.ServiceModel.InstanceContext" /> obiekt.</param>
        <param name="message">Komunikat przychodzący.</param>
        <param name="channel">Kanał, który odebrał komunikat.</param>
        <summary>Wywoływana, <see langword="null" /> <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> gdy jest zwracana z metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A>jest wywoływana, <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> gdy `null` zwraca i tworzony <xref:System.ServiceModel.InstanceContext> jest nowy obiekt. Ta metoda jest wywoływana w celu powiadomienia użytkownika o utworzeniu <xref:System.ServiceModel.InstanceContext> nowej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><see cref="T:System.ServiceModel.InstanceContext" /> Obiekt, który jest traktowany jako bezczynny.</param>
        <summary>Wywołuje się, <see cref="T:System.ServiceModel.InstanceContext" /> gdy wszystkie działania zostały ukończone, aby umożliwić zaimplementowanie, <see cref="T:System.ServiceModel.InstanceContext" /> aby zapobiec ponownemu przetworzeniu.</summary>
        <returns><see langword="true" />Jeśli Windows Communication Foundation (WCF) to zamknięcie i odtwarzanie <see cref="T:System.ServiceModel.InstanceContext" /> obiektu i dostosowanie <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />wartości; w przeciwnym razie, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>jest wywoływana, gdy program WCF zostanie zamknięty i odzyskuje bezczynny <xref:System.ServiceModel.InstanceContext> obiekt, aby można było poinformować środowisko uruchomieniowe o tym, czy kontynuować to działanie.  
  
 Przykład demonstrujący udostępnianie kontekstów wystąpień można znaleźć w temacie [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback">Obiekt, który powiadamia funkcję WCF, <see cref="T:System.ServiceModel.InstanceContext" /> gdy obiekt ma zostać zamknięty i ponownie przetworzony. <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /></param>
        <param name="instanceContext">Bieżący <see cref="T:System.ServiceModel.InstanceContext" />.</param>
        <summary>Wywołuje się, <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> gdy metoda <see langword="false" /> zwraca, aby umożliwić realizatorom zadawanie wywołania zwrotnego <see cref="T:System.ServiceModel.InstanceContext" /> w celu powiadomienia WCF po zakończeniu obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `false` <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> <xref:System.ServiceModel.InstanceContext> Metoda jest wywoływana, <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> gdy metoda zwraca wartość, aby umożliwić programowi WCF za pomocą obiektu, który jest używany do informowania środowiska uruchomieniowego o zakończeniu pracy. <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> Gdy obiekt powiadamia środowisko uruchomieniowe, <xref:System.ServiceModel.InstanceContext> że zakończył pracę, funkcja WCF ponownie <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> wywołuje program. <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> Ten cykl jest kontynuowany `true` do momentu <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> powracania, a kontekst zostanie zamknięty i ponownie przetworzony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
