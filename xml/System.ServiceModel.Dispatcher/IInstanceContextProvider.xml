<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="679c5-101">Implementowanie należeć Tworzenie lub wybieranie z <see cref="T:System.ServiceModel.InstanceContext" /> obiektu, szczególnie w celu włączenia udostępnionych sesji.</span><span class="sxs-lookup"><span data-stu-id="679c5-101">Implement to participate in the creation or choosing of a <see cref="T:System.ServiceModel.InstanceContext" /> object, especially to enable shared sessions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="679c5-102">Implementowanie <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interfejsu, aby zapewnić odpowiednią <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> obiektu w systemie.</span><span class="sxs-lookup"><span data-stu-id="679c5-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interface to provide the appropriate <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> object to the system.</span></span> <span data-ttu-id="679c5-103">Zazwyczaj ten interfejs jest implementowany obsługuje sesji udostępnionej, Włącz buforowanie wystąpienie usługi, kontrolować okresy istnienia wystąpień usługi lub do grupy kontekstów wśród klientów.</span><span class="sxs-lookup"><span data-stu-id="679c5-103">Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</span></span>  
  
 <span data-ttu-id="679c5-104">Na przykład, aby zaimplementować udostępniania, Wstaw niestandardowego <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> zdecydować, które sesji lub wywołania przez klienta jest skojarzony z którym <xref:System.ServiceModel.InstanceContext> obiektu.</span><span class="sxs-lookup"><span data-stu-id="679c5-104">For example, to implement sharing, insert a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> to decide which session or call from a client is associated with which <xref:System.ServiceModel.InstanceContext> object.</span></span> <span data-ttu-id="679c5-105">Na przykład, który pokazuje udostępnianie konteksty wystąpienia, zobacz [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span><span class="sxs-lookup"><span data-stu-id="679c5-105">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="679c5-106">Gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> zostaną wstawione do [!INCLUDE[indigo1](~/includes/indigo1-md.md)], normalne właściwość, która steruje tworzeniem <xref:System.ServiceModel.InstanceContext> obiektów ( <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> właściwości) nie jest zaznaczone i nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="679c5-106">When an <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> is inserted into [!INCLUDE[indigo1](~/includes/indigo1-md.md)], the normal property that controls the creation of <xref:System.ServiceModel.InstanceContext> objects (the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property) is no longer checked and has no effect.</span></span>  
  
 <span data-ttu-id="679c5-107">Mechanizm bardziej ogólnym, za pomocą którego można zainicjować <xref:System.ServiceModel.InstanceContext> obiekty podczas tworzenia (na przykład, aby dołączyć do każdego niestandardowego rozszerzenia <xref:System.ServiceModel.InstanceContext>) jest <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="679c5-107">A more generic mechanism by which you can initialize <xref:System.ServiceModel.InstanceContext> objects when created (for example, to attach custom extensions to each <xref:System.ServiceModel.InstanceContext>) is the <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="679c5-108">Komunikat przychodzący.</span><span class="sxs-lookup"><span data-stu-id="679c5-108">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="679c5-109">Kanał, który odebrał wiadomość.</span><span class="sxs-lookup"><span data-stu-id="679c5-109">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="679c5-110">Wywołuje się po odebraniu nowego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="679c5-110">Called when a new message is received.</span></span></summary>
        <returns><span data-ttu-id="679c5-111"><see cref="T:System.ServiceModel.InstanceContext" /> Obiekt, który służy do przetwarzania komunikatu; return <see langword="null" /> nakazać WCF, aby utworzyć nową <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="679c5-111">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is used to process the message; return <see langword="null" /> to instruct WCF to create a new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="679c5-112"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> Metoda jest wywoływana, gdy wiadomość zostanie odebrana.</span><span class="sxs-lookup"><span data-stu-id="679c5-112">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> method is called when a message is received.</span></span> <span data-ttu-id="679c5-113">Zwraca <xref:System.ServiceModel.InstanceContext> obiekt chcesz przetworzyć komunikatu lub `null`.</span><span class="sxs-lookup"><span data-stu-id="679c5-113">Return the <xref:System.ServiceModel.InstanceContext> object that you want to process the message, or `null`.</span></span> <span data-ttu-id="679c5-114">W przypadku liczby `null`, WCF tworzy nowy <xref:System.ServiceModel.InstanceContext> obiektu komunikat, a następnie wywołania <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> — metoda.</span><span class="sxs-lookup"><span data-stu-id="679c5-114">In the case of `null`, WCF creates a new <xref:System.ServiceModel.InstanceContext> object for the message and then calls the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> method.</span></span>  
  
 <span data-ttu-id="679c5-115">Jeśli `null`, nowe <xref:System.ServiceModel.InstanceContext> obiektu przechodzi przez system ograniczenia przepustowości i zwiększa liczbę <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="679c5-115">If you return `null`, the new <xref:System.ServiceModel.InstanceContext> object goes through the throttling system and increments the count of <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="679c5-116">Nowe <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="679c5-116">The new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="679c5-117">Komunikat przychodzący.</span><span class="sxs-lookup"><span data-stu-id="679c5-117">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="679c5-118">Kanał, który odebrał wiadomość.</span><span class="sxs-lookup"><span data-stu-id="679c5-118">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="679c5-119">Wywoływane, gdy <see langword="null" /> jest zwracana z <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> metody.</span><span class="sxs-lookup"><span data-stu-id="679c5-119">Called when <see langword="null" /> is returned from the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="679c5-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> wywoływana, gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> zwraca `null` i nowy <xref:System.ServiceModel.InstanceContext> tworzony jest obiekt.</span><span class="sxs-lookup"><span data-stu-id="679c5-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> is called when <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> returns `null` and a new <xref:System.ServiceModel.InstanceContext> object is created.</span></span> <span data-ttu-id="679c5-121">Ta metoda jest wywoływana w celu powiadamiania o który nowy <xref:System.ServiceModel.InstanceContext> został utworzony.</span><span class="sxs-lookup"><span data-stu-id="679c5-121">This method is called to notify you that a new <xref:System.ServiceModel.InstanceContext> has been created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="679c5-122"><see cref="T:System.ServiceModel.InstanceContext" /> Obiekt, który jest uznawany za bezczynności.</span><span class="sxs-lookup"><span data-stu-id="679c5-122">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is considered idle.</span></span></param>
        <summary><span data-ttu-id="679c5-123">Wywoływane, gdy wszystkie <see cref="T:System.ServiceModel.InstanceContext" /> działania została ukończona, aby włączyć implementacji zapobiec <see cref="T:System.ServiceModel.InstanceContext" /> z odtwarzane.</span><span class="sxs-lookup"><span data-stu-id="679c5-123">Called when all <see cref="T:System.ServiceModel.InstanceContext" /> activities have completed to enable implementers to prevent the <see cref="T:System.ServiceModel.InstanceContext" /> from being recycled.</span></span></summary>
        <returns>
          <span data-ttu-id="679c5-124"><see langword="true" /> Jeśli [!INCLUDE[indigo1](~/includes/indigo1-md.md)] jest zamknięcie i Odtwórz <see cref="T:System.ServiceModel.InstanceContext" /> obiektu i dostosować wartość <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="679c5-124"><see langword="true" /> if [!INCLUDE[indigo1](~/includes/indigo1-md.md)] is to close and recycle the <see cref="T:System.ServiceModel.InstanceContext" /> object and adjust the value of <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="679c5-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> jest wywoływane, gdy funkcja WCF została zamknąć, a następnie Odtwórz bezczynności <xref:System.ServiceModel.InstanceContext> obiekt, tak aby środowiska uruchomieniowego można poinformować czy kontynuować w ten sposób.</span><span class="sxs-lookup"><span data-stu-id="679c5-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> is called when WCF is about to close and recycle an idle <xref:System.ServiceModel.InstanceContext> object so that you can inform the runtime whether to continue doing so.</span></span>  
  
 <span data-ttu-id="679c5-126">Na przykład, który pokazuje udostępnianie konteksty wystąpienia, zobacz [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span><span class="sxs-lookup"><span data-stu-id="679c5-126">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="679c5-127"><see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> Obiekt, który powiadamia WCF podczas <see cref="T:System.ServiceModel.InstanceContext" /> obiekt ma zostać zamknięte, a następnie ponownego przetworzenia.</span><span class="sxs-lookup"><span data-stu-id="679c5-127">The <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> object that notifies WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is to be closed and recycled.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="679c5-128">Bieżący <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="679c5-128">The current <see cref="T:System.ServiceModel.InstanceContext" />.</span></span></param>
        <summary><span data-ttu-id="679c5-129">Wywoływane, gdy <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> metoda zwraca <see langword="false" /> umożliwiające implementacji zapewnić, wywołanie zwrotne do powiadamiania WCF podczas <see cref="T:System.ServiceModel.InstanceContext" /> obiektu zostało zakończone.</span><span class="sxs-lookup"><span data-stu-id="679c5-129">Called when the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> method returns <see langword="false" /> to enable implementers to provide a callback to notify WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="679c5-130"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> Metoda jest wywoływana, gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> metoda zwraca `false` umożliwiają zapewnienie WCF z <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> obiektu umożliwia informuje środowiska uruchomieniowego który <xref:System.ServiceModel.InstanceContext> zakończył pracę.</span><span class="sxs-lookup"><span data-stu-id="679c5-130">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> method is called when the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> method returns `false` to enable you to provide WCF with a <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object that you use to inform the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work.</span></span> <span data-ttu-id="679c5-131">Gdy <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> obiektu powiadamia środowiska uruchomieniowego który <xref:System.ServiceModel.InstanceContext> zakończył jego pracy, wywołania WCF <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> ponownie.</span><span class="sxs-lookup"><span data-stu-id="679c5-131">When the <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object notifies the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work, WCF calls <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> once again.</span></span> <span data-ttu-id="679c5-132">Ten cykl będzie wykonywany do momentu <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> zwraca `true` i kontekst zamknięcia i ponownego przetworzenia.</span><span class="sxs-lookup"><span data-stu-id="679c5-132">This cycle continues until <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> returns `true` and the context is closed and recycled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>