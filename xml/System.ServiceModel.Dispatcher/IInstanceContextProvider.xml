<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dcaa3a56791d5905ae0d2dd4a60560f624ad54fb" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34315101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementowanie należeć Tworzenie lub wybieranie z <see cref="T:System.ServiceModel.InstanceContext" /> obiektu, szczególnie w celu włączenia udostępnionych sesji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interfejsu, aby zapewnić odpowiednią <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> obiektu w systemie. Zazwyczaj ten interfejs jest implementowany obsługuje sesji udostępnionej, Włącz buforowanie wystąpienie usługi, kontrolować okresy istnienia wystąpień usługi lub do grupy kontekstów wśród klientów.  
  
 Na przykład, aby zaimplementować udostępniania, Wstaw niestandardowego <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> zdecydować, które sesji lub wywołania przez klienta jest skojarzony z którym <xref:System.ServiceModel.InstanceContext> obiektu. Na przykład, który pokazuje udostępnianie konteksty wystąpienia, zobacz [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
> [!NOTE]
>  Gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> zostanie wstawiony do systemu Windows Communication Foundation (WCF), normalne właściwość, która steruje tworzeniem <xref:System.ServiceModel.InstanceContext> obiektów ( <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> właściwości) nie jest zaznaczone i nie ma wpływu.  
  
 Mechanizm bardziej ogólnym, za pomocą którego można zainicjować <xref:System.ServiceModel.InstanceContext> obiekty podczas tworzenia (na przykład, aby dołączyć do każdego niestandardowego rozszerzenia <xref:System.ServiceModel.InstanceContext>) jest <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat przychodzący.</param>
        <param name="channel">Kanał, który odebrał wiadomość.</param>
        <summary>Wywołuje się po odebraniu nowego komunikatu.</summary>
        <returns>
          <see cref="T:System.ServiceModel.InstanceContext" /> Obiekt, który służy do przetwarzania komunikatu; return <see langword="null" /> nakazać WCF, aby utworzyć nową <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> Metoda jest wywoływana, gdy wiadomość zostanie odebrana. Zwraca <xref:System.ServiceModel.InstanceContext> obiekt chcesz przetworzyć komunikatu lub `null`. W przypadku liczby `null`, WCF tworzy nowy <xref:System.ServiceModel.InstanceContext> obiektu komunikat, a następnie wywołania <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> — metoda.  
  
 Jeśli `null`, nowe <xref:System.ServiceModel.InstanceContext> obiektu przechodzi przez system ograniczenia przepustowości i zwiększa liczbę <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Nowe <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</param>
        <param name="message">Komunikat przychodzący.</param>
        <param name="channel">Kanał, który odebrał wiadomość.</param>
        <summary>Wywoływane, gdy <see langword="null" /> jest zwracana z <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> wywoływana, gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> zwraca `null` i nowy <xref:System.ServiceModel.InstanceContext> tworzony jest obiekt. Ta metoda jest wywoływana w celu powiadamiania o który nowy <xref:System.ServiceModel.InstanceContext> został utworzony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">
          <see cref="T:System.ServiceModel.InstanceContext" /> Obiekt, który jest uznawany za bezczynności.</param>
        <summary>Wywoływane, gdy wszystkie <see cref="T:System.ServiceModel.InstanceContext" /> działania została ukończona, aby włączyć implementacji zapobiec <see cref="T:System.ServiceModel.InstanceContext" /> z odtwarzane.</summary>
        <returns>
          <see langword="true" /> Jeśli Windows Communication Foundation (WCF) jest zamknięcie i Odtwórz <see cref="T:System.ServiceModel.InstanceContext" /> obiektu i dostosować wartość <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> jest wywoływane, gdy funkcja WCF została zamknąć, a następnie Odtwórz bezczynności <xref:System.ServiceModel.InstanceContext> obiekt, tak aby środowiska uruchomieniowego można poinformować czy kontynuować w ten sposób.  
  
 Na przykład, który pokazuje udostępnianie konteksty wystąpienia, zobacz [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> Obiekt, który powiadamia WCF podczas <see cref="T:System.ServiceModel.InstanceContext" /> obiekt ma zostać zamknięte, a następnie ponownego przetworzenia.</param>
        <param name="instanceContext">Bieżący <see cref="T:System.ServiceModel.InstanceContext" />.</param>
        <summary>Wywoływane, gdy <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> metoda zwraca <see langword="false" /> umożliwiające implementacji zapewnić, wywołanie zwrotne do powiadamiania WCF podczas <see cref="T:System.ServiceModel.InstanceContext" /> obiektu zostało zakończone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> Metoda jest wywoływana, gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> metoda zwraca `false` umożliwiają zapewnienie WCF z <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> obiektu umożliwia informuje środowiska uruchomieniowego który <xref:System.ServiceModel.InstanceContext> zakończył pracę. Gdy <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> obiektu powiadamia środowiska uruchomieniowego który <xref:System.ServiceModel.InstanceContext> zakończył jego pracy, wywołania WCF <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> ponownie. Ten cykl będzie wykonywany do momentu <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> zwraca `true` i kontekst zamknięcia i ponownego przetworzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>