<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ff4b074b6c966da50efdc237896ab0ef6b460927" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37455199" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ab216-101">Implementowanie do wzięcia udziału w tworzenie lub wybieranie z <see cref="T:System.ServiceModel.InstanceContext" /> obiektu, szczególnie, aby włączyć udostępnionej sesji.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ab216-101">Implement to participate in the creation or choosing of a <see cref="T:System.ServiceModel.InstanceContext" /> object, especially to enable shared sessions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab216-102">Implementowanie <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interfejsu, aby zapewnić odpowiednie <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> obiektu do systemu.</span><span class="sxs-lookup"><span data-stu-id="ab216-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interface to provide the appropriate <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> object to the system.</span></span> <span data-ttu-id="ab216-103">Zazwyczaj ten interfejs jest implementowany do obsługi udostępnionych sesji, Włącz buforowanie wystąpienie usługi, kontrolować okresy istnienia wystąpień usługi lub do grupy kontekstów wśród klientów.</span><span class="sxs-lookup"><span data-stu-id="ab216-103">Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</span></span>  
  
 <span data-ttu-id="ab216-104">Na przykład, aby zaimplementować, udostępnianie, Wstaw niestandardowy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> podjęcie decyzji, którego sesja lub wywołania przez klienta jest skojarzony z którym <xref:System.ServiceModel.InstanceContext> obiektu.</span><span class="sxs-lookup"><span data-stu-id="ab216-104">For example, to implement sharing, insert a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> to decide which session or call from a client is associated with which <xref:System.ServiceModel.InstanceContext> object.</span></span> <span data-ttu-id="ab216-105">Na przykład demonstrujący, udostępnianie konteksty wystąpienia zobacz [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span><span class="sxs-lookup"><span data-stu-id="ab216-105">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ab216-106">Gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> jest wstawiany do Windows Communication Foundation (WCF), normalne właściwość, która steruje tworzeniem <xref:System.ServiceModel.InstanceContext> obiektów ( <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> właściwości) nie jest zaznaczone, a nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="ab216-106">When an <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> is inserted into Windows Communication Foundation (WCF), the normal property that controls the creation of <xref:System.ServiceModel.InstanceContext> objects (the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property) is no longer checked and has no effect.</span></span>  
  
 <span data-ttu-id="ab216-107">Bardziej ogólny mechanizm, za pomocą którego można zainicjować <xref:System.ServiceModel.InstanceContext> obiektów podczas tworzenia (na przykład, można dołączyć rozszerzenia niestandardowe do każdego <xref:System.ServiceModel.InstanceContext>) jest <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ab216-107">A more generic mechanism by which you can initialize <xref:System.ServiceModel.InstanceContext> objects when created (for example, to attach custom extensions to each <xref:System.ServiceModel.InstanceContext>) is the <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="ab216-108">Wiadomości przychodzącej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-108">The incoming message.</span>
          </span>
        </param>
        <param name="channel">
          <span data-ttu-id="ab216-109">Kanał, który otrzymał komunikat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-109">The channel that received the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab216-110">Wywołuje się, gdy nowa wiadomość zostanie odebrana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-110">Called when a new message is received.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab216-111">
            <see cref="T:System.ServiceModel.InstanceContext" /> Obiekt, który zostanie użyty do przetwarzania wiadomości; return <see langword="null" /> nakazać WCF, aby utworzyć nowy <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-111">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is used to process the message; return <see langword="null" /> to instruct WCF to create a new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab216-112"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> Metoda jest wywoływana, gdy wiadomość zostaje odebrana.</span><span class="sxs-lookup"><span data-stu-id="ab216-112">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> method is called when a message is received.</span></span> <span data-ttu-id="ab216-113">Zwróć <xref:System.ServiceModel.InstanceContext> obiektu chcesz przetworzyć komunikatu, lub `null`.</span><span class="sxs-lookup"><span data-stu-id="ab216-113">Return the <xref:System.ServiceModel.InstanceContext> object that you want to process the message, or `null`.</span></span> <span data-ttu-id="ab216-114">W przypadku właściwości `null`, WCF, tworzy nową <xref:System.ServiceModel.InstanceContext> obiektu dla wiadomości, a następnie wywołania <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ab216-114">In the case of `null`, WCF creates a new <xref:System.ServiceModel.InstanceContext> object for the message and then calls the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> method.</span></span>  
  
 <span data-ttu-id="ab216-115">Po powrocie `null`, nowe <xref:System.ServiceModel.InstanceContext> obiekt przechodzi przez system ograniczenia przepustowości i zwiększa liczbę <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ab216-115">If you return `null`, the new <xref:System.ServiceModel.InstanceContext> object goes through the throttling system and increments the count of <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext">
          <span data-ttu-id="ab216-116">Nowy <see cref="T:System.ServiceModel.InstanceContext" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-116">The new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="ab216-117">Wiadomości przychodzącej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-117">The incoming message.</span>
          </span>
        </param>
        <param name="channel">
          <span data-ttu-id="ab216-118">Kanał, który otrzymał komunikat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-118">The channel that received the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab216-119">Wywoływane, gdy <see langword="null" /> jest zwracana z <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-119">Called when <see langword="null" /> is returned from the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab216-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> jest wywoływana, gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> zwraca `null` i nowe <xref:System.ServiceModel.InstanceContext> obiekt zostanie utworzony.</span><span class="sxs-lookup"><span data-stu-id="ab216-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> is called when <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> returns `null` and a new <xref:System.ServiceModel.InstanceContext> object is created.</span></span> <span data-ttu-id="ab216-121">Ta metoda jest wywoływana, aby otrzymywać powiadomienia, że nowy <xref:System.ServiceModel.InstanceContext> została utworzona.</span><span class="sxs-lookup"><span data-stu-id="ab216-121">This method is called to notify you that a new <xref:System.ServiceModel.InstanceContext> has been created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">
          <span data-ttu-id="ab216-122">
            <see cref="T:System.ServiceModel.InstanceContext" /> Obiektu, który jest uważany za bezczynności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-122">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is considered idle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab216-123">Wywoływane, gdy wszystkie <see cref="T:System.ServiceModel.InstanceContext" /> działania zostały wykonane na umożliwiają implementacje zapobiec <see cref="T:System.ServiceModel.InstanceContext" /> z odtwarzania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-123">Called when all <see cref="T:System.ServiceModel.InstanceContext" /> activities have completed to enable implementers to prevent the <see cref="T:System.ServiceModel.InstanceContext" /> from being recycled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab216-124">
            <see langword="true" /> czy Windows Communication Foundation (WCF), zamknij i Odtwórz <see cref="T:System.ServiceModel.InstanceContext" /> obiektu i Dostosuj wartość <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-124">
              <see langword="true" /> if Windows Communication Foundation (WCF) is to close and recycle the <see cref="T:System.ServiceModel.InstanceContext" /> object and adjust the value of <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab216-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> jest wywoływana, gdy WCF się zamknięcie i Odtwórz bezczynności <xref:System.ServiceModel.InstanceContext> obiekt środowiska uruchomieniowego mogą informować czy kontynuować ten sposób.</span><span class="sxs-lookup"><span data-stu-id="ab216-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> is called when WCF is about to close and recycle an idle <xref:System.ServiceModel.InstanceContext> object so that you can inform the runtime whether to continue doing so.</span></span>  
  
 <span data-ttu-id="ab216-126">Na przykład demonstrujący, udostępnianie konteksty wystąpienia zobacz [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span><span class="sxs-lookup"><span data-stu-id="ab216-126">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="ab216-127">
            <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> Obiekt, który powiadamia WCF podczas <see cref="T:System.ServiceModel.InstanceContext" /> obiekt jest zamknięty i odtwarzania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-127">The <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> object that notifies WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is to be closed and recycled.</span>
          </span>
        </param>
        <param name="instanceContext">
          <span data-ttu-id="ab216-128">Bieżący <see cref="T:System.ServiceModel.InstanceContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-128">The current <see cref="T:System.ServiceModel.InstanceContext" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab216-129">Wywoływane, gdy <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> metoda zwraca <see langword="false" /> umożliwiające implementacje wykonać wywołanie zwrotne w celu powiadomienia usługi WCF podczas <see cref="T:System.ServiceModel.InstanceContext" /> obiektu jest ukończona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab216-129">Called when the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> method returns <see langword="false" /> to enable implementers to provide a callback to notify WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab216-130"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> Metoda jest wywoływana, gdy <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> metoda zwraca `false` umożliwiają zapewnienie WCF za pomocą <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> obiekt umożliwia informują środowisko uruchomieniowe, <xref:System.ServiceModel.InstanceContext> zakończył pracę.</span><span class="sxs-lookup"><span data-stu-id="ab216-130">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> method is called when the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> method returns `false` to enable you to provide WCF with a <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object that you use to inform the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work.</span></span> <span data-ttu-id="ab216-131">Gdy <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> obiektu powiadamia środowiska uruchomieniowego, <xref:System.ServiceModel.InstanceContext> zakończył swojej pracy, wywołania WCF <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> jeszcze raz.</span><span class="sxs-lookup"><span data-stu-id="ab216-131">When the <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object notifies the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work, WCF calls <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> once again.</span></span> <span data-ttu-id="ab216-132">Ten cykl jest powtarzany do momentu <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> zwraca `true` i kontekst jest zamknięty i odtwarzania.</span><span class="sxs-lookup"><span data-stu-id="ab216-132">This cycle continues until <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> returns `true` and the context is closed and recycled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>