<Type Name="MessageFilter" FullName="System.ServiceModel.Dispatcher.MessageFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="44fa6f6bb564bb469186db822d7d73979753126e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30576109" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageFilter abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="abstract" /> Klasa podstawowa dla różnych klas filtry używane do wiadomości zapytania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.MessageFilter> jest `abstract` klasy które implementują deweloperzy celu Określ kryteria używane do sprawdzania wiadomości. Zazwyczaj filtry są używane przez punkt końcowy aplikacji do określenia, jakie z komunikatu na podstawie badania niektórych części wiadomości. Proces kolejkowania, na przykład można użyć zapytania XPath 1.0 do sprawdzenia elementu priority znane nagłówka do ustalenia, czy można przenieść komunikatu z przodu kolejki.  
  
 Filtry są przechowywane w tabeli filtr, który implementuje <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>. Każdy filtr w tabeli jest skojarzony z danymi określony filtr, który może służyć wskaż, jakie akcje do wykonania, jeśli komunikat jest zgodny z filtrem. <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> Metody są używane do określania, jeśli wiadomość ma spełnia filtru.  
  
 Nie można zmienić kryteria używane w filtrze, gdy filtr jest tworzony, ponieważ tabele filtru nie ma możliwości wykrywa zmian. Jedynym sposobem, aby zmodyfikować kryteria filtru jest utworzyć nowy i usuń istniejący filtr.  
  
 Następujące klasy wdrożenie `abstract` <xref:System.ServiceModel.Dispatcher.MessageFilter> klasy:  
  
-   <xref:System.ServiceModel.Dispatcher.XPathMessageFilter> wyrażenie XPath 1.0 nawiązywał Określ kryteria pod kątem dopasowania.  
  
-   <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> Dopasowuje wszystkie komunikaty.  
  
-   <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> odpowiada żadna wiadomość.  
  
-   <xref:System.ServiceModel.Dispatcher.ActionMessageFilter> sprawdza, czy akcja komunikatu jest jednym z określonego zestawu działań.  
  
-   <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> sprawdza, czy wiadomość spełnia adres określony punkt końcowy.  
  
 <xref:System.ServiceModel.Channels.ChannelListenerBase%601> jest `abstract` podstawowa klasa, która służy do pisania-kolejkowania odbiorników.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Wywołanego w klasie pochodnej inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor jest chroniony tak, aby tylko filtry pochodzi od <xref:System.ServiceModel.Dispatcher.MessageFilter> można utworzyć wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; virtual System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">Dane skojarzone z filtry w tabeli.</typeparam>
        <summary>Tworzy tabelę filtru dla filtru, który ma określony typ danych skojarzonych z nim.</summary>
        <returns>
          <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> Obiektu, do których filtrów skojarzonych z <paramref name="FilterData" /> do dodania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przeznaczona do wywoływania <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>. Użytkownikom należy utworzyć tabelę filtru przez wywołanie konstruktora dla tabeli filtrów. Domyślna implementacja tej metody zwraca tabelę filtru, który wywołuje <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> metody każdego filtru sekwencyjnie. Zastępuje tę metodę, aby skojarzyć tabeli niestandardowy filtr podczas implementowania filtr.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, sprawdza, czy buforowanego wiadomości lub wiadomości nie będzie spełniał kryteriów filtru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to różnica między dwa przeciążenia jedną przyjmuje <xref:System.ServiceModel.Channels.Message> parametru i nie można zbadać treści. Inne przyjmuje <xref:System.ServiceModel.Channels.MessageBuffer> parametru i można sprawdzić wszystkie części komunikatu. Nagłówki komunikatów są automatycznie buforowane i mogą być kontrolowane przez filtr nie są używane. Zniszczone, ale jeśli treść ma być kontrolowane przez filtr, a następnie cały komunikat musi być buforowane, ponieważ treść komunikatu Niebuforowane może być zużyte przez zapytanie i jego zawartość.  
  
 Użyj <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> Jeśli badania treści nie jest wymagana. Użyj <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> Jeśli treść jest wymagana.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Null" /> wiadomości są nieprawidłowe i powinno powodować <see cref="T:System.ArgumentNullException" /> zostanie wygenerowany.</para>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.ServiceModel.Channels.Message" /> Obiektu do testowania.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, sprawdzenie, czy wiadomość spełnia kryteria filtrowania. Nie można zbadać treści.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.ServiceModel.Channels.Message" /> obiektu spełnia kryteria filtru; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie może sprawdzić zawartość treści wiadomości.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli filtr próbuje sprawdzić treści wiadomości Niebuforowane, a następnie filtr musi zgłosić <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />. Nie może zwracać <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (buffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> Obiektu do testowania.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, sprawdza, czy buforowanego wiadomości nie będzie spełniał kryteriów filtru.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> obiektu spełnia kryteria filtru; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiadomość musi w pełni buforowane, jeśli treść jest poddanych przez filtr. Treść <xref:System.ServiceModel.Channels.MessageBuffer> jest w pełni buforowane i mogą być kontrolowane przez filtr. Treść <xref:System.ServiceModel.Channels.Message> została pełni buforowane mogą być używane przez filtr inspekcji. Element nagłówka <xref:System.ServiceModel.Channels.Message> są automatycznie buforowane i mogą być kontrolowane nie są używane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>