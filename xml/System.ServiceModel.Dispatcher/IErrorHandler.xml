<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a2285d06910f16471e7937c8b9a352ed5e89fdf3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69235869" /></Metadata><TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Umożliwia programowi implementującemu sterowanie komunikatem o błędzie zwróconym do obiektu wywołującego i opcjonalnie wykonywanie niestandardowego przetwarzania błędów, takiego jak rejestrowanie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby jawnie kontrolować zachowanie aplikacji w przypadku zgłoszenia wyjątku, zaimplementuj <xref:System.ServiceModel.Dispatcher.IErrorHandler> interfejs i dodaj go <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> właściwości. <xref:System.ServiceModel.Dispatcher.IErrorHandler>umożliwia jawną kontrolę wygenerowanego błędu protokołu SOAP, podjęcie decyzji o tym, czy należy wysłać ją z powrotem do klienta i wykonać powiązane zadania, takie jak rejestrowanie. Procedury obsługi błędów są wywoływane w kolejności, w jakiej zostały dodane do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> właściwości.  
  
 Zaimplementuj <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> metodę w celu sterowania komunikatem o błędzie, który jest zwracany do klienta.  
  
 Zaimplementuj <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> metodę w celu zapewnienia zachowania związanego z błędami, w tym rejestrowania błędów, zapewniającego szybką pracę, zamykając aplikację i tak dalej.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Ponieważ metoda może być wywoływana z wielu różnych miejsc, nie są wykonywane żadne gwarancje dotyczące tego wątku, w którym wywoływana jest metoda. Nie zależą od <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> metody wywoływanej w wątku operacji.  
  
 Przed <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> wysłaniem komunikatu odpowiedzi należy najpierw wywołać wszystkie implementacje. Gdy wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementacje zostały wywołane i zwrócone, a `fault` Jeśli`null`nie, są wysyłane z powrotem do klienta zgodnie z umową operacji. Jeśli `fault` <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> jest `null` po wywołaniu wszystkich implementacji, komunikat odpowiedzi jest kontrolowany przez wartość właściwości.  
  
> [!NOTE]
>  Wyjątki mogą wystąpić po wywołaniu <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> wszystkich implementacji, a komunikat odpowiedzi jest przekazywany do kanału. W przypadku wystąpienia wyjątku kanału (na przykład problemy z serializowaniem komunikatu) <xref:System.ServiceModel.Dispatcher.IErrorHandler> są powiadamiane. W takim przypadku należy nadal upewnić się, że środowisko programistyczne przechwytuje i wyświetla takie wyjątki, lub korzysta z śledzenia w celu odnalezienia problemu. Aby uzyskać więcej informacji na temat śledzenia, zobacz [Używanie śledzenia w celu rozwiązywania problemów z aplikacją](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md).  
  
 Po wysłaniu komunikatu odpowiedzi wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> implementacje są wywoływane w tej samej kolejności.  
  
 Zazwyczaj implementacja jest dodawana <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> do właściwości w usłudze (a klient w przypadku komunikacji dwukierunkowej). <xref:System.ServiceModel.Dispatcher.IErrorHandler>  
  
 Można <xref:System.ServiceModel.Dispatcher.IErrorHandler> dodać do środowiska uruchomieniowego, implementując zachowanie ( <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>lub <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> obiekt) i programowo użyć zachowania, z pliku konfiguracji lub z atrybutem niestandardowym w celu dołączenia Twoje <xref:System.ServiceModel.Dispatcher.IErrorHandler>.  
  
 Aby uzyskać więcej informacji o używaniu zachowań do modyfikowania środowiska uruchomieniowego, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje usługę, która implementuje <xref:System.ServiceModel.Dispatcher.IErrorHandler> , która zwraca tylko <xref:System.ServiceModel.FaultException%601> typ `GreetingFault` , gdy metoda usługi zgłasza wyjątek zarządzany.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Poniższy przykład kodu pokazuje, <xref:System.ServiceModel.Dispatcher.IErrorHandler> jak dodać implementację <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> do właściwości przy użyciu zachowania usługi.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Poniższy przykład kodu pokazuje, jak skonfigurować usługę do ładowania zachowania usługi za pomocą pliku konfiguracji aplikacji. Aby uzyskać więcej informacji na temat sposobu ujawniania zachowania usługi w pliku konfiguracji, zobacz <xref:System.ServiceModel.Description.IServiceBehavior>.  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error">Wyjątek zgłoszony podczas przetwarzania.</param>
        <param name="exception">Wyjątek zgłoszony podczas przetwarzania.</param>
        <summary>Włącza przetwarzanie związane z błędami i zwraca wartość wskazującą, czy Dyspozytor przerywa sesję i kontekst wystąpienia w niektórych przypadkach.</summary>
        <returns><see langword="true" />Jeśli Windows Communication Foundation (WCF) nie powinna przerywać sesji (jeśli istnieje) i kontekstu wystąpienia, jeśli kontekst wystąpienia nie <see cref="F:System.ServiceModel.InstanceContextMode.Single" />jest; <see langword="false" />w przeciwnym razie. Wartość domyślna to <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Użyj metody, aby zaimplementować zachowania związane z błędami, takie jak rejestrowanie błędów, powiadomienia systemowe, zamykanie aplikacji itd. i zwrócić wartość określającą, czy wyjątek został prawidłowo obsłużony.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Ponieważ metoda może być wywoływana z wielu różnych miejsc, nie są wykonywane żadne gwarancje dotyczące tego wątku, w którym wywoływana jest metoda. Nie zależą od <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> metody wywoływanej w wątku operacji.  
  
 Wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementacje są wywoływane. Domyślnie ( `false`gdy wartość zwracana jest), gdy występuje wyjątek, Dyspozytor przerywa każdą sesję i przerywa <xref:System.ServiceModel.InstanceContext> , jeśli <xref:System.ServiceModel.InstanceContextMode> jest coś innego niż <xref:System.ServiceModel.InstanceContextMode.Single>.  Wyjątek jest uznawany za nieobsługiwany i każdy stan jest uznawany za uszkodzony.  
  
 Wróć `true` z<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> , aby uniknąć tego zachowania domyślnego. Jeśli dowolna procedura obsługi `true` błędów zwraca tę funkcję, nakazuje usłudze WCF bezpieczne używanie stanu skojarzonego z żądaniem zakończonym niepowodzeniem.  
  
 Jeśli żadna procedura obsługi błędów `true` nie zwraca <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> z metody, wyjątek jest uznawany za nieobsłużony, a domyślna odpowiedź może być <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> spowodowana przerwaniem i kanałem podczas komunikowania się w kanale sesji lub <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> właściwość nie jest ustawiona na <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>.  
  
 Parametr nie jest nigdy `null` i zawiera obiekt wyjątku, który został zgłoszony. `error`  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje usługę, która implementuje <xref:System.ServiceModel.Dispatcher.IErrorHandler> , która zwraca tylko <xref:System.ServiceModel.FaultException%601> typ `GreetingFault` , gdy metoda usługi zgłasza wyjątek zarządzany.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Poniższy przykład kodu pokazuje, <xref:System.ServiceModel.Dispatcher.IErrorHandler> jak dodać implementację <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> do właściwości przy użyciu zachowania usługi.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Poniższy przykład kodu pokazuje, jak skonfigurować usługę do ładowania zachowania usługi za pomocą pliku konfiguracji aplikacji. Aby uzyskać więcej informacji na temat sposobu ujawniania zachowania usługi w pliku konfiguracji, zobacz <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error"><see cref="T:System.Exception" /> Obiekt zgłoszony w trakcie operacji usługi.</param>
        <param name="exception"><see cref="T:System.Exception" /> Obiekt zgłoszony w trakcie operacji usługi.</param>
        <param name="version">Wersja protokołu SOAP wiadomości.</param>
        <param name="fault"><see cref="T:System.ServiceModel.Channels.Message" /> Obiekt, który jest zwracany do klienta lub usługi, w przypadku dupleksu.</param>
        <summary>Włącza tworzenie niestandardowego <see cref="T:System.ServiceModel.FaultException`1" /> , który jest zwracany z wyjątku w trakcie metody usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> metodę, aby utworzyć niestandardowy komunikat o błędzie, który jest zwracany do klienta.  <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Metoda będzie zawsze wywoływana dla wyjątków, które opuszczają operacje, z wyjątkiem sytuacji, gdy środowisko uruchomieniowe WCF rozpoznaje wyjątek jako szczególnie krytyczny i ponownie generuje wyjątek. Po wywołaniu <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> wszystkich implementacji komunikat o błędzie jest wysyłany z powrotem do klienta (Jeśli `fault` nie jest`null`). Jeśli parametr jest `null` domyślnym błędem, jest wysyłany do klienta. `fault`  
  
> [!NOTE]
>  Komunikat przychodzący, który spowodował błąd przetwarzania, jest dostępny w ramach tej <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> metody z właściwości.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Ponieważ metoda może być wywoływana z wielu różnych miejsc, nie są wykonywane żadne gwarancje dotyczące tego wątku, w którym wywoływana jest metoda. Nie zależą od <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> metody wywoływanej w wątku operacji.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje usługę, która implementuje <xref:System.ServiceModel.Dispatcher.IErrorHandler> , która zwraca tylko <xref:System.ServiceModel.FaultException%601> typ `GreetingFault` , gdy metoda usługi zgłasza wyjątek zarządzany.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Poniższy przykład kodu pokazuje, <xref:System.ServiceModel.Dispatcher.IErrorHandler> jak dodać implementację <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> do właściwości przy użyciu zachowania usługi.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Poniższy przykład kodu pokazuje, jak skonfigurować usługę do ładowania zachowania usługi za pomocą pliku konfiguracji aplikacji. Aby uzyskać więcej informacji na temat sposobu ujawniania zachowania usługi w pliku konfiguracji, zobacz <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
