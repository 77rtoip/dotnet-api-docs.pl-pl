<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5abe47d685a48a50730ead6e4da1cc6da5e45d5e" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/14/2019" /><Meta Name="ms.locfileid" Value="57950502" /></Metadata><TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Umożliwia implementujący kontrolować komunikat o błędzie zwracane do obiektu wywołującego i opcjonalnie wykonać przetwarzanie takich jak rejestrowanie błędów niestandardowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby jawnie kontrolować zachowanie aplikacji, gdy wyjątek jest zgłaszany, należy zaimplementować <xref:System.ServiceModel.Dispatcher.IErrorHandler> interfejsu i dodać go do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>firmy <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> właściwości. <xref:System.ServiceModel.Dispatcher.IErrorHandler> można jawnie kontrolować błąd protokołu SOAP wygenerowane, zdecyduj, czy do wysłania z powrotem do klienta i wykonywania skojarzonych zadań, takich jak rejestrowanie. Błąd procedury obsługi są wywoływane w kolejności, w jakiej zostały dodane do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> właściwości.  
  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> metodę, aby kontrolować komunikat o błędzie, który jest zwracany do klienta.  
  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> metodę, aby upewnić się, błąd związany zachowań, takich jak Błąd rejestrowania, zapewniając niepowodzenie szybkich i zamykanie aplikacji i tak dalej.  
  
> [!NOTE]
>  Ponieważ <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> metoda może być wywoływana z wielu różnych miejsc nie ma żadnych gwarancji dotyczących który wątek metoda jest wywoływana w. Nie są zależne od <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> wywołania metody w wątku operacji.  
  
 Wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementacje są nazywane najpierw przed wysłaniem komunikat odpowiedzi. Gdy wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementacje została wywołana i przywrócić i, jeśli `fault` ma wartość inną niż`null`, są wysyłane do klienta zgodnie z kontrakt operacji. Jeśli `fault` jest `null` po wszystkich implementacjach zostały wywołane, komunikat odpowiedzi jest kontrolowana przez <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> wartości właściwości.  
  
> [!NOTE]
>  Wyjątki mogą wystąpić po wszystkich <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementacje są nazywane i komunikat odpowiedzi jest przekazywany do kanału. Jeśli wystąpi wyjątek kanału (na przykład trudności serializacji wiadomości) <xref:System.ServiceModel.Dispatcher.IErrorHandler> obiekty są powiadamiani. W tym przypadku powinna nadal upewnij się, że środowiska deweloperskiego przechwytuje i wyświetla takie wyjątki lub sprawia, że umożliwia śledzenia odkryć ten problem. Aby uzyskać więcej informacji na temat śledzenia, zobacz [przy użyciu śledzenia do Rozwiązywanie problemów aplikacji](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md).  
  
 Po komunikat odpowiedzi została wysłana, wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> implementacje są wywoływane w tej samej kolejności.  
  
 Zazwyczaj <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementacja jest dodawany do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> właściwości usługi (i na kliencie w przypadku paradygmacie komunikacji).  
  
 Możesz dodać <xref:System.ServiceModel.Dispatcher.IErrorHandler> do środowiska uruchomieniowego, implementując zachowania (albo <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>, lub <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> obiekt) i zachowanie programowo, z pliku konfiguracji lub za pomocą atrybutu niestandardowego do dołączenia Twoje <xref:System.ServiceModel.Dispatcher.IErrorHandler>.  
  
 Aby uzyskać więcej informacji na temat modyfikowania środowiska uruchomieniowego za pomocą zachowań, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje to usługa, która implementuje <xref:System.ServiceModel.Dispatcher.IErrorHandler> zwracającą tylko <xref:System.ServiceModel.FaultException%601> typu `GreetingFault` po metodzie usług zgłasza wyjątków zarządzanych.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Poniższy przykład kodu pokazuje sposób użycia zachowanie usługi, aby dodać <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementacji <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> właściwości.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Poniższy przykład kodu pokazuje, jak skonfigurować usługę, aby załadować zachowanie usługi, za pomocą pliku konfiguracji aplikacji. Aby uzyskać więcej szczegółów na temat sposobu udostępnienia zachowanie usługi, w pliku konfiguracji, zobacz <xref:System.ServiceModel.Description.IServiceBehavior>.  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError error" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error">Zgłoszono wyjątek podczas przetwarzania.</param>
        <param name="exception">Zgłoszono wyjątek podczas przetwarzania.</param>
        <summary>Włącza związane z błędami przetwarzania i zwraca wartość wskazującą, czy Dyspozytor przerywa sesji i kontekst wystąpienia, w niektórych przypadkach.</summary>
        <returns><see langword="true" /> Jeśli Windows Communication Foundation (WCF) nie może przerwać sesji (jeśli istnieje) i wystąpienia kontekstu, jeśli kontekst wystąpienia nie jest <see cref="F:System.ServiceModel.InstanceContextMode.Single" />; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> metodę, aby zaimplementować błąd związany zachowań, takich jak rejestrowanie powiadomień systemowych, zamykanie aplikacji i tak dalej, błędów i zwracają wartość, która określa, czy wyjątek został obsłużony odpowiednio.  
  
> [!NOTE]
>  Ponieważ <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> metoda może być wywoływana z wielu różnych miejsc nie ma żadnych gwarancji dotyczących który wątek metoda jest wywoływana w. Nie są zależne od <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> wywołania metody w wątku operacji.  
  
 Wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementacje są wywoływane. Domyślnie (Jeśli wartość zwracana jest `false`), jeśli występuje wyjątek, Dyspozytor przerywa dowolnej sesji i przerywa <xref:System.ServiceModel.InstanceContext> Jeśli <xref:System.ServiceModel.InstanceContextMode> jest coś innego niż <xref:System.ServiceModel.InstanceContextMode.Single>.  Wyjątek jest wtedy uważany za obsłużony i dowolny stan jest traktowane jako uszkodzony.  
  
 Zwróć `true` z <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> zapobiegające to zachowanie domyślne. Jeśli jakakolwiek Obsługa błędów zwraca `true` informuje WCF, które można bezpiecznie kontynuować korzystanie z stan skojarzony z żądaniem nie powiodło się.  
  
 Jeśli żadna procedura obsługi błędów zwraca `true` z <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> nieobsłużony wyjątek jest uznawany za metody i stosuje domyślną odpowiedź, mogłoby spowodować przerwanie <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> i kanału podczas komunikacji kanału sesji lub <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> nie ustawiono właściwości <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>.  
  
 `error` Nigdy nie jest parametrem `null` i zawiera obiekt wyjątku, który został zgłoszony.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje to usługa, która implementuje <xref:System.ServiceModel.Dispatcher.IErrorHandler> zwracającą tylko <xref:System.ServiceModel.FaultException%601> typu `GreetingFault` po metodzie usług zgłasza wyjątków zarządzanych.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Poniższy przykład kodu pokazuje sposób użycia zachowanie usługi, aby dodać <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementacji <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> właściwości.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Poniższy przykład kodu pokazuje, jak skonfigurować usługę, aby załadować zachowanie usługi, za pomocą pliku konfiguracji aplikacji. Aby uzyskać więcej szczegółów na temat sposobu udostępnienia zachowanie usługi, w pliku konfiguracji, zobacz <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (error, version, fault)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error"><see cref="T:System.Exception" /> Obiektu zgłoszone w trakcie operacji usługi.</param>
        <param name="exception"><see cref="T:System.Exception" /> Obiektu zgłoszone w trakcie operacji usługi.</param>
        <param name="version">Wersja protokołu SOAP wiadomości.</param>
        <param name="fault"><see cref="T:System.ServiceModel.Channels.Message" /> Obiekt, który jest zwracany do klienta lub usługi, w tym przypadku dwukierunkowego.</param>
        <summary>Włącza funkcję tworzenia niestandardowego <see cref="T:System.ServiceModel.FaultException`1" /> , zostanie zwrócony wyjątek w trakcie metody usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> metodę w celu utworzenia komunikatu o błędzie niestandardowej, która jest zwracana do klienta.  <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Zawsze będzie można wywołać metody do obsługi wyjątków, które opuszczają operacje z wyjątkiem sytuacji kiedy środowisko wykonawcze programu WCF rozpoznaje wyjątku, ponieważ jest to szczególnie krytyczny i ponownie zgłasza wyjątek, sama. Gdy wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> o nazwie implementacji, komunikat o błędzie jest wysyłane z powrotem do klienta (Jeśli `fault` ma wartość inną niż`null`). Jeśli `fault` parametr `null` błędów domyślne są wysyłane do klienta.  
  
> [!NOTE]
>  Wiadomości przychodzących, które spowodowały błąd przetwarzania jest dostępna podczas tej metody z <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> właściwości.  
  
> [!NOTE]
>  Ponieważ <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> metoda może być wywoływana z wielu różnych miejsc nie ma żadnych gwarancji dotyczących który wątek metoda jest wywoływana w. Nie są zależne od <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> wywołania metody w wątku operacji.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje to usługa, która implementuje <xref:System.ServiceModel.Dispatcher.IErrorHandler> zwracającą tylko <xref:System.ServiceModel.FaultException%601> typu `GreetingFault` po metodzie usług zgłasza wyjątków zarządzanych.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Poniższy przykład kodu pokazuje sposób użycia zachowanie usługi, aby dodać <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementacji <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> właściwości.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Poniższy przykład kodu pokazuje, jak skonfigurować usługę, aby załadować zachowanie usługi, za pomocą pliku konfiguracji aplikacji. Aby uzyskać więcej szczegółów na temat sposobu udostępnienia zachowanie usługi, w pliku konfiguracji, zobacz <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>