<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IErrorHandler.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9575d09f-9d72-4690-889e-b83c405ca456755073eb4e1f8a13117816e92d7dd127c6ca9ddc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">755073eb4e1f8a13117816e92d7dd127c6ca9ddc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">254e16ae65e82f4aa59360cd8572b36b6b5b2f80</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/05/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.</source>
          <target state="translated">Umożliwia implementujący do kontrolowania komunikat o błędzie zwracany do obiektu wywołującego i opcjonalnie wykonać przetwarzania, takich jak rejestrowanie błędów niestandardowych.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>To explicitly control the behavior of the application when an exception is thrown, implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> interface and add it to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph>’s <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">Jawnie sterowania zachowaniem aplikacji w przypadku jest zwracany wyjątek, należy zaimplementować <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> interfejsu i dodaj go do <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph>w <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> enables you to explicitly control the SOAP fault generated, decide whether to send it back to the client, and perform associated tasks, such as logging.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> Umożliwia jawnie sterowania błędu protokołu SOAP wygenerowane, zdecyduj, czy go wysłać do klienta i wykonywać zadania skojarzone, takie jak rejestrowanie.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Error handlers are called in the order in which they were added to the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">Błąd procedury obsługi są wywoływane w kolejności, w jakiej zostały dodane do <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method to control the fault message that is returned to the client.</source>
          <target state="translated">Implementowanie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> metody kontrolowania komunikat o błędzie, która jest zwracana do klienta.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method to ensure error-related behaviors, including error logging, assuring a fail fast, shutting down the application, and so on.</source>
          <target state="translated">Implementowanie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> metody w celu zapewnienia zachowania związane z błędami Błąd rejestrowania, zapewniając błędu szybkie, zamykanie aplikacji, w tym i tak dalej.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">Ponieważ <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> z wielu różnych miejscach nie ma żadnych gwarancji o który wątek wywołano metodę można wywołać metody.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">Nie są zależne od <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> metody wywoływane w wątku operację.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>All <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations are called first, prior to sending a response message.</source>
          <target state="translated">Wszystkie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementacje są nazywane najpierw przed ich wysłaniem komunikatu odpowiedzi.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>When all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations have been called and return, and if <ph id="ph2">`fault`</ph> is non-<ph id="ph3">`null`</ph>, it is sent back to the client according to the operation contract.</source>
          <target state="translated">Gdy wszystkie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementacje została wywołana i przywrócić i w razie <ph id="ph2">`fault`</ph> ma wartość inną niż<ph id="ph3">`null`</ph>, są wysyłane do klienta zgodnie z kontrakt operacji.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>If <ph id="ph1">`fault`</ph> is <ph id="ph2">`null`</ph> after all implementations have been called, the response message is controlled by the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> property value.</source>
          <target state="translated">Jeśli <ph id="ph1">`fault`</ph> jest <ph id="ph2">`null`</ph> po wywołaniu wszystkich implementacji komunikat odpowiedzi jest kontrolowany przez <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> wartości właściwości.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Exceptions can occur after all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations are called and a response message is handed to the channel.</source>
          <target state="translated">Wyjątki mogą występować po wszystkich <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementacje są nazywane i komunikat odpowiedzi jest przekazywany do kanału.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>If a channel exception occurs (for example, difficulty serializing the message) <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> objects are notified.</source>
          <target state="translated">Jeśli wystąpi wyjątek kanału (na przykład trudności serializacji komunikatu) <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> obiekty są powiadomienia.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>In this case, you should still make sure that your development environment catches and displays such exceptions to you or makes use of tracing to discover the problem.</source>
          <target state="translated">W takim przypadku należy nadal upewnij się, czy środowiska deweloperskiego przechwytuje i wyświetla takie wyjątki sprawia, że użycie śledzenia do odnajdywania problem.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more information about tracing, see <bpt id="p1">[</bpt>Using Tracing to Troubleshoot Your Application<ept id="p1">](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji dotyczących śledzenia, zobacz <bpt id="p1">[</bpt>przy użyciu śledzenie, aby rozwiązać Twoja aplikacja<ept id="p1">](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>After the response message has been sent, all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> implementations are called in the same order.</source>
          <target state="translated">Po odpowiedzi wiadomość została wysłana, wszystkie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> implementacje są nazywane w tej samej kolejności.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Typically, an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation is added to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property on the service (and the client in the case of duplex communication).</source>
          <target state="translated">Zazwyczaj <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementacji jest dodawany do <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> właściwości usługi (i klienta w przypadku komunikacji dupleksowej).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>You can add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> to the runtime by implementing a behavior (either an <ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph> object) and use the behavior programmatically, from a configuration file or with a custom attribute to attach your <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>.</source>
          <target state="translated">Możesz dodać <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> do środowiska wykonawczego zaimplementowanie zachowanie (albo <ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>, lub <ph id="ph5">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph> obiektu) i zachowanie programowo, w pliku konfiguracji lub z atrybutem niestandardowym do dołączenia Twoje <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more information about using behaviors to modify the runtime, see <bpt id="p1">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id="p1">](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat za pomocą zachowań, aby zmodyfikować środowiska uruchomieniowego, zobacz <bpt id="p1">[</bpt>Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań<ept id="p1">](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano to usługa, która implementuje <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> zwracającą tylko <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> typu <ph id="ph3">`GreetingFault`</ph> gdy usługa metodę zarządzanym wyjątku.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak dodać za pomocą zachowanie usługi <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> wykonania <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak skonfigurować usługę załadować zachowanie usługi przy użyciu pliku konfiguracji aplikacji.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji o sposobie ujawnia w pliku konfiguracji zachowania usługi, zobacz <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</source>
          <target state="translated">Umożliwia przetwarzanie związane z błędami i zwraca wartość wskazującą, czy Dyspozytor przerywa sesji i kontekst wystąpienia w niektórych przypadkach.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> should not abort the session (if there is one) and instance context if the instance context is not <ph id="ph3">&lt;see cref="F:System.ServiceModel.InstanceContextMode.Single" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> nie powinny przerwania sesji (jeśli istnieje) i wystąpienia kontekstu, jeśli wystąpienie kontekstu nie jest <ph id="ph3">&lt;see cref="F:System.ServiceModel.InstanceContextMode.Single" /&gt;</ph>; w przeciwnym razie <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method to implement error-related behaviors such as error logging, system notifications, shutting down the application, and so on, and return a value that specifies whether the exception has been handled appropriately.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> metody w celu wykonania powiązane z zachowań, takich jak rejestrowanie powiadomień systemowych, zamykanie aplikacji i tak dalej, błędów i zwraca wartość określającą, czy wyjątek został obsłużony odpowiednio.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">Ponieważ <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> z wielu różnych miejscach nie ma żadnych gwarancji o który wątek wywołano metodę można wywołać metody.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">Nie są zależne od <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> metody wywoływane w wątku operację.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>All <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementations are called.</source>
          <target state="translated">Wszystkie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> są nazywane implementacji.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>By default (when the return value is <ph id="ph1">`false`</ph>), if there is an exception, the dispatcher aborts any session and aborts the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> if the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> is anything other than <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>.</source>
          <target state="translated">Domyślnie (gdy jest zwracana wartość <ph id="ph1">`false`</ph>), w przypadku wyjątku, Dyspozytor przerywa dowolnej sesji i przerywa <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> Jeśli <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> niczego jest inny niż <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The exception is then considered unhandled and any state is considered corrupt.</source>
          <target state="translated">Wyjątek jest on uznany za nieobsługiwany i każdy stan jest uznawany za uszkodzony.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Return <ph id="ph1">`true`</ph> from <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> to prevent this default behavior.</source>
          <target state="translated">Zwraca <ph id="ph1">`true`</ph> z <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> zapobiegające to zachowanie domyślne.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>If any error handler returns <ph id="ph1">`true`</ph> it instructs <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> that it is safe to continue using state associated with the failed request.</source>
          <target state="translated">Jeśli zwróci żadnych program obsługi błędów <ph id="ph1">`true`</ph> zleca <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> bezpiecznego kontynuować korzystanie z stan skojarzony z żądaniem nie powiodło się.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>If no error handler returns <ph id="ph1">`true`</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method the exception is considered unhandled and the default response applies, potentially resulting in an aborted <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> and channel when communicating on a session channel or the <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property is not set to <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Jeśli zwróci błąd obsługi <ph id="ph1">`true`</ph> z <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> nieobsłużony wyjątek jest uznawany za — metoda i stosuje się domyślny może spowodować przerwane <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> i kanału podczas komunikacji kanału sesji lub <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> nie ustawiono właściwości <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The <ph id="ph1">`error`</ph> parameter is never <ph id="ph2">`null`</ph> and contains the exception object that was thrown.</source>
          <target state="translated"><ph id="ph1">`error`</ph> Nigdy nie jest parametr <ph id="ph2">`null`</ph> i zawiera obiekt wyjątku, który został zgłoszony.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano to usługa, która implementuje <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> zwracającą tylko <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> typu <ph id="ph3">`GreetingFault`</ph> gdy usługa metodę zarządzanym wyjątku.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak dodać za pomocą zachowanie usługi <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> wykonania <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak skonfigurować usługę załadować zachowanie usługi przy użyciu pliku konfiguracji aplikacji.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji o sposobie ujawnia w pliku konfiguracji zachowania usługi, zobacz <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The SOAP version of the message.</source>
          <target state="translated">Wersja protokołu SOAP wiadomości.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> object that is returned to the client, or service, in the duplex case.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> Obiektu, która jest zwracana do klienta lub usługi, w przypadku dupleksowych.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Enables the creation of a custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultException`1" /&gt;</ph> that is returned from an exception in the course of a service method.</source>
          <target state="translated">Umożliwia tworzenie niestandardowego <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultException`1" /&gt;</ph> który zostanie zwrócony wyjątek w trakcie metody usługi.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method to create a custom fault message that is returned to the client.</source>
          <target state="translated">Implementowanie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> metodę w celu utworzenia komunikat o błędzie niestandardowej, która jest zwracana do klienta.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method will always be called for exceptions that leave operations, except when the WCF runtime recognizes the exception as especially fatal and rethrows the exception itself.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> — Metoda będzie zawsze wywoływany dla wyjątków, które opuszczają operacji, z wyjątkiem podczas obsługi WCF rozpoznaje wyjątek jako szczególnie krytyczny i ponownie zgłasza wyjątek, sama.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>When all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations have been called, the fault message is sent back to the client (if <ph id="ph2">`fault`</ph> is non-<ph id="ph3">`null`</ph>).</source>
          <target state="translated">Gdy wszystkie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> o nazwie implementacji, komunikat o błędzie zostanie wysłany do klienta (Jeśli <ph id="ph2">`fault`</ph> ma wartość inną niż<ph id="ph3">`null`</ph>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>If the <ph id="ph1">`fault`</ph> parameter is <ph id="ph2">`null`</ph> the default fault is sent to the client.</source>
          <target state="translated">Jeśli <ph id="ph1">`fault`</ph> parametr jest <ph id="ph2">`null`</ph> błędów domyślne są wysyłane do klienta.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The inbound message that caused the processing error is available during this method from the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Wiadomości przychodzących, który spowodował błąd przetwarzania jest dostępny w tej metody z <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">Ponieważ <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> z wielu różnych miejscach nie ma żadnych gwarancji o który wątek wywołano metodę można wywołać metody.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">Nie są zależne od <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> metody wywoływane w wątku operację.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano to usługa, która implementuje <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> zwracającą tylko <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> typu <ph id="ph3">`GreetingFault`</ph> gdy usługa metodę zarządzanym wyjątku.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak dodać za pomocą zachowanie usługi <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> wykonania <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak skonfigurować usługę załadować zachowanie usługi przy użyciu pliku konfiguracji aplikacji.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji o sposobie ujawnia w pliku konfiguracji zachowania usługi, zobacz <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>