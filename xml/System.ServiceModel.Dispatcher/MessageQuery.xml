<Type Name="MessageQuery" FullName="System.ServiceModel.Dispatcher.MessageQuery">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8c2335e5b4ce6e80db3864d47a3e8bde2a996065" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69104563" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageQuery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageQuery extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageQuery" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageQuery" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQuery abstract" />
  <TypeSignature Language="F#" Value="type MessageQuery = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje podstawowe zachowanie klas używanych do wyszukiwania określonych skorelowanych danych w komunikacie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa jest podobna <xref:System.ServiceModel.Dispatcher.MessageFilter> do klasy. <xref:System.ServiceModel.Dispatcher.MessageQuery>  Jednak zamiast zwracać dopasowania, <xref:System.ServiceModel.Dispatcher.MessageQuery.Evaluate%2A> Metoda zwraca wyniki szacowania zapytania względem komunikatu. Wynik zapytania jest wartością w komunikacie. Użyj wartości jako klucza do skorelowania komunikatu z innymi komunikatami. Aby dodać nową właściwość dla danych, użyj <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty.Add%2A> metody <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty> klasy.  
  
> [!NOTE]
>  W przypadku konkretnej implementacji <xref:System.ServiceModel.Dispatcher.MessageQuery>, <xref:System.ServiceModel.XPathMessageQuery> zobacz Klasa.  
  
## <a name="using-the-xpathmessagequery-and-messagequerycollection-classes"></a>Korzystanie z klas XPathMessageQuery i MessageQueryCollection  
 Możesz zoptymalizować proces zapytania, tworząc zestaw obiektów zapytań i wstawiając je do wystąpienia <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> klasy.  
  
> [!NOTE]
>  W przypadku konkretnej implementacji <xref:System.ServiceModel.Dispatcher.MessageQueryCollection>, <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> zobacz Klasa.  
  
 Typowym użyciem jest wypełnienie kolekcji kwerendami, które mają ten sam predykat XPath, ale różnią się tylko w końcowej wartości liścia. Na przykład następujące zapytania XPath są identyczne z wyjątkiem klauzuli końcowej. Pierwsze zapytanie dla wszystkich elementów, które mają atrybut ilości ustawiony na 1, a drugie zapytania dla elementów z atrybutem produktu ustawionym na "contoso"):  
  
```  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@quantity = 1]"  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@product = 'Contoso']"  
```  
  
 <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> Klasa umożliwia tworzenie tabel zapytań, które różnią się tylko nieznacznie i umożliwiają wydajniejsze przetwarzanie.  
  
 Alternatywnie można użyć <xref:System.ServiceModel.Dispatcher.MessageQueryTable%601> klasy do przechowywania i szacowania kwerend komunikatów.  
  
   
  
## Examples  
 Poniższy przykład tworzy komunikat i zapytania dotyczące komunikatów XPath. Zapytania są oceniane przez <xref:System.ServiceModel.XPathMessageQuery> obiekty zawarte <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> w obiekcie. Wyniki każdego zapytania są testowane przy użyciu <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> właściwości <xref:System.ServiceModel.Dispatcher.XPathResult> klasy.  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.XPathMessageQuery" />
    <altmember cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathResult" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageQuery();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.Dispatcher.MessageQuery" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageQueryCollection">
      <MemberSignature Language="C#" Value="public virtual System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.CreateMessageQueryCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageQueryCollection () As MessageQueryCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ServiceModel::Dispatcher::MessageQueryCollection ^ CreateMessageQueryCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageQueryCollection : unit -&gt; System.ServiceModel.Dispatcher.MessageQueryCollection&#xA;override this.CreateMessageQueryCollection : unit -&gt; System.ServiceModel.Dispatcher.MessageQueryCollection" Usage="messageQuery.CreateMessageQueryCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.MessageQueryCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kolekcję zapytań, które zwracają określony typ danych, z którymi są skojarzone.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />Kolekcja zapytań skojarzonych z typem danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przeznaczona do użycia przez <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> klasę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Evaluate&lt;TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, uruchamia zapytanie względem komunikatu i zwraca wartość, która spełnia kryteria zapytania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Różnica między dwoma przeciążeniami polega na tym, że jeden <xref:System.ServiceModel.Channels.Message> pobiera parametr i nie może przeanalizować treści, a druga <xref:System.ServiceModel.Channels.MessageBuffer> przyjmuje parametr i może analizować każdą część komunikatu. Nagłówki wiadomości są automatycznie buforowane i mogą być wysyłane do nich bez użycia. Jeśli jednak treść ma być wysyłana do zapytania, cała wiadomość musi być buforowana, ponieważ zapytanie może być wykorzystane w postaci niebuforowanej treści komunikatu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.ServiceModel.Channels.Message -&gt; 'Result" Usage="messageQuery.Evaluate message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Typ wartości, która ma zostać zwrócona.</typeparam>
        <param name="message">Komunikat do zapytania.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, uruchamia zapytanie względem komunikatu i zwraca wynik. Nie można wykonać zapytania o treść.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
Wyliczalna kolekcja wyników, które spełniają kryteria zapytania.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Evaluate(Of TResult) (buffer As MessageBuffer) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.ServiceModel.Channels.MessageBuffer -&gt; 'Result" Usage="messageQuery.Evaluate buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Typ obiektu do zwrócenia.</typeparam>
        <param name="buffer">Komunikat do zapytania.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, uruchamia zapytanie względem komunikatu i zwraca wynik.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
Wyliczalna kolekcja wyników, które spełniają kryteria zapytania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy komunikat i zapytania dotyczące komunikatów XPath. Zapytania są oceniane przez <xref:System.ServiceModel.XPathMessageQuery> obiekty zawarte <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> w obiekcie. Wyniki każdego zapytania są testowane przy użyciu <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> właściwości <xref:System.ServiceModel.Dispatcher.XPathResult> klasy.  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
