<Type Name="IInputSessionShutdown" FullName="System.ServiceModel.Dispatcher.IInputSessionShutdown">
  <Metadata><Meta Name="ms.openlocfilehash" Value="42fb29d52ca656354812ec9f3ed889c24c89ab53" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37455160" /></Metadata><TypeSignature Language="C#" Value="public interface IInputSessionShutdown" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputSessionShutdown" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInputSessionShutdown" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputSessionShutdown" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputSessionShutdown" />
  <TypeSignature Language="F#" Value="type IInputSessionShutdown = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d40fc-101">Definiuje kontrakt, który musi zaimplementować tak, aby zamknąć sesję danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="d40fc-101">Defines the contract that must be implemented to shut down an input session.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d40fc-102">Użyj <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown> interfejsu wewnątrz sesji dupleksowej do wysyłania wiadomości wychodzących przed zamknięciem sesji.</span><span class="sxs-lookup"><span data-stu-id="d40fc-102">Use the <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown> interface inside a duplex session to send outbound messages prior to closing the session.</span></span> <span data-ttu-id="d40fc-103">Na przykład, jeśli klient zamyka sesję usługi zaimplementować <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown.DoneReceiving%2A> powiadamiania przed zamknięciem włączania usługi do wysłania jednego komunikatu powiadomienia przed zwróceniem wyniku.</span><span class="sxs-lookup"><span data-stu-id="d40fc-103">For example, if a client closes a session the service can implement <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown.DoneReceiving%2A> to be notified prior to the shutdown, enabling the service to send one notification message prior to returning.</span></span> <span data-ttu-id="d40fc-104">Klient odbiera powiadomienie przed potwierdzenie zamknąć kanału klienta.</span><span class="sxs-lookup"><span data-stu-id="d40fc-104">The client receives the notification prior to the acknowledgment that the client can close the channel.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChannelFaulted">
      <MemberSignature Language="C#" Value="public void ChannelFaulted (System.ServiceModel.IDuplexContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChannelFaulted(class System.ServiceModel.IDuplexContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInputSessionShutdown.ChannelFaulted(System.ServiceModel.IDuplexContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChannelFaulted (channel As IDuplexContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChannelFaulted(System::ServiceModel::IDuplexContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member ChannelFaulted : System.ServiceModel.IDuplexContextChannel -&gt; unit" Usage="iInputSessionShutdown.ChannelFaulted channel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IDuplexContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel"><span data-ttu-id="d40fc-105"><see cref="T:System.ServiceModel.IDuplexContextChannel" /> , Wystąpił błąd.</span><span class="sxs-lookup"><span data-stu-id="d40fc-105">The <see cref="T:System.ServiceModel.IDuplexContextChannel" /> that has faulted.</span></span></param>
        <summary><span data-ttu-id="d40fc-106">Wskazuje, że wystąpił błąd kanału.</span><span class="sxs-lookup"><span data-stu-id="d40fc-106">Indicates that the channel has faulted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d40fc-107">Użyj <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown.ChannelFaulted%2A> metodę, aby wykonać niektóre zachowania niestandardowe, gdy wystąpił błąd kanału.</span><span class="sxs-lookup"><span data-stu-id="d40fc-107">Use the <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown.ChannelFaulted%2A> method to perform some custom behavior when a channel has faulted.</span></span> <span data-ttu-id="d40fc-108">Zazwyczaj kanał został przerwany.</span><span class="sxs-lookup"><span data-stu-id="d40fc-108">Typically, the channel is aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoneReceiving">
      <MemberSignature Language="C#" Value="public void DoneReceiving (System.ServiceModel.IDuplexContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoneReceiving(class System.ServiceModel.IDuplexContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInputSessionShutdown.DoneReceiving(System.ServiceModel.IDuplexContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoneReceiving (channel As IDuplexContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoneReceiving(System::ServiceModel::IDuplexContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member DoneReceiving : System.ServiceModel.IDuplexContextChannel -&gt; unit" Usage="iInputSessionShutdown.DoneReceiving channel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IDuplexContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel"><span data-ttu-id="d40fc-109"><see cref="T:System.ServiceModel.Channels.IDuplexSessionChannel" /> Czyli gotowe odbieranie.</span><span class="sxs-lookup"><span data-stu-id="d40fc-109">The <see cref="T:System.ServiceModel.Channels.IDuplexSessionChannel" /> that is done receiving.</span></span></param>
        <summary><span data-ttu-id="d40fc-110">Wskazuje, kiedy kanału klienta odbywa się komunikaty odbierający w ramach wymiany komunikatów dwukierunkowego.</span><span class="sxs-lookup"><span data-stu-id="d40fc-110">Indicates when the client channel is done receiving messages as part of the duplex message exchange.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>