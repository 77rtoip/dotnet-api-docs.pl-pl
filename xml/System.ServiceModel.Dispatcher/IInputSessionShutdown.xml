<Type Name="IInputSessionShutdown" FullName="System.ServiceModel.Dispatcher.IInputSessionShutdown">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="42fb29d52ca656354812ec9f3ed889c24c89ab53" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37455160" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInputSessionShutdown" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputSessionShutdown" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInputSessionShutdown" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputSessionShutdown" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputSessionShutdown" />
  <TypeSignature Language="F#" Value="type IInputSessionShutdown = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje kontrakt, który musi zaimplementować tak, aby zamknąć sesję danych wejściowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown> interfejsu wewnątrz sesji dupleksowej do wysyłania wiadomości wychodzących przed zamknięciem sesji. Na przykład, jeśli klient zamyka sesję usługi zaimplementować <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown.DoneReceiving%2A> powiadamiania przed zamknięciem włączania usługi do wysłania jednego komunikatu powiadomienia przed zwróceniem wyniku. Klient odbiera powiadomienie przed potwierdzenie zamknąć kanału klienta.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChannelFaulted">
      <MemberSignature Language="C#" Value="public void ChannelFaulted (System.ServiceModel.IDuplexContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChannelFaulted(class System.ServiceModel.IDuplexContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInputSessionShutdown.ChannelFaulted(System.ServiceModel.IDuplexContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChannelFaulted (channel As IDuplexContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChannelFaulted(System::ServiceModel::IDuplexContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member ChannelFaulted : System.ServiceModel.IDuplexContextChannel -&gt; unit" Usage="iInputSessionShutdown.ChannelFaulted channel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IDuplexContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel">
          <see cref="T:System.ServiceModel.IDuplexContextChannel" /> , Wystąpił błąd.</param>
        <summary>Wskazuje, że wystąpił błąd kanału.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IInputSessionShutdown.ChannelFaulted%2A> metodę, aby wykonać niektóre zachowania niestandardowe, gdy wystąpił błąd kanału. Zazwyczaj kanał został przerwany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoneReceiving">
      <MemberSignature Language="C#" Value="public void DoneReceiving (System.ServiceModel.IDuplexContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoneReceiving(class System.ServiceModel.IDuplexContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInputSessionShutdown.DoneReceiving(System.ServiceModel.IDuplexContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoneReceiving (channel As IDuplexContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoneReceiving(System::ServiceModel::IDuplexContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member DoneReceiving : System.ServiceModel.IDuplexContextChannel -&gt; unit" Usage="iInputSessionShutdown.DoneReceiving channel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IDuplexContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel">
          <see cref="T:System.ServiceModel.Channels.IDuplexSessionChannel" /> Czyli gotowe odbieranie.</param>
        <summary>Wskazuje, kiedy kanału klienta odbywa się komunikaty odbierający w ramach wymiany komunikatów dwukierunkowego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>