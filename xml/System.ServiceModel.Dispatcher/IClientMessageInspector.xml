<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4476f213b2a7b4491a6eb12ef37c2e817047214d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69150441" /></Metadata><TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientMessageInspector" />
  <TypeSignature Language="F#" Value="type IClientMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="60b40-101">Definiuje obiekt inspektora komunikatów, który można dodać do <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> kolekcji w celu wyświetlania lub modyfikowania komunikatów.</span><span class="sxs-lookup"><span data-stu-id="60b40-101">Defines a message inspector object that can be added to the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> collection to view or modify messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b40-102"><xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> Zaimplementuj <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interfejs i dodaj go do kolekcji, aby sprawdzić lub zmodyfikować komunikaty podczas przekazywania ich przez obiekt klienta WCF.</span><span class="sxs-lookup"><span data-stu-id="60b40-102">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interface and add it to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> collection to inspect or modify messages as they pass through a WCF client object.</span></span> <span data-ttu-id="60b40-103">Aby uzyskać szczegółowe informacje <xref:System.ServiceModel.Dispatcher.ClientRuntime>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="60b40-103">For details, see <xref:System.ServiceModel.Dispatcher.ClientRuntime>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b40-104">Poniższy przykład kodu pokazuje implementację, która zapisuje ciągi do konsoli po wywołaniu implementacji.</span><span class="sxs-lookup"><span data-stu-id="60b40-104">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="60b40-105">Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> do wstawienia inspektora komunikatów klienta w punkcie końcowym klienta.</span><span class="sxs-lookup"><span data-stu-id="60b40-105">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="60b40-106">Poniższy przykład kodu pokazuje, jak zmodyfikować plik konfiguracji klienta, aby używał zachowania punktu końcowego z określonym punktem końcowym.</span><span class="sxs-lookup"><span data-stu-id="60b40-106">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterReceiveReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterReceiveReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveReply :  * obj -&gt; unit" Usage="iClientMessageInspector.AfterReceiveReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="60b40-107">Komunikat, który ma zostać przekształcony w typy i przekazywane z powrotem do aplikacji klienckiej.</span><span class="sxs-lookup"><span data-stu-id="60b40-107">The message to be transformed into types and handed back to the client application.</span></span></param>
        <param name="correlationState"><span data-ttu-id="60b40-108">Dane stanu korelacji.</span><span class="sxs-lookup"><span data-stu-id="60b40-108">Correlation state data.</span></span></param>
        <summary><span data-ttu-id="60b40-109">Umożliwia inspekcję lub modyfikowanie komunikatu po odebraniu komunikatu odpowiedzi, ale przed przekazaniem go z powrotem do aplikacji klienckiej.</span><span class="sxs-lookup"><span data-stu-id="60b40-109">Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b40-110">Zaimplementuj <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> , aby sprawdzić lub zmodyfikować komunikat odpowiedzi po odebraniu go przez obiekt klienta WCF, ale przed jego deserializacji do obiektów, które są zwracane do aplikacji klienckiej.</span><span class="sxs-lookup"><span data-stu-id="60b40-110">Implement <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> to inspect or modify a reply message after it has been received by the WCF client object but before it is deserialized into objects that are returned to the client application.</span></span>  
  
 <span data-ttu-id="60b40-111">Jest obiektem zwracanym przez użytkownika, gdy <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> jest wywoływana dla tego komunikatu. `correlationState`</span><span class="sxs-lookup"><span data-stu-id="60b40-111">The `correlationState` is the object returned by the user when <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> is called for this message.</span></span> <span data-ttu-id="60b40-112">Najlepszym rozwiązaniem jest to <xref:System.Guid?displayProperty=nameWithType> , aby upewnić się, że żadne dwa `correlationState` obiekty nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="60b40-112">The best practice is to make this a <xref:System.Guid?displayProperty=nameWithType> to ensure that no two `correlationState` objects are the same.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b40-113">Poniższy przykład kodu pokazuje implementację, która zapisuje ciągi do konsoli po wywołaniu implementacji.</span><span class="sxs-lookup"><span data-stu-id="60b40-113">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="60b40-114">Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> do wstawienia inspektora komunikatów klienta w punkcie końcowym klienta.</span><span class="sxs-lookup"><span data-stu-id="60b40-114">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="60b40-115">Poniższy przykład kodu pokazuje, jak zmodyfikować plik konfiguracji klienta, aby używał zachowania punktu końcowego z określonym punktem końcowym.</span><span class="sxs-lookup"><span data-stu-id="60b40-115">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeSendRequest (ByRef request As Message, channel As IClientChannel) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeSendRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendRequest :  * System.ServiceModel.IClientChannel -&gt; obj" Usage="iClientMessageInspector.BeforeSendRequest (request, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="60b40-116">Komunikat do wysłania do usługi.</span><span class="sxs-lookup"><span data-stu-id="60b40-116">The message to be sent to the service.</span></span></param>
        <param name="channel"><span data-ttu-id="60b40-117">Kanał obiektu klienta WCF.</span><span class="sxs-lookup"><span data-stu-id="60b40-117">The WCF client object channel.</span></span></param>
        <summary><span data-ttu-id="60b40-118">Umożliwia inspekcję lub modyfikowanie komunikatu przed wysłaniem komunikatu żądania do usługi.</span><span class="sxs-lookup"><span data-stu-id="60b40-118">Enables inspection or modification of a message before a request message is sent to a service.</span></span></summary>
        <returns><span data-ttu-id="60b40-119">Obiekt, który jest zwracany jako <paramref name="correlationState" /> argument <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> metody.</span><span class="sxs-lookup"><span data-stu-id="60b40-119">The object that is returned as the <paramref name="correlationState" /> argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span> <span data-ttu-id="60b40-120">Jest <see langword="null" /> to w przypadku, gdy nie jest używany żaden stan korelacji.</span><span class="sxs-lookup"><span data-stu-id="60b40-120">This is <see langword="null" /> if no correlation state is used.</span></span>  
  
<span data-ttu-id="60b40-121">Najlepszym rozwiązaniem jest to <see cref="T:System.Guid" /> , aby upewnić się, że żadne dwa <paramref name="correlationState" /> obiekty nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="60b40-121">The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two <paramref name="correlationState" /> objects are the same.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b40-122">Zaimplementuj <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> , aby sprawdzić lub zmodyfikować komunikat żądania przed jego wysłaniem.</span><span class="sxs-lookup"><span data-stu-id="60b40-122">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> to inspect or modify a request message before it is sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b40-123">Poniższy przykład kodu pokazuje implementację, która zapisuje ciągi do konsoli po wywołaniu implementacji.</span><span class="sxs-lookup"><span data-stu-id="60b40-123">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="60b40-124">Poniższy przykład kodu pokazuje, jak użyć <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> do wstawienia inspektora komunikatów klienta w punkcie końcowym klienta.</span><span class="sxs-lookup"><span data-stu-id="60b40-124">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="60b40-125">Poniższy przykład kodu pokazuje, jak zmodyfikować plik konfiguracji klienta, aby używał zachowania punktu końcowego z określonym punktem końcowym.</span><span class="sxs-lookup"><span data-stu-id="60b40-125">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
