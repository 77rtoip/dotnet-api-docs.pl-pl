<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ec78df9bc85eae32d8fca7cb3c09ba17dbad6bea" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39945097" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rozszerzanie <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> klasy, aby utworzyć program obsługi wyjątku dla nieobsłużonych wyjątków występujących w ramach środowiska uruchomieniowego Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozszerzanie <xref:System.ServiceModel.Dispatcher.ExceptionHandler> klasy, a także Przesłoń <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metodę pozwala ustalić, czy wyjątek powinien wygasają w aplikacji. Następnie utwórz nowe wystąpienie klasy niestandardowe <xref:System.ServiceModel.Dispatcher.ExceptionHandler> klasy i przypisz je do statycznej <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> lub <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> właściwości przed utworzeniem klienci WCF lub usługi.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia implementację <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstrakcyjna klasa, która zastępuje <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metody.  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 Poniższy przykład kodu pokazuje, jak włączyć niestandardowy `MyExceptionHandler` dla nieobsłużonych wyjątków występujących w ramach środowisko wykonawcze programu WCF.  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wystąpienie elementu <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obsługująca wszystkie wyjątki.</summary>
        <value>
          <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> Obiekt, który zwraca <see langword="true" /> dla wszystkich wyjątków.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementacji dla tej domeny aplikacji.</summary>
        <value>Przypisywanie niestandardowego <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obiekt, który odbiera nieobsługiwane wyjątki, które występują w asynchronicznej wątkach Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> właściwość `null`, i nieobsługiwanych wyjątków w asynchronicznej wątkach WCF zakończyć działanie aplikacji.  Ustaw tę właściwość na <xref:System.ServiceModel.Dispatcher.ExceptionHandler> obiektu do odbierania i reagować na tych wyjątków.  
  
 Jeśli nieobsługiwany wyjątek występuje w asynchronicznego wątku usługi WCF i osiąga ten program obsługi, mogą zostać przejęte stan domeny aplikacji.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> nie powinny zwracać `true` dla tych wyjątków.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Wyjątek wystąpił, w ramach usług Windows Communication Foundation (WCF) środowiska uruchomieniowego, które może zakończyć działanie aplikacji.</param>
        <summary>Po przesłonięciu w klasie pochodnej zwraca <see langword="true" /> Jeśli wyjątek został obsłużony, lub <see langword="false" /> Jeśli wyjątek powinien być zgłaszany ponownie, a aplikacja została zakończona.</summary>
        <returns>
          <see langword="true" /> Jeśli wyjątek został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> Właściwość zwraca `true` Jeśli wyjątek został obsłużony. Jeśli zostanie zwrócona `false` lub inny wyjątek oryginalny wyjątek jest zgłaszany ponownie zgłasza wyjątek.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia implementację <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstrakcyjna klasa, która zastępuje <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metody.  
  
  
  
 Poniższy przykład kodu pokazuje, jak włączyć niestandardowy `MyExceptionHandler` dla nieobsłużonych wyjątków występujących w ramach środowisko wykonawcze programu WCF.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementacji dla tej domeny aplikacji.</summary>
        <value>Niestandardowy <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obiekt, który odbiera nieobsługiwane wyjątki, występujących w ramach globalnego transportów Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> właściwość jest ustawiona na wartość <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, powodując nieobsługiwanych wyjątków w ramach transportów WCF mają być ignorowane.  Ustaw tę właściwość na wystąpienie <xref:System.ServiceModel.Dispatcher.ExceptionHandler> do odbierania i reagować na tych wyjątków.  
  
 Wystąpił nieobsługiwany wyjątek występuje w ramach globalnego transportu WCF i osiąga ten program obsługi, czy istnieje możliwość złamane stan domeny aplikacji. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> może zwracać `false` dla tych wyjątków spowodować, że aplikacja ma zostać zakończony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>