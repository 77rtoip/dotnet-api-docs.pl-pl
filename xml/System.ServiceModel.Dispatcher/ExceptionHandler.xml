<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="086fa-101">Rozszerzanie <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> klasę, aby utworzyć program obsługi wyjątku dla nieobsługiwanych wyjątków, które występują w ramach środowiska wykonawczego systemu Windows Communication Foundation (WCF).</span><span class="sxs-lookup"><span data-stu-id="086fa-101">Extend the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="086fa-102">Rozszerzanie <xref:System.ServiceModel.Dispatcher.ExceptionHandler> klasy i zastąpić <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metodę, aby określić, czy wyjątek powinien zakończyć działanie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="086fa-102">Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application.</span></span> <span data-ttu-id="086fa-103">Następnie utwórz nowe wystąpienie klasy niestandardowe <xref:System.ServiceModel.Dispatcher.ExceptionHandler> klasy i przypisz je do statycznego <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> lub <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> właściwości przed utworzeniem klienci WCF lub usług.</span><span class="sxs-lookup"><span data-stu-id="086fa-103">Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating WCF clients or services.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="086fa-104">Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstrakcyjna klasa, która zastępuje <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="086fa-104">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 <span data-ttu-id="086fa-105">Poniższy przykład kodu pokazuje sposób włączania niestandardowego `MyExceptionHandler` dla nieobsługiwanych wyjątków, które występują w ramach środowiska uruchomieniowego usługi WCF.</span><span class="sxs-lookup"><span data-stu-id="086fa-105">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="086fa-106">Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="086fa-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="086fa-107">Pobiera wystąpienie elementu <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obsługująca wszystkie wyjątki.</span><span class="sxs-lookup"><span data-stu-id="086fa-107">Gets an instance of <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> that handles all exceptions.</span></span></summary>
        <value><span data-ttu-id="086fa-108"><see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> Obiekt, który zwraca <see langword="true" /> wszystkie wyjątki.</span><span class="sxs-lookup"><span data-stu-id="086fa-108">An <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that returns <see langword="true" /> for all exceptions.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="086fa-109">Pobiera lub ustawia bieżący <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementacji dla domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="086fa-109">Gets or sets the current <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span></span></summary>
        <value><span data-ttu-id="086fa-110">Przypisz niestandardowego <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obiekt, który odbiera nieobsługiwanych wyjątków, które występują w asynchronicznej [!INCLUDE[indigo1](~/includes/indigo1-md.md)] wątków.</span><span class="sxs-lookup"><span data-stu-id="086fa-110">Assign a custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur on asynchronous [!INCLUDE[indigo1](~/includes/indigo1-md.md)] threads.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="086fa-111">Domyślnie <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> właściwość jest `null`, i nieobsługiwanych wyjątków na asynchronicznych wątków WCF zakończyć działanie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="086fa-111">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous WCF threads terminate the application.</span></span>  <span data-ttu-id="086fa-112">Ta właściwość jest ustawiana <xref:System.ServiceModel.Dispatcher.ExceptionHandler> obiektu do pobierania i reagowania na tych wyjątków.</span><span class="sxs-lookup"><span data-stu-id="086fa-112">Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="086fa-113">Wystąpił nieobsługiwany wyjątek występuje na asynchronicznego wątku usługi WCF, osiągnie ten program obsługi może być naruszona stan domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="086fa-113">If an unhandled exception occurs on an asynchronous WCF thread and reaches this handler, the state of the application domain may be compromised.</span></span>  <span data-ttu-id="086fa-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> nie może zwracać `true` dla tych wyjątków.</span><span class="sxs-lookup"><span data-stu-id="086fa-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="086fa-115">Wystąpił wyjątek w [!INCLUDE[indigo1](~/includes/indigo1-md.md)] środowiska uruchomieniowego, które może zakończyć działanie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="086fa-115">The exception the occurred within the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] runtime and which may terminate the application.</span></span></param>
        <summary><span data-ttu-id="086fa-116">Po przesłonięciu w klasie pochodnej zwraca <see langword="true" /> Jeśli wyjątek został obsłużony, lub <see langword="false" /> powinien zostać zgłoszony wyjątek, jeśli aplikacja została zakończona.</span><span class="sxs-lookup"><span data-stu-id="086fa-116">When overridden in a derived class, returns <see langword="true" /> if the exception has been handled, or <see langword="false" /> if the exception should be rethrown and the application terminated.</span></span></summary>
        <returns>
          <span data-ttu-id="086fa-117"><see langword="true" /> Jeśli wyjątek został obsłużony; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="086fa-117"><see langword="true" /> if the exception has been handled; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="086fa-118"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> Zwraca `true` Jeśli wyjątek został obsłużony.</span><span class="sxs-lookup"><span data-stu-id="086fa-118">The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled.</span></span> <span data-ttu-id="086fa-119">Jeśli zmienna zwraca `false` lub zgłasza wyjątek różnych, pierwotny wyjątek jest zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="086fa-119">If it returns `false` or throws a different exception, the original exception is rethrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="086fa-120">Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstrakcyjna klasa, która zastępuje <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="086fa-120">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
  
  
 <span data-ttu-id="086fa-121">Poniższy przykład kodu pokazuje sposób włączania niestandardowego `MyExceptionHandler` dla nieobsługiwanych wyjątków, które występują w ramach środowiska uruchomieniowego usługi WCF.</span><span class="sxs-lookup"><span data-stu-id="086fa-121">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="086fa-122">Pobiera lub ustawia bieżący transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementacji dla domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="086fa-122">Gets or sets the current transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span></span></summary>
        <value><span data-ttu-id="086fa-123">Niestandardowy <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obiekt, który odbiera nieobsługiwanych wyjątków, które występują w globalnej [!INCLUDE[indigo1](~/includes/indigo1-md.md)] transportów.</span><span class="sxs-lookup"><span data-stu-id="086fa-123">A custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur within the global [!INCLUDE[indigo1](~/includes/indigo1-md.md)] transports.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="086fa-124">Domyślnie <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> właściwości ustawiono wartość <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, powodując nieobsługiwanych wyjątków w ramach transportu WCF mają być ignorowane.</span><span class="sxs-lookup"><span data-stu-id="086fa-124">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within WCF transports to be ignored.</span></span>  <span data-ttu-id="086fa-125">Ustaw tę właściwość na wystąpienie <xref:System.ServiceModel.Dispatcher.ExceptionHandler> otrzymywanie i reagowania na tych wyjątków.</span><span class="sxs-lookup"><span data-stu-id="086fa-125">Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="086fa-126">Jeśli wystąpił nieobsługiwany wyjątek występuje w ramach globalnego transportu WCF i osiągnie ten program obsługi, istnieje możliwość złamane stan domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="086fa-126">If an unhandled exception occurs within a global WCF transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</span></span> <span data-ttu-id="086fa-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> może zwrócić `false` te wyjątki spowodować, że aplikacja ma być zakończony.</span><span class="sxs-lookup"><span data-stu-id="086fa-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>