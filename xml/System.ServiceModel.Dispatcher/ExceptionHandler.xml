<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71aac6188e9d86d42129e5847fd1f20037bf1552" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36415612" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rozszerzanie <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> klasę, aby utworzyć program obsługi wyjątku dla nieobsługiwanych wyjątków, które występują w ramach środowiska wykonawczego systemu Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozszerzanie <xref:System.ServiceModel.Dispatcher.ExceptionHandler> klasy i zastąpić <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metodę, aby określić, czy wyjątek powinien zakończyć działanie aplikacji. Następnie utwórz nowe wystąpienie klasy niestandardowe <xref:System.ServiceModel.Dispatcher.ExceptionHandler> klasy i przypisz je do statycznego <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> lub <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> właściwości przed utworzeniem klienci WCF lub usług.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstrakcyjna klasa, która zastępuje <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metody.  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 Poniższy przykład kodu pokazuje sposób włączania niestandardowego `MyExceptionHandler` dla nieobsługiwanych wyjątków, które występują w ramach środowiska uruchomieniowego usługi WCF.  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wystąpienie elementu <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obsługująca wszystkie wyjątki.</summary>
        <value>
          <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> Obiekt, który zwraca <see langword="true" /> wszystkie wyjątki.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementacji dla domeny aplikacji.</summary>
        <value>Przypisz niestandardowego <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obiekt, który odbiera nieobsługiwanych wyjątków, które występują w asynchronicznych wątków Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> właściwość jest `null`, i nieobsługiwanych wyjątków na asynchronicznych wątków WCF zakończyć działanie aplikacji.  Ta właściwość jest ustawiana <xref:System.ServiceModel.Dispatcher.ExceptionHandler> obiektu do pobierania i reagowania na tych wyjątków.  
  
 Wystąpił nieobsługiwany wyjątek występuje na asynchronicznego wątku usługi WCF, osiągnie ten program obsługi może być naruszona stan domeny aplikacji.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> nie może zwracać `true` dla tych wyjątków.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Wyjątek wystąpił w ramach środowiska uruchomieniowego systemu Windows Communication Foundation (WCF) i które może zakończyć działanie aplikacji.</param>
        <summary>Po przesłonięciu w klasie pochodnej zwraca <see langword="true" /> Jeśli wyjątek został obsłużony, lub <see langword="false" /> powinien zostać zgłoszony wyjątek, jeśli aplikacja została zakończona.</summary>
        <returns>
          <see langword="true" /> Jeśli wyjątek został obsłużony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> Zwraca `true` Jeśli wyjątek został obsłużony. Jeśli zmienna zwraca `false` lub zgłasza wyjątek różnych, pierwotny wyjątek jest zgłoszony.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstrakcyjna klasa, która zastępuje <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> metody.  
  
  
  
 Poniższy przykład kodu pokazuje sposób włączania niestandardowego `MyExceptionHandler` dla nieobsługiwanych wyjątków, które występują w ramach środowiska uruchomieniowego usługi WCF.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementacji dla domeny aplikacji.</summary>
        <value>Niestandardowy <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> obiekt, który odbiera nieobsługiwanych wyjątków, które występują w ramach globalnego transportów Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> właściwości ustawiono wartość <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, powodując nieobsługiwanych wyjątków w ramach transportu WCF mają być ignorowane.  Ustaw tę właściwość na wystąpienie <xref:System.ServiceModel.Dispatcher.ExceptionHandler> otrzymywanie i reagowania na tych wyjątków.  
  
 Jeśli wystąpił nieobsługiwany wyjątek występuje w ramach globalnego transportu WCF i osiągnie ten program obsługi, istnieje możliwość złamane stan domeny aplikacji. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> może zwrócić `false` te wyjątki spowodować, że aplikacja ma być zakończony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>