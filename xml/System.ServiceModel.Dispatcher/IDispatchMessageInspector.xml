<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="338473ae149afc3abbbba5fe33991b0f472b9e6d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39855101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje metody, które umożliwiają niestandardowe inspekcji lub modyfikowanie komunikatów przychodzących i wychodzących aplikacji w aplikacjach usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do inspekcja lub modyfikowanie komunikatów przychodzących lub wychodzących aplikacji albo przed wysyłania komunikatu żądania operacji lub przed zwróceniem odpowiedzi komunikatu do obiektu wywołującego. Istnieje wiele scenariuszy, które wymagają przechwytuje wiadomości przed wywołaniem operacji, dla którego jest przeznaczony. Na przykład można rejestrować przychodzących komunikatów aplikacji lub wykonywania niektórych funkcji, na podstawie nagłówka komunikatu.  
  
 Zazwyczaj inspektorzy komunikatów są wstawiane przez zachowanie usługi (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), zachowanie punktu końcowego (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), lub zachowanie kontraktu (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>). Zachowanie następnie dodaje inspektora komunikat <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji. Aby uzyskać więcej informacji na temat rozszerzania środowiska uruchomieniowego za pomocą zachowań, zobacz [rozszerzanie elementu ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> Metoda umożliwia zachowanie niestandardowe, po otrzymaniu komunikatu, ale przed wysłaniem go do zamierzonego operacji.  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> Metoda umożliwia zachowanie niestandardowe, po powrocie z operacji, ale przed wysłaniem odpowiedzi.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> obiekty są zawsze nazywane w tym samym punkcie podczas wysyłania wiadomości, niezależnie od tego, czy operacja jest jednokierunkowa lub "żądanie-odpowiedź".  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia podstawowe <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> , zapisuje ciąg w konsoli podczas jego wywoływania.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodająca `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 W poniższym przykładzie kodu pokazano sposób użycia plik konfiguracji aplikacji, aby załadować zachowanie usługi, który wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">Komunikat żądania.</param>
        <param name="channel">Kanał przychodzących.</param>
        <param name="instanceContext">Bieżące wystąpienie usługi.</param>
        <summary>Metoda wywoływana po wiadomości przychodzącej otrzymał lecz przed komunikat wywoływane jest zamierzony operacji.</summary>
        <returns>Obiekt używany do skorelowania stanu. Ten obiekt jest przekazywany z powrotem w <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> metodę, aby inspekcja lub modyfikowanie wiadomości przychodzącej kanału klienta, który dostarczane, a także bieżącego wystąpienia usługi. Zwracana wartość może być dowolnego obiektu, który chcesz użyć na potrzeby korelacji; jest zwracany jako `correlationState` parametr <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> metody.  
  
> [!IMPORTANT]
>  Treść komunikatu nie można używać, chyba że buforu cały komunikat i Utwórz kopię. Jeśli to zrobisz, musisz wprowadzić dwie kopie wiadomości: jeden do inspekcji, a druga zastąpić `request` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia podstawowe <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> , zapisuje ciąg w konsoli podczas jego wywoływania.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodająca `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 W poniższym przykładzie kodu pokazano sposób użycia plik konfiguracji aplikacji, aby załadować zachowanie usługi, który wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Komunikat odpowiedzi. Ta wartość jest wartość null, jeśli operacja jest jednym ze sposobów.</param>
        <param name="correlationState">Korelacja obiekt zwrócony od <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> metody.</param>
        <summary>Metoda wywoływana po operacji ma zwrócić, ale przed odpowiedź zostanie wysłana wiadomość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> metodę, aby wykonać niestandardowe zachowanie przed wysłaniem komunikat zwrotny. `correlationState` To obiekt zwrócony od <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> metodę, która umożliwia wykonywanie korelacji między wywołaniami ruchu przychodzącego i wychodzącego do obsługi usługi zachowanie.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia podstawowe <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> , zapisuje ciąg w konsoli podczas jego wywoływania.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodająca `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 W poniższym przykładzie kodu pokazano sposób użycia plik konfiguracji aplikacji, aby załadować zachowanie usługi, który wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>