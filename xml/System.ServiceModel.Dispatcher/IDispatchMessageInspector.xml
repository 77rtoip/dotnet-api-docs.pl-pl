<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDispatchMessageInspector.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b993105bcecb3322ed5684bf4865f5440f8cc008.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b993105bcecb3322ed5684bf4865f5440f8cc008</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</source>
          <target state="translated">Definiuje metody umożliwiające niestandardowych inspekcji lub zmiana wiadomości przychodzących i wychodzących aplikacji w aplikacji usługi.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</source>
          <target state="translated">Implementowanie <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> do inspekcja lub modyfikowanie komunikatów przychodzących lub wychodzących aplikacji albo przed wysyłania komunikatu żądania operacji lub przed zwróceniem odpowiedzi wiadomości do obiekt wywołujący.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</source>
          <target state="translated">Istnieje wiele scenariuszy, które wymagają przechwycenia wiadomości przed wywołaniem operacji, dla której jest przeznaczony.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>For example, you can log incoming application messages or perform some feature based on a message header.</source>
          <target state="translated">Można na przykład logowania przychodzących komunikatów aplikacji lub wykonywać niektórych funkcji, na podstawie nagłówka wiadomości.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Typically, message inspectors are inserted by a service behavior (<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>), an endpoint behavior (<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>), or a contract behavior (<ph id="ph3">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">Zazwyczaj inspektorzy komunikatów są wstawiane przez zachowanie usługi (<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>), zachowanie punktu końcowego (<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>), lub zachowanie kontraktu (<ph id="ph3">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The behavior then adds the message inspector to the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">Zachowanie następnie dodaje inspektora komunikat <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>For more information about extending the runtime using behaviors, see <bpt id="p1">[</bpt>Extending ServiceHost and the Service Model Layer<ept id="p1">](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat rozszerzania środowiska uruchomieniowego za pomocą zachowań, zobacz <bpt id="p1">[</bpt>rozszerzanie elementu ServiceHost i warstwy modelu usług<ept id="p1">](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> — Metoda włącza niestandardowe zachowanie po otrzymaniu komunikatu, ale przed wysłaniem go do danego działania.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method enables custom behavior after the operation returns but before the reply is sent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> Metoda umożliwia zachowanie niestandardowych po powrocie z operacji, ale przed wysłaniem odpowiedzi.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> obiekty są zawsze wywoływana w tym samym punkcie podczas wysyłania wiadomości, niezależnie od tego, czy operacja jest jednokierunkowa lub żądanie odpowiedź.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia podstawowy <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> który zapisuje ciąg w konsoli po wywołaniu.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia implementację <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> dodaje <ph id="ph2">`Inspector`</ph> <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> do <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia <ph id="ph1">`Inspector`</ph> <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The request message.</source>
          <target state="translated">Komunikat żądania.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The incoming channel.</source>
          <target state="translated">Kanał przychodzący.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The current service instance.</source>
          <target state="translated">Bieżące wystąpienie usługi.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>Called after an inbound message has been received but before the message is dispatched to the intended operation.</source>
          <target state="translated">Wywołuje się po wiadomości przychodzącej zostały odebrane, ale przed wysłaniem wiadomości jest wysyłane do zamierzonego operacji.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The object used to correlate state.</source>
          <target state="translated">Obiekt używany do skorelowania stanu.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>This object is passed back in the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">Ten obiekt został przekazany w <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> metodę inspekcja lub modyfikowanie komunikat przychodzący kanału klientów zapewnianej i bieżącego wystąpienia usługi.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The return value can be any object that you want to use for correlation purposes; it is returned to you as the <ph id="ph1">`correlationState`</ph> parameter in the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method.</source>
          <target state="translated">Zwracana wartość może być dowolny obiekt, który ma zostać użyty na potrzeby korelacji; jest zwracany jako <ph id="ph1">`correlationState`</ph> parametru w <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>You cannot use the body of the message unless you buffer the entire message and make a copy.</source>
          <target state="translated">Nie można użyć treści wiadomości, chyba że buforu cały komunikat i Utwórz kopię.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the <ph id="ph1">`request`</ph> parameter.</source>
          <target state="translated">Jeśli to zrobisz, musisz wprowadzić dwie kopie wiadomości: jeden do zbadania i innych zastąpić <ph id="ph1">`request`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia podstawowy <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> który zapisuje ciąg w konsoli po wywołaniu.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia implementację <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> dodaje <ph id="ph2">`Inspector`</ph> <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> do <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia <ph id="ph1">`Inspector`</ph> <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The reply message.</source>
          <target state="translated">Komunikat odpowiedzi.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>This value is null if the operation is one way.</source>
          <target state="translated">Ta wartość ma wartość null, jeśli operacja jest jednym ze sposobów.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The correlation object returned from the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /&gt;</ph> method.</source>
          <target state="translated">Zwróciła obiekt korelacji <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Called after the operation has returned but before the reply message is sent.</source>
          <target state="translated">Metoda wywoływana po operacji zwrócił, ale przed odpowiedź jest wysyłana wiadomość.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method to perform custom behavior prior to sending the return message.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> metodę w celu zachowania niestandardowego przed ich wysłaniem zwróconego komunikatu.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned from the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</source>
          <target state="translated"><ph id="ph1">`correlationState`</ph> Jest obiekt zwrócony od <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> metody, których można użyć do wykonania korelacji między wywołaniami ruchu przychodzącego i wychodzącego do obsługi sieci zachowanie.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia podstawowy <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> który zapisuje ciąg w konsoli po wywołaniu.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia implementację <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> dodaje <ph id="ph2">`Inspector`</ph> <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> do <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia <ph id="ph1">`Inspector`</ph> <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>