<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fa518-101">Definiuje metody umożliwiające niestandardowych inspekcji lub zmiana wiadomości przychodzących i wychodzących aplikacji w aplikacji usługi.</span><span class="sxs-lookup"><span data-stu-id="fa518-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa518-102">Implementowanie <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do inspekcja lub modyfikowanie komunikatów przychodzących lub wychodzących aplikacji albo przed wysyłania komunikatu żądania operacji lub przed zwróceniem odpowiedzi wiadomości do obiekt wywołujący.</span><span class="sxs-lookup"><span data-stu-id="fa518-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="fa518-103">Istnieje wiele scenariuszy, które wymagają przechwycenia wiadomości przed wywołaniem operacji, dla której jest przeznaczony.</span><span class="sxs-lookup"><span data-stu-id="fa518-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="fa518-104">Można na przykład logowania przychodzących komunikatów aplikacji lub wykonywać niektórych funkcji, na podstawie nagłówka wiadomości.</span><span class="sxs-lookup"><span data-stu-id="fa518-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="fa518-105">Zazwyczaj inspektorzy komunikatów są wstawiane przez zachowanie usługi (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), zachowanie punktu końcowego (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), lub zachowanie kontraktu (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="fa518-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="fa518-106">Zachowanie następnie dodaje inspektora komunikat <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.</span><span class="sxs-lookup"><span data-stu-id="fa518-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="fa518-107">Aby uzyskać więcej informacji na temat rozszerzania środowiska uruchomieniowego za pomocą zachowań, zobacz [rozszerzanie elementu ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span><span class="sxs-lookup"><span data-stu-id="fa518-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="fa518-108"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> — Metoda włącza niestandardowe zachowanie po otrzymaniu komunikatu, ale przed wysłaniem go do danego działania.</span><span class="sxs-lookup"><span data-stu-id="fa518-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="fa518-109"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> Metoda umożliwia zachowanie niestandardowych po powrocie z operacji, ale przed wysłaniem odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="fa518-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fa518-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> obiekty są zawsze wywoływana w tym samym punkcie podczas wysyłania wiadomości, niezależnie od tego, czy operacja jest jednokierunkowa lub żądanie odpowiedź.</span><span class="sxs-lookup"><span data-stu-id="fa518-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa518-111">Poniższy przykładowy kod przedstawia podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> który zapisuje ciąg w konsoli po wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="fa518-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="fa518-112">Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodaje `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.</span><span class="sxs-lookup"><span data-stu-id="fa518-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="fa518-113">W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="fa518-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa518-114">Komunikat żądania.</span><span class="sxs-lookup"><span data-stu-id="fa518-114">The request message.</span></span></param>
        <param name="channel"><span data-ttu-id="fa518-115">Kanał przychodzący.</span><span class="sxs-lookup"><span data-stu-id="fa518-115">The incoming channel.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="fa518-116">Bieżące wystąpienie usługi.</span><span class="sxs-lookup"><span data-stu-id="fa518-116">The current service instance.</span></span></param>
        <summary><span data-ttu-id="fa518-117">Wywołuje się po wiadomości przychodzącej zostały odebrane, ale przed wysłaniem wiadomości jest wysyłane do zamierzonego operacji.</span><span class="sxs-lookup"><span data-stu-id="fa518-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span></span></summary>
        <returns><span data-ttu-id="fa518-118">Obiekt używany do skorelowania stanu.</span><span class="sxs-lookup"><span data-stu-id="fa518-118">The object used to correlate state.</span></span> <span data-ttu-id="fa518-119">Ten obiekt został przekazany w <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> metody.</span><span class="sxs-lookup"><span data-stu-id="fa518-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa518-120">Użyj <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> metodę inspekcja lub modyfikowanie komunikat przychodzący kanału klientów zapewnianej i bieżącego wystąpienia usługi.</span><span class="sxs-lookup"><span data-stu-id="fa518-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="fa518-121">Zwracana wartość może być dowolny obiekt, który ma zostać użyty na potrzeby korelacji; jest zwracany jako `correlationState` parametru w <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fa518-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fa518-122">Nie można użyć treści wiadomości, chyba że buforu cały komunikat i Utwórz kopię.</span><span class="sxs-lookup"><span data-stu-id="fa518-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="fa518-123">Jeśli to zrobisz, musisz wprowadzić dwie kopie wiadomości: jeden do zbadania i innych zastąpić `request` parametru.</span><span class="sxs-lookup"><span data-stu-id="fa518-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa518-124">Poniższy przykładowy kod przedstawia podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> który zapisuje ciąg w konsoli po wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="fa518-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="fa518-125">Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodaje `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.</span><span class="sxs-lookup"><span data-stu-id="fa518-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="fa518-126">W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="fa518-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="fa518-127">Komunikat odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="fa518-127">The reply message.</span></span> <span data-ttu-id="fa518-128">Ta wartość ma wartość null, jeśli operacja jest jednym ze sposobów.</span><span class="sxs-lookup"><span data-stu-id="fa518-128">This value is null if the operation is one way.</span></span></param>
        <param name="correlationState"><span data-ttu-id="fa518-129">Zwróciła obiekt korelacji <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> metody.</span><span class="sxs-lookup"><span data-stu-id="fa518-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span></span></param>
        <summary><span data-ttu-id="fa518-130">Metoda wywoływana po operacji zwrócił, ale przed odpowiedź jest wysyłana wiadomość.</span><span class="sxs-lookup"><span data-stu-id="fa518-130">Called after the operation has returned but before the reply message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa518-131">Użyj <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> metodę w celu zachowania niestandardowego przed ich wysłaniem zwróconego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="fa518-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="fa518-132">`correlationState` Jest obiekt zwrócony od <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> metody, których można użyć do wykonania korelacji między wywołaniami ruchu przychodzącego i wychodzącego do obsługi sieci zachowanie.</span><span class="sxs-lookup"><span data-stu-id="fa518-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa518-133">Poniższy przykładowy kod przedstawia podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> który zapisuje ciąg w konsoli po wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="fa518-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="fa518-134">Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodaje `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.</span><span class="sxs-lookup"><span data-stu-id="fa518-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="fa518-135">W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="fa518-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>