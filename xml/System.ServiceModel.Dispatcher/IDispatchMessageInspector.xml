<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5080315ea2c1a94f83db594050f031dd3d468bda" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69235935" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje metody, które umożliwiają inspekcję niestandardową lub modyfikację przychodzących i wychodzących komunikatów aplikacji w aplikacjach usług.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> , aby sprawdzić lub zmodyfikować przychodzące lub wychodzące komunikaty aplikacji przed wysłaniem komunikatu żądania do operacji lub przed zwróceniem komunikatu odpowiedzi do obiektu wywołującego. Istnieje wiele scenariuszy, które wymagają przechwytywania komunikatów przed wywołaniem operacji, do której jest przeznaczony. Na przykład można rejestrować przychodzące komunikaty aplikacji lub wykonywać pewne funkcje na podstawie nagłówka komunikatu.  
  
 Zwykle inspektory komunikatów są wstawiane przez zachowanie usługi (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), zachowanie punktu końcowego (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) lub zachowanie umowy (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>). Takie zachowanie powoduje dodanie inspektora komunikatów do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji. Aby uzyskać więcej informacji na temat rozszerzania środowiska uruchomieniowego za pomocą zachowań, zobacz Rozszerzanie elementu [ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> Metoda umożliwia zachowanie niestandardowe po odebraniu komunikatu, ale przed wysłaniem go do zamierzonej operacji.  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> Metoda umożliwia zachowanie niestandardowe po powrocie operacji, ale przed wysłaniem odpowiedzi.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>obiekty są zawsze wywoływane w tym samym momencie podczas wysyłania komunikatu, niezależnie od tego, czy operacja jest jednokierunkowa, czy z odpowiedzią na żądanie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> , który zapisuje ciąg w konsoli po wywołaniu.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy <xref:System.ServiceModel.Description.IServiceBehavior> przykład kodu pokazuje implementację, która `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> dodaje do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 Poniższy przykład kodu przedstawia użycie pliku konfiguracji aplikacji do załadowania zachowania usługi, które wstawia `Inspector`. <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">Komunikat żądania.</param>
        <param name="channel">Kanał przychodzący.</param>
        <param name="instanceContext">Bieżące wystąpienie usługi.</param>
        <summary>Wywoływana po odebraniu komunikatu przychodzącego, ale przed wysłaniem komunikatu do zamierzonej operacji.</summary>
        <returns>Obiekt używany do skorelowania stanu. Ten obiekt jest przenoszona z powrotem <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> w metodzie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> Użyj metody do sprawdzenia lub modyfikacji komunikatu przychodzącego, dostarczonego przez niego kanału klienta oraz bieżącego wystąpienia usługi. Wartością zwracaną może być każdy obiekt, który ma być używany w celach korelacji; jest on zwracany jako `correlationState` parametr <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> w metodzie.  
  
> [!IMPORTANT]
>  Nie można użyć treści wiadomości, chyba że cała wiadomość zostanie przebuforowana i nie utworzysz kopii. Jeśli to zrobisz, musisz utworzyć dwie kopie komunikatu: jeden do inspekcji, a drugi, aby zastąpić `request` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> , który zapisuje ciąg w konsoli po wywołaniu.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy <xref:System.ServiceModel.Description.IServiceBehavior> przykład kodu pokazuje implementację, która `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> dodaje do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 Poniższy przykład kodu przedstawia użycie pliku konfiguracji aplikacji do załadowania zachowania usługi, które wstawia `Inspector`. <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Komunikat odpowiedzi. Ta wartość jest równa null, jeśli operacja jest jednokierunkowa.</param>
        <param name="correlationState">Obiekt korelacji zwrócony z <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> metody.</param>
        <summary>Wywoływana po zwróceniu operacji, ale przed wysłaniem komunikatu odpowiedzi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> , aby wykonać niestandardowe zachowanie przed wysłaniem komunikatu zwrotnego. Jest obiektem zwróconym <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> z metody, której można użyć do przeprowadzenia korelacji między wywołaniami przychodzącymi i wychodzącymi w celu obsługi zachowania. `correlationState`  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> , który zapisuje ciąg w konsoli po wywołaniu.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy <xref:System.ServiceModel.Description.IServiceBehavior> przykład kodu pokazuje implementację, która `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> dodaje do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 Poniższy przykład kodu przedstawia użycie pliku konfiguracji aplikacji do załadowania zachowania usługi, które wstawia `Inspector`. <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
