<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b993105bcecb3322ed5684bf4865f5440f8cc008" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30576061" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje metody umożliwiające niestandardowych inspekcji lub zmiana wiadomości przychodzących i wychodzących aplikacji w aplikacji usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do inspekcja lub modyfikowanie komunikatów przychodzących lub wychodzących aplikacji albo przed wysyłania komunikatu żądania operacji lub przed zwróceniem odpowiedzi wiadomości do obiekt wywołujący. Istnieje wiele scenariuszy, które wymagają przechwycenia wiadomości przed wywołaniem operacji, dla której jest przeznaczony. Można na przykład logowania przychodzących komunikatów aplikacji lub wykonywać niektórych funkcji, na podstawie nagłówka wiadomości.  
  
 Zazwyczaj inspektorzy komunikatów są wstawiane przez zachowanie usługi (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), zachowanie punktu końcowego (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), lub zachowanie kontraktu (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>). Zachowanie następnie dodaje inspektora komunikat <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji. Aby uzyskać więcej informacji na temat rozszerzania środowiska uruchomieniowego za pomocą zachowań, zobacz [rozszerzanie elementu ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> — Metoda włącza niestandardowe zachowanie po otrzymaniu komunikatu, ale przed wysłaniem go do danego działania.  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> Metoda umożliwia zachowanie niestandardowych po powrocie z operacji, ale przed wysłaniem odpowiedzi.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> obiekty są zawsze wywoływana w tym samym punkcie podczas wysyłania wiadomości, niezależnie od tego, czy operacja jest jednokierunkowa lub żądanie odpowiedź.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> który zapisuje ciąg w konsoli po wywołaniu.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodaje `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">Komunikat żądania.</param>
        <param name="channel">Kanał przychodzący.</param>
        <param name="instanceContext">Bieżące wystąpienie usługi.</param>
        <summary>Wywołuje się po wiadomości przychodzącej zostały odebrane, ale przed wysłaniem wiadomości jest wysyłane do zamierzonego operacji.</summary>
        <returns>Obiekt używany do skorelowania stanu. Ten obiekt został przekazany w <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> metodę inspekcja lub modyfikowanie komunikat przychodzący kanału klientów zapewnianej i bieżącego wystąpienia usługi. Zwracana wartość może być dowolny obiekt, który ma zostać użyty na potrzeby korelacji; jest zwracany jako `correlationState` parametru w <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> metody.  
  
> [!IMPORTANT]
>  Nie można użyć treści wiadomości, chyba że buforu cały komunikat i Utwórz kopię. Jeśli to zrobisz, musisz wprowadzić dwie kopie wiadomości: jeden do zbadania i innych zastąpić `request` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> który zapisuje ciąg w konsoli po wywołaniu.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodaje `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Komunikat odpowiedzi. Ta wartość ma wartość null, jeśli operacja jest jednym ze sposobów.</param>
        <param name="correlationState">Zwróciła obiekt korelacji <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> metody.</param>
        <summary>Metoda wywoływana po operacji zwrócił, ale przed odpowiedź jest wysyłana wiadomość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> metodę w celu zachowania niestandardowego przed ich wysłaniem zwróconego komunikatu. `correlationState` Jest obiekt zwrócony od <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> metody, których można użyć do wykonania korelacji między wywołaniami ruchu przychodzącego i wychodzącego do obsługi sieci zachowanie.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia podstawowy <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> który zapisuje ciąg w konsoli po wywołaniu.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Description.IServiceBehavior> dodaje `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 W poniższym przykładzie pokazano sposób użycia pliku konfiguracji aplikacji, aby załadować zachowanie usługi, która wstawia `Inspector` <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>