<Type Name="SequenceReader&lt;T&gt;" FullName="System.Buffers.SequenceReader&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e6b0da6a2a67233632a5384d83b9df455e5dbef6" /><Meta Name="ms.sourcegitcommit" Value="727af77f0b7ae2636efa3bc47000697540084461" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/15/2019" /><Meta Name="ms.locfileid" Value="67877015" /></Metadata><TypeSignature Language="C#" Value="public struct SequenceReader&lt;T&gt; where T : struct" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SequenceReader`1&lt;struct .ctor (class System.ValueType, class System.IEquatable`1&lt;!T&gt;) T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.SequenceReader`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure SequenceReader(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : value classpublic value class SequenceReader" />
  <TypeSignature Language="F#" Value="type SequenceReader&lt;'T (requires 'T : struct)&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
        <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceReader (System.Buffers.ReadOnlySequence&lt;T&gt; sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt; sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sequence As ReadOnlySequence(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SequenceReader(System::Buffers::ReadOnlySequence&lt;T&gt; sequence);" />
      <MemberSignature Language="F#" Value="new System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt; : System.Buffers.ReadOnlySequence&lt;'T (requires 'T : struct)&gt; -&gt; System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;" Usage="new System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt; sequence" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="573bb-101">Sekwencja tylko do odczytu, nad którym chcesz utworzyć <see cref="T:System.Buffers.SequenceReader`1" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-101">The read-only sequence over which to create the <see cref="T:System.Buffers.SequenceReader`1" />.</span></span></param>
        <summary><span data-ttu-id="573bb-102">Tworzy <see cref="T:System.Buffers.SequenceReader`1" /> za pośrednictwem danego <see cref="T:System.Buffers.ReadOnlySequence`1" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-102">Creates a <see cref="T:System.Buffers.SequenceReader`1" /> over a given <see cref="T:System.Buffers.ReadOnlySequence`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public void Advance (long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Advance(int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.Advance(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Advance (count As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Advance(long count);" />
      <MemberSignature Language="F#" Value="member this.Advance : int64 -&gt; unit" Usage="sequenceReader.Advance count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="573bb-103">Liczba elementów w celu przechodzenia.</span><span class="sxs-lookup"><span data-stu-id="573bb-103">The number of items to advance.</span></span></param>
        <summary><span data-ttu-id="573bb-104">Przenosi czytnik wyprzedzeniem określoną liczbę elementów.</span><span class="sxs-lookup"><span data-stu-id="573bb-104">Moves the reader ahead a specified number of items.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePast">
      <MemberSignature Language="C#" Value="public long AdvancePast (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePast(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePast(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePast (value As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePast(T value);" />
      <MemberSignature Language="F#" Value="member this.AdvancePast : 'T -&gt; int64" Usage="sequenceReader.AdvancePast value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="573bb-105">Wartość ostatnich, która jest czytnik w celu przechodzenia.</span><span class="sxs-lookup"><span data-stu-id="573bb-105">The value past which the reader is to advance.</span></span></param>
        <summary><span data-ttu-id="573bb-106">Przesuwa ostatnie kolejnych wystąpień danego <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-106">Advances past consecutive instances of the given <paramref name="value" />.</span></span></summary>
        <returns><span data-ttu-id="573bb-107">Liczba pozycji, który udostępnia zaawansowane czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-107">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(valuetype System.ReadOnlySpan`1&lt;!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (values As ReadOnlySpan(Of T)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; int64" Usage="sequenceReader.AdvancePastAny values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="573bb-108">Wartości, które mają zostać pominięte.</span><span class="sxs-lookup"><span data-stu-id="573bb-108">The values to be skipped.</span></span></param>
        <summary><span data-ttu-id="573bb-109">Pomija kolejnych wystąpień dowolnego określonego <paramref name="values" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-109">Skips consecutive instances of any of the specified <paramref name="values" />.</span></span></summary>
        <returns><span data-ttu-id="573bb-110">Liczba pozycji, który udostępnia zaawansowane czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-110">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0"><span data-ttu-id="573bb-111">Pierwsza wartość do pominięcia.</span><span class="sxs-lookup"><span data-stu-id="573bb-111">The first value to skip.</span></span></param>
        <param name="value1"><span data-ttu-id="573bb-112">Druga wartość do pominięcia.</span><span class="sxs-lookup"><span data-stu-id="573bb-112">The second value to skip.</span></span></param>
        <summary><span data-ttu-id="573bb-113">Postęp w przeszłości kolejnych wystąpień każdej z dwiema określonymi wartościami.</span><span class="sxs-lookup"><span data-stu-id="573bb-113">Advances past consecutive instances of either of two specified values.</span></span></summary>
        <returns><span data-ttu-id="573bb-114">Liczba pozycji, który udostępnia zaawansowane czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-114">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1, T value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1, !T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T, value2 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0"><span data-ttu-id="573bb-115">Pierwsza wartość do pominięcia.</span><span class="sxs-lookup"><span data-stu-id="573bb-115">The first value to skip.</span></span></param>
        <param name="value1"><span data-ttu-id="573bb-116">Druga wartość do pominięcia.</span><span class="sxs-lookup"><span data-stu-id="573bb-116">The second value to skip.</span></span></param>
        <param name="value2"><span data-ttu-id="573bb-117">Trzecia wartość do pominięcia.</span><span class="sxs-lookup"><span data-stu-id="573bb-117">The third value to skip.</span></span></param>
        <summary><span data-ttu-id="573bb-118">Postęp ostatnie kolejnych wystąpień dowolnego z trzech określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="573bb-118">Advances past consecutive instances of any of three specified values.</span></span></summary>
        <returns><span data-ttu-id="573bb-119">Liczba pozycji, który udostępnia zaawansowane czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-119">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1, T value2, T value3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1, !T value2, !T value3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T, value2 As T, value3 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1, T value2, T value3);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T * 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1, value2, value3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
        <Parameter Name="value3" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0">To be added.</param>
        <param name="value1"><span data-ttu-id="573bb-120">Druga wartość do pominięcia.</span><span class="sxs-lookup"><span data-stu-id="573bb-120">The second value to skip.</span></span></param>
        <param name="value2"><span data-ttu-id="573bb-121">Trzecia wartość do pominięcia.</span><span class="sxs-lookup"><span data-stu-id="573bb-121">The third value to skip.</span></span></param>
        <param name="value3"><span data-ttu-id="573bb-122">Wartość czwartego do pominięcia.</span><span class="sxs-lookup"><span data-stu-id="573bb-122">The fourth value to skip.</span></span></param>
        <summary><span data-ttu-id="573bb-123">Postęp w przeszłości kolejnych wystąpień dowolnego z czterech określonych wartości.</span><span class="sxs-lookup"><span data-stu-id="573bb-123">Advances past consecutive instances of any of four specified values.</span></span></summary>
        <returns><span data-ttu-id="573bb-124">Liczba pozycji, który udostępnia zaawansowane czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-124">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Consumed">
      <MemberSignature Language="C#" Value="public long Consumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Consumed" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Consumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Consumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumed : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Consumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-125">Pobiera łączną liczbę <typeparamref name="T" /> wartości są przetwarzane przez czytnik.</span><span class="sxs-lookup"><span data-stu-id="573bb-125">Gets the total number of <typeparamref name="T" /> values processed by the reader.</span></span></summary>
        <value><span data-ttu-id="573bb-126">Całkowita liczba przetworzonych przez czytnik wartości.</span><span class="sxs-lookup"><span data-stu-id="573bb-126">The total number of values processed by the reader.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; CurrentSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; CurrentSpan" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.CurrentSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentSpan As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; CurrentSpan { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentSpan : ReadOnlySpan&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.CurrentSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-127">Pobiera <see cref="T:System.Span`1" /> zawiera bieżący segment w <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-127">Gets a <see cref="T:System.Span`1" /> that contains the current segment in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="573bb-128">Zakres, który zawiera bieżący segment w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="573bb-128">A span that contains the current segment in the sequence.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSpanIndex">
      <MemberSignature Language="C#" Value="public int CurrentSpanIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentSpanIndex" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.CurrentSpanIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentSpanIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentSpanIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentSpanIndex : int" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.CurrentSpanIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-129">Pobiera indeks w <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-129">Gets the index in the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></summary>
        <value><span data-ttu-id="573bb-130">Indeks w <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-130">The index in the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public bool End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool End" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.End" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool End { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.End : bool" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.End" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-131">Pobiera wartość wskazującą, czy nie ma więcej danych w <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-131">Gets a value that indicates whether there is no more data in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="573bb-132"><see langword="true" /> Jeśli nie ma więcej danych w <see cref="P:System.Buffers.SequenceReader`1.Sequence" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-132"><see langword="true" /> when there is no more data in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNext">
      <MemberSignature Language="C#" Value="public bool IsNext (ReadOnlySpan&lt;T&gt; next, bool advancePast = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNext(valuetype System.ReadOnlySpan`1&lt;!T&gt; next, bool advancePast) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNext (next As ReadOnlySpan(Of T), Optional advancePast As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNext : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.IsNext (next, advancePast)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePast" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="next"><span data-ttu-id="573bb-133">Zakres do następnego elementów do porównania.</span><span class="sxs-lookup"><span data-stu-id="573bb-133">The span to compare the next items to.</span></span></param>
        <param name="advancePast"><span data-ttu-id="573bb-134"><see langword="true" /> Aby wyjść poza <paramref name="next" /> wartości w przypadku ich znalezienia lub <see langword="false" /> nie przenieść poza nimi.</span><span class="sxs-lookup"><span data-stu-id="573bb-134"><see langword="true" /> to move past the <paramref name="next" /> values if they are found, or <see langword="false" /> to not move past them.</span></span></param>
        <summary><span data-ttu-id="573bb-135">Sprawdza, czy wartości określone w zakresie tylko do odczytu są dalej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="573bb-135">Checks whether the values specified in a read-only span are next in the sequence.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNext">
      <MemberSignature Language="C#" Value="public bool IsNext (T next, bool advancePast = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNext(!T next, bool advancePast) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNext (next As T, Optional advancePast As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNext : 'T * bool -&gt; bool" Usage="sequenceReader.IsNext (next, advancePast)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="T" />
        <Parameter Name="advancePast" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="next"><span data-ttu-id="573bb-136">Wartość do porównania dalej elementy.</span><span class="sxs-lookup"><span data-stu-id="573bb-136">The value to compare the next items to.</span></span></param>
        <param name="advancePast"><span data-ttu-id="573bb-137"><see langword="true" /> Aby wyjść poza <paramref name="next" /> wartości w przypadku ich znalezienia lub <see langword="false" /> nie przenieść poza nimi.</span><span class="sxs-lookup"><span data-stu-id="573bb-137"><see langword="true" /> to move past the <paramref name="next" /> values if they are found, or <see langword="false" /> to not move past them.</span></span></param>
        <summary><span data-ttu-id="573bb-138">Sprawdza, czy określona wartość jest dalej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="573bb-138">Checks whether a specified value is next in the sequence.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-139">Pobiera liczbę elementów w czytniku <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-139">Gets the count of items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="573bb-140">Liczba elementów w czytniku <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-140">The count of items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-141">Pobiera bieżącą pozycję w <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-141">Gets the current position in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="573bb-142">Bieżąca pozycja w <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-142">The current position in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public long Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Remaining As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Remaining { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-143">Pobiera pozostałe elementy do czytnika <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-143">Gets  the remaining items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="573bb-144">Pozostałe elementy do czytnika <see cref="P:System.Buffers.SequenceReader`1.Sequence" /></span><span class="sxs-lookup"><span data-stu-id="573bb-144">The remaining items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" /></span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind (long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind(int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind (count As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind(long count);" />
      <MemberSignature Language="F#" Value="member this.Rewind : int64 -&gt; unit" Usage="sequenceReader.Rewind count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="573bb-145">Liczba elementów.</span><span class="sxs-lookup"><span data-stu-id="573bb-145">The number of items.</span></span></param>
        <summary><span data-ttu-id="573bb-146">Przechodzi proces czytający określoną liczbę elementów.</span><span class="sxs-lookup"><span data-stu-id="573bb-146">Moves the reader back the specified number of items.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="573bb-147"><paramref name="count" /> jest ujemna ani większa niż <see cref="P:System.Buffers.SequenceReader`1.Consumed" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-147"><paramref name="count" /> is negative or greater than <see cref="P:System.Buffers.SequenceReader`1.Consumed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;T&gt; Sequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt; Sequence" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Sequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sequence As ReadOnlySequence(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;T&gt; Sequence { System::Buffers::ReadOnlySequence&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Sequence : System.Buffers.ReadOnlySequence&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Sequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-148">Pobiera podstawowe <see cref="T:System.Buffers.ReadOnlySequence`1" /> dla czytnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-148">Gets the underlying <see cref="T:System.Buffers.ReadOnlySequence`1" /> for the reader.</span></span></summary>
        <value><span data-ttu-id="573bb-149">Podstawowy tylko do odczytu sekwencji dla czytnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-149">The underlying read-only sequence for the reader.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvanceTo">
      <MemberSignature Language="C#" Value="public bool TryAdvanceTo (T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdvanceTo(!T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvanceTo (delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryAdvanceTo : 'T * bool -&gt; bool" Usage="sequenceReader.TryAdvanceTo (delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="delimiter"><span data-ttu-id="573bb-150">Ogranicznik do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="573bb-150">The delimiter to search for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-151"><see langword="true" /> Aby wyjść poza <paramref name="delimiter" /> przypadku; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-151"><see langword="true" /> to move past the <paramref name="delimiter" /> if it is found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="573bb-152">Wyszukuje określonego ogranicznika i opcjonalnie prowadzi ostatnie go, jeśli zostanie znaleziony.</span><span class="sxs-lookup"><span data-stu-id="573bb-152">Searches for a specified delimiter and optionally advances past it if it is found.</span></span></summary>
        <returns><span data-ttu-id="573bb-153"><see langword="true" /> Jeśli dany <paramref name="delimiter" /> został znaleziony; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-153"><see langword="true" /> if the given <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvanceToAny">
      <MemberSignature Language="C#" Value="public bool TryAdvanceToAny (ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdvanceToAny(valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvanceToAny (delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryAdvanceToAny : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryAdvanceToAny (delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="573bb-154">Ograniczniki do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="573bb-154">The delimiters to search for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-155">&gt; patrz langword = "true" / &gt; Aby wyjść poza pierwszego wystąpienia dowolnego z danym <paramref name="delimiters" />; <see lanword="false" /> aby nie przenieść przez ogranicznik.</span><span class="sxs-lookup"><span data-stu-id="573bb-155">&gt;see langword="true" /&gt; to move past the first instance of any of the given <paramref name="delimiters" />; <see lanword="false" /> to not move past the delimiter.</span></span></param>
        <summary><span data-ttu-id="573bb-156">Wyszukuje dla dowolnej liczby określonych ograniczników i opcjonalnie prowadzi ostatnie pierwszy z nich ma zostać odnaleziona.</span><span class="sxs-lookup"><span data-stu-id="573bb-156">Searches for any of a number of specified delimiters and optionally advances past the first one to be found.</span></span></summary>
        <returns><span data-ttu-id="573bb-157"><see langword="true" /> Jeśli dowolny z danym <paramref name="delimiters" /> został znaleziony.</span><span class="sxs-lookup"><span data-stu-id="573bb-157"><see langword="true" /> if any of the given <paramref name="delimiters" /> was found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T (requires 'T : struct)&gt; -&gt; bool" Usage="sequenceReader.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="573bb-158">Zakres docelowy można skopiować do.</span><span class="sxs-lookup"><span data-stu-id="573bb-158">Destination span to copy to.</span></span></param>
        <summary><span data-ttu-id="573bb-159">Kopiuje dane z bieżącego położenia do zadanego miejsca docelowego rozciągać, jeśli brak wystarczającej ilości danych, aby wypełnić go.</span><span class="sxs-lookup"><span data-stu-id="573bb-159">Copies data from the current position to the given destination span if there is enough data to fill it.</span></span></summary>
        <returns><span data-ttu-id="573bb-160"><see langword="true" /> Jeśli ma wystarczającej ilości danych, aby całkowicie wypełnić <paramref name="destination" /> zakresu; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-160"><see langword="true" /> if there is enough data to completely fill the <paramref name="destination" /> span; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
<span data-ttu-id="573bb-161">Ta metoda kopiuje ustaloną ilość danych poza kolejnością, jeśli jest to możliwe.</span><span class="sxs-lookup"><span data-stu-id="573bb-161">This method copies a fixed amount of data out of the sequence if possible.</span></span> <span data-ttu-id="573bb-162">Go nie wcześniejsze czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-162">It does not advance the reader.</span></span> <span data-ttu-id="573bb-163">Aby wyszukiwać z konkretnego strumienia danych, należy użyć <xref:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)>.</span><span class="sxs-lookup"><span data-stu-id="573bb-163">To look ahead for a specific stream of data, use  <xref:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)>.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="sequenceReader.TryPeek value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="573bb-164">Następną wartość lub wartość domyślną, jeśli komputer znajduje się na końcu czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-164">The next value, or the default value if at the end of the reader.</span></span></param>
        <summary><span data-ttu-id="573bb-165">Dokonuje wglądu następnej wartości bez przesuwania czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-165">Peeks at the next value without advancing the reader.</span></span></summary>
        <returns><span data-ttu-id="573bb-166"><see langword="true" /> Jeśli czytnik jest nie na koniec i operacji podglądu zakończyło się pomyślnie; <see langword="false" /> if na końcu czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-166"><see langword="true" /> if the reader is not at its end and the peek operation succeeded; <see langword="false" /> if at the end of the reader.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead">
      <MemberSignature Language="C#" Value="public bool TryRead (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryRead([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryRead(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryRead (ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryRead([Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryRead :  -&gt; bool" Usage="sequenceReader.TryRead value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="573bb-167">Następną wartość lub wartość domyślną, jeśli komputer znajduje się na końcu czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-167">The next value, or the default value if at the end of the reader.</span></span></param>
        <summary><span data-ttu-id="573bb-168">Odczytuje wartość następnego oraz Rozwijaj czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-168">Reads the next value and advance the reader.</span></span></summary>
        <returns><span data-ttu-id="573bb-169"><see langword="true" /> Jeśli czytnik jest nie na koniec i operacja odczytu zakończyło się pomyślnie; <see langword="false" /> if na końcu czytelnika.</span><span class="sxs-lookup"><span data-stu-id="573bb-169"><see langword="true" /> if the reader is not at its end and the read operation succeeded; <see langword="false" /> if at the end of the reader.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, ReadOnlySpan&lt;T&gt; delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="573bb-170">Gdy metoda zwróci wartość, zawiera danych, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="573bb-170">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="573bb-171">Zakres tylko do odczytu, który zawiera co najmniej jeden ograniczników.</span><span class="sxs-lookup"><span data-stu-id="573bb-171">A read-only span that contains one or more delimiters.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-172"><see langword="true" /> Aby wyjść poza <paramref name="delimiter" /> Jeśli znaleziono.</span><span class="sxs-lookup"><span data-stu-id="573bb-172"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="573bb-173">Próbuje odczytać dane do całego ogranicznik, określony jako zakres tylko do odczytu jest zgodny.</span><span class="sxs-lookup"><span data-stu-id="573bb-173">Tries to read data until the entire delimiter specified as a read-only span matches.</span></span></summary>
        <returns><span data-ttu-id="573bb-174"><see langword="true" /> Jeśli <paramref name="delimiter" /> został znaleziony; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-174"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, !T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="573bb-175">Gdy metoda zwróci wartość, zawiera danych, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="573bb-175">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="573bb-176">Ogranicznik do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="573bb-176">The delimiter to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-177"><see langword="true" /> Aby wyjść poza <paramref name="delimiter" /> Jeśli znaleziono.</span><span class="sxs-lookup"><span data-stu-id="573bb-177"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="573bb-178">Próbuje odczytać wszystko do danego <paramref name="delimiter" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-178">Tries to read everything up to the given <paramref name="delimiter" />.</span></span></summary>
        <returns><span data-ttu-id="573bb-179"><see langword="true" /> Jeśli <paramref name="delimiter" /> został znaleziony; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-179"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out ReadOnlySpan&lt;T&gt; span, T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, !T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef span As ReadOnlySpan(Of T), delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (span, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="573bb-180">Gdy metoda zwróci wartość, zawiera danych, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="573bb-180">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="573bb-181">Ogranicznik do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="573bb-181">The delimiter to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-182"><see langword="true" /> Aby wyjść poza <paramref name="delimiter" /> Jeśli znaleziono.</span><span class="sxs-lookup"><span data-stu-id="573bb-182"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="573bb-183">Próbuje odczytać wszystko do danego <paramref name="delimiter" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-183">Tries to read everything up to the given <paramref name="delimiter" />.</span></span></summary>
        <returns><span data-ttu-id="573bb-184"><see langword="true" /> Jeśli <paramref name="delimiter" /> został znaleziony.</span><span class="sxs-lookup"><span data-stu-id="573bb-184"><see langword="true" /> if the <paramref name="delimiter" /> was found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, !T delimiter, !T delimiterEscape, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As T, delimiterEscape As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * 'T * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, delimiterEscape, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="delimiterEscape" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="573bb-185">Gdy metoda zwróci wartość, zawiera danych, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="573bb-185">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="573bb-186">Ogranicznik do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="573bb-186">The delimiter to look for.</span></span></param>
        <param name="delimiterEscape"><span data-ttu-id="573bb-187">Wartość, która wskazuje, że natychmiast po <paramref name="delimiter" /> ma zostać pominięta.</span><span class="sxs-lookup"><span data-stu-id="573bb-187">A value that indicates that an immediately following <paramref name="delimiter" /> is to be skipped.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-188"><see langword="true" /> Aby wyjść poza <paramref name="delimiter" /> Jeśli znaleziono.</span><span class="sxs-lookup"><span data-stu-id="573bb-188"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="573bb-189">Próbuje odczytać wszystko do danego <paramref name="delimiter" />, ignorowanie ograniczników, które są poprzedzone <paramref name="delimiterEscape" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-189">Tries to read everything up to the given <paramref name="delimiter" />, ignoring delimiters that are preceded by <paramref name="delimiterEscape" />.</span></span></summary>
        <returns><span data-ttu-id="573bb-190"><see langword="true" /> Jeśli <paramref name="delimiter" /> został znaleziony; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-190"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out ReadOnlySpan&lt;T&gt; span, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, !T delimiter, !T delimiterEscape, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef span As ReadOnlySpan(Of T), delimiter As T, delimiterEscape As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * 'T * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (span, delimiter, delimiterEscape, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="delimiterEscape" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="573bb-191">Gdy metoda zwróci wartość, zawiera danych, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="573bb-191">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="573bb-192">Ogranicznik do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="573bb-192">The delimiter to look for.</span></span></param>
        <param name="delimiterEscape"><span data-ttu-id="573bb-193">&gt; wartość, która wskazuje, że natychmiast po <paramref name="delimiter" /> ma zostać pominięta.</span><span class="sxs-lookup"><span data-stu-id="573bb-193">&gt;A value that indicates that an immediately following <paramref name="delimiter" /> is to be skipped.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-194"><see langword="true" /> Aby wyjść poza <paramref name="delimiter" /> Jeśli znaleziono.</span><span class="sxs-lookup"><span data-stu-id="573bb-194"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="573bb-195">Próbuje odczytać wszystko do danego <paramref name="delimiter" />, ignorowanie ograniczników, które są poprzedzone <paramref name="delimiterEscape" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-195">Tries to read everything up to the given <paramref name="delimiter" />, ignoring delimiters that are preceded by <paramref name="delimiterEscape" />.</span></span></summary>
        <returns><span data-ttu-id="573bb-196"><see langword="true" /> Jeśli <paramref name="delimiter" /> został znaleziony; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-196"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadToAny">
      <MemberSignature Language="C#" Value="public bool TryReadToAny (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadToAny([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadToAny (ByRef sequence As ReadOnlySequence(Of T), delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadToAny :  * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadToAny (sequence, delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="573bb-197">Gdy metoda zwróci wartość, zawiera danych, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="573bb-197">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiters"><span data-ttu-id="573bb-198">Ograniczniki do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="573bb-198">The delimiters to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-199"><see langword="true" /> Aby wyjść poza znaleziono pierwszego wystąpienia dowolnego z danym <paramref name="delimiters" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-199"><see langword="true" /> to move past the first found instance of any of the given <paramref name="delimiters" />.</span></span></param>
        <summary><span data-ttu-id="573bb-200">Próbuje odczytać do żadnego określonego <paramref name="delimiters" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-200">Tries to read everything up to any of the specified <paramref name="delimiters" />.</span></span></summary>
        <returns><span data-ttu-id="573bb-201"><see langword="true" /> Jeśli dowolny z <paramref name="delimiters" /> zostały; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-201"><see langword="true" /> if any of the <paramref name="delimiters" /> were found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadToAny">
      <MemberSignature Language="C#" Value="public bool TryReadToAny (out ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadToAny([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadToAny (ByRef span As ReadOnlySpan(Of T), delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadToAny :  * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadToAny (span, delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="573bb-202">Gdy metoda zwróci wartość, zawiera danych, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="573bb-202">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiters"><span data-ttu-id="573bb-203">Ograniczniki do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="573bb-203">The delimiters to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="573bb-204"><see langword="true" /> Aby wyjść poza znaleziono pierwszego wystąpienia dowolnego z danym <paramref name="delimiters" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-204"><see langword="true" /> to move past the first found instance of any of the given <paramref name="delimiters" />.</span></span></param>
        <summary><span data-ttu-id="573bb-205">Próbuje odczytać do żadnego określonego <paramref name="delimiters" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-205">Tries to read everything up to any of the specified <paramref name="delimiters" />.</span></span></summary>
        <returns><span data-ttu-id="573bb-206"><see langword="true" /> Jeśli dowolny z <paramref name="delimiters" /> zostały; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-206"><see langword="true" /> if any of the <paramref name="delimiters" /> were found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnreadSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; UnreadSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; UnreadSpan" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.UnreadSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnreadSpan As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; UnreadSpan { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.UnreadSpan : ReadOnlySpan&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.UnreadSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="573bb-207">Pobiera nieprzeczytane część <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span><span class="sxs-lookup"><span data-stu-id="573bb-207">Gets the unread portion of the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
