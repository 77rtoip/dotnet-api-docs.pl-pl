<Type Name="StandardFormat" FullName="System.Buffers.StandardFormat">
  <Metadata><Meta Name="ms.openlocfilehash" Value="11818d5fba80f705011eb6622d2b03abdae12cd3" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67238451" /></Metadata><TypeSignature Language="C#" Value="public struct StandardFormat : IEquatable&lt;System.Buffers.StandardFormat&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit StandardFormat extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Buffers.StandardFormat&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.StandardFormat" />
  <TypeSignature Language="VB.NET" Value="Public Structure StandardFormat&#xA;Implements IEquatable(Of StandardFormat)" />
  <TypeSignature Language="C++ CLI" Value="public value class StandardFormat : IEquatable&lt;System::Buffers::StandardFormat&gt;" />
  <TypeSignature Language="F#" Value="type StandardFormat = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Buffers.StandardFormat&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje ciąg formatu standardowego, bez korzystania z rzeczywistego ciągu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

A `StandardFormat` obiekt, który składa się pojedynczy znak specyfikatora formatu standardowego (takie jak "G" czy ", lub,, X") i opcjonalnym specyfikatorem dokładności. Specyfikator dokładności należą do zakresu od 0 do 9, lub może być specjalną <xref:System.Buffers.StandardFormat.NoPrecision?displayProperty=nameWithType> wartość.

   ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StandardFormat (char symbol, byte precision = 255);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char symbol, unsigned int8 precision) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (symbol As Char, Optional precision As Byte = 255)" />
      <MemberSignature Language="F#" Value="new System.Buffers.StandardFormat : char * byte -&gt; System.Buffers.StandardFormat" Usage="new System.Buffers.StandardFormat (symbol, precision)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="symbol" Type="System.Char" />
        <Parameter Name="precision" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="symbol">Ma specyfikatora formatu specyficznych dla typu, takie jak "G", ", lub"X".</param>
        <param name="precision">Opcjonalne dokładności, od 0 do 99, lub specjalna wartość <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> (ustawienie domyślne).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Buffers.StandardFormat" /> struktury.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="symbol" /> nie jest <see cref="F:System.Buffers.StandardFormat.NoPrecision" />, a jego wartość jest większa niż <see cref="F:System.Buffers.StandardFormat.MaxPrecision" />.

—lub—

<paramref name="symbol" /> Nie można przekonwertować na <see cref="T:System.Byte" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi lub <see cref="T:System.Buffers.StandardFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Dwa <xref:System.Buffers.StandardFormat> wystąpień są takie same jeśli ich <xref:System.Buffers.StandardFormat.Symbol> i <xref:System.Buffers.StandardFormat.Precision> właściwości są takie same.

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Buffers.StandardFormat other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Buffers.StandardFormat other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As StandardFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Buffers::StandardFormat other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Buffers.StandardFormat -&gt; bool" Usage="standardFormat.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>Zwraca wartość wskazującą, czy określony <see cref="T:System.Buffers.StandardFormat" /> jest taki sam, jak bieżące wystąpienie.</summary>
        <returns><see langword="true" /> Jeśli dwa wystąpienia są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="standardFormat.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy określony obiekt jest <see cref="T:System.Buffers.StandardFormat" /> obiekt, który jest taki sam, jak bieżące wystąpienie.</summary>
        <returns><see langword="true" /> Jeśli dwa wystąpienia są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="standardFormat.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>Kod skrótu dla tego wystąpienia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrecision">
      <MemberSignature Language="C#" Value="public bool HasPrecision { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPrecision" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.StandardFormat.HasPrecision" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasPrecision As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasPrecision { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasPrecision : bool" Usage="System.Buffers.StandardFormat.HasPrecision" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy format ma zdefiniowany dokładności.</summary>
        <value><see langword="true" /> Jeśli format ma inne niż dokładności <see cref="F:System.Buffers.StandardFormat.NoPrecision" />; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.StandardFormat.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Buffers.StandardFormat.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżące wystąpienie jest format domyślny.</summary>
        <value><see langword="true" /> Jeśli bieżące wystąpienie jest domyślny format; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Domyślny format ma specyfikatora formatu którego <xref:System.Byte> wartość to 0, do której dokładność jest <xref:System.Buffers.StandardFormat.NoPrecision>.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrecision">
      <MemberSignature Language="C#" Value="public const byte MaxPrecision = 99;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int8 MaxPrecision = (99)" />
      <MemberSignature Language="DocId" Value="F:System.Buffers.StandardFormat.MaxPrecision" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxPrecision As Byte  = 99" />
      <MemberSignature Language="C++ CLI" Value="public: System::Byte MaxPrecision = 99;" />
      <MemberSignature Language="F#" Value="val mutable MaxPrecision : byte" Usage="System.Buffers.StandardFormat.MaxPrecision" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <MemberValue>99</MemberValue>
      <Docs>
        <summary>Definiuje wartość maksymalna dozwolona dokładność: nieprawidłowa.</summary>
        <remarks>Nieprawidłowa maksymalna dokładność jest 99.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NoPrecision">
      <MemberSignature Language="C#" Value="public const byte NoPrecision = 255;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int8 NoPrecision = (255)" />
      <MemberSignature Language="DocId" Value="F:System.Buffers.StandardFormat.NoPrecision" />
      <MemberSignature Language="VB.NET" Value="Public Const NoPrecision As Byte  = 255" />
      <MemberSignature Language="C++ CLI" Value="public: System::Byte NoPrecision = 255;" />
      <MemberSignature Language="F#" Value="val mutable NoPrecision : byte" Usage="System.Buffers.StandardFormat.NoPrecision" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <MemberValue>255</MemberValue>
      <Docs>
        <summary>Wskazuje, że format nie używa dokładności lub dokładność jest nieokreślony.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Buffers.StandardFormat left, System.Buffers.StandardFormat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Buffers.StandardFormat left, valuetype System.Buffers.StandardFormat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As StandardFormat, right As StandardFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Buffers::StandardFormat left, System::Buffers::StandardFormat right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Buffers.StandardFormat * System.Buffers.StandardFormat -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Buffers.StandardFormat" />
        <Parameter Name="right" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="left">Format pierwszej do porównania.</param>
        <param name="right">Format sekund do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy dwa <see cref="T:System.Buffers.StandardFormat" /> wystąpień są takie same.</summary>
        <returns><see langword="true" /> Jeśli dwa wystąpienia są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Dwa <xref:System.Buffers.StandardFormat> wystąpień są takie same jeśli ich <xref:System.Buffers.StandardFormat.Symbol> i <xref:System.Buffers.StandardFormat.Precision> właściwości są takie same.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Buffers.StandardFormat (char symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Buffers.StandardFormat op_Implicit(char symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (symbol As Char) As StandardFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Buffers::StandardFormat(char symbol);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : char -&gt; System.Buffers.StandardFormat" Usage="System.Buffers.StandardFormat.op_Implicit symbol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.StandardFormat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="symbol">Znak, który ma zostać przekształcony na <see cref="T:System.Buffers.StandardFormat" /> wartość.</param>
        <summary>Konwertuje znak do <see cref="T:System.Buffers.StandardFormat" /> przy użyciu <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> dokładności.</summary>
        <returns>Format z <see cref="P:System.Buffers.StandardFormat.Symbol" /> równa właściwości <paramref name="symbol" /> i <see cref="P:System.Buffers.StandardFormat.Precision" /> równa właściwości <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Buffers.StandardFormat left, System.Buffers.StandardFormat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Buffers.StandardFormat left, valuetype System.Buffers.StandardFormat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As StandardFormat, right As StandardFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Buffers::StandardFormat left, System::Buffers::StandardFormat right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Buffers.StandardFormat * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.StandardFormat.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Buffers.StandardFormat" />
        <Parameter Name="right" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="left">Format pierwszej do porównania.</param>
        <param name="right">Format sekund do porównania.</param>
        <summary>Określa, czy dwa <see cref="T:System.Buffers.StandardFormat" /> wystąpienia są nierówne.</summary>
        <returns><see langword="true" /> Jeśli dwa formaty są nierówne. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Dwa <xref:System.Buffers.StandardFormat> wystąpienia są nierówne jeśli ich <xref:System.Buffers.StandardFormat.Symbol> i <xref:System.Buffers.StandardFormat.Precision> właściwości nie są identyczne.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Buffers.StandardFormat Parse (ReadOnlySpan&lt;char&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.StandardFormat Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (format As ReadOnlySpan(Of Char)) As StandardFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::StandardFormat Parse(ReadOnlySpan&lt;char&gt; format);" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; -&gt; System.Buffers.StandardFormat" Usage="System.Buffers.StandardFormat.Parse format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.StandardFormat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="format">Zakres tylko do odczytu, który zawiera znaki, które można przeanalizować.</param>
        <summary>Konwertuje <see langword="ReadOnlySpan&lt;System.Char&gt;" /> do <see cref="T:System.Buffers.StandardFormat" /> przy użyciu <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> dokładności.</summary>
        <returns>A wartości, których <see cref="P:System.Buffers.StandardFormat.Symbol" /> wartość właściwości jest znak w <paramref name="format" /> i którego <see cref="P:System.Buffers.StandardFormat.Precision" /> wartość właściwości jest <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Buffers.StandardFormat Parse (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.StandardFormat Parse(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (format As String) As StandardFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::StandardFormat Parse(System::String ^ format);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Buffers.StandardFormat" Usage="System.Buffers.StandardFormat.Parse format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.StandardFormat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Klasyczne .NET standardowym ciągiem formatującym.</param>
        <summary>Konwertuje ciąg formatu standardowego klasycznej platformy .NET na <see cref="T:System.Buffers.StandardFormat" /> wystąpienia.</summary>
        <returns>Format.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> nie jest prawidłową standardowym ciągiem formatującym.</exception>
      </Docs>
    </Member>
    <Member MemberName="Precision">
      <MemberSignature Language="C#" Value="public byte Precision { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 Precision" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.StandardFormat.Precision" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Precision As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Byte Precision { System::Byte get(); };" />
      <MemberSignature Language="F#" Value="member this.Precision : byte" Usage="System.Buffers.StandardFormat.Precision" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik dokładności formatu.</summary>
        <value>Składnik dokładności, który może być <see cref="F:System.Buffers.StandardFormat.NoPrecision" />, lub z zakresu od 0 do 9.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Symbol">
      <MemberSignature Language="C#" Value="public char Symbol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Symbol" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.StandardFormat.Symbol" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Symbol As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Symbol { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Symbol : char" Usage="System.Buffers.StandardFormat.Symbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik znaków formatu.</summary>
        <value>Składnik znaków formatu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="standardFormat.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca reprezentację ciągu tego formatu.</summary>
        <returns>Reprezentacja ciągu tego formatu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Reprezentacja ciągu <xref:System.Buffers.StandardFormat> wystąpienie jest ciągiem formatu .NET standard.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; format, out System.Buffers.StandardFormat result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; format, [out] valuetype System.Buffers.StandardFormat&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.StandardFormat.TryParse(System.ReadOnlySpan{System.Char},System.Buffers.StandardFormat@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (format As ReadOnlySpan(Of Char), ByRef result As StandardFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; format, [Runtime::InteropServices::Out] System::Buffers::StandardFormat % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.Buffers.StandardFormat.TryParse (format, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="result" Type="System.Buffers.StandardFormat" RefType="out" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="format">Zakres tylko do odczytu, która zawiera znak, który ma zostać przekształcony.</param>
        <param name="result">Gdy metoda zwróci wartość, zawiera przeanalizowany element <see cref="T:System.Buffers.StandardFormat" /> wystąpienia, jeśli operacja zakończyła się pomyślnie.</param>
        <summary>Stara się przekonwertować <see langword="ReadOnlySpan&lt;Char&gt;" /> do <see cref="T:System.Buffers.StandardFormat" /> wystąpienie i zwraca wartość wskazującą, czy podczas analizowania operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" /> Jeśli operacja analizy się powiodła. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>