<Type Name="IMemoryOwner&lt;T&gt;" FullName="System.Buffers.IMemoryOwner&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ed983f4803ee3a9e7d76d02411a109fec50bbae" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52734607" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IMemoryOwner&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemoryOwner`1&lt;T&gt; implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.IMemoryOwner`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemoryOwner(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IMemoryOwner : IDisposable" />
  <TypeSignature Language="F#" Value="type IMemoryOwner&lt;'T&gt; = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="305f6-101">Typ elementów do przechowywania w pamięci.</span>
      <span class="sxs-lookup">
        <span data-stu-id="305f6-101">The type of elements to store in memory.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="305f6-102">Określa właściciela bloku pamięci, który jest odpowiedzialny za usuwanie Podstawowa pamięć odpowiednio.</span>
      <span class="sxs-lookup">
        <span data-stu-id="305f6-102">Identifies the owner of a block of memory who is responsible for disposing of the underlying memory appropriately.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="305f6-103">`IMemoryOwner<T>` Interfejs jest używany do definiowania właściciela odpowiedzialnego za zarządzanie okresem istnienia <xref:System.Memory%601> buforu.</span><span class="sxs-lookup"><span data-stu-id="305f6-103">The `IMemoryOwner<T>` interface is used to define the owner responsible for the lifetime management of a <xref:System.Memory%601> buffer.</span></span> <span data-ttu-id="305f6-104">Wystąpienie `IMemoryOwner<T>` zwracany jest interfejs <xref:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="305f6-104">An instance of the `IMemoryOwner<T>` interface is returned by the <xref:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> method.</span></span> 

<span data-ttu-id="305f6-105">Natomiast bufor może mieć wielu odbiorców, w danym momencie może mieć tylko jednego właściciela.</span><span class="sxs-lookup"><span data-stu-id="305f6-105">While a buffer can have multiple consumers, it can only have a single owner at any given time.</span></span> <span data-ttu-id="305f6-106">Właściciel wykonywać następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="305f6-106">The owner can:</span></span>

- <span data-ttu-id="305f6-107">Utwórz buforu, bezpośrednio lub przez wywołanie metody fabryki.</span><span class="sxs-lookup"><span data-stu-id="305f6-107">Create the buffer either directly or by calling a factory method.</span></span>

- <span data-ttu-id="305f6-108">Przenieść własność na innego konsumenta.</span><span class="sxs-lookup"><span data-stu-id="305f6-108">Transfer ownership to another consumer.</span></span> <span data-ttu-id="305f6-109">W tym przypadku poprzedni właściciel nie należy używać buforu.</span><span class="sxs-lookup"><span data-stu-id="305f6-109">In this case, the previous owner should no longer use the buffer.</span></span>

- <span data-ttu-id="305f6-110">Bufor należy zniszczyć, gdy nie jest już używana.</span><span class="sxs-lookup"><span data-stu-id="305f6-110">Destroy the buffer when it is no longer in use.</span></span>

<span data-ttu-id="305f6-111">Ponieważ `IMemoryOwner<T>` obiekt implementuje <xref:System.IDisposable> interfejsu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> metody tylko wtedy, gdy wartość bufora pamięci nie jest już potrzebny, i zostały zniszczone go.</span><span class="sxs-lookup"><span data-stu-id="305f6-111">Because the `IMemoryOwner<T>` object implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> method only after the memory buffer is no longer needed and you have destroyed it.</span></span> <span data-ttu-id="305f6-112">Należy *nie* dysponowania `IMemoryOnwer<T>` obiektu, natomiast odwołanie do pamięci jest dostępny.</span><span class="sxs-lookup"><span data-stu-id="305f6-112">You should *not* dispose of the `IMemoryOnwer<T>` object while a reference to its memory is available.</span></span> <span data-ttu-id="305f6-113">Oznacza to, że typ, w którym `IMemoryOwner<T>` zadeklarowano nie powinny mieć <xref:System.Object.Finalize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="305f6-113">This means that the type in which `IMemoryOwner<T>` is declared should not have a <xref:System.Object.Finalize%2A> method.</span></span>

   ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Memory">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Memory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Memory" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.IMemoryOwner`1.Memory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Memory As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Memory&lt;T&gt; Memory { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Memory : Memory&lt;'T&gt;" Usage="System.Buffers.IMemoryOwner&lt;'T&gt;.Memory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="305f6-114">Pobiera pamięć należących do tego właściciela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="305f6-114">Gets the memory belonging to this owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="305f6-115">Pamięć należących do tego właściciela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="305f6-115">The memory belonging to this owner.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>