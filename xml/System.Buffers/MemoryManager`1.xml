<Type Name="MemoryManager&lt;T&gt;" FullName="System.Buffers.MemoryManager&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d0cd24dac64b5875058a1e88ea635532a8910af8" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58700707" /></Metadata><TypeSignature Language="C#" Value="public abstract class MemoryManager&lt;T&gt; : System.Buffers.IMemoryOwner&lt;T&gt;, System.Buffers.IPinnable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MemoryManager`1&lt;T&gt; extends System.Object implements class System.Buffers.IMemoryOwner`1&lt;!T&gt;, class System.Buffers.IPinnable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.MemoryManager`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MemoryManager(Of T)&#xA;Implements IMemoryOwner(Of T), IPinnable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class MemoryManager abstract : System::Buffers::IMemoryOwner&lt;T&gt;, System::Buffers::IPinnable" />
  <TypeSignature Language="F#" Value="type MemoryManager&lt;'T&gt; = class&#xA;    interface IMemoryOwner&lt;'T&gt;&#xA;    interface IDisposable&#xA;    interface IPinnable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Buffers.IMemoryOwner&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Buffers.IPinnable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="f4c4e-101">Typ elementów w buforze pamięci, zarządzanych przez tego menedżera pamięci.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-101">The type of items in the memory buffer managed by this memory manager.</span></span></typeparam>
    <summary><span data-ttu-id="f4c4e-102">Abstrakcyjna klasa bazowa, który jest używany do zastępowania wykonania <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-102">An abstract base class that is used to replace the implementation of <see cref="T:System.Memory`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="f4c4e-103">`MemoryManager<T>` Klasa jest używana do rozszerzenia znajomość typów, które <xref:System.Memory%601> jest w stanie reprezentować.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-103">The `MemoryManager<T>` class is used to extend the knowledge of types that <xref:System.Memory%601> is able to represent.</span></span> <span data-ttu-id="f4c4e-104">Na przykład może pochodzić z `MemoryManager<T>` umożliwia <xref:System.Memory%601> być wspierany przez <xref:System.Runtime.InteropServices.SafeHandle>.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-104">For example, you can derive from `MemoryManager<T>` to allow <xref:System.Memory%601> to be backed by a <xref:System.Runtime.InteropServices.SafeHandle>.</span></span>

> [!NOTE]
> <span data-ttu-id="f4c4e-105">`MemoryManager<T>` Klasy jest przeznaczony dla zaawansowanych scenariuszy.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-105">The `MemoryManager<T>` class is intended for advanced scenarios.</span></span> <span data-ttu-id="f4c4e-106">Większość programistów nie potrzebuje z niego korzystać.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-106">Most developers do not need to use it.</span></span>

       ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MemoryManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MemoryManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4c4e-107">Inicjuje nowe wystąpienie klasy <see cref="T:System.Buffers.MemoryManager`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-107">Initializes a new instance of the <see cref="T:System.Buffers.MemoryManager`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMemory">
      <MemberSignature Language="C#" Value="protected Memory&lt;T&gt; CreateMemory (int length);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Memory`1&lt;!T&gt; CreateMemory(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateMemory (length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Memory&lt;T&gt; CreateMemory(int length);" />
      <MemberSignature Language="F#" Value="member this.CreateMemory : int -&gt; Memory&lt;'T&gt;" Usage="memoryManager.CreateMemory length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length"><span data-ttu-id="f4c4e-108">Liczba elementów w buforze pamięci, rozpoczynając od przesunięcia 0.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-108">The number of elements in the memory buffer, starting at offset 0.</span></span></param>
        <summary><span data-ttu-id="f4c4e-109">Zwraca składający się z określonej liczby elementów z pamięci zarządzane przez Menedżera pamięci w bieżącym buforze pamięci.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-109">Returns a memory buffer consisting of a specified number of elements from the memory managed by the current memory manager.</span></span></summary>
        <returns><span data-ttu-id="f4c4e-110">Bufor pamięci.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-110">A memory buffer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMemory">
      <MemberSignature Language="C#" Value="protected Memory&lt;T&gt; CreateMemory (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Memory`1&lt;!T&gt; CreateMemory(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateMemory (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Memory&lt;T&gt; CreateMemory(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.CreateMemory : int * int -&gt; Memory&lt;'T&gt;" Usage="memoryManager.CreateMemory (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="f4c4e-111">Przesunięcie do elementu, w którym rozpoczyna się wartość bufora pamięci zwrócone.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-111">The offset to the element at which the returned memory buffer starts.</span></span></param>
        <param name="length"><span data-ttu-id="f4c4e-112">Liczba elementów do uwzględnienia w buforze pamięci zwrócone.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-112">The number of elements to include in the returned memory buffer.</span></span></param>
        <summary><span data-ttu-id="f4c4e-113">Zwraca wartość składającą się z określoną liczbę elementów, rozpoczynając od określonego przesunięcia z pamięci zarządzane przez Menedżera pamięci w bieżącym buforze pamięci.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-113">Returns a memory buffer consisting of a specified number of elements starting at a specified offset from the memory managed by the current memory manager.</span></span></summary>
        <returns><span data-ttu-id="f4c4e-114">Bufor pamięci, która składa się z <paramref name="length" /> elementów, rozpoczynając od przesunięcia <paramref name="start" />.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-114">A memory buffer that consists of <paramref name="length" /> elements starting at offset <paramref name="start" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="memoryManager.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="f4c4e-115"><see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko niezarządzane zasoby.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-115"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="f4c4e-116">Zwalnia wszelkie zasoby używane przez Menedżera pamięci w bieżącym.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-116">Releases all resources used by the current memory manager.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public abstract Span&lt;T&gt; GetSpan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;!T&gt; GetSpan() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.GetSpan" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSpan () As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Span&lt;T&gt; GetSpan();" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : unit -&gt; Span&lt;'T&gt;" Usage="memoryManager.GetSpan " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4c4e-117">Zwraca obszaru pamięci, który otacza bazowego bufora pamięci.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-117">Returns a memory span that wraps the underlying memory buffer.</span></span></summary>
        <returns><span data-ttu-id="f4c4e-118">Zakres pamięci, która otacza bazowego bufora pamięci.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-118">A memory span that wraps the underlying memory buffer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Memory">
      <MemberSignature Language="C#" Value="public virtual Memory&lt;T&gt; Memory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Memory" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.MemoryManager`1.Memory" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Memory As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Memory&lt;T&gt; Memory { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Memory : Memory&lt;'T&gt;" Usage="System.Buffers.MemoryManager&lt;'T&gt;.Memory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Buffers.IMemoryOwner`1.Memory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4c4e-119">Pobiera blok pamięci obsługiwane przez to <see cref="T:System.Buffers.MemoryManager`1" />.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-119">Gets the memory block handled by this <see cref="T:System.Buffers.MemoryManager`1" />.</span></span></summary>
        <value><span data-ttu-id="f4c4e-120">Blok pamięci obsługiwane przez to <see cref="T:System.Buffers.MemoryManager`1" />.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-120">The memory block handled by this <see cref="T:System.Buffers.MemoryManager`1" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public abstract System.Buffers.MemoryHandle Pin (int elementIndex = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Buffers.MemoryHandle Pin(int32 elementIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.Pin(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Pin (Optional elementIndex As Integer = 0) As MemoryHandle" />
      <MemberSignature Language="F#" Value="abstract member Pin : int -&gt; System.Buffers.MemoryHandle" Usage="memoryManager.Pin elementIndex" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Buffers.IPinnable.Pin(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="elementIndex"><span data-ttu-id="f4c4e-121">Przesunięcie do elementu w buforze pamięci, od której zwracanego <see cref="T:System.Buffers.MemoryHandle" /> punktów.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-121">The offset to the element in the memory buffer at which the returned <see cref="T:System.Buffers.MemoryHandle" /> points.</span></span></param>
        <summary><span data-ttu-id="f4c4e-122">Zwraca uchwyt do pamięci, która została przypięta i mogą być podejmowane o adresie.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-122">Returns a handle to the memory that has been pinned and whose address can be taken.</span></span></summary>
        <returns><span data-ttu-id="f4c4e-123">Dojście do pamięci, która została przypięta.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-123">A handle to the memory that has been pinned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4c4e-124">Zwalnia wszelkie zasoby używane przez Menedżera pamięci.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-124">Releases all resources used by the memory manager.</span></span></summary>
        <remarks><span data-ttu-id="f4c4e-125">Ta metoda zapewnia Menedżer pamięci <see cref="M:System.IDisposable.Dispose" /> implementacji.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-125">This method provides the memory manager's <see cref="M:System.IDisposable.Dispose" /> implementation.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray">
      <MemberSignature Language="C#" Value="protected internal virtual bool TryGetArray (out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryGetArray([out] valuetype System.ArraySegment`1&lt;!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.TryGetArray(System.ArraySegment{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function TryGetArray (ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool TryGetArray([Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="abstract member TryGetArray :  -&gt; bool&#xA;override this.TryGetArray :  -&gt; bool" Usage="memoryManager.TryGetArray segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="segment"><span data-ttu-id="f4c4e-126">Tablica segmentu do zapisu.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-126">The array segment to write to.</span></span></param>
        <summary><span data-ttu-id="f4c4e-127">Zwraca wartość segmentu tablicy.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-127">Returns an array segment.</span></span></summary>
        <returns><span data-ttu-id="f4c4e-128"><see langword="true" /> Jeśli wykonanie metody powiodło się podczas pobierania segmentem tablicy; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-128"><see langword="true" /> if the method succeeded in retrieving the array segment; otherwise, <see langword="false" />.</span></span></returns>
        <remarks><span data-ttu-id="f4c4e-129">Jeśli ta metoda nie zostanie zastąpiona, zwraca domyślny tablica segmentu.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-129">If this method is not overridden, it returns the default array segment.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unpin">
      <MemberSignature Language="C#" Value="public abstract void Unpin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unpin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.Unpin" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unpin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unpin();" />
      <MemberSignature Language="F#" Value="abstract member Unpin : unit -&gt; unit" Usage="memoryManager.Unpin " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Buffers.IPinnable.Unpin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4c4e-130">Unpins przypiętych pamięci, tak, aby moduł zbierający elementy bezużyteczne mógł przenosić je.</span><span class="sxs-lookup"><span data-stu-id="f4c4e-130">Unpins pinned memory so that the garbage collector is free to move it.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>