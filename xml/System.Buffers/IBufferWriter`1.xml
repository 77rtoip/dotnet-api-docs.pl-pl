<Type Name="IBufferWriter&lt;T&gt;" FullName="System.Buffers.IBufferWriter&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="674f0a0d53c9622f7a10d3a2b32626681056eef4" /><Meta Name="ms.sourcegitcommit" Value="9e7aa84070156026697d2898b5311e6c025a1e6a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/28/2019" /><Meta Name="ms.locfileid" Value="56996723" /></Metadata><TypeSignature Language="C#" Value="public interface IBufferWriter&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBufferWriter`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.IBufferWriter`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBufferWriter(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IBufferWriter" />
  <TypeSignature Language="F#" Value="type IBufferWriter&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Typ elementów w <see cref="T:System.Buffers.IBufferWriter`1" />.</typeparam>
    <summary>Reprezentuje ujścia danych wyjściowych, w których <typeparamref name="T" /> mogą być zapisywane dane.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public void Advance (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Advance(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Advance (count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Advance(int count);" />
      <MemberSignature Language="F#" Value="abstract member Advance : int -&gt; unit" Usage="iBufferWriter.Advance count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">Liczba elementów danych zapisane <see cref="T:System.Span`1" /> lub <see cref="T:System.Memory`1" />.</param>
        <summary>Powiadamia <see cref="T:System.Buffers.IBufferWriter`1" /> , <paramref name="count" /> elementów danych zostały napisane w danych wyjściowych <see cref="T:System.Span`1" /> lub <see cref="T:System.Memory`1" />.</summary>
        <remarks>Należy zażądać bufor nowego po wywołaniu zaawansowane, aby kontynuować zapisywanie większej ilości danych; Nie można zapisać wcześniej uzyskana buforu.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMemory">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; GetMemory (int sizeHint = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Memory`1&lt;!T&gt; GetMemory(int32 sizeHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMemory (Optional sizeHint As Integer = 0) As Memory(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetMemory : int -&gt; Memory&lt;'T&gt;" Usage="iBufferWriter.GetMemory sizeHint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeHint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeHint">Minimalna długość zwracanego <see cref="T:System.Memory`1" />. Jeśli jest to 0, zwracany jest pusty bufor.</param>
        <summary>Zwraca <see cref="T:System.Memory`1" /> do zapisu jest co najmniej żądany rozmiar (określony przez <paramref name="sizeHint" />).</summary>
        <returns>A <see cref="T:System.Memory`1" /> co najmniej rozmiar <paramref name="sizeHint" />. Jeśli <paramref name="sizeHint" /> wynosi 0, funkcja zwraca pusty bufor.</returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Nie ma żadnej gwarancji, że kolejnych wywołań zwróci tego samego buforu lub ten sam rozmiar buforu.

To nigdy nie musi zwracać <xref:System.Span%601.Empty?displayProperty=nameWithType>, ale może zgłosić, jeśli rozmiar buforu żądana jest niedostępny.

Należy zażądać bufor nowego po wywołaniu `Advance` aby kontynuować zapisywanie większej ilości danych; nie można zapisać do wcześniej uzyskana buforu.

         ]]></format>
         </remarks>
         <exception cref="T:System.OutOfMemoryException">Rozmiar buforu żądanego nie jest dostępna.</exception>        
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; GetSpan (int sizeHint = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;!T&gt; GetSpan(int32 sizeHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (Optional sizeHint As Integer = 0) As Span(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : int -&gt; Span&lt;'T&gt;" Usage="iBufferWriter.GetSpan sizeHint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeHint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeHint">Minimalna długość zwracanego <see cref="T:System.Span`1" />. Jeśli jest to 0, zwracany jest pusty bufor.</param>
        <summary>Zwraca <see cref="T:System.Span`1" /> do zapisu jest co najmniej żądany rozmiar (określony przez <paramref name="sizeHint" />).</summary>
        <returns>A <see cref="T:System.Span`1" /> co najmniej rozmiar <paramref name="sizeHint" />. Jeśli <paramref name="sizeHint" /> wynosi 0, funkcja zwraca pusty bufor.</returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[
  
Nie ma żadnej gwarancji, że kolejnych wywołań zwróci tego samego buforu lub ten sam rozmiar buforu.

Ta metoda nigdy nie musi zwracać <xref:System.Span%601.Empty?displayProperty=nameWithType>, ale może zgłosić, jeśli rozmiar buforu żądana jest niedostępny.

Należy zażądać bufor nowego po wywołaniu `Advance` aby kontynuować zapisywanie większej ilości danych; nie można zapisać do wcześniej uzyskana buforu.
         ]]></format>
         </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
