<Type Name="IApplicationSettingsProvider" FullName="System.Configuration.IApplicationSettingsProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e29c40f8cbdc9f6186d829367dc515ce43887ef" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30443349" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IApplicationSettingsProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IApplicationSettingsProvider" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IApplicationSettingsProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IApplicationSettingsProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje rozszerzone możliwości dostawców ustawień aplikacji klienckich.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Architektura ustawień aplikacji umożliwia mechanizm magazynu niestandardowego dla ustawienia aplikacji przez tworzenie dostawcy ustawienia niestandardowe, które jest klasą pochodną <xref:System.Configuration.SettingsProvider>. Taka klasa zawiera podstawowe funkcje do przechowywania i pobierania właściwości. Jednak można dodać dodatkowe funkcje standardowej zaimplementowanie <xref:System.Configuration.IApplicationSettingsProvider> interfejsu dostawcy ustawienia niestandardowe. Ten interfejs zawiera trzy metody, które przede wszystkim włączenia ustawień dostawcy na bardziej inteligentnie uchwyt zmiany wersji aplikacji. Zazwyczaj dostawca ustawień zapisze ustawienia aplikacji dla różnych wersji aplikacji osobno w celu przewidywania w następujących przypadkach:  
  
-   Wykonanie Side-by-side różnych wersji aplikacji.  
  
-   Zachowywanie ustawień aplikacji, podczas uaktualniania aplikacji.  
  
-   Resetowanie ustawień aplikacji do wartości domyślnych dla aktualnie używanej wersji.  
  
 <xref:System.Configuration.LocalFileSettingsProvider> Klasa implementuje <xref:System.Configuration.IApplicationSettingsProvider> interfejsu. Ten sam zestaw metod zawarty w <xref:System.Configuration.IApplicationSettingsProvider> znajduje się również w <xref:System.Configuration.ApplicationSettingsBase> klasy umożliwiające określenie kanał komunikacji wstępnie zdefiniowanych między otoki ustawienia aplikacji, a jego dostawcą ustawienia.  
  
> [!NOTE]
>  Ten interfejs jest opcjonalne. Dostawca nie implementuje ten interfejs, infrastruktury ustawienia zakończy się niepowodzeniem bez powiadomienia. Jeśli podejmuje próbę uzyskania dostępu do dowolnej z metod zdefiniowany przez ten interfejs.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.SettingsProvider" />
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
  </Docs>
  <Members>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValue GetPreviousVersion(class System.Configuration.SettingsContext context, class System.Configuration.SettingsProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousVersion (context As SettingsContext, property As SettingsProperty) As SettingsPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Configuration::SettingsPropertyValue ^ GetPreviousVersion(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsProperty ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="property" Type="System.Configuration.SettingsProperty" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.Configuration.SettingsContext" /> opisujące bieżącego użycia aplikacji.</param>
        <param name="property">
          <see cref="T:System.Configuration.SettingsProperty" /> Którego wartość jest zwracana.</param>
        <summary>Zwraca wartość właściwości określonych ustawień w poprzedniej wersji tej samej aplikacji.</summary>
        <returns>A <see cref="T:System.Configuration.SettingsPropertyValue" /> zawierający wartość określonej właściwości ustawienia jako ostatnia została ustawiona w poprzedniej wersji tej aplikacji; lub <see langword="null" /> Jeśli ustawienia nie można odnaleźć.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> w połączeniu z metody <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> metody, aby przeprowadzić migrację ustawień aplikacji, podczas lub po zainstalowaniu nowej wersji aplikacji.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityException">Aby uzyskać <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /> uprawnienia.</permission>
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Configuration.SettingsContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset(class System.Configuration.SettingsContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (context As SettingsContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Configuration::SettingsContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.Configuration.SettingsContext" /> opisujące bieżącego użycia aplikacji.</param>
        <summary>Resetuje ustawienia aplikacji skojarzonych z określoną aplikacją do wartości domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A> Metody ponownie inicjuje przechowywane wartości grupy ustawień określonej aplikacji. Z kolei <xref:System.Configuration.DefaultSettingValueAttribute> dostarcza wartość domyślną dla pojedynczego ustawienia właściwości podczas inicjowania właściwości, jeśli go nie ma przechowywanej wartości.  
  
 Dostawca ustawień określa rozsądne wartości domyślne są dla określonej grupy ustawień aplikacji. Na przykład do implementacji w <xref:System.Configuration.LocalFileSettingsProvider> resetuje ustawienia zakresu użytkownika do ich wartości udostępnionych w `application.exe.config` pliku; natomiast pozostawia ustawienia zakresu aplikacji bez zmian.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityException">Aby uzyskać <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /> uprawnienia.</permission>
        <altmember cref="T:System.Configuration.DefaultSettingValueAttribute" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Upgrade (context As SettingsContext, properties As SettingsPropertyCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Upgrade(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.Configuration.SettingsContext" /> opisujące bieżącego użycia aplikacji.</param>
        <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection" /> zawierający grupę właściwość ustawienia, których wartości mają zostać pobrane.</param>
        <summary>Wskazuje, aby dostawca aplikacji został uaktualniony. Dostawca to oferuje możliwość uaktualnienia jego przechowywane ustawienia zgodnie z potrzebami.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework umożliwia side-by-side instalacji i uruchamiania różne wersje tej samej aplikacji. Dostawca ustawień aplikacji przechowuje ustawienia aplikacji dla każdej wersji aplikacji osobno w celu zapewnienia izolacji. Można przeprowadzić migrację ustawień z poprzedniej wersji aplikacji do bieżącej. Do tej funkcji migracji, użyj <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> metoda zaimplementowana w klasie pochodnej z <xref:System.Configuration.SettingsProvider>.  
  
 Można użyć <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> w połączeniu z metody <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> metody, aby przeprowadzić migrację ustawień aplikacji, podczas lub po zainstalowaniu nowej wersji aplikacji.  
  
 Ta metoda ma być pomijana, każda aplikacja, ustawienia ma <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> jest stosowany do niej, lub do całej klasy otoki ustawienia pochodzące z <xref:System.Configuration.ApplicationSettingsBase>.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityException">Aby uzyskać <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /> uprawnienia.</permission>
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Upgrade" />
        <altmember cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>