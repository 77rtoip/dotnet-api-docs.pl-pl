<Type Name="SubclassTypeValidator" FullName="System.Configuration.SubclassTypeValidator">
  <TypeSignature Language="C#" Value="public sealed class SubclassTypeValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SubclassTypeValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.SubclassTypeValidator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SubclassTypeValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class SubclassTypeValidator sealed : System::Configuration::ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5fb8b-101">Sprawdza, czy obiekt jest klasa pochodna określonego typu.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-101">Validates that an object is a derived class of a specified type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fb8b-102"><xref:System.Configuration.SubclassTypeValidator> Klasa jest używana do sprawdzenia, czy obiekt spełnia określone kryteria.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-102">The <xref:System.Configuration.SubclassTypeValidator> class is used to ensure that an object meets specific criteria.</span></span> <span data-ttu-id="5fb8b-103">Kryteria weryfikacji jest ustanawiane, jeśli wystąpienie <xref:System.Configuration.SubclassTypeValidator> utworzyć klasy.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-103">The criteria for validation is established when an instance of the <xref:System.Configuration.SubclassTypeValidator> class is created.</span></span>  
  
 <span data-ttu-id="5fb8b-104"><xref:System.Configuration.SubclassTypeValidator.CanValidate%2A> Metoda określa, czy typ obiektu, sprawdzana jest w rzeczywistości <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-104">The <xref:System.Configuration.SubclassTypeValidator.CanValidate%2A> method determines whether the type of the object being validated is in fact a <xref:System.Type>.</span></span> <span data-ttu-id="5fb8b-105">Obiekt sprawdzany został przekazany jako parametr <xref:System.Configuration.SubclassTypeValidator.Validate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-105">The object being validated is passed as a parameter of the <xref:System.Configuration.SubclassTypeValidator.Validate%2A> method.</span></span> <span data-ttu-id="5fb8b-106">Ta metoda sprawdza najpierw, nie jest obiektem do zweryfikowania `null`, a następnie sprawdza, czy obiekt jest klasa pochodna oczekiwanego typu.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-106">This method first verifies that the object to validate is not `null`, and then verifies that the object is a derived class of the expected type.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SubclassTypeValidator (Type baseClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type baseClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SubclassTypeValidator.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseClass As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SubclassTypeValidator(Type ^ baseClass);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseClass"><span data-ttu-id="5fb8b-107">Klasa podstawowa na potrzeby sprawdzania poprawności.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-107">The base class to validate against.</span></span></param>
        <summary><span data-ttu-id="5fb8b-108">Inicjuje nowe wystąpienie klasy <see cref="T:System.Configuration.SubclassTypeValidator" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-108">Initializes a new instance of the <see cref="T:System.Configuration.SubclassTypeValidator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fb8b-109">Kryteria weryfikacji jest oparta na `baseClass` parametru.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-109">The criteria for validation is based on the `baseClass` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fb8b-110"><paramref name="baseClass" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-110"><paramref name="baseClass" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SubclassTypeValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="5fb8b-111">Typ obiektu.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-111">The object type.</span></span></param>
        <summary><span data-ttu-id="5fb8b-112">Określa, czy obiekt może być weryfikowane na podstawie typu.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-112">Determines whether an object can be validated based on type.</span></span></summary>
        <returns>
          <span data-ttu-id="5fb8b-113"><see langword="true" /> Jeśli <paramref name="type" /> parametru zgodny typ, który może być zweryfikowany, a w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-113"><see langword="true" /> if the <paramref name="type" /> parameter matches a type that can be validated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fb8b-114"><xref:System.Configuration.SubclassTypeValidator.CanValidate%2A> Metoda określa, czy typ obiektu, sprawdzana jest w rzeczywistości <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-114">The <xref:System.Configuration.SubclassTypeValidator.CanValidate%2A> method determines whether the type of the object being validated is in fact a <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SubclassTypeValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5fb8b-115">Wartość obiektu.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-115">The object value.</span></span></param>
        <summary><span data-ttu-id="5fb8b-116">Określa, czy wartość obiektu jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-116">Determines whether the value of an object is valid.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fb8b-117">Gdy wystąpienie klasy <xref:System.Configuration.SubclassTypeValidator> utworzyć klasy, klasy podstawowej ma być dostarczana i używać jako kryteriów oceny.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-117">When an instance of the <xref:System.Configuration.SubclassTypeValidator> class is created, the base class is provided and used as evaluation criteria.</span></span> <span data-ttu-id="5fb8b-118">Obiekt do sprawdzania poprawności został przekazany jako parametr <xref:System.Configuration.SubclassTypeValidator.Validate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-118">The object to validate is passed as a parameter of the <xref:System.Configuration.SubclassTypeValidator.Validate%2A> method.</span></span> <span data-ttu-id="5fb8b-119">Ta metoda wykonuje sprawdzanie poprawności między klasą bazową i obiektu parameter.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-119">This method performs the validation check between the base class and the parameter object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fb8b-120"><paramref name="value" /> nie jest <see cref="T:System.Type" /> mogą być uzyskane z <paramref name="baseClass" /> zgodnie z definicją w konstruktorze.</span><span class="sxs-lookup"><span data-stu-id="5fb8b-120"><paramref name="value" /> is not of a <see cref="T:System.Type" /> that can be derived from <paramref name="baseClass" /> as defined in the constructor.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>