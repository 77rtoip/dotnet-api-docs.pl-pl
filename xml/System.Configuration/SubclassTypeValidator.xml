<Type Name="SubclassTypeValidator" FullName="System.Configuration.SubclassTypeValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2661bed4f84e341e9fe8ddb21a38a2f971f363ea" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30442908" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SubclassTypeValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SubclassTypeValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.SubclassTypeValidator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SubclassTypeValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class SubclassTypeValidator sealed : System::Configuration::ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Sprawdza, czy obiekt jest klasa pochodna określonego typu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.SubclassTypeValidator> Klasa jest używana do sprawdzenia, czy obiekt spełnia określone kryteria. Kryteria weryfikacji jest ustanawiane, jeśli wystąpienie <xref:System.Configuration.SubclassTypeValidator> utworzyć klasy.  
  
 <xref:System.Configuration.SubclassTypeValidator.CanValidate%2A> Metoda określa, czy typ obiektu, sprawdzana jest w rzeczywistości <xref:System.Type>. Obiekt sprawdzany został przekazany jako parametr <xref:System.Configuration.SubclassTypeValidator.Validate%2A> metody. Ta metoda sprawdza najpierw, nie jest obiektem do zweryfikowania `null`, a następnie sprawdza, czy obiekt jest klasa pochodna oczekiwanego typu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SubclassTypeValidator (Type baseClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type baseClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SubclassTypeValidator.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseClass As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SubclassTypeValidator(Type ^ baseClass);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseClass">Klasa podstawowa na potrzeby sprawdzania poprawności.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Configuration.SubclassTypeValidator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kryteria weryfikacji jest oparta na `baseClass` parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseClass" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SubclassTypeValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu.</param>
        <summary>Określa, czy obiekt może być weryfikowane na podstawie typu.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="type" /> parametru zgodny typ, który może być zweryfikowany, a w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.SubclassTypeValidator.CanValidate%2A> Metoda określa, czy typ obiektu, sprawdzana jest w rzeczywistości <xref:System.Type>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SubclassTypeValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Wartość obiektu.</param>
        <summary>Określa, czy wartość obiektu jest nieprawidłowy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wystąpienie klasy <xref:System.Configuration.SubclassTypeValidator> utworzyć klasy, klasy podstawowej ma być dostarczana i używać jako kryteriów oceny. Obiekt do sprawdzania poprawności został przekazany jako parametr <xref:System.Configuration.SubclassTypeValidator.Validate%2A> metody. Ta metoda wykonuje sprawdzanie poprawności między klasą bazową i obiektu parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> nie jest <see cref="T:System.Type" /> mogą być uzyskane z <paramref name="baseClass" /> zgodnie z definicją w konstruktorze.</exception>
      </Docs>
    </Member>
  </Members>
</Type>