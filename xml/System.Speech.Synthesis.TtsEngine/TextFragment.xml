<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f206eea6504c60fe96eb6185eb47bafcf55d945" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69100684" /></Metadata><TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFragment" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFragment" />
  <TypeSignature Language="F#" Value="type TextFragment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje o atrybutach tekstu i mowy do użycia przez aparat syntezatora mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Infrastruktura platformy mowy rozpakuje strukturę opartą na języku XML SSML obiektów wejściowych i konstrukcji <xref:System.Speech.Synthesis.TtsEngine.TextFragment> .  
  
 Zawartość mowy jest dostępna za pomocą <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>właściwości <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment> , i <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> wystąpienia.  
  
 Informacje o atrybutach mowy, takie jak wyróżnianie, gęstość i szybkość, są <xref:System.Speech.Synthesis.TtsEngine.FragmentState> uzyskiwane z obiektu <xref:System.Speech.Synthesis.TtsEngine.TextFragment> zwróconego <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> przez właściwość.  
  
   
  
## Examples  
 Poniższy przykład stanowi część niestandardowej <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>implementacji syntezy mowy, która dziedziczy z i przy użyciu funkcji <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Implementacja programu<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicę wystąpień `Speak` do przesłania do metody na źródłowym aparacie syntezy.  
  
     Szczególna opieka jest używana do <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>przestrzegania, na <xref:System.Speech.Synthesis.TtsEngine.TextFragment> oryginalnym, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> podczas <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> tworzenia nowych <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Jeśli wartość <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wyliczenia przez znalezienie <xref:System.Speech.Synthesis.TtsEngine.FragmentState> właściwości<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> w zwracanej przez właściwość każdego wystąpienia to, implementacja  
  
    -   Tłumaczy amerykański Britishisms w tekst, który ma być mówiony.  
  
    -   <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Jeśli właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsów dostarczonych <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> do implementacji obsługuje typ zdarzenia,wystąpieniejestużywanedotworzeniazdarzeniawceluutworzeniamiernikapostępusyntezatora.<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>  
  
3.  Aparat renderowania mowy jest następnie wywoływany z zmodyfikowaną <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicą.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFragment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie <see langword="TextFragment" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor bez parametrów dla <xref:System.Speech.Synthesis.TtsEngine.TextFragment>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As FragmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::TtsEngine::FragmentState State { System::Speech::Synthesis::TtsEngine::FragmentState get(); void set(System::Speech::Synthesis::TtsEngine::FragmentState value); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.TtsEngine.FragmentState with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje o atrybucie mowy dla <see langword="TextFragment" />elementu.</summary>
        <value>Wystąpienie jest zwracane lub używane do ustawiania informacji o atrybucie mowy dla elementu <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />. <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna tej właściwości to `null`.  
  
 Informacje Prosody można uzyskać z <xref:System.Speech.Synthesis.TtsEngine.Prosody> wystąpienia zwracanego <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> przez <xref:System.Speech.Synthesis.TtsEngine.FragmentState> właściwość w wystąpieniu zwracanym przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia długość tekstu mowy w fragmencie.</summary>
        <value><see langword="int" /> Jest zwracany lub może służyć do ustawiania długości, w znaku, ciągu tekstowego skojarzonego z tym fragmentem, który ma być mówiony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna tej właściwości to 0.  
  
   
  
## Examples  
 Poniższy przykład stanowi część niestandardowej <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>implementacji syntezy mowy, która dziedziczy z i przy użyciu funkcji <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Implementacja programu<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicę wystąpień `Speak` do przesłania do metody na źródłowym aparacie syntezy.  
  
     Szczególna opieka jest używana do <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>przestrzegania, na <xref:System.Speech.Synthesis.TtsEngine.TextFragment> oryginalnym, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> podczas <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> tworzenia nowych <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Jeśli wartość <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wyliczenia przez znalezienie <xref:System.Speech.Synthesis.TtsEngine.FragmentState> właściwości<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> w zwracanej przez właściwość każdego wystąpienia to, implementacja  
  
    -   Tłumaczy amerykański Britishisms w tekst, który ma być mówiony.  
  
    -   <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Jeśli właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsów dostarczonych <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> do implementacji obsługuje typ zdarzenia,wystąpieniejestużywanedotworzeniazdarzeniawceluutworzeniamiernikapostępusyntezatora.<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>  
  
3.  Aparat renderowania mowy jest następnie wywoływany z zmodyfikowaną <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicą.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextOffset : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia początkową lokalizację tekstu w fragmencie.</summary>
        <value><see langword="int" /> Jest zwracany lub można użyć, aby ustawić lokalizację początkową, w znaku, część ciągu tekstowego skojarzonego z tym fragmentem, który ma być mówiony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna tej właściwości to 0.  
  
   
  
## Examples  
 Poniższy przykład stanowi część niestandardowej <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>implementacji syntezy mowy, która dziedziczy z i przy użyciu funkcji <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Implementacja programu<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicę wystąpień `Speak` do przesłania do metody na źródłowym aparacie syntezy.  
  
     Szczególna opieka jest używana do <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>przestrzegania, na <xref:System.Speech.Synthesis.TtsEngine.TextFragment> oryginalnym, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> podczas <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> tworzenia nowych <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Jeśli wartość <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wyliczenia przez znalezienie <xref:System.Speech.Synthesis.TtsEngine.FragmentState> właściwości<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> w zwracanej przez właściwość każdego wystąpienia to, implementacja  
  
    -   Tłumaczy amerykański Britishisms w tekst, który ma być mówiony.  
  
    -   <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Jeśli właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsów dostarczonych <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> do implementacji obsługuje typ zdarzenia,wystąpieniejestużywanedotworzeniazdarzeniawceluutworzeniamiernikapostępusyntezatora.<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>  
  
3.  Aparat renderowania mowy jest następnie wywoływany z zmodyfikowaną <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicą.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberSignature Language="VB.NET" Value="Public Property TextToSpeak As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextToSpeak { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextToSpeak : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia lub pobiera tekst mowy fragmentu.</summary>
        <value><see langword="System.String" /> Jest zwracany lub może służyć do ustawiania tekstu mowy, który ma być używany przez aparat syntezy mowy do generowania danych wyjściowych audio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna tej właściwości to `System.String.Empty`.  
  
 Aplikacje są bezpłatne, aby całkowicie zmienić wartość <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>.  
  
 Resetowanie wartości <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> nie spowoduje zmiany <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> wartości i <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>.  
  
   
  
## Examples  
 Poniższy przykład stanowi część niestandardowej <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>implementacji syntezy mowy, która dziedziczy z i przy użyciu funkcji <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Implementacja programu<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicę wystąpień `Speak` do przesłania do metody na źródłowym aparacie syntezy.  
  
     Szczególna opieka jest używana do <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>przestrzegania, na <xref:System.Speech.Synthesis.TtsEngine.TextFragment> oryginalnym, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> podczas <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> tworzenia nowych <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Jeśli wartość <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wyliczenia przez znalezienie <xref:System.Speech.Synthesis.TtsEngine.FragmentState> właściwości<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> w zwracanej przez właściwość każdego wystąpienia to, implementacja  
  
    -   Tłumaczy amerykański Britishisms w tekst, który ma być mówiony.  
  
    -   <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Jeśli właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsów dostarczonych <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> do implementacji obsługuje typ zdarzenia,wystąpieniejestużywanedotworzeniazdarzeniawceluutworzeniamiernikapostępusyntezatora.<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>  
  
3.  Aparat renderowania mowy jest następnie wywoływany z zmodyfikowaną <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicą.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
