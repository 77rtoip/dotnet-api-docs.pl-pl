<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c80a1ca495dfe40157bf97e75246761ad6921d28" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408829" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Abstrakcyjna klasa podstawowa do zaimplementowania przez wszystkie aparaty syntezy tekst na mowę.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do utworzenia aparatu niestandardowego tekstu na mowę, aplikacja zawsze musi implementować klasę pochodzącą od abstrakcyjna klasa podstawowa <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>.  
  
 Implementacja prawidłowo zarejestrowane <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> mogą być następnie użyta jako głosu Syntezator przez <xref:System.Speech.Synthesis> aplikacje oparte na przestrzeni nazw.  
  
 Obiektów dziedziczących <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> musi zastępować następujących członków: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> i <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.  
  
 Najważniejsze członkiem <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> jest klasy do zaimplementowania <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> metody.  
  
 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> Metoda jest wywoływana przez parser tekst infrastruktury odbieranie:  
  
1.  Odwołanie do <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsu, która zapewnia dostęp do systemu usług takich jak nawet usługi kolejkowania wiadomości i zapisywanie wyjścia audio.  
  
2.  Tablica <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienia utworzone z wejścia mowy syntezy Markup Language (SSML). Oprócz tekst, który ma być renderowany jako mowy, analiza SSML są przechowywane informacje o wymaganych atrybutów mowy w <xref:System.Speech.Synthesis.TtsEngine.FragmentState> wystąpienie skojarzone z każdym przychodzące <xref:System.Speech.Synthesis.TtsEngine.TextFragment> obiektu.  
  
 Aplikacja syntezatora mowy opcjonalnie mogą wysyłać żądania w formacie określonym produktem wyjściowym zaimplementowanie <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> wywoływana przez platformę, gdy próbuje Podaj poprawne dane wyjściowe audio.  
  
 Realizator również zapewnić obsługę zarządzania definicje zewnętrzne wymowy lub leksykonów, przy wykonywaniu <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> i <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">Pełna nazwa klucza rejestru, Token głosu skojarzone z <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> implementacji. aparat.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> na podstawie odpowiednich głosu tokenu klucza rejestru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołania do tego konstruktora są zwykle generowane przez <xref:System.Speech.Synthesis> Wybieranie głosowe Syntezator aplikacje mają być używane przez wystąpienie <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
 A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> należy zarejestrować w obszarze HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Poprawne wystąpienie <see langword="System.Uri" /> wskazującą położenie danych słownika.</param>
        <param name="mediaType">Ciąg zawierający typ nośnika leksykonie. Typy nośnika są bez uwzględniania wielkości liter.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejs używany do interakcji z infrastrukturą platformy.</param>
        <summary>Dodaje leksykonie do <see langword="Synthesizer" /><see langword="Voice" /> zaimplementowana przez bieżące <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leksykonie wymowy jest kolekcją słów ani fraz wraz z ich wymowy określona za pomocą alfabetu odpowiednie wymowy.  
  
 Ta metoda jest zazwyczaj wywoływana przez infrastrukturę platformy w odpowiedzi na <xref:System.Speech.Synthesis> aplikacje wywoływania <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> i przy użyciu głosu Syntezator zaimplementowana przez bieżące <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> wystąpienia.  
  
 Wartość `mediaType` jest zazwyczaj specyfikację MIME zgodnie ze specyfikacją SSML używa MIME dla specyfikacji nośnika.  
  
   
  
## Examples  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> używa <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsu przekazano można załadować słownika z zasobem. Następnie zapisuje `System.IO.Stream` do zastosowania w `System.Collections.Generic.Dictionary` wystąpienia indeksowane według leksykonie identyfikatora URI.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jest odpowiedzialny za implementacji znać pełni i być w stanie przetworzyć przechowywane w leksykonie <paramref name="uri" />. Implementacja musi również śledzić i zarządzaj nimi okresy istnienia wszystkich leksykonów, który jest dodawany.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">Prawidłowymi elementami członkowskimi typu <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> Wyliczenie wskazujące typ formatu żądanego wyjścia audio.</param>
        <param name="targetWaveFormat">Wskaźnik do <see langword="struct" /> zawierający ustawienia szczegółów dla typu audio format zażądał <c>speakOutputFormat</c> argumentu.</param>
        <summary>Zwraca najlepiej dopasowaną wyjścia audio obsługiwane przez synthesize danego aparatu odpowiedzi na żądanie z aparatem Syntezator obsługi formatu określonego w danych wyjściowych.</summary>
        <returns>Zwraca prawidłową <see langword="IntPtr" /> odwołujących się do wystąpienia <see langword="struct" /> zawierający szczegółowe informacje o formacie wyjściowym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Struktury używane jako `targetWaveFormat` i zwracany przez metodę powinien być zgodny z `WAVEFORMATEX` dostępnych w ramach SAPI, i powinna zostać przydzielona zwracanej wartości, przy użyciu `CoTaskMemAlloc`.  
  
 `struct` Podać funkcja:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Przykładowe zastosowanie poniżej weryfikuje wybrane dane wejściowe, używane, jeśli znajdują się w granicach tolerancji, w przeciwnym razie przy użyciu wartości domyślnych.  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Dziedziczenie z obiektu <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> należy zbadać określoną przez format zażądał danych wyjściowych <paramref name="targetWaveFormat" /> i zwracać najbliższym formacie, który go obsługuje.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Poprawne wystąpienie <see langword="System.Uri" /> wskazującą położenie danych słownika.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejsu przekazany przez infrastrukturę platformy, aby zezwolić na dostęp do zasobów infrastruktury.</param>
        <summary>Usuwa słownika, w obecnie załadowanych przez <see langword="Synthesizer" /><see langword="Voice" /> zaimplementowana przez bieżące <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leksykonie wymowy jest kolekcją słów ani fraz wraz z ich wymowy określona za pomocą alfabetu odpowiednie wymowy.  
  
 Ta metoda jest zazwyczaj wywoływana w odpowiedzi na <xref:System.Speech.Synthesis> aplikacje wywoływania <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> i przy użyciu głosu Syntezator zaimplementowana przez bieżące <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> wystąpienia.  
  
   
  
## Examples  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> używa leksykonie identyfikator URI do badania wystąpienia `System.Collections.Generic.Dictionary` dla `System.IO.Stream`, zamyka strumienia i usuwa identyfikator uri odwołujących się do słownika.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jest odpowiedzialny za implementacji znać pełni i być w stanie przetworzyć przechowywane w leksykonie <paramref name="uri" />. Implementacja musi również śledzić i zarządzaj nimi okresy istnienia wszystkich leksykonów, które powoduje usunięcie.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">Tablica <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> wystąpień zawierający tekst, który ma być renderowany w mowy.</param>
        <param name="waveHeader">
          <see langword="IntPtr" /> Wskazuje struktury zawierające format audio danych wyjściowych.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejsu przekazany przez infrastrukturę platformy, aby zezwolić na dostęp do zasobów infrastruktury.</param>
        <summary>Renderuje określony <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> tablicy w formacie określonym produktem wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Struktury używane jako `waveHeader` i zwracany przez metodę powinien być zgodny z `WAVEFORMATEX` dostępnych w ramach SAPI.  
  
 `struct` Podać funkcja:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 W poniższym przykładzie jest częścią implementacji syntezy mowy niestandardowych, dziedziczenie z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu programu <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienia i tworzy nowy tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień, które mają być przekazane do `Speak` metody w podstawowej aparat syntezy.  
  
2.  Jeśli <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wartość wyliczenia przez znaleziono z <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zwrócony przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> właściwości każdego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienie jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, implementacja  
  
    -   Wykonuje translację Americanism do Britishisms w tekst, który ma być używany.  
  
    -   Jeśli <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsy do obsługi wdrożenia <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> typ zdarzenia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> jest używane wystąpienie można utworzyć zdarzenia na wskaźnik postępu syntezatora jest tworzony dysk.  
  
3.  Aparat renderowania mowy nazywa się następnie z zmodyfikowanych <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicy.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementuje syntezatorów mowy niestandardowych przy użyciu <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> i <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> pracy jako filtry lub pośredników między aplikacjami Syntezator tworzony przy użyciu infrastruktury platformy przez członków <see cref="N:System.Speech.Synthesis" /> przestrzeni nazw i podstawowy system aparaty syntezy.  A <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> implementacja: 1.  Traps lub zmodyfikować aspektów przychodzącego <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> obiektów 2.  Generuje wszelkie niezbędne zdarzenia przy użyciu odwołania lokacji do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> wystąpienie 3.  Generuje rzeczywiste syntezatora mowy.  Generowanie mowy jest najbardziej zazwyczaj wykonywane przez wywołanie metody <c>Speak</c> na jednym z mowy renderowania aparaty dostarczane przez system operacyjny.  Jeśli jeden z dostępnych renderowania aparaty nie jest używany, obiekt dziedziczących <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> należy utworzyć własny aparat renderowania mowy.  Dostęp do <c>Speak</c> metoda uzyskany za pomocą rejestru i odbicie.  Przy dziedziczeniu z <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, konieczne jest przesłonięcie następujących członków: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, i <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>