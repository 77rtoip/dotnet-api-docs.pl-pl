<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f997637b2e580bde8d2113499021c961c4dc139d" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52216773" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Abstrakcyjna klasa bazowa realizowane przez wszystkie silniki synteza mowy na tekst.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do konstruowania aparatu niestandardowa zamiana tekstu na mowę, aplikacja musi zaimplementować zawsze klasy pochodzącej od abstrakcyjna klasa bazowa <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>.  
  
 Poprawnie zarejestrowanych implementacji <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> mogą być następnie użyta jako głosu Syntezator przez <xref:System.Speech.Synthesis> aplikacji opartych na przestrzeni nazw.  
  
 Obiektów dziedziczących <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> jest przesłonięcie następujących składowych: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> i <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.  
  
 Najważniejsze członkiem <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> jest klasy do zaimplementowania <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> metody.  
  
 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> Metoda jest wywoływana przez parser tekstu infrastruktur odbieranie:  
  
1.  Odwołanie do <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejs, który zapewnia dostęp do systemu usług, takich jak nawet Kolejkowanie i zapisywania danych wyjściowych audio.  
  
2.  Tablica <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienia utworzone z danych wejściowych mowy syntezy Markup Language (SSML). Oprócz tekstu mógł być renderowany jako mowy, analizowania SSML są przechowywane informacje o wymaganych atrybutów mowy w <xref:System.Speech.Synthesis.TtsEngine.FragmentState> wystąpienie skojarzone z każdym przychodzące <xref:System.Speech.Synthesis.TtsEngine.TextFragment> obiektu.  
  
 Aplikacja syntezatora mowy opcjonalnie wprowadzić żądań dotyczących określonego formatu wyjściowego, implementowanie <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> wywoływana przez platformę, gdy próbuje Podaj poprawne dane wyjściowe audio.  
  
 Implementujący również zapewnić obsługę zarządzania definicje zewnętrzne wymowy lub lexicons, przy wykonywaniu <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> i <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">Pełna nazwa klucza rejestru dla tokenu głosu związanych z <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> implementacji. aparat.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> na podstawie odpowiednich głosu tokenu klucza rejestru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołania do tego konstruktora są zwykle generowane przez <xref:System.Speech.Synthesis> aplikacje Wybieranie głosowe Syntezator ma być używany przez wystąpienie <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
 Element <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> musi być kluczu HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens rejestru.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Poprawne wystąpienie <see langword="System.Uri" /> wskazującą lokalizację danych słownika.</param>
        <param name="mediaType">Ciąg zawierający typ nośnika słownika. Typy nośników jest rozróżniana wielkość liter.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejs umożliwiający interakcję z infrastrukturą, platformy.</param>
        <summary>Dodaje leksykonu do <see langword="Synthesizer" /><see langword="Voice" /> implementowane przez bieżącą <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leksykonu Wymowa to zbiór słów i fraz, wraz z ich wymowy określony za pomocą odpowiednich Wymowa alfabetu.  
  
 Ta metoda jest zazwyczaj wywoływana przez infrastrukturę platformy w odpowiedzi na <xref:System.Speech.Synthesis> wywołanie aplikacji opartych na <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> i korzystając z funkcji głosowych Syntezator implementowane przez bieżącą <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> wystąpienia.  
  
 Wartość `mediaType` jest zazwyczaj specyfikację MIME, zgodnie z specyfikacją SSML używa MIME do specyfikacji nośnika.  
  
   
  
## Examples  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> używa <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsu przekazany do załadowania leksykonu z zasobem. Następnie zapisuje `System.IO.Stream` do zastosowania w `System.Collections.Generic.Dictionary` wypadku indeksowane przez leksykonu identyfikatora URI.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jest odpowiedzialny za implementację pełni znasz, i umożliwić przetworzenie leksykonu przechowywaną w <paramref name="uri" />. Implementacja musi również śledzić i zarządzaj nimi okresy wszystkich lexicons, który dodaje.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">Prawidłowym elementem członkowskim <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> Wyliczenie wskazujące typ formatu zażądał danych wyjściowych audio.</param>
        <param name="targetWaveFormat">Wskaźnik do <see langword="struct" /> zawierających szczegółowe ustawienia Typ formatu audio, żądane przez <paramref name="speakOutputFormat" /> argumentu.</param>
        <summary>Zwraca najlepiej dopasowaną wyjściowe audio, obsługiwane przez synthesize danego aparatu odpowiedzi na żądanie z aparatem Syntezator obsługi formatu określonego w danych wyjściowych.</summary>
        <returns>Zwraca prawidłową <see langword="IntPtr" /> odwołujące się do wystąpienia <see langword="struct" /> zawierające szczegółowe informacje na temat formatu wyjściowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Struktury, używane jako `targetWaveFormat` i zwracane przez metody powinny być zgodne z `WAVEFORMATEX` dostępnych w ramach nieokreślone, a zwrócona wartość powinna zostać przydzielona za pomocą `CoTaskMemAlloc`.  
  
 `struct` Należy podać odpowiednikiem funkcji:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 W przykładowej implementacji poniżej weryfikuje wybrane dane wejściowe, używane, jeśli znajdują się w granicach tolerancji, w przeciwnym razie przy użyciu wartości domyślnych.  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Dziedziczenie z obiektu <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> należy sprawdzić zażądał danych wyjściowych w formacie określony przez <paramref name="targetWaveFormat" /> i zwracają najbliższego formacie, który ją obsługuje.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Poprawne wystąpienie <see langword="System.Uri" /> wskazującą lokalizację danych słownika.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejsu przekazanego przez infrastrukturę platformy, aby zezwolić na dostęp do zasobów infrastruktury.</param>
        <summary>Usuwa leksykonu z załadowanych obecnie przez <see langword="Synthesizer" /><see langword="Voice" /> implementowane przez bieżącą <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leksykonu Wymowa to zbiór słów i fraz, wraz z ich wymowy określony za pomocą odpowiednich Wymowa alfabetu.  
  
 Ta metoda jest zazwyczaj wywoływana w odpowiedzi na <xref:System.Speech.Synthesis> wywołanie aplikacji opartych na <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> i korzystając z funkcji głosowych Syntezator implementowane przez bieżącą <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> wystąpienia.  
  
   
  
## Examples  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> używa leksykonu identyfikatora URI, aby wysłać zapytanie wystąpienie `System.Collections.Generic.Dictionary` dla `System.IO.Stream`, zamyka strumienia i usuwa identyfikator uri odwołujący się do słownika.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jest odpowiedzialny za implementację pełni znasz, i umożliwić przetworzenie leksykonu przechowywaną w <paramref name="uri" />. Implementacja musi również śledzić i zarządzaj nimi okresy lexicons wszystkie, które usuwa.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">Tablica <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> wystąpień zawierający tekst, który ma być renderowana na mowę.</param>
        <param name="waveHeader">
          <see langword="IntPtr" /> Wskazuje do struktury zawierającej format danych wyjściowych audio.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejsu przekazanego przez infrastrukturę platformy, aby zezwolić na dostęp do zasobów infrastruktury.</param>
        <summary>Renderuje określony <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> tablicy w formacie określonym produktem wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Struktury używane jako `waveHeader` i zwracane przez metody powinny być zgodne z `WAVEFORMATEX` dostępnych w ramach nieokreślone.  
  
 `struct` Należy podać odpowiednikiem funkcji:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono część wykonania synteza mowy niestandardowej, dziedziczenie z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu programu <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową tablicę z <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień, które zostaną przekazane do `Speak` metody na aparacie syntezy podstawowej.  
  
2.  Jeśli <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wartość wyliczenia przez znaleźć <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zwrócone przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> właściwości każdego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienie jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, wykonania  
  
    -   Tłumaczy Americanism do Britishisms w tekst, który ma być używany.  
  
    -   Jeśli <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsami do obsługi wdrożenia <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> typ zdarzenia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia jest używany do tworzenia zdarzenia wskaźnik postępu Syntezator jest tworzony dysk.  
  
3.  Aparat renderowania mowy jest następnie wywoływana za pomocą zmodyfikowanego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicy.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Syntezatora mowy niestandardowej implementuje przy użyciu <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> i <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> działają jako filtry lub rolę pośredników między aplikacjami Syntezator tworzony przy użyciu infrastruktury platformy za pomocą elementów członkowskich <see cref="N:System.Speech.Synthesis" /> przestrzeni nazw i aparaty synteza mowy bazowego systemu.  
  
A <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> implementacji: 
1.  Traps lub modyfikowanie aspektów przychodzącego <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> obiektów 
2.  Generuje wszelkie niezbędne zdarzenia przy użyciu witryny odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> wystąpienia 
3.  Generuje rzeczywiste syntezatora mowy.  
  
Generowanie mowy najczęściej odbywa się przez wywołanie metody <c>Speak</c> na jednej z funkcji rozpoznawania mowy, renderowanie aparatów dostarczone przez system operacyjny.  
  
Jeśli jeden z dostępnych renderowania aparaty nie jest używany, obiekt, który dziedziczy z <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> trzeba utworzyć swój własny aparat renderowania mowy.  
  
Dostęp do <c>Speak</c> metody na uzyskanej za pomocą rejestru i odbicia. .  
  
Przy dziedziczeniu z <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, konieczne jest przesłonięcie następujących składowych: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, i <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>