<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b2dcfe883fdf948ef1cbb68701b810d55d6e1ef" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69100647" /></Metadata><TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Abstrakcyjna klasa bazowa, która ma być implementowana przez cały tekst w aparatach syntezy mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby utworzyć niestandardowy tekst do aparatu mowy, aplikacja musi zawsze implementować klasę pochodzącą od abstrakcyjnej klasy <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>bazowej.  
  
 Prawidłowo zarejestrowana implementacja programu <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> może być używana jako głos syntezatora przez <xref:System.Speech.Synthesis> aplikacje na podstawie przestrzeni nazw.  
  
 Obiekty dziedziczące z programu <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> muszą przesłaniać następujące elementy członkowskie <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> , i <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.  
  
 Najważniejszym elementem członkowskim <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> klasy do zaimplementowania <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> jest metoda.  
  
 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> Metoda jest wywoływana przez pobieranie analizatora tekstu infrastruktury:  
  
1.  Odwołanie do <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsu, które zapewnia dostęp do usług systemowych, takich jak nawet kolejkowanie i pisanie danych wyjściowych audio.  
  
2.  Tablica <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienia wygenerowanego na podstawie danych wejściowych języka SSML (Speech synteza Markup Language). Oprócz tekstu, który ma być renderowany jako mowę, analizowanie SSML przechowuje informacje o żądanych atrybutach mowy w <xref:System.Speech.Synthesis.TtsEngine.FragmentState> wystąpieniu skojarzonym z każdym przychodzącym <xref:System.Speech.Synthesis.TtsEngine.TextFragment> obiektem.  
  
 Aplikacja syntezatora mowy może opcjonalnie wykonać żądania dla określonego formatu wyjściowego przez implementację <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> do wywołania przez platformę, gdy próbuje zapewnić poprawne wyjście audio.  
  
 Program implementujący może także zapewnić obsługę zarządzania zewnętrznymi definicjami wymowy lub leksykonów przez ich implementację <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> i. <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">Pełna nazwa klucza rejestru dla tokenu głosowego skojarzonego z <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> implementacją. wyszukiwarce.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> na podstawie odpowiedniego klucza rejestru tokenu głosowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołania tego konstruktora są zwykle generowane przez <xref:System.Speech.Synthesis> aplikacje oparte na wybieraniu głosu syntezatora, który ma być używany przez <xref:System.Speech.Synthesis.SpeechSynthesizer>wystąpienie.  
  
 A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> musi być zarejestrowany w HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Prawidłowe wystąpienie <see langword="System.Uri" /> wskazujące lokalizację informacji o leksykonie.</param>
        <param name="mediaType">Ciąg zawierający typ nośnika leksykonu. W przypadku typów nośników nie jest rozróżniana wielkość liter.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejsu używanego do współpracy z infrastrukturą platformy.</param>
        <summary>Dodaje Leksykon do <see langword="Synthesizer" /> <see langword="Voice" /> zaimplementowane przez bieżące <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leksykon wymowy to kolekcja słów lub fraz wraz z wymowymi określonymi przy użyciu odpowiedniego alfabetu wymowy.  
  
 Ta metoda jest zazwyczaj wywoływana przez infrastrukturę platformy w odpowiedzi na <xref:System.Speech.Synthesis> aplikacje oparte na wywołaniu <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> i używające głosu syntezatora zaimplementowanego przez bieżące <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> wystąpienie.  
  
 Wartość `mediaType` jest zazwyczaj specyfikacją MIME, ponieważ Specyfikacja SSML używa MIME dla specyfikacji nośnika.  
  
   
  
## Examples  
 Implementacja programu <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> używa interfejsu przekazanego do załadowania leksykonu z zasobu. Następnie przechowuje `System.IO.Stream` do leksykonu `System.Collections.Generic.Dictionary` w wystąpieniu indeksowanego przez identyfikator URI leksykonu.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Jest odpowiedzialna za pełną znajomość implementacji i możliwość przetwarzania leksykonów przechowywanych w <paramref name="uri" />. Implementacja musi także śledzić okresy istnienia wszystkich leksykonów, które dodaje.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">Prawidłowy element członkowski <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> wyliczenia wskazujący typ żądanego formatu wyjściowego audio.</param>
        <param name="targetWaveFormat">Wskaźnik do <see langword="struct" /> ustawienia zawierającego szczegóły dla typu formatu dźwięku żądanego <paramref name="speakOutputFormat" /> przez argument.</param>
        <summary>Zwraca najlepiej pasujące dane wyjściowe audio obsługiwane przez daną odpowiedź aparatu syntezy danych na żądanie do aparatu syntezatora na potrzeby obsługi określonego formatu danych wyjściowych.</summary>
        <returns>Zwraca prawidłowe <see langword="IntPtr" /> wystąpienie odwołujące <see langword="struct" /> się do zawierającego szczegółowe informacje o formacie danych wyjściowych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Struktura używana jako `targetWaveFormat` i zwracana przez metodę powinna być zgodna `WAVEFORMATEX` z funkcją dostępną w ramach SAPI, a zwrócona wartość powinna być alokowana `CoTaskMemAlloc`przy użyciu.  
  
 `struct` Musi zapewniać funkcje równoważne:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Poniższe przykładowe implementacje sprawdzają poprawność wybranych danych wejściowych przy użyciu ich, jeśli znajdują się w tolerancjach, w przeciwnym razie przy użyciu wartości domyślnych.  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Obiekt Dziedziczony z <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> powinien przeanalizować żądany format wyjściowy określony przez <paramref name="targetWaveFormat" /> i zwrócić najbliższy obsługiwany format.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Prawidłowe wystąpienie <see langword="System.Uri" /> wskazujące lokalizację informacji o leksykonie.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejsu przekazaną przez infrastrukturę platformy, aby umożliwić dostęp do zasobów infrastruktury.</param>
        <summary>Usuwa Leksykon aktualnie załadowany przez <see langword="Synthesizer" /> <see langword="Voice" /> zaimplementowane przez bieżące <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leksykon wymowy to kolekcja słów lub fraz wraz z wymowymi określonymi przy użyciu odpowiedniego alfabetu wymowy.  
  
 Ta metoda jest zazwyczaj wywoływana w odpowiedzi na <xref:System.Speech.Synthesis> aplikacje bazujące na wywołaniu <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> i używaniu głosu syntezatora zaimplementowanego przez bieżące <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> wystąpienie.  
  
   
  
## Examples  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> używa identyfikatora URI leksykonu do wykonywania zapytań o wystąpienie `System.Collections.Generic.Dictionary` dla `System.IO.Stream`, zamyka strumień i usuwa identyfikator URI odwołujący się do leksykonu.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Jest odpowiedzialna za pełną znajomość implementacji i możliwość przetwarzania leksykonów przechowywanych w <paramref name="uri" />. Implementacja musi także śledzić okresy istnienia wszystkich leksykonów, które usuwa.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">Tablica <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> wystąpień zawierających tekst, który ma być renderowany w mowę.</param>
        <param name="waveHeader"><see langword="IntPtr" /> Wskazanie struktury zawierającej format danych wyjściowych audio.</param>
        <param name="site">Odwołanie do <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interfejsu przekazaną przez infrastrukturę platformy, aby umożliwić dostęp do zasobów infrastruktury.</param>
        <summary>Renderuje <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> określoną tablicę w określonym formacie danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Struktura używana jako `waveHeader` i zwracana przez metodę powinna być zgodna `WAVEFORMATEX` z funkcją dostępną w ramach interfejsu SAPI.  
  
 `struct` Musi zapewniać funkcje równoważne:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Poniższy przykład jest częścią niestandardowej implementacji syntezy mowy, która dziedziczy z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu funkcji <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>i<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja programu<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicę wystąpień `Speak` do przesłania do metody na źródłowym aparacie syntezy.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Jeśli wartość <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wyliczenia przez znalezienie <xref:System.Speech.Synthesis.TtsEngine.FragmentState> właściwości<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> w zwracanej przez właściwość każdego wystąpienia to, implementacja  
  
    -   Tłumaczy amerykański Britishisms w tekst, który ma być mówiony.  
  
    -   <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Jeśli właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsów dostarczonych <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> do implementacji obsługuje typ zdarzenia,wystąpieniejestużywanedotworzeniazdarzeniawceluutworzeniamiernikapostępusyntezatora.<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>  
  
3.  Aparat renderowania mowy jest następnie wywoływany z zmodyfikowaną <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicą.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Niestandardowy syntezator mowy implementuje używanie <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> i <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> Praca jako filtrów lub pośredników między aplikacjami syntezatorów zbudowanymi przy użyciu infrastruktury platformy <see cref="N:System.Speech.Synthesis" /> przez elementy członkowskie przestrzeni nazw i podstawowe aparaty syntezy mowy systemu.  
  
<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> Implementacja: 
1.  Pułapki lub modyfikowanie aspektów obiektów <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> przychodzących 
2.  Generuje wszystkie wymagane zdarzenia korzystające z odwołania do lokacji <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> do wystąpienia 
3.  Generuje rzeczywistą funkcję wygenerowanej mowy.  
  
Generowanie mowy jest zazwyczaj wykonywane przez wywołanie <c>mówić</c> na jednym z aparatów renderowania mowy dostarczanych przez system operacyjny.  
  
Jeśli jeden z dostępnych aparatów renderowania mowy nie jest używany, obiekt dziedziczenia z <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> musi utworzyć własny aparat renderowania mowy.  
  
Dostęp do metody <c>mów</c> w uzyskaniu przy użyciu rejestru i odbicia. .  
  
W przypadku dziedziczenia <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />z, należy zastąpić następujące elementy członkowskie: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />,, i <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
