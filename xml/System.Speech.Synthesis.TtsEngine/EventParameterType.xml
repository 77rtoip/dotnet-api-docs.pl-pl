<Type Name="EventParameterType" FullName="System.Speech.Synthesis.TtsEngine.EventParameterType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8400458ce175b78e8dd9477c646c184c735c0185" /><Meta Name="ms.sourcegitcommit" Value="406d23aba879fbb482c6da0f64c8ef9494f6a944" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/31/2019" /><Meta Name="ms.locfileid" Value="68686341" /></Metadata><TypeSignature Language="C#" Value="public enum EventParameterType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventParameterType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.EventParameterType" />
  <TypeSignature Language="VB.NET" Value="Public Enum EventParameterType" />
  <TypeSignature Language="C++ CLI" Value="public enum class EventParameterType" />
  <TypeSignature Language="F#" Value="type EventParameterType = " />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Wylicza typy wskaźników danych przekazaną do zdarzeń syntezy mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

Wyliczenie jest używane podczas konstruowania <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> obiektu. `EventParameterType` <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.IntPtr> `param2` Element członkowski `parameterType` wyliczenia przeszedł jako argument do konstruktora, aby określić sposób interpretowania argumentu konstruktora (który musi być). `EventParameterType`  
  
Wybór `EventParameterType` jest określany na podstawie typu żądanego zdarzenia, określonego przez <xref:System.Speech.Synthesis.TtsEngine.TtsEventId?displayProperty=nameWithType>element członkowski.  
  
Aby uzyskać szczegółowe informacje na temat `EventParameterType`sposobu użycia, zobacz dokumentację<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>  
  
> [!NOTE]
>  Obecnie wystąpienia zarządzanych syntetycznych aparatów mowy pisanych przy użyciu elementów członkowskich <xref:System.Speech.Synthesis> przestrzeni nazw nie mogą zmieniać zasobów po konstrukcji.    
  
## Examples  
 Poniższy przykład <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>jest częścią niestandardowej implementacji syntezy mowy, która <xref:System.Speech.Synthesis.TtsEngine.TextFragment>dziedziczy z i przy użyciu funkcji, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Implementacja programu<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicę wystąpień `Speak` do przesłania do metody na źródłowym aparacie syntezy.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Jeśli wartość <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wyliczenia przez znalezienie <xref:System.Speech.Synthesis.TtsEngine.FragmentState> właściwości<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> w zwracanej przez właściwość każdego wystąpienia to, implementacja  
  
    -   Tłumaczy amerykański Britishisms w tekst, który ma być mówiony.  
  
    -   <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Jeśli właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsów dostarczonych <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> do implementacji obsługuje typ zdarzenia,wystąpieniejestużywanedotworzeniazdarzeniawceluutworzeniamiernikapostępusyntezatora.<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>  
  
         Parametry, w <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.EventParameterType> tym wartość elementu członkowskiego zwracanego <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>przez, są `LogSpeechEvent` używane do rejestrowania zdarzenia wygenerowanego przez metodę.  
  
3.  Aparat renderowania mowy jest następnie wywoływany z zmodyfikowaną <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicą.  
  
```csharp
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
  </Docs>
  <Members>
    <Member MemberName="Object">
      <MemberSignature Language="C#" Value="Object" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Object = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Object" />
      <MemberSignature Language="VB.NET" Value="Object" />
      <MemberSignature Language="C++ CLI" Value="Object" />
      <MemberSignature Language="F#" Value="Object = 2" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Object" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Obecnie nie jest obsługiwane.</summary>
      </Docs>
    </Member>
    <Member MemberName="Pointer">
      <MemberSignature Language="C#" Value="Pointer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Pointer = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Pointer" />
      <MemberSignature Language="VB.NET" Value="Pointer" />
      <MemberSignature Language="C++ CLI" Value="Pointer" />
      <MemberSignature Language="F#" Value="Pointer = 3" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Pointer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Obecnie nie jest obsługiwane.</summary>
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="String" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType String = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.String" />
      <MemberSignature Language="VB.NET" Value="String" />
      <MemberSignature Language="C++ CLI" Value="String" />
      <MemberSignature Language="F#" Value="String = 4" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.String" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Wskazuje, że <paramref name="param2" /> argument <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> jest <see langword="System.IntPtr" /> tworzony przy użyciu <see langword="System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni" /> odwoływania <see langword="System.String" /> się do obiektu; <paramref name="param1" /> może potrwać dowolną wartość.</summary>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="Token" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Token = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Token" />
      <MemberSignature Language="VB.NET" Value="Token" />
      <MemberSignature Language="C++ CLI" Value="Token" />
      <MemberSignature Language="F#" Value="Token = 1" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Token" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Wskazuje, że <paramref name="param2" /> argument <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> jest <see cref="T:System.IntPtr" /> tworzony przy użyciu <see cref="Overload:System.Runtime.InteropServices.Marshal.PtrToStructure" /> , który odwołuje się do tokenu technologii rozpoznawania mowy dla systemu Windows, który jest obiektem technologii rozpoznawania mowy dla systemu Windows, reprezentującym zasób, taki jak Voice (<see cref="T:System.Speech.Synthesis.VoiceInfo" />). <paramref name="param1" />może potrwać dowolną wartość.</summary>
      </Docs>
    </Member>
    <Member MemberName="Undefined">
      <MemberSignature Language="C#" Value="Undefined" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Undefined = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Undefined" />
      <MemberSignature Language="VB.NET" Value="Undefined" />
      <MemberSignature Language="C++ CLI" Value="Undefined" />
      <MemberSignature Language="F#" Value="Undefined = 0" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Undefined" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Wskazuje, że <paramref name="param2" /> argument <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> jest niezdefiniowany. Na <paramref name="param1" /> ogół i <paramref name="param2" /> są ignorowane. Jeśli <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId" /> jednak ma wartość <see cref="F:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary" />, można wygenerować zdarzenie miernika postępu. <paramref name="param1" />powinna być liczbą całkowitą zawierającą długość bieżącego wyrazu i <paramref name="param2" /> <see cref="T:System.IntPtr" /> odwołaniem do liczby całkowitej zawierającej przesunięcie bieżącego wyrazu.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
