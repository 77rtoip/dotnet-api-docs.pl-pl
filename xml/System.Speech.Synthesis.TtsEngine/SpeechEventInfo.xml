<Type Name="SpeechEventInfo" FullName="System.Speech.Synthesis.TtsEngine.SpeechEventInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d25459f6827e7c6c5a29e2a0332c95a336d76629" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39811427" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpeechEventInfo : IEquatable&lt;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpeechEventInfo extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpeechEventInfo&#xA;Implements IEquatable(Of SpeechEventInfo)" />
  <TypeSignature Language="C++ CLI" Value="public value class SpeechEventInfo : IEquatable&lt;System::Speech::Synthesis::TtsEngine::SpeechEventInfo&gt;" />
  <TypeSignature Language="F#" Value="type SpeechEventInfo = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.ImmutableObject(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Służy do określania typu zdarzenia i jego argumentów (jeśli istnieje) zostanie wygenerowany jako część renderowanie tekstu na mowę przez aparat niestandardowe syntetycznych mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat synteza mowy niestandardowej żądań generowania zdarzeń w ramach platformy mowy, zapewniając odpowiednią <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia do <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A> członkiem <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> obiekt lokacji aparat przekazany do implementacji klasy <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono część wykonania synteza mowy niestandardowej, dziedziczenie z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu programu <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową tablicę z <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień, które zostaną przekazane do `Speak` metody na aparacie syntezy podstawowej.  
  
2.  Jeśli <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wartość wyliczenia przez znaleźć <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zwrócone przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> właściwości każdego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienie jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, wykonania  
  
    -   Tłumaczy Americanism do Britishisms w tekst, który ma być używany.  
  
    -   Jeśli <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsami do obsługi wdrożenia <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> typ zdarzenia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia jest używany do tworzenia zdarzenia wskaźnik postępu Syntezator jest tworzony dysk.  
  
3.  Aparat renderowania mowy jest następnie wywoływana za pomocą zmodyfikowanego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicy.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechEventInfo (short eventId, short parameterType, int param1, IntPtr param2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 eventId, int16 parameterType, int32 param1, native int param2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventId As Short, parameterType As Short, param1 As Integer, param2 As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechEventInfo(short eventId, short parameterType, int param1, IntPtr param2);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.SpeechEventInfo : int16 * int16 * int * nativeint -&gt; System.Speech.Synthesis.TtsEngine.SpeechEventInfo" Usage="new System.Speech.Synthesis.TtsEngine.SpeechEventInfo (eventId, parameterType, param1, param2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="eventId" Type="System.Int16" />
        <Parameter Name="parameterType" Type="System.Int16" />
        <Parameter Name="param1" Type="System.Int32" />
        <Parameter Name="param2" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="eventId">Wystąpienie <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" /> wskazujący rodzaj zdarzenia platformy mowy <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> obiekt ma obsługiwać.</param>
        <param name="parameterType">Wystąpienie <see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" /> wskazującą sposób, w jaki <see langword="System.IntPtr" /> odniesienie do <c>param2</c> ma być interpretowany, a co za tym idzie, korzystanie z <c>param1</c>.</param>
        <param name="param1">Wartość do przekazania na platformę mowy zleconą przez wystąpienie zdarzenia <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> można skonstruować jest generowany.  
  
Znaczenie dokładnie ta liczba całkowita jest niejawnie określany przez wartość <c>zgodność</c>.</param>
        <param name="param2">A <see langword="System.IntPtr" /> wystąpienia odwołuje się do obiektu. do przekazania na platformę mowy zleconą przez wystąpienie zdarzenia <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> można skonstruować jest generowany.  
  
Typ, który musi być przywoływana jest jawnie zdefiniowany przez wartość <c>zgodność</c>. Wartość <see langword="System.IntPtr.Zero" />.</param>
        <summary>Preferowany Constucts <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dozwolone wartości używanych dla `parameterType`, `param1`, i `param2` i ich znaczenie jest zależna od typu zdarzenia, które są wymagane, określone przez członka <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> umożliwiający `eventId`.  
  
 Aby uzyskać szczegółowe informacje na temat odpowiednie wartości dla `parameterType`, `param1`, i `param2`, zobacz dokumentację <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>  
  
 Typ zdarzenia, które mogą być obsługiwane przez infrastrukturę platformy mowy można uzyskać za pośrednictwem <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość Syntezator aparatu lokacji wdrożenia <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono część wykonania synteza mowy niestandardowej, dziedziczenie z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu programu <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową tablicę z <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień, które zostaną przekazane do `Speak` metody na aparacie syntezy podstawowej.  
  
2.  Jeśli <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wartość wyliczenia przez znaleźć <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zwrócone przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> właściwości każdego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienie jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, wykonania  
  
    -   Tłumaczy Americanism do Britishisms w tekst, który ma być używany.  
  
    -   Jeśli <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsami do obsługi wdrożenia <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> typ zdarzenia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia jest używany do tworzenia zdarzenia wskaźnik postępu Syntezator jest tworzony dysk.  
  
3.  Aparat renderowania mowy jest następnie wywoływana za pomocą zmodyfikowanego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicy.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy <c>SpeechEventInfo</c> wystąpienie jest taki sam jak inny obiekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="speechEventInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do oceny.</param>
        <summary>Określa, czy określony obiekt jest wystąpieniem <c>SpeechEventInfo</c> i równa bieżące wystąpienie <c>SpeechEventInfo</c>.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> jest taki sam, jak bieżący <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> obiektu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Speech.Synthesis.TtsEngine.SpeechEventInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Speech::Synthesis::TtsEngine::SpeechEventInfo other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="speechEventInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="other">
          <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> Obiektu do oceny.</param>
        <summary>Określa, czy określony <c>SpeechEventInfo</c> obiekt jest taki sam do bieżącego wystąpienia <c>SpeechEventInfo</c>.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="other" /> jest taki sam, jak bieżący <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> obiektu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventId">
      <MemberSignature Language="C#" Value="public short EventId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 EventId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventId As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short EventId { short get(); };" />
      <MemberSignature Language="F#" Value="member this.EventId : int16" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera i ustaw zdarzenia platformy mowy którego wystąpienia <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> służy do żądania.</summary>
        <value>Zwraca element członkowski <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" /> jako <see langword="short" />, wskazujący typ zdarzenia <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> obiektu polega na generowaniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie przedstawiono część wykonania synteza mowy niestandardowej, dziedziczenie z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu programu <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową tablicę z <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień, które zostaną przekazane do `Speak` metody na aparacie syntezy podstawowej.  
  
2.  Jeśli <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wartość wyliczenia przez znaleźć <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zwrócone przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> właściwości każdego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienie jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, wykonania  
  
    -   Tłumaczy Americanism do Britishisms w tekst, który ma być używany.  
  
    -   Jeśli <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsami do obsługi wdrożenia <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> typ zdarzenia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia jest używany do tworzenia zdarzenia wskaźnik postępu Syntezator jest tworzony dysk.  
  
         Parametry na <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, w tym <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> są używane do logowania zdarzenia wygenerowane przez `LogSpeechEvent` metody.  
  
3.  Aparat renderowania mowy jest następnie wywoływana za pomocą zmodyfikowanego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicy.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="speechEventInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Udostępnia wartość skrótu dla <c>SpeechEventInfo</c> obiektu.</summary>
        <returns>Wartość skrótu dla <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (event1 As SpeechEventInfo, event2 As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Speech::Synthesis::TtsEngine::SpeechEventInfo event1, System::Speech::Synthesis::TtsEngine::SpeechEventInfo event2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Speech.Synthesis.TtsEngine.SpeechEventInfo * System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="event1 = event2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event1" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
        <Parameter Name="event2" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="event1">
          <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> Obiekt do porównania z <c>event2</c>.</param>
        <param name="event2">
          <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> Obiekt do porównania z <c>Zdarzenie1</c>.</param>
        <summary>Określa, czy dwóch wystąpień z <c>SpeechEventInfo</c> są takie same.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="event1" /> jest taka sama jak <paramref name="event2" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Jest równoważne metodę dla tego operatora <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals%28System.Speech.Synthesis.TtsEngine.SpeechEventInfo%29?displayProperty=nameWithType>.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (event1 As SpeechEventInfo, event2 As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Speech::Synthesis::TtsEngine::SpeechEventInfo event1, System::Speech::Synthesis::TtsEngine::SpeechEventInfo event2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Speech.Synthesis.TtsEngine.SpeechEventInfo * System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality (event1, event2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event1" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
        <Parameter Name="event2" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="event1">
          <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> Obiekt do porównania z <c>event2</c>.</param>
        <param name="event2">
          <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> Obiekt do porównania z <c>Zdarzenie1</c>.</param>
        <summary>Określa, czy dwóch wystąpień z <c>SpeechEventInfo</c> nie są takie same.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="event1" /> różni się od <paramref name="event2" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Jest równoważne metodę dla tego operatora <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals%28System.Speech.Synthesis.TtsEngine.SpeechEventInfo%29?displayProperty=nameWithType>.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Param1">
      <MemberSignature Language="C#" Value="public int Param1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Param1" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Param1 As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Param1 { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Param1 : int" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera i ustaw <see langword="integer" /> wartość (<paramref name="param1" /> w konstruktorze) mają być przekazane do platformy mowy, aby wygenerować zdarzenie bieżące wystąpienie <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> służy do żądania.</summary>
        <value>Zwraca <see langword="integer" /> mają być przekazane do rozpoznawania mowy platformy, gdy zdarzenie jest określony przez bieżące wystąpienie <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> jest generowany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wymagania i znaczenie <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> unikatowo określona, według wartości <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> i <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> właściwości <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia.  
  
 Aby uzyskać szczegółowe informacje na temat użycia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A>, zobacz dokumentację dotyczącą <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono część wykonania synteza mowy niestandardowej, dziedziczenie z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu programu <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową tablicę z <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień, które zostaną przekazane do `Speak` metody na aparacie syntezy podstawowej.  
  
2.  Jeśli <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wartość wyliczenia przez znaleźć <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zwrócone przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> właściwości każdego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienie jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, wykonania  
  
    -   Tłumaczy Americanism do Britishisms w tekst, który ma być używany.  
  
    -   Jeśli <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsami do obsługi wdrożenia <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> typ zdarzenia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia jest używany do tworzenia zdarzenia wskaźnik postępu Syntezator jest tworzony dysk.  
  
         Parametry na <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, w tym <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A> są używane do logowania zdarzenia wygenerowane przez `LogSpeechEvent` metody.  
  
3.  Aparat renderowania mowy jest następnie wywoływana za pomocą zmodyfikowanego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicy.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Param2">
      <MemberSignature Language="C#" Value="public IntPtr Param2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Param2" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Param2 As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Param2 { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Param2 : nativeint" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera i ustaw <see langword="System.IntPtr" /> wystąpienia (<paramref name="param2" /> w konstruktorze) odwołuje się do obiektów, które mają być przekazane do platformy mowy, aby wygenerować zdarzenie bieżące wystąpienie <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> służy do żądania.</summary>
        <value>Zwraca <see langword="System.IntPtr" /> odwołuje się do obiektów, które mają być przekazane do rozpoznawania mowy platformy, gdy zdarzenie jest określony przez bieżące wystąpienie <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> jest generowany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wymagania dotyczące `System.IntPtr` odniesienie do <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> unikatowo określona, według wartości <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> i <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> właściwości <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia.  
  
 Aby uzyskać szczegółowe informacje na temat użycia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>, zobacz dokumentację dotyczącą <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono część wykonania synteza mowy niestandardowej, dziedziczenie z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu programu <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową tablicę z <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień, które zostaną przekazane do `Speak` metody na aparacie syntezy podstawowej.  
  
2.  Jeśli <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wartość wyliczenia przez znaleźć <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zwrócone przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> właściwości każdego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienie jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, wykonania  
  
    -   Tłumaczy Americanism do Britishisms w tekst, który ma być używany.  
  
    -   Jeśli <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsami do obsługi wdrożenia <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> typ zdarzenia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia jest używany do tworzenia zdarzenia wskaźnik postępu Syntezator jest tworzony dysk.  
  
         Parametry na <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, w tym <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> są używane do logowania zdarzenia wygenerowane przez `LogSpeechEvent` metody.  
  
3.  Aparat renderowania mowy jest następnie wywoływana za pomocą zmodyfikowanego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicy.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterType">
      <MemberSignature Language="C#" Value="public short ParameterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 ParameterType" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParameterType As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short ParameterType { short get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterType : int16" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca typ danych obiektu wskazywanego przez <see langword="IntPtr" /> zwrócone przez <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" /> parametru na bieżącym <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> obiektu.</summary>
        <value>A <see langword="short" /> wartości odpowiadające jest członkiem <see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" /> wyliczenie i wskazuje typ danych obiektu wskazywanego przez <see langword="IntPtr" /> zwrócone przez <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" /> parametru i używane jako drugi argument funkcji konstruktora obiektu bieżący <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wymagania dotyczące `System.IntPtr` odniesienie do <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> unikatowo określona, według wartości <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> i <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> właściwości <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia.  
  
 Aby uzyskać szczegółowe informacje na temat użycia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>, zobacz dokumentację dotyczącą <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono część wykonania synteza mowy niestandardowej, dziedziczenie z <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>i przy użyciu programu <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, i <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Implementacja <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Odbiera tablicę <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień i tworzy nową tablicę z <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpień, które zostaną przekazane do `Speak` metody na aparacie syntezy podstawowej.  
  
2.  Jeśli <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> wartość wyliczenia przez znaleźć <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zwrócone przez <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> właściwości każdego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> wystąpienie jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, wykonania  
  
    -   Tłumaczy Americanism do Britishisms w tekst, który ma być używany.  
  
    -   Jeśli <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> właściwość <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfejsami do obsługi wdrożenia <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> typ zdarzenia <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wystąpienia jest używany do tworzenia zdarzenia wskaźnik postępu Syntezator jest tworzony dysk.  
  
         Parametry na <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, w tym <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> są używane do logowania zdarzenia wygenerowane przez `LogSpeechEvent` metody.  
  
3.  Aparat renderowania mowy jest następnie wywoływana za pomocą zmodyfikowanego <xref:System.Speech.Synthesis.TtsEngine.TextFragment> tablicy.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>