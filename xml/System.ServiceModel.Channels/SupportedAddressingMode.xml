<Type Name="SupportedAddressingMode" FullName="System.ServiceModel.Channels.SupportedAddressingMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed6ff44a3743f1203dea877309b989d8aaffda93" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69107172" /></Metadata><TypeSignature Language="C#" Value="public enum SupportedAddressingMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SupportedAddressingMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.SupportedAddressingMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum SupportedAddressingMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class SupportedAddressingMode" />
  <TypeSignature Language="F#" Value="type SupportedAddressingMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa, czy usługa obsługuje wysyłanie odpowiedzi tylko do adresów anonimowych, tylko do adresów nieanonimowych lub do obu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Wyliczenie służy do określania możliwości serwera, co z kolei nakłada wymóg na jego klientów.  
  
 Windows Communication Foundation (WCF) ma różne mechanizmy kontroli adresowania służące do określania, gdzie mają być wysyłane komunikaty. Na przykład istnieje adres logiczny <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> dla miejsca docelowego wiadomości, adres fizyczny ("przez"), używany przez transport, na którym nasłuchuje usługa <xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A> i adres punktu końcowego, który zapewnia adres punktu końcowego klienta.  
  
 W największej sytuacji, gdy dwie strony wymieniają wiadomości tylko między sobą, nie trzeba podawać tych adresów osobno. Jednak ponieważ wymiany mogą dotyczyć innych miejsc docelowych komunikatów, należy określić, kiedy należy jawnie podać adresy. Nawet między zaledwie dwie strony taka możliwość jest czasami wymagana, podobnie jak w przypadku podwójnego protokołu HTTP, gdzie serwer musi utworzyć własne żądanie HTTP. Następujące rodzaje relacji są zdefiniowane przez <xref:System.ServiceModel.Channels.SupportedAddressingMode> Wyliczenie do przechwytywania wzorców obsługi komunikatów:  
  
-   Adresy anonimowe są najbardziej podstawową formą adresowania. Adresy anonimowe są używane, gdy istnieje ścieżka domyślna odpowiedzi. TCP jest dwukierunkową transportem komunikacyjnym i odpowiedzią na komunikat protokołu TCP można wysłać z powrotem do drugiej strony gniazda, które wysłało oryginalną wiadomość. Podobnie model żądanie-odpowiedź protokołu HTTP wysyła odpowiedzi za pośrednictwem kanału odpowiedzi HTTP. Żadna z tych odpowiedzi nie wymaga określenia miejsca, w którym będą wysyłane komunikaty odpowiedzi. Gdy serwer wymaga anonimowych odpowiedzi z klienta, używa wartości anonimowej wyliczenia. Usługi WCF dostarczone <xref:System.ServiceModel.NetTcpBinding> <xref:System.ServiceModel.BasicHttpBinding> przez system i <xref:System.ServiceModel.WSHttpBinding> powiązania zawsze używają adresów anonimowych.  
  
-   Adresy nieanonimowe są używane podczas wysyłania odpowiedzi wymaga utworzenia nowego kanału na potrzeby komunikacji. Powiązanie dostarczone <xref:System.ServiceModel.WSDualHttpBinding> z systemem WCF używa nieanonimowego adresu. Przy użyciu podwójnego protokołu HTTP klient tworzy żądanie HTTP, aby wysłać komunikat, a następnie serwer musi utworzyć własne żądanie HTTP, aby wysłać odpowiedź. Ponieważ serwer inicjuje wysyłanie, musi mieć określony punkt końcowy, aby nawiązać połączenie. Należy podać serwerowi adres punktu końcowego odpowiedzi. Podobnie, jeśli usługa musi odpowiedzieć na odebrany komunikat jednokierunkowy, wymaga również nieanonimowego adresu, ponieważ nie ma dostępnego kanału do komunikacji. Jeśli serwer wysyła komunikat z powrotem, wymagana jest całkowicie oddzielna operacja z, która została użyta do wysłania pierwszej wiadomości.  
  
-   Mieszane to trzecia postać adresów, która łączy anonimowe i nieanonimowe adresy w zależności od wysyłanego komunikatu. Typowym przykładem adresowania w trybie mieszanym jest użycie dedykowanego komputera do przetwarzania błędów lub komunikatów potwierdzających. Jeśli Standardowa sekwencja wymiany dla odpowiedzi to HTTP lub TCP, odpowiedzi używają anonimowego adresowania, ale błędy używają nieanonimowego adresowania. Mimo że WCF nie zapewnia mieszanych funkcji adresowania w jednym ze standardowych powiązań, można napisać kanał, który umożliwia usłudze wysyłanie odpowiedzi bezpośrednio w kanale zaplecza (gdy adres odpowiedzi jest anonimowy) lub w osobnym kanale (gdy Adres odpowiedzi jest nieanonimowy. W takim przypadku element powiązania kanału jest używany do ustawiania wartości <xref:System.ServiceModel.Channels.SupportedAddressingMode> mieszanej.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Anonymous">
      <MemberSignature Language="C#" Value="Anonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Anonymous = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberSignature Language="VB.NET" Value="Anonymous" />
      <MemberSignature Language="C++ CLI" Value="Anonymous" />
      <MemberSignature Language="F#" Value="Anonymous = 0" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Serwer obsługuje tylko adresy anonimowe i klienci muszą podawać anonimowy adres odpowiedzi.</summary>
      </Docs>
    </Member>
    <Member MemberName="Mixed">
      <MemberSignature Language="C#" Value="Mixed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Mixed = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberSignature Language="VB.NET" Value="Mixed" />
      <MemberSignature Language="C++ CLI" Value="Mixed" />
      <MemberSignature Language="F#" Value="Mixed = 2" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Serwer obsługuje zarówno adresy anonimowe, jak i nieanonimowe, a klienci mogą wybrać jedną lub obie.</summary>
      </Docs>
    </Member>
    <Member MemberName="NonAnonymous">
      <MemberSignature Language="C#" Value="NonAnonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode NonAnonymous = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberSignature Language="VB.NET" Value="NonAnonymous" />
      <MemberSignature Language="C++ CLI" Value="NonAnonymous" />
      <MemberSignature Language="F#" Value="NonAnonymous = 1" Usage="System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Serwer obsługuje tylko adresy nieanonimowe i klienci muszą podać nieanonimowy adres odpowiedzi.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
