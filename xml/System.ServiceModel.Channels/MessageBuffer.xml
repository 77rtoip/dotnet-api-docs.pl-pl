<Type Name="MessageBuffer" FullName="System.ServiceModel.Channels.MessageBuffer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bf3bd8755cb90e540e5171a5e68ea860dba698d9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36421874" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageBuffer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageBuffer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.MessageBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageBuffer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageBuffer abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageBuffer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje buforu pamięci, który przechowuje cały komunikat do użytku w przyszłości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Treść <xref:System.ServiceModel.Channels.Message> tylko wystąpienia może być używane lub zapisywana raz. Jeśli chcesz wykorzystać <xref:System.ServiceModel.Channels.Message> wystąpienie więcej niż raz, należy użyć <xref:System.ServiceModel.Channels.MessageBuffer> klasę do przechowywania całkowicie cały <xref:System.ServiceModel.Channels.Message> wystąpienia w pamięci.  
  
 A <xref:System.ServiceModel.Channels.MessageBuffer> wystąpienia jest tworzony przez wywołanie metody <xref:System.ServiceModel.Channels.Message.CreateBufferedCopy%2A> z <xref:System.ServiceModel.Channels.Message> wystąpienia. Nowy <xref:System.ServiceModel.Channels.MessageBuffer> jest następnie tworzony i zwracany, który przejmuje <xref:System.ServiceModel.Channels.Message> i odczytuje całej zawartości w pamięci.  
  
 Aby pobrać kopię <xref:System.ServiceModel.Channels.Message> z <xref:System.ServiceModel.Channels.MessageBuffer>, należy wywołać <xref:System.ServiceModel.Channels.MessageBuffer.CreateMessage%2A> metody <xref:System.ServiceModel.Channels.MessageBuffer>. To polecenie zwróci identyczne kopię oryginału <xref:System.ServiceModel.Channels.Message> można instancji pod warunkiem.  
  
 Maksymalny rozmiar buforu można kontrolować przez ustawienie <xref:System.ServiceModel.Channels.MessageBuffer.BufferSize%2A> maksymalną liczbę bajtów wymaganą. Ta liczba nie obejmuje niekoniecznie przejściowej alokacje związane z tworzenia buforu, ani właściwości dołączony do wiadomości.  
  
 Zawsze należy zamknąć <xref:System.ServiceModel.Channels.MessageBuffer> wystąpienia przez wywołanie metody <xref:System.ServiceModel.Channels.MessageBuffer.Close%2A> po zakończeniu pracy z nim. Dzięki temu potencjalnie zwolniona wcześniej zasobów systemowych.  
  
 Specjalna uwaga dla użytkowników zarządzanych C++ wynikające z tej klasy:  
  
-   Umieść programu Oczyszczanie kod w (włączone) (Rozpocznij) Zamknij (i/lub OnAbort), nie w destruktora.  
  
-   Unikaj destruktory: spowodują one kompilatora do automatycznego generowania <xref:System.IDisposable>  
  
-   Unikaj-reference elementów członkowskich: mogą uniemożliwić kompilatorowi Generowanie automatycznie <xref:System.IDisposable>  
  
-   Należy unikać finalizatorów; ale przeprowadzenie jedną ma pomijać ostrzeżeń kompilacji i wywołanie <xref:System.GC.SuppressFinalize%28System.Object%29> i finalizator się (włączone) (Rozpocznij) Zamknij (i/lub OnAbort) Aby emulować, jakie byłyby generowanych automatycznie <xref:System.IDisposable> zachowanie.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public abstract int BufferSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.MessageBuffer.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int BufferSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BufferSize : int" Usage="System.ServiceModel.Channels.MessageBuffer.BufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera przybliżoną liczbę bajtów używane przez to <see cref="T:System.ServiceModel.Channels.MessageBuffer" />.</summary>
        <value>Przybliżoną liczbę bajtów używane przez to <see cref="T:System.ServiceModel.Channels.MessageBuffer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Maksymalny rozmiar buforu można kontrolować przez ustawienie <xref:System.ServiceModel.Channels.MessageBuffer.BufferSize%2A> maksymalną liczbę bajtów wymaganą. Ta liczba nie obejmuje niekoniecznie przejściowej alokacje związane z tworzenia buforu, ani właściwości dołączony do wiadomości. Nie jest powiązana do rzeczywistego rozmiaru komunikatu podczas serializacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.Close" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="messageBuffer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zakończenie pracy z buforu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawsze należy zamknąć <xref:System.ServiceModel.Channels.MessageBuffer> wystąpienia przez wywołanie metody <xref:System.ServiceModel.Channels.MessageBuffer.Close%2A> po zakończeniu pracy z nim. Dzięki temu potencjalnie zwolniona wcześniej zasobów systemowych.  
  
 Jeśli wywołujesz <xref:System.ServiceModel.Channels.Message.CreateBufferedCopy%2A> do utworzenia buforu komunikatu wiadomości i sprawdzić za pomocą wiadomości <xref:System.ServiceModel.Channels.MessageBuffer.CreateMessage%2A>, otrzymasz <xref:System.InvalidOperationException> podczas próby zamknięcia buforu za pomocą tej metody. Aby uniknąć tego problemu, należy ponownie utworzyć komunikat z bufora przed zamknięciem. Zobacz przykładowy kod w sekcji przykład pokaz poprzedniego scenariusza i sposób, aby rozwiązać ten problem.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób zamykania poprawnie buforu komunikatu.  
  
```  
public void AfterReceiveReply(ref Message reply, object correlationState)  
{  
    // Create the buffer  
    MessageBuffer buffer = reply.CreateBufferedCopy(13000);  
    // Inspect the response (for example, extract the body contents)  
    Message thisReply = buffer.CreateMessage();  
    XmlDictionaryReader reader = thisReply.GetReaderAtBodyContents();  
    StringBuilder info = new StringBuilder();  
    XmlWriter writer = XmlWriter.Create(info);  
    writer.WriteNode(reader, true);  
    writer.Close();  
    // Resolution:  Re-create the message from the buffer before  
    // closing.  
    reply = buffer.CreateMessage();  
    // You can close the buffer after the message has been recreated.  
    buffer.Close();  
```  
  
 }  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public abstract System.ServiceModel.Channels.Message CreateMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message CreateMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.CreateMessage" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateMessage () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::ServiceModel::Channels::Message ^ CreateMessage();" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : unit -&gt; System.ServiceModel.Channels.Message" Usage="messageBuffer.CreateMessage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kopię oryginalnej wiadomości.</summary>
        <returns>Identyczne kopię oryginału <see cref="T:System.ServiceModel.Channels.Message" /> wcześniej podane do wystąpienia <see cref="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)" /> metody <see cref="T:System.ServiceModel.Channels.Message" /> wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody tworzy identyczne kopię oryginału <xref:System.ServiceModel.Channels.Message> wcześniej podane do wystąpienia <xref:System.ServiceModel.Channels.Message.CreateBufferedCopy%2A> metody <xref:System.ServiceModel.Channels.Message> wystąpienia. Wiadomość można następnie zapisz do magazynu trwałego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateNavigator">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nową <see cref="T:System.Xml.XPath.XPathNavigator" /> obiektu do nawigowania tego obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, jeśli należy modyfikować tylko część kopia wiadomości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.XPathNavigator CreateNavigator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.CreateNavigator" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateNavigator () As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XPath::XPathNavigator ^ CreateNavigator();" />
      <MemberSignature Language="F#" Value="abstract member CreateNavigator : unit -&gt; System.Xml.XPath.XPathNavigator&#xA;override this.CreateNavigator : unit -&gt; System.Xml.XPath.XPathNavigator" Usage="messageBuffer.CreateNavigator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.XPath.IXPathNavigable.CreateNavigator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nową <see cref="T:System.Xml.XPath.XPathNavigator" /> obiektu do nawigowania tego obiektu. Ta metoda nie może być dziedziczona.</summary>
        <returns>
          <see cref="T:System.Xml.XPath.XPathNavigator" /> Obiektu do nawigowania tego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, jeśli należy modyfikować tylko część kopia wiadomości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.XPathNavigator CreateNavigator (int nodeQuota);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.XPathNavigator CreateNavigator(int32 nodeQuota) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.CreateNavigator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateNavigator (nodeQuota As Integer) As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::XPathNavigator ^ CreateNavigator(int nodeQuota);" />
      <MemberSignature Language="F#" Value="member this.CreateNavigator : int -&gt; System.Xml.XPath.XPathNavigator" Usage="messageBuffer.CreateNavigator nodeQuota" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeQuota" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nodeQuota">Lokalizacja ma Nawigatora się znajdować na początku.</param>
        <summary>Tworzy nową <see cref="T:System.Xml.XPath.XPathNavigator" /> obiektu do nawigowania tego obiektu z Nawigatora umieszczony w określonego węzła.</summary>
        <returns>
          <see cref="T:System.Xml.XPath.XPathNavigator" /> Obiektu do nawigowania tego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, jeśli należy modyfikować tylko część kopia wiadomości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlSpace space);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.XPathNavigator CreateNavigator(valuetype System.Xml.XmlSpace space) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.CreateNavigator(System.Xml.XmlSpace)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateNavigator (space As XmlSpace) As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::XPathNavigator ^ CreateNavigator(System::Xml::XmlSpace space);" />
      <MemberSignature Language="F#" Value="member this.CreateNavigator : System.Xml.XmlSpace -&gt; System.Xml.XPath.XPathNavigator" Usage="messageBuffer.CreateNavigator space" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="space" Type="System.Xml.XmlSpace" />
      </Parameters>
      <Docs>
        <param name="space">Prawidłowy <see cref="T:System.Xml.XmlSpace" /> miejsca.</param>
        <summary>Tworzy nowy <see cref="T:System.Xml.XPath.XPathNavigator" /> obiektu do nawigowania tego obiektu z określonym <see langword="xml:space" /> zakresu.</summary>
        <returns>
          <see cref="T:System.Xml.XPath.XPathNavigator" /> Obiektu do nawigowania tego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, jeśli należy modyfikować tylko część kopia wiadomości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.XPathNavigator CreateNavigator (int nodeQuota, System.Xml.XmlSpace space);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.XPathNavigator CreateNavigator(int32 nodeQuota, valuetype System.Xml.XmlSpace space) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.CreateNavigator(System.Int32,System.Xml.XmlSpace)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateNavigator (nodeQuota As Integer, space As XmlSpace) As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::XPathNavigator ^ CreateNavigator(int nodeQuota, System::Xml::XmlSpace space);" />
      <MemberSignature Language="F#" Value="member this.CreateNavigator : int * System.Xml.XmlSpace -&gt; System.Xml.XPath.XPathNavigator" Usage="messageBuffer.CreateNavigator (nodeQuota, space)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeQuota" Type="System.Int32" />
        <Parameter Name="space" Type="System.Xml.XmlSpace" />
      </Parameters>
      <Docs>
        <param name="nodeQuota">Lokalizacja ma Nawigatora się znajdować na początku.</param>
        <param name="space">Prawidłowy <see cref="T:System.Xml.XmlSpace" /> miejsca.</param>
        <summary>Tworzy nowy <see cref="T:System.Xml.XPath.XPathNavigator" /> obiektu do nawigowania tego obiektu z Nawigatora znajduje się w określonym węźle i <see langword="xml:space" /> zakresu.</summary>
        <returns>
          <see cref="T:System.Xml.XPath.XPathNavigator" /> Obiektu do nawigowania tego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, jeśli należy modyfikować tylko część kopia wiadomości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MessageContentType">
      <MemberSignature Language="C#" Value="public virtual string MessageContentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageContentType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.MessageBuffer.MessageContentType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MessageContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ MessageContentType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MessageContentType : string" Usage="System.ServiceModel.Channels.MessageBuffer.MessageContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ zawartości wiadomości przechowywane w tym buforu.</summary>
        <value>Typ komunikatu przechowywane w buforze tej zawartości.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> i opcjonalnie zwalnia zasoby zarządzane. Ta metoda nie może być dziedziczona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana po zakończeniu przy użyciu <xref:System.ServiceModel.Channels.MessageBuffer>. Ta metoda pozostawia <xref:System.ServiceModel.Channels.MessageBuffer> w stanie uniemożliwiającym jego używanie. Po wywołaniu tej metody, konieczne jest zwolnienie wszystkich odwołań do <xref:System.ServiceModel.Channels.MessageBuffer> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.ServiceModel.Channels.MessageBuffer> klasy.  
  
> [!NOTE]
>  Zawsze ta metoda jest wywoływana przed zwolnieniem ostatniego odwołania do <xref:System.ServiceModel.Channels.MessageBuffer>. W przeciwnym razie używa zasobów nie są zwalniane do wywołania modułu zbierającego elementy bezużyteczne <xref:System.ServiceModel.Channels.MessageBuffer> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteMessage">
      <MemberSignature Language="C#" Value="public virtual void WriteMessage (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteMessage(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MessageBuffer.WriteMessage(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteMessage(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member WriteMessage : System.IO.Stream -&gt; unit&#xA;override this.WriteMessage : System.IO.Stream -&gt; unit" Usage="messageBuffer.WriteMessage stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień we/wy, zapisane całej zawartości buforu.</param>
        <summary>Zapisuje określony strumień we/wy całej zawartości buforu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja korzysta z kodera binarnego zamiast koder UTF-8. W związku z tym bezpośrednio nie można przekonwertować z <xref:System.ServiceModel.Channels.MessageBuffer> do <xref:System.ServiceModel.Channels.Message>. Kod w sekcji przykładzie pokazano, jak obejść ten problem.  
  
   
  
## Examples  
  
```  
private byte[] ConvertMessageToByteArray(ref Message message)   
{  
....//Memory stream that contains the message  
....MemoryStream stream = new MemoryStream();  
....//Create an XmlWriter to serialize the message into a byte array  
....XmlWriterSettings settings = new XmlWriterSettings();  
....settings.Encoding = System.Text.Encoding.UTF8;  
....XmlWriter writer = XmlWriter.Create(stream, settings);  
....//Copy the message into a buffer   
....//Note: This call changes the original message's state  
....MessageBuffer buffer = message.CreateBufferedCopy(int.MaxValue);  
....//Create a copy of the message  
....message = buffer.CreateMessage();  
....//Serialize the message to the XmlWriter   
....message.WriteMessage(writer);  
....//Recreate the message   
....message = buffer.CreateMessage();  
....//Flush the contents of the writer so that the stream gets updated  
....writer.Flush();  
....stream.Flush();  
....//Convert the stream to an array  
....byte[] retval = stream.ToArray();  
    return retval;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>