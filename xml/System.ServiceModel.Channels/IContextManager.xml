<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fd40311f073f441f3f8b4ab1e72b7d600d70e6d4" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69156004" /></Metadata><TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje interfejs, który umożliwia pobieranie i Ustawianie kontekstu w kanale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku kanałów, <xref:System.ServiceModel.WSHttpContextBinding> które używają <xref:System.ServiceModel.SessionMode.NotAllowed> zestawu wartości, kontekst nie może zostać pobrany na kliencie przy użyciu <xref:System.ServiceModel.Channels.IContextManager> , ponieważ nowy kanał, który ustanawia sesję, jest tworzony za <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> każdym razem, gdy <xref:System.ServiceModel.SessionMode.NotAllowed> jest wywoływana w celu wymuszenia Semantyka w kanale. Oznacza to, że mimo że kontekst jest prawidłowo propagowany do klienta w tym przypadku, nie można go pobrać za pomocą polecenia <xref:System.ServiceModel.Channels.IContextManager>. Nadal można ją pobrać przy użyciu <xref:System.ServiceModel.Channels.ContextMessageProperty> polecenia, jak pokazano w poniższym kodzie.  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zarządzanie kontekstem jest włączone.</summary>
        <value><see langword="true" />Jeśli kontekst jest włączony; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy włączono zarządzanie kontekstem, kanał kontekstu buforuje kontekst w jego okres istnienia. Kontekst można pobrać z kanału za pośrednictwem `IContextManager` właściwości kanału przez wywołanie <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> metody w tym kanale. Kanał może być również wstępnie zainicjowany przy użyciu kontekstu przed otwarciem przez wywołanie <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> metody we właściwości kanału. Po zainicjowaniu kanału z kontekstem nie można go zresetować.  
  
 Następujące elementy są nieodmianami w tym trybie:  
  
-   Każde wywołanie <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> po otwartym kanale `InvalidOperationException`zgłasza.  
  
-   Wszystkie próby wysłania kontekstu za pomocą `ContextMessageProperty` wiadomości wychodzącej zgłaszają. `InvalidOperationException`  
  
-   Jeśli komunikat jest odbierany z serwera z kontekstem, gdy kanał jest już zainicjowany przy użyciu kontekstu a `ProtocolException` jest zgłaszany. Należy zauważyć, że można odbierać kontekst początkowy z serwera, jeśli kanał jest otwarty bez jawnego ustawiania kontekstu.  
  
-   Komunikat przychodzący jest zawsze `null`. `ContextMessageProperty`  
  
 Gdy zarządzanie kontekstem nie jest włączone, kanał kontekstu nie będzie zarządzać kontekstem. Jest on odpowiedzialny za pobieranie i stosowanie kontekstu oraz zarządzanie nim za pomocą programu `ContextMessageProperty`. Każda próba wywołania <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> lub <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> użycia przez `IContextManager` Właściwość Channel powoduje `InvalidOperationException`.  
  
 Wszystkie pliki cookie HTTP, z wyjątkiem kontekstu plików cookie protokołu HTTP, są obsługiwane na poziomie kanału. Kontekstowe pliki cookie HTTP są zarządzane na poziomie aplikacji. Może to mieć nieoczekiwane konsekwencje, gdy kanały są udostępniane, aby komunikować się <xref:System.ServiceModel.Channels.ContextMessageProperty>z różnymi wystąpieniami przeznaczonymi dla programu. W poniższej tabeli pokazano <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> `true` , w jaki sposób pliki cookie HTTP mają wpływ, gdy `false`jest ustawiony na lub.  
  
|Wiązanie|IContextManager. Enabled — wartość|Zakres plików cookie HTTP kontekstu|Zakres innych plików cookie HTTP|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|BasicHttpBinding|n/d|ChannelFactory|ChannelFactory|  
|BasicHttpContextBinding|true|Ukierunkowan|Ukierunkowan|  
|BasicHttpContextBinding|false|Dla każdego komunikatu (jawnie zarządzany przez aplikację)|Ukierunkowan|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kontekst.</summary>
        <returns><see cref="T:System.Collections.Generic.IDictionary`2" /> Pary klucz/wartość z przestrzenią nazw i nazwą kontekstu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod przedstawia sposób uzyskiwania kontekstu z wystąpienia serwera proxy z określonym typem na komputerze klienckim.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Collections.Generic.IDictionary`2" /> Pary klucz/wartość z przestrzenią nazw i nazwą kontekstu, który jest ustawiony.</param>
        <summary>Ustawia kontekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod pokazuje, jak można ustawić kontekst na kliencie.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
