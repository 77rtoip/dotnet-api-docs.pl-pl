<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ca3f3f607c91d91f788487dd38e32bda4997bbe2" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39918612" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje interfejs, który pozwala na pobieranie i ustawianie kontekstu w kanale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla kanałów używające <xref:System.ServiceModel.WSHttpContextBinding> z <xref:System.ServiceModel.SessionMode.NotAllowed> wartość zestawu, nie można pobrać kontekstu na komputerze klienckim, za pomocą <xref:System.ServiceModel.Channels.IContextManager> ponieważ nowy kanał, który ustanawia sesję jest tworzony za każdym razem <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> jest wywoływana, aby wymusić <xref:System.ServiceModel.SessionMode.NotAllowed> Semantyka w kanale. Oznacza to, że nawet, jeśli kontekst jest prawidłowo propagowany z powrotem do klienta w tym przypadku, go nie można pobrać przy użyciu <xref:System.ServiceModel.Channels.IContextManager>. Nadal można pobrać za pomocą <xref:System.ServiceModel.Channels.ContextMessageProperty> jak pokazano w poniższym kodzie.  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy włączono zarządzanie kontekstem.</summary>
        <value>
          <see langword="true" /> Jeśli kontekst jest włączone; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po włączeniu zarządzania kontekstem kanał kontekstu buforuje kontekstu w okresie swojego istnienia. Kontekst można pobrać z kanału za pośrednictwem `IContextManager` właściwość kanału, wywołując <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> metody na nim. Kanał można również wstępnie zainicjowana z kontekstem przed otwierana, wywołując <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> metody właściwości kanału. Gdy kanał jest inicjowany z kontekstem nie można zresetować.  
  
 Poniżej przedstawiono invariants w tym trybie:  
  
-   Dowolne wywołanie <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> po otwarciu kanał zgłasza `InvalidOperationException`.  
  
-   Dowolne próba wysłania kontekstu za pośrednictwem `ContextMessageProperty` w wychodzących wiadomościach zgłasza `InvalidOperationException`.  
  
-   Gdy wiadomość zostaje odebrana z serwera z kontekstem, gdy kanał jest już zainicjowany z kontekstem `ProtocolException` zgłaszany. Należy pamiętać o tym, czy można pobrać kontekstu początkowej z serwera, gdy kanał zostanie otwarty bez jawnego ustawienia kontekstu.  
  
-   `ContextMessageProperty` Na przychodzący komunikat jest zawsze `null`.  
  
 Gdy zarządzanie kontekstu nie jest włączone, kanał kontekstu nie zarządza kontekstu. Odpowiada za aplikację do pobrania, zarządzania i zastosować kontekst za pośrednictwem `ContextMessageProperty`. Dowolne próba wywołania <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> lub <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> za pomocą bezpośrednie `IContextManager` kanału właściwość skutkuje `InvalidOperationException`.  
  
 Wszystkie pliki cookie protokołu HTTP, z wyjątkiem plików cookie protokołu HTTP kontekstu, są obsługiwane na poziomie kanału. Pliki cookie protokołu HTTP w kontekście są zarządzane na poziomie aplikacji. Może to mieć nieoczekiwanych konsekwencji w przypadku kanałów są udostępniane na komunikowanie się z różnymi wystąpieniami objęte <xref:System.ServiceModel.Channels.ContextMessageProperty>. W poniższej tabeli przedstawiono wpływ plików cookie protokołu HTTP podczas <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> jest ustawiona jako `true` lub `false`.  
  
|Powiązanie|Wartość IContextManager.Enabled|Zakres pliku Cookie HTTP kontekstu|Inne zakresu plików cookie protokołu HTTP|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|BasicHttpBinding|n/d|ChannelFactory|ChannelFactory|  
|BasicHttpContextBinding|true|Kanał|Kanał|  
|BasicHttpContextBinding|false|Dla każdego komunikatu (jawnie zarządzane przez aplikację)|Kanał|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kontekst.</summary>
        <returns>
          <see cref="T:System.Collections.Generic.IDictionary`2" /> Par klucz/wartość z przestrzeni nazw i nazwy kontekstu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod pokazuje, jak można uzyskać kontekst z wystąpienia typizowanego serwera proxy na komputerze klienckim.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Collections.Generic.IDictionary`2" /> Par klucz/wartość z przestrzeni nazw i nazwy kontekstu, który jest ustawiony.</param>
        <summary>Ustawia kontekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod pokazuje, jak można ustawić kontekstu na komputerze klienckim.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>