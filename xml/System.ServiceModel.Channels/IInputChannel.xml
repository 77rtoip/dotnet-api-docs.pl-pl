<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2dc8466a0eab8c4b6523c6cb4479b1a0fc8a7363" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69155801" /></Metadata><TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiuje interfejs, który kanał musi zaimplementować, aby odebrać komunikat.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <xref:System.ServiceModel.Channels.IInputChannel> Kontrakt obejmuje synchroniczną i asynchroniczną odmianę funkcji Receive, try-to-Receive i oczekiwanie na komunikaty.  
  
 Model ściągania jest zazwyczaj <xref:System.ServiceModel.Channels.IInputChannel> używany do odbierania komunikatów: wywoływany <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> ("ściągający" komunikat z kanału), a następnie poczekaj na nadejście komunikatu. Alternatywnym wzorcem użycia jest wywołanie <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> metody <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>lub, a następnie <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>wywołanie metody. Takie podejście jest typowe w przypadku transakcyjnych zastosowań, w których rozpoczęto transakcję między <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> wywołaniami do i <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.  
  
 <xref:System.ServiceModel.Channels.IInputChannel> Nie musi być powiązane z pojedynczym nadawcą. Inne kanały i interfejsy kanałów mogą zapewnić korelację między określonymi nadawcami a <xref:System.ServiceModel.Channels.IInputChannel>, ale kontrakt podstawowy nie ma takich ograniczeń. Implementacja może utworzyć nową <xref:System.ServiceModel.Channels.IInputChannel> dla każdego komunikatu lub użyć <xref:System.ServiceModel.Channels.IInputChannel> jej ponownie dla wielu komunikatów i nadawców.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rozpoczyna asynchroniczne operacje odbierania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> , jeśli chcesz, aby przetwarzanie aplikacji było kontynuowane bez oczekiwania na odebranie żądania. Użyj metody synchronicznej <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> , gdy jest akceptowalny do zablokowania bieżącego wątku do momentu odebrania komunikatu żądania lub przekroczenia przedziału `timeout` czasu określonego przez. Operacja asynchroniczna jest dostępna z niejawnym limitem czasu lub bez niego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o ukończeniu operacji asynchronicznej.</param>
        <param name="state">Obiekt określony przez aplikację, który zawiera informacje o stanie skojarzone z operacją asynchroniczną.</param>
        <summary>Rozpoczyna operację asynchroniczną, aby odebrać komunikat z obiektem stanu skojarzonym z nim.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Odwołujący się do odbierania komunikatów asynchronicznych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> , jeśli chcesz, aby przetwarzanie aplikacji było kontynuowane bez oczekiwania na odebranie żądania. Użyj metody synchronicznej <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> , gdy jest akceptowalny do zablokowania bieżącego wątku do momentu odebrania komunikatu żądania lub przekroczenia przedziału `timeout` czasu określonego przez. Operacja asynchroniczna jest dostępna z niejawnym limitem czasu lub bez niego.  
  
 Ta metoda odbiera powiadomienie przez wywołanie zwrotne tożsamości programu obsługi zdarzeń dla operacji. Operacja nie zostanie ukończona, dopóki wiadomość nie zostanie udostępniona w kanale.  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><see cref="T:System.TimeSpan" /> Określa interwał czasu oczekiwania na udostępnienie komunikatu.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o ukończeniu operacji asynchronicznej.</param>
        <param name="state">Obiekt określony przez aplikację, który zawiera informacje o stanie skojarzone z operacją asynchroniczną.</param>
        <summary>Rozpoczyna operację asynchroniczną, aby odebrać komunikat, który ma określony limit czasu i skojarzony z nim obiekt stanu.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Odwołuje się do asynchronicznej operacji odbierania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> , jeśli chcesz, aby przetwarzanie aplikacji było kontynuowane bez oczekiwania na odebranie żądania. Użyj metody synchronicznej <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> , gdy jest akceptowalny do zablokowania bieżącego wątku do momentu odebrania komunikatu żądania lub przekroczenia przedziału `timeout` czasu określonego przez. Operacja asynchroniczna jest dostępna z niejawnym limitem czasu lub bez niego.  
  
 Operacja nie zostanie ukończona, dopóki wiadomość nie zostanie udostępniona w kanale lub upłynie limit czasu.  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">Określony <paramref name="timeout" /> limit został przekroczony przed ukończeniem operacji.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony limit czasu jest mniejszy od zera.</exception>
        <block subset="none" type="overrides"><para>Operacja zgłasza <see cref="T:System.TimeoutException" /> wyjątek, jeśli określony <paramref name="timeout" /> zostanie przekroczony przed ukończeniem.</para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><see cref="T:System.TimeSpan" /> Określa interwał czasu oczekiwania na udostępnienie komunikatu.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o ukończeniu operacji asynchronicznej.</param>
        <param name="state">Obiekt określony przez aplikację, który zawiera informacje o stanie skojarzone z operacją asynchroniczną.</param>
        <summary>Rozpoczyna operację asynchroniczną, aby odebrać komunikat, który ma określony limit czasu i skojarzony z nim obiekt stanu.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Odwołuje się do asynchronicznej operacji odbierania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> , jeśli chcesz, aby przetwarzanie aplikacji było kontynuowane bez oczekiwania. Użyj metody synchronicznej <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> , gdy jest akceptowalny do zablokowania bieżącego wątku podczas odpowiedzi na komunikat żądania lub do momentu przekroczenia limitu czasu.  
  
 Operacja nie zostanie ukończona, dopóki wiadomość nie zostanie udostępniona w kanale lub zostanie przekroczony limit czasu.  
  
 Jeśli zamierzasz obsługiwać limity czasu i nie tylko ponownie zgłosić lub otoczyćsz <xref:System.TimeoutException>, należy wywołać <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> zamiast <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.  
  
 Jeśli nie chcesz traktować przekroczeń limitu czasu <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, w przeciwnym razie utracisz informacje o błędzie.  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">Określony <paramref name="timeout" /> limit został przekroczony przed ukończeniem operacji.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony limit czasu jest mniejszy od zera.</exception>
        <block subset="none" type="overrides"><para>Operacja wraca <see langword="false" /> z w <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> przypadku przekroczenia określonego. <paramref name="timeout" /></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><see cref="T:System.TimeSpan" /> Określa interwał czasu oczekiwania na udostępnienie komunikatu.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o ukończeniu operacji asynchronicznej.</param>
        <param name="state">Obiekt określony przez aplikację, który zawiera informacje o stanie skojarzone z operacją asynchroniczną.</param>
        <summary>Rozpoczyna asynchroniczne operacje oczekiwania na zakończenie dla komunikatu do odebrania, które ma określony limit czasu i skojarzony z nim obiekt stanu.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Odwołuje się do operacji asynchronicznej, aby poczekać na nadejście komunikatu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> , jeśli chcesz, aby przetwarzanie aplikacji było kontynuowane bez oczekiwania na nadejście komunikatu. Użyj metody synchronicznej <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> , gdy jest akceptowalny do zablokowania bieżącego wątku podczas oczekiwania na nadejście komunikatu w kolejce. Wątek jest blokowany do określonego `timeout`.  
  
 Ta metoda odbiera powiadomienie przez wywołanie zwrotne tożsamości programu obsługi zdarzeń dla operacji. Operacja nie zostanie ukończona, dopóki wiadomość nie zostanie udostępniona w kanale lub upłynie limit czasu.  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">Określony <paramref name="timeout" /> limit został przekroczony przed ukończeniem operacji.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony limit czasu jest mniejszy od zera.</exception>
        <block subset="none" type="overrides"><para>Operacja zwraca <see langword="false" /> w przypadku przekroczenia określonego <paramref name="timeout" /> limitu czasu.</para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Zwracany przez wywołanie jednej <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> z metod. <see cref="T:System.IAsyncResult" /></param>
        <summary>Kończy operację asynchroniczną w celu odebrania komunikatu.</summary>
        <returns><see cref="T:System.ServiceModel.Channels.Message" /> Odebrane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult *  -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">Zwracany przez wywołanie <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />metody. <see cref="T:System.IAsyncResult" /></param>
        <param name="message"><see cref="T:System.ServiceModel.Channels.Message" /> Odebrane.</param>
        <summary>Kończy określoną operację asynchroniczną w celu odebrania komunikatu.</summary>
        <returns><see langword="true" />Jeśli wiadomość zostanie odebrana przed upływem określonego interwału czasu; w <see langword="false" />przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><see cref="T:System.IAsyncResult" /> Identyfikujeoperacjędozakończeniaizktórejma<see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> zostać pobrany wynik końcowy.</param>
        <summary>Kończy określoną operację asynchronicznego oczekiwania na komunikat.</summary>
        <returns><see langword="true" />Jeśli komunikat dotarł przed <paramref name="timeout" /> przekroczeniem limitu, w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera adres, na którym kanał wejściowy odbiera komunikaty.</summary>
        <value><see cref="T:System.ServiceModel.EndpointAddress" /> Na którym kanale wejściowym odbiera komunikaty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten kanał wejściowy nie ma adresu autonomicznego (na przykład po stronie wejściowej kanału TCP zainicjowanego przez klienta), ta właściwość jest `null`.  
  
 Ta właściwość może być używana przez kanały wyższego poziomu na potrzeby korelacji. Na przykład, jeśli kanał wyższego poziomu implementuje żądanie-odpowiedź na górze <xref:System.ServiceModel.Channels.IDuplexChannel>, może <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> użyć właściwości w nagłówku ReplyTo WS-Addressing.  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej właściwości:  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException">Operacja nie została ukończona z interwałem limitu czasu.</exception>
        <exception cref="T:System.ServiceModel.CommunicationException">Kanał wejściowy nie powiódł się.</exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">Kanał wejściowy został przerwany.</exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">Błąd kanału wejściowego.</exception>
        <summary>Zwraca komunikat otrzymany przez kanał wejściowy, jeśli jest dostępny z przedziałem czasu, który jest jawnie lub niejawnie zdefiniowany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody synchronicznej <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> , gdy jest akceptowalny do zablokowania bieżącego wątku do momentu odebrania komunikatu żądania lub przekroczenia przedziału `timeout`czasu określonego przez. Użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> , gdy potrzebujesz, aby przetwarzanie aplikacji było kontynuowane bez oczekiwania na odebranie żądania.  
  
 Operacja synchroniczna <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> jest dostępna z niejawnym limitem czasu lub bez niego.  
  
 Jeśli komunikat nie jest dostępny, jest blokowany do momentu udostępnienia lub do momentu przekroczenia limitu czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca otrzymany komunikat, jeśli jest dostępny. Jeśli komunikat nie jest dostępny, bloki dla domyślnego interwału czasu.</summary>
        <returns><see cref="T:System.ServiceModel.Channels.Message" /> Odebrane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody synchronicznej <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> , gdy jest akceptowalny do zablokowania bieżącego wątku do momentu odebrania komunikatu żądania lub przekroczenia przedziału `timeout`czasu określonego przez. Użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> , jeśli chcesz, aby przetwarzanie aplikacji było kontynuowane bez oczekiwania na odebranie żądania.  
  
 Operacja synchroniczna <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> jest dostępna z niejawnym limitem czasu lub bez niego.  
  
 Jeśli komunikat nie jest dostępny, jest blokowany do momentu udostępnienia lub do momentu przekroczenia limitu czasu.  
  
 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>może być wywoływana wiele razy lub współbieżnie. Dla każdego <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> odebranego komunikatu można wykonać tylko jedno wywołanie.  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Określa, jak długo operacja odbierania musi zakończyć się przed upływem limitu czasu i <see cref="T:System.TimeoutException" />wyrzucając. <see cref="T:System.TimeSpan" /></param>
        <summary>Zwraca otrzymany komunikat, jeśli jest dostępny. Jeśli komunikat nie jest dostępny, bloki w określonym przedziale czasu.</summary>
        <returns><see cref="T:System.ServiceModel.Channels.Message" /> Odebrane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody synchronicznej <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> , gdy jest akceptowalny do zablokowania bieżącego wątku do momentu odebrania komunikatu żądania lub przekroczenia przedziału `timeout`czasu określonego przez. Użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> , jeśli chcesz, aby przetwarzanie aplikacji było kontynuowane bez oczekiwania na odebranie żądania.  
  
 Operacja synchroniczna <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> jest dostępna z niejawnym limitem czasu lub bez niego.  
  
 Jeśli komunikat nie jest dostępny, jest blokowany do momentu udostępnienia lub do momentu przekroczenia limitu czasu.  
  
 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>może być wywoływana wiele razy lub współbieżnie. Dla każdego <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> odebranego komunikatu można wykonać tylko jedno wywołanie.  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">Określony <paramref name="timeout" /> limit został przekroczony przed ukończeniem operacji.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony limit czasu jest mniejszy od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan *  -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">Zwracany przez wywołanie jednej <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> z metod. <see cref="T:System.IAsyncResult" /></param>
        <param name="message"><see cref="T:System.ServiceModel.Channels.Message" /> Odebrane.</param>
        <summary>Próbuje odebrać komunikat w określonym przedziale czasu.</summary>
        <returns><see langword="true" />Jeśli komunikat zostanie odebrany przed <paramref name="timeout" /> przekroczeniem limitu, w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zamierzasz obsługiwać limity czasu i nie tylko ponownie zgłosić lub otoczyćsz <xref:System.TimeoutException>, należy wywołać <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> zamiast <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.  
  
 Jeśli nie chcesz traktować przekroczeń limitu czasu, wystarczy wywołać <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>polecenie, w przeciwnym razie utracisz informacje o błędzie.  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">Określony <paramref name="timeout" /> limit został przekroczony przed ukończeniem operacji.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony limit czasu jest mniejszy od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><see cref="T:System.TimeSpan" /> Określa maksymalny interwał czasu oczekiwania na nadejście komunikatu przed upływem limitu czasu.</param>
        <summary>Zwraca wartość wskazującą, czy wiadomość dotarła w określonym przedziale czasu.</summary>
        <returns><see langword="true" />Jeśli komunikat dotarł przed <paramref name="timeout" /> przekroczeniem limitu, w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> nie powoduje, że komunikat jest odbierany lub przetwarzany w inny sposób.  
  
 <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> Metoda istnieje głównie dla scenariuszy transakcyjnych, w których użytkownik chce otrzymać komunikat przy użyciu transakcji. W przypadku użycia <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> zwykle w tym celu użytkownik musi utworzyć transakcję, a następnie wywołać <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> i nadzieję, że wiadomość dociera przed upływem limitu czasu transakcji, co może być niemożliwe.  
  
 Zamiast tego użytkownik może nawiązać <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> połączenie z dowolnym przekroczeniem limitu czasu (nawet nieskończonym), a następnie po nadejściu wiadomości może otworzyć transakcję <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> , wywołać i upewnić się, że mogą oni otrzymać komunikat z powrotem przed wygaśnięciem transakcji.  
  
 Ta metoda jest synchroniczna, dlatego blokuje bieżący wątek do momentu dostępności komunikatu lub przekroczenia limitu czasu. Użyj <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> , gdy jest akceptowalny do zablokowania bieżącego wątku podczas oczekiwania na nadejście komunikatu w kolejce. Wątek jest blokowany do określonego `timeout`. Aby przetwarzanie aplikacji było kontynuowane bez oczekiwania, użyj metody asynchronicznej <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> .  
  
   
  
## Examples  
 Poniższy kod ilustruje sposób implementacji tej metody:  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">Określony <paramref name="timeout" /> limit został przekroczony przed ukończeniem operacji.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony limit czasu jest mniejszy od zera.</exception>
        <block subset="none" type="overrides"><para>Operacja zwraca <see langword="false" /> w przypadku przekroczenia określonego <paramref name="timeout" /> limitu czasu.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
