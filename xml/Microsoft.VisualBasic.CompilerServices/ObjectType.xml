<Type Name="ObjectType" FullName="Microsoft.VisualBasic.CompilerServices.ObjectType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ccac3eb1c53aad372d79ccc7f1652e3ee804542b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69319586" /></Metadata><TypeSignature Language="C#" Value="public sealed class ObjectType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.CompilerServices.ObjectType" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectType sealed" />
  <TypeSignature Language="F#" Value="type ObjectType = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="284f8-101">Ta klasa była przestarzała w przypadku Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="284f8-101">This class has been deprecated as of Visual Basic 2005.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-102">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-102">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
    </remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectType ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="284f8-103">Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.CompilerServices.ObjectType" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="284f8-103">Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.ObjectType" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-104">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-104">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="AddObj">
      <MemberSignature Language="C#" Value="public static object AddObj (object o1, object o2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object AddObj(object o1, object o2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddObj (o1 As Object, o2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ AddObj(System::Object ^ o1, System::Object ^ o2);" />
      <MemberSignature Language="F#" Value="static member AddObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj (o1, o2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="o2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-105">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-105">Required.</span></span> <span data-ttu-id="284f8-106">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-106">Any numeric expression.</span></span></param>
        <param name="o2"><span data-ttu-id="284f8-107">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-107">Required.</span></span> <span data-ttu-id="284f8-108">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-108">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-109">Wykonuje operację dodawania (+).</span><span class="sxs-lookup"><span data-stu-id="284f8-109">Performs an addition (+) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-110">Suma <paramref name="o1" /> i <paramref name="o2" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-110">The sum of <paramref name="o1" /> and <paramref name="o2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-111">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-111">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/addition-operator.md"><span data-ttu-id="284f8-112">+ — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-112">+ Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BitAndObj">
      <MemberSignature Language="C#" Value="public static object BitAndObj (object obj1, object obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object BitAndObj(object obj1, object obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitAndObj (obj1 As Object, obj2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ BitAndObj(System::Object ^ obj1, System::Object ^ obj2);" />
      <MemberSignature Language="F#" Value="static member BitAndObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj (obj1, obj2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Object" />
        <Parameter Name="obj2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj1"><span data-ttu-id="284f8-113">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-113">Required.</span></span> <span data-ttu-id="284f8-114">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-114">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <param name="obj2"><span data-ttu-id="284f8-115">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-115">Required.</span></span> <span data-ttu-id="284f8-116">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-116">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-117">Wykonuje operację bitową <see langword="And" /> .</span><span class="sxs-lookup"><span data-stu-id="284f8-117">Performs a bitwise <see langword="And" /> operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-118">1, jeśli <paramref name="obj1" /> obie <paramref name="obj2" /> i szacują wartość 1; w przeciwnym razie 0.</span><span class="sxs-lookup"><span data-stu-id="284f8-118">1 if both <paramref name="obj1" /> and <paramref name="obj2" /> evaluate to 1; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-119">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-119">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="284f8-120">And — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-120">And Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BitOrObj">
      <MemberSignature Language="C#" Value="public static object BitOrObj (object obj1, object obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object BitOrObj(object obj1, object obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitOrObj (obj1 As Object, obj2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ BitOrObj(System::Object ^ obj1, System::Object ^ obj2);" />
      <MemberSignature Language="F#" Value="static member BitOrObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj (obj1, obj2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Object" />
        <Parameter Name="obj2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj1"><span data-ttu-id="284f8-121">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-121">Required.</span></span> <span data-ttu-id="284f8-122">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-122">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <param name="obj2"><span data-ttu-id="284f8-123">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-123">Required.</span></span> <span data-ttu-id="284f8-124">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-124">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-125">Wykonuje operację bitową <see langword="Or" /> .</span><span class="sxs-lookup"><span data-stu-id="284f8-125">Performs a bitwise <see langword="Or" /> operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-126">0, jeśli <paramref name="obj1" /> oba <paramref name="obj2" /> i szacują wartość 0; w przeciwnym razie 1.</span><span class="sxs-lookup"><span data-stu-id="284f8-126">0 if both <paramref name="obj1" /> and <paramref name="obj2" /> evaluate to 0; otherwise, 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-127">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-127">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/or-operator.md"><span data-ttu-id="284f8-128">Or — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-128">Or Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BitXorObj">
      <MemberSignature Language="C#" Value="public static object BitXorObj (object obj1, object obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object BitXorObj(object obj1, object obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitXorObj (obj1 As Object, obj2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ BitXorObj(System::Object ^ obj1, System::Object ^ obj2);" />
      <MemberSignature Language="F#" Value="static member BitXorObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj (obj1, obj2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Object" />
        <Parameter Name="obj2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj1"><span data-ttu-id="284f8-129">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-129">Required.</span></span> <span data-ttu-id="284f8-130">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-130">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <param name="obj2"><span data-ttu-id="284f8-131">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-131">Required.</span></span> <span data-ttu-id="284f8-132">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-132">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-133"><see langword="Xor" /> Wykonuje operację.</span><span class="sxs-lookup"><span data-stu-id="284f8-133">Performs an <see langword="Xor" /> operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-134">Wartość liczbowa, która reprezentuje wykluczenie bitowe (wyłączne rozłączenie bitowe) dwóch liczbowych wzorców bitowych.</span><span class="sxs-lookup"><span data-stu-id="284f8-134">A numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns.</span></span> <span data-ttu-id="284f8-135">Aby uzyskać więcej informacji, zobacz <see href="https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators/xor-operator">operator XOR</see>.</span><span class="sxs-lookup"><span data-stu-id="284f8-135">For more information, see <see href="https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators/xor-operator">Xor Operator</see>.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-136">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-136">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/xor-operator.md"><span data-ttu-id="284f8-137">Xor — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-137">Xor Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DivObj">
      <MemberSignature Language="C#" Value="public static object DivObj (object o1, object o2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object DivObj(object o1, object o2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivObj (o1 As Object, o2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ DivObj(System::Object ^ o1, System::Object ^ o2);" />
      <MemberSignature Language="F#" Value="static member DivObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj (o1, o2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="o2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-138">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-138">Required.</span></span> <span data-ttu-id="284f8-139">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-139">Any numeric expression.</span></span></param>
        <param name="o2"><span data-ttu-id="284f8-140">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-140">Required.</span></span> <span data-ttu-id="284f8-141">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-141">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-142">Wykonuje operację dzielenia (/).</span><span class="sxs-lookup"><span data-stu-id="284f8-142">Performs a division (/) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-143">Pełny iloraz <paramref name="o1" /> podzielony przez <paramref name="o2" />, łącznie z dowolnymi resztami.</span><span class="sxs-lookup"><span data-stu-id="284f8-143">The full quotient of <paramref name="o1" /> divided by <paramref name="o2" />, including any remainder.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-144">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-144">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/floating-point-division-operator.md"><span data-ttu-id="284f8-145">/ — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-145">/ Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectValuePrimitive">
      <MemberSignature Language="C#" Value="public static object GetObjectValuePrimitive (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObjectValuePrimitive(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetObjectValuePrimitive (o As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObjectValuePrimitive(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetObjectValuePrimitive : obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="284f8-146">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-146">Required.</span></span> <span data-ttu-id="284f8-147">Dowolne wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="284f8-147">Any expression.</span></span></param>
        <summary><span data-ttu-id="284f8-148">Zwraca opakowaną wartość pierwotną.</span><span class="sxs-lookup"><span data-stu-id="284f8-148">Returns a boxed primitive value.</span></span> <span data-ttu-id="284f8-149">Ta metoda służy do zapobiegania wielokrotnemu kopiowaniu struktur.</span><span class="sxs-lookup"><span data-stu-id="284f8-149">This method is used to prevent copying structures multiple times.</span></span></summary>
        <returns><span data-ttu-id="284f8-150">Wartość pierwotna <paramref name="o" /> wpisana jako obiekt.</span><span class="sxs-lookup"><span data-stu-id="284f8-150">The primitive value of <paramref name="o" /> typed as object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-151">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-151">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="IDivObj">
      <MemberSignature Language="C#" Value="public static object IDivObj (object o1, object o2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IDivObj(object o1, object o2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IDivObj (o1 As Object, o2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IDivObj(System::Object ^ o1, System::Object ^ o2);" />
      <MemberSignature Language="F#" Value="static member IDivObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj (o1, o2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="o2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-152">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-152">Required.</span></span> <span data-ttu-id="284f8-153">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-153">Any numeric expression.</span></span></param>
        <param name="o2"><span data-ttu-id="284f8-154">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-154">Required.</span></span> <span data-ttu-id="284f8-155">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-155">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-156">Wykonuje operację dzielenia liczb całkowitych (\\).</span><span class="sxs-lookup"><span data-stu-id="284f8-156">Performs an integer division (\\) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-157">Iloraz <paramref name="o1" /> liczby całkowitej podzielony przez <paramref name="o2" />, który odrzuca resztę i zachowuje tylko część całkowitą.</span><span class="sxs-lookup"><span data-stu-id="284f8-157">The integer quotient of <paramref name="o1" /> divided by <paramref name="o2" />, which discards any remainder and retains only the integer portion.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-158">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-158">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/integer-division-operator.md"><span data-ttu-id="284f8-159">\ — Operator</span><span class="sxs-lookup"><span data-stu-id="284f8-159">\ Operator</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LikeObj">
      <MemberSignature Language="C#" Value="public static bool LikeObj (object vLeft, object vRight, Microsoft.VisualBasic.CompareMethod CompareOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool LikeObj(object vLeft, object vRight, valuetype Microsoft.VisualBasic.CompareMethod CompareOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LikeObj (vLeft As Object, vRight As Object, CompareOption As CompareMethod) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool LikeObj(System::Object ^ vLeft, System::Object ^ vRight, Microsoft::VisualBasic::CompareMethod CompareOption);" />
      <MemberSignature Language="F#" Value="static member LikeObj : obj * obj * Microsoft.VisualBasic.CompareMethod -&gt; bool" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj (vLeft, vRight, CompareOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vLeft" Type="System.Object" />
        <Parameter Name="vRight" Type="System.Object" />
        <Parameter Name="CompareOption" Type="Microsoft.VisualBasic.CompareMethod" />
      </Parameters>
      <Docs>
        <param name="vLeft"><span data-ttu-id="284f8-160">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-160">Required.</span></span> <span data-ttu-id="284f8-161">Dowolne wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="284f8-161">Any expression.</span></span></param>
        <param name="vRight"><span data-ttu-id="284f8-162">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-162">Required.</span></span> <span data-ttu-id="284f8-163">Dowolne wyrażenie ciągu zgodne z konwencjami dopasowania wzorca opisanymi w operator like.</span><span class="sxs-lookup"><span data-stu-id="284f8-163">Any string expression conforming to the pattern-matching conventions described in Like Operator.</span></span></param>
        <param name="CompareOption"><span data-ttu-id="284f8-164">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-164">Required.</span></span> <span data-ttu-id="284f8-165"><see cref="T:Microsoft.VisualBasic.CompareMethod" /> Wartość, która określa, że operacja używa porównania tekstowego lub binarnego.</span><span class="sxs-lookup"><span data-stu-id="284f8-165">A <see cref="T:Microsoft.VisualBasic.CompareMethod" /> value that specifies that the operation use either text or binary comparison.</span></span></param>
        <summary><span data-ttu-id="284f8-166"><see langword="Like" /> Wykonuje porównanie.</span><span class="sxs-lookup"><span data-stu-id="284f8-166">Performs a <see langword="Like" /> comparison.</span></span></summary>
        <returns><span data-ttu-id="284f8-167"><see langword="True" />Jeśli ciąg reprezentujący wartość w <paramref name="vLeft" /> spełnia wzorzec, który jest zawarty w <paramref name="vRight" />; w przeciwnym razie, <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-167"><see langword="True" /> if the string representation of the value in <paramref name="vLeft" /> satisfies the pattern that is contained in <paramref name="vRight" />; otherwise, <see langword="False" />.</span></span> <span data-ttu-id="284f8-168"><see langword="True" />Jeśli obie <paramref name="vLeft" /> i <paramref name="vRight" /> są <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-168"><see langword="True" /> if both <paramref name="vLeft" /> and <paramref name="vRight" /> are <see langword="Nothing" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-169">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-169">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/like-operator.md"><span data-ttu-id="284f8-170">Like — Operator</span><span class="sxs-lookup"><span data-stu-id="284f8-170">Like Operator</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ModObj">
      <MemberSignature Language="C#" Value="public static object ModObj (object o1, object o2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object ModObj(object o1, object o2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModObj (o1 As Object, o2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ModObj(System::Object ^ o1, System::Object ^ o2);" />
      <MemberSignature Language="F#" Value="static member ModObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj (o1, o2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="o2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-171">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-171">Required.</span></span> <span data-ttu-id="284f8-172">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-172">Any numeric expression.</span></span></param>
        <param name="o2"><span data-ttu-id="284f8-173">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-173">Required.</span></span> <span data-ttu-id="284f8-174">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-174">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-175">Wykonuje operację modułu (<see langword="Mod" />).</span><span class="sxs-lookup"><span data-stu-id="284f8-175">Performs a modulus (<see langword="Mod" />) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-176">Pozostała <paramref name="o1" /> część po jest <paramref name="o2" />podzielona przez.</span><span class="sxs-lookup"><span data-stu-id="284f8-176">The remainder after <paramref name="o1" /> is divided by <paramref name="o2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-177">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-177">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="284f8-178">Mod — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-178">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MulObj">
      <MemberSignature Language="C#" Value="public static object MulObj (object o1, object o2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object MulObj(object o1, object o2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MulObj (o1 As Object, o2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ MulObj(System::Object ^ o1, System::Object ^ o2);" />
      <MemberSignature Language="F#" Value="static member MulObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj (o1, o2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="o2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-179">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-179">Required.</span></span> <span data-ttu-id="284f8-180">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-180">Any numeric expression.</span></span></param>
        <param name="o2"><span data-ttu-id="284f8-181">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-181">Required.</span></span> <span data-ttu-id="284f8-182">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-182">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-183">Wykonuje operację mnożenia (\*).</span><span class="sxs-lookup"><span data-stu-id="284f8-183">Performs a multiplication (\*) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-184">Produkt <paramref name="o1" /> i <paramref name="o2" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-184">The product of <paramref name="o1" /> and <paramref name="o2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-185">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-185">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/multiplication-operator.md"><span data-ttu-id="284f8-186">\* Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-186">\* Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NegObj">
      <MemberSignature Language="C#" Value="public static object NegObj (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static object NegObj(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NegObj (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ NegObj(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member NegObj : obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="284f8-187">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-187">Required.</span></span> <span data-ttu-id="284f8-188">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-188">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-189">Wykonuje jednoargumentową operację minus (-).</span><span class="sxs-lookup"><span data-stu-id="284f8-189">Performs a unary minus (-) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-190">Wartość <paramref name="obj" />ujemna.</span><span class="sxs-lookup"><span data-stu-id="284f8-190">The negative value of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-191">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-191">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/subtraction-operator.md"><span data-ttu-id="284f8-192">- — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-192">- Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NotObj">
      <MemberSignature Language="C#" Value="public static object NotObj (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static object NotObj(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotObj (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ NotObj(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member NotObj : obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="284f8-193">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-193">Required.</span></span> <span data-ttu-id="284f8-194">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-194">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-195"><see langword="Not" /> Wykonuje operację.</span><span class="sxs-lookup"><span data-stu-id="284f8-195">Performs a <see langword="Not" /> operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-196">W <see langword="Boolean" /> przypadku operacji <see langword="False" /> , <paramref name="obj" /> Jeśli jest<see langword="True" />; w przeciwnym razie. <see langword="True" /></span><span class="sxs-lookup"><span data-stu-id="284f8-196">For <see langword="Boolean" /> operations, <see langword="False" /> if <paramref name="obj" /> is <see langword="True" />; otherwise, <see langword="True" />.</span></span> <span data-ttu-id="284f8-197">W przypadku operacji bitowych wartość 1 <paramref name="obj" /> oznacza 0; w przeciwnym razie 0.</span><span class="sxs-lookup"><span data-stu-id="284f8-197">For bitwise operations, 1 if <paramref name="obj" /> is 0; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-198">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-198">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/not-operator.md"><span data-ttu-id="284f8-199">Not — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-199">Not Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ObjTst">
      <MemberSignature Language="C#" Value="public static int ObjTst (object o1, object o2, bool TextCompare);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 ObjTst(object o1, object o2, bool TextCompare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjTst (o1 As Object, o2 As Object, TextCompare As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ObjTst(System::Object ^ o1, System::Object ^ o2, bool TextCompare);" />
      <MemberSignature Language="F#" Value="static member ObjTst : obj * obj * bool -&gt; int" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst (o1, o2, TextCompare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="o2" Type="System.Object" />
        <Parameter Name="TextCompare" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-200">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-200">Required.</span></span> <span data-ttu-id="284f8-201">Dowolne wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="284f8-201">Any expression.</span></span></param>
        <param name="o2"><span data-ttu-id="284f8-202">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-202">Required.</span></span> <span data-ttu-id="284f8-203">Dowolne wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="284f8-203">Any expression.</span></span></param>
        <param name="TextCompare"><span data-ttu-id="284f8-204">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-204">Required.</span></span> <span data-ttu-id="284f8-205"><see langword="True" />Aby wykonać Porównywanie ciągów bez uwzględniania wielkości liter; w przeciwnym razie. <see langword="False" /></span><span class="sxs-lookup"><span data-stu-id="284f8-205"><see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="284f8-206">Wykonuje porównanie ciągów binarnych lub tekstowych, gdy nadawane są dwa obiekty.</span><span class="sxs-lookup"><span data-stu-id="284f8-206">Performs binary or text string comparison when given two objects.</span></span></summary>
        <returns><list type="table">
            <listheader>
              <term> <span data-ttu-id="284f8-207">Wartość</span><span class="sxs-lookup"><span data-stu-id="284f8-207">Value</span></span> 
 </term>
              <description> <span data-ttu-id="284f8-208">Warunek</span><span class="sxs-lookup"><span data-stu-id="284f8-208">Condition</span></span> 
 </description>
            </listheader>
            <item>
              <term> <span data-ttu-id="284f8-209">-1</span><span class="sxs-lookup"><span data-stu-id="284f8-209">-1</span></span> 
 </term>
              <description><span data-ttu-id="284f8-210">
                <paramref name="o1" />jest mniejsze niż <paramref name="o2" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-210">
                <paramref name="o1" /> is less than <paramref name="o2" />.</span></span>  
  
 </description>
            </item>
            <item>
              <term> <span data-ttu-id="284f8-211">0</span><span class="sxs-lookup"><span data-stu-id="284f8-211">0</span></span> 
 </term>
              <description><span data-ttu-id="284f8-212">
                <paramref name="o1" />jest równe <paramref name="o2" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-212">
                <paramref name="o1" /> is equal to <paramref name="o2" />.</span></span>  
  
 </description>
            </item>
            <item>
              <term> <span data-ttu-id="284f8-213">1</span><span class="sxs-lookup"><span data-stu-id="284f8-213">1</span></span> 
 </term>
              <description><span data-ttu-id="284f8-214">
                <paramref name="o1" />jest większa niż <paramref name="o2" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-214">
                <paramref name="o1" /> is greater than <paramref name="o2" />.</span></span>  
  
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-215">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-215">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/comparison-operators.md"><span data-ttu-id="284f8-216">Operatory porównania (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-216">Comparison Operators (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PlusObj">
      <MemberSignature Language="C#" Value="public static object PlusObj (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static object PlusObj(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PlusObj (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ PlusObj(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PlusObj : obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="284f8-217">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-217">Required.</span></span> <span data-ttu-id="284f8-218">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-218">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-219">Wykonuje jednoargumentową operację plus (+).</span><span class="sxs-lookup"><span data-stu-id="284f8-219">Performs a unary plus (+) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-220">Wartość <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-220">The value of <paramref name="obj" />.</span></span> <span data-ttu-id="284f8-221">(Znak <paramref name="obj" /> nie jest zmieniany).</span><span class="sxs-lookup"><span data-stu-id="284f8-221">(The sign of the <paramref name="obj" /> is unchanged.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-222">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-222">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/addition-operator.md"><span data-ttu-id="284f8-223">+ — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-223">+ Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PowObj">
      <MemberSignature Language="C#" Value="public static object PowObj (object obj1, object obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object PowObj(object obj1, object obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowObj (obj1 As Object, obj2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ PowObj(System::Object ^ obj1, System::Object ^ obj2);" />
      <MemberSignature Language="F#" Value="static member PowObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj (obj1, obj2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Object" />
        <Parameter Name="obj2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj1"><span data-ttu-id="284f8-224">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-224">Required.</span></span> <span data-ttu-id="284f8-225">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-225">Any numeric expression.</span></span></param>
        <param name="obj2"><span data-ttu-id="284f8-226">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-226">Required.</span></span> <span data-ttu-id="284f8-227">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-227">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-228">Wykonuje operację wykładnika (^).</span><span class="sxs-lookup"><span data-stu-id="284f8-228">Performs an exponent (^) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-229">Wynik <paramref name="obj1" /> podniesiony do <paramref name="obj2" />potęgi.</span><span class="sxs-lookup"><span data-stu-id="284f8-229">The result of <paramref name="obj1" /> raised to the power of <paramref name="obj2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-230">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-230">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/exponentiation-operators.md"><span data-ttu-id="284f8-231">^ — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-231">^ Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShiftLeftObj">
      <MemberSignature Language="C#" Value="public static object ShiftLeftObj (object o1, int amount);" />
      <MemberSignature Language="ILAsm" Value=".method public static object ShiftLeftObj(object o1, int32 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShiftLeftObj (o1 As Object, amount As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ShiftLeftObj(System::Object ^ o1, int amount);" />
      <MemberSignature Language="F#" Value="static member ShiftLeftObj : obj * int -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj (o1, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="amount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-232">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="284f8-232">Required.</span></span> <span data-ttu-id="284f8-233">Całkowite wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-233">Integral numeric expression.</span></span> <span data-ttu-id="284f8-234">Wzorzec bitowy, który ma zostać przesunięty.</span><span class="sxs-lookup"><span data-stu-id="284f8-234">The bit pattern to be shifted.</span></span> <span data-ttu-id="284f8-235">Typ danych musi być typem całkowitym (<see langword="SByte" />, <see langword="Byte" />, <see langword="Integer" /> <see langword="UShort" /> <see langword="Short" /> <see langword="Long" />,,, <see langword="ULong" />, lub). <see langword="UInteger" /></span><span class="sxs-lookup"><span data-stu-id="284f8-235">The data type must be an integral type (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" />, or <see langword="ULong" />).</span></span></param>
        <param name="amount"><span data-ttu-id="284f8-236">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-236">Required.</span></span> <span data-ttu-id="284f8-237">Wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-237">Numeric expression.</span></span> <span data-ttu-id="284f8-238">Liczba bitów do przesunięcia wzorca bitowego.</span><span class="sxs-lookup"><span data-stu-id="284f8-238">The number of bits to shift the bit pattern.</span></span> <span data-ttu-id="284f8-239">Typ danych musi być lub <see langword="Integer" /> być rozszerzony do <see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-239">The data type must be <see langword="Integer" /> or widen to <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="284f8-240">Wykonuje arytmetyczną operację przesunięcia&lt;w lewo (&lt;).</span><span class="sxs-lookup"><span data-stu-id="284f8-240">Performs an arithmetic left shift (&lt;&lt;) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-241">Całkowita wartość liczbowa.</span><span class="sxs-lookup"><span data-stu-id="284f8-241">An integral numeric value.</span></span> <span data-ttu-id="284f8-242">Wynik przesunięcia wzorca bitowego.</span><span class="sxs-lookup"><span data-stu-id="284f8-242">The result of shifting the bit pattern.</span></span> <span data-ttu-id="284f8-243">Typ danych jest taki sam jak w przypadku programu <paramref name="o1" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-243">The data type is the same as that of <paramref name="o1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-244">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-244">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/left-shift-operator.md"><span data-ttu-id="284f8-245">&lt;&lt;Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-245">&lt;&lt; Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShiftRightObj">
      <MemberSignature Language="C#" Value="public static object ShiftRightObj (object o1, int amount);" />
      <MemberSignature Language="ILAsm" Value=".method public static object ShiftRightObj(object o1, int32 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShiftRightObj (o1 As Object, amount As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ShiftRightObj(System::Object ^ o1, int amount);" />
      <MemberSignature Language="F#" Value="static member ShiftRightObj : obj * int -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj (o1, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="amount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-246">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-246">Required.</span></span> <span data-ttu-id="284f8-247">Całkowite wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-247">Integral numeric expression.</span></span> <span data-ttu-id="284f8-248">Wzorzec bitowy, który ma zostać przesunięty.</span><span class="sxs-lookup"><span data-stu-id="284f8-248">The bit pattern to be shifted.</span></span> <span data-ttu-id="284f8-249">Typ danych musi być typem całkowitym (<see langword="SByte" />, <see langword="Byte" />, <see langword="Integer" /> <see langword="UShort" /> <see langword="Short" /> <see langword="Long" />,,, <see langword="ULong" />, lub). <see langword="UInteger" /></span><span class="sxs-lookup"><span data-stu-id="284f8-249">The data type must be an integral type (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" />, or <see langword="ULong" />).</span></span></param>
        <param name="amount"><span data-ttu-id="284f8-250">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-250">Required.</span></span> <span data-ttu-id="284f8-251">Wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-251">Numeric expression.</span></span> <span data-ttu-id="284f8-252">Liczba bitów do przesunięcia wzorca bitowego.</span><span class="sxs-lookup"><span data-stu-id="284f8-252">The number of bits to shift the bit pattern.</span></span> <span data-ttu-id="284f8-253">Typ danych musi być lub <see langword="Integer" /> być rozszerzony do <see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-253">The data type must be <see langword="Integer" /> or widen to <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="284f8-254">Wykonuje arytmetyczną operację przesunięcia&gt;(&gt;).</span><span class="sxs-lookup"><span data-stu-id="284f8-254">Performs an arithmetic right shift (&gt;&gt;) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-255">Całkowita wartość liczbowa.</span><span class="sxs-lookup"><span data-stu-id="284f8-255">An integral numeric value.</span></span> <span data-ttu-id="284f8-256">Wynik przesunięcia wzorca bitowego.</span><span class="sxs-lookup"><span data-stu-id="284f8-256">The result of shifting the bit pattern.</span></span> <span data-ttu-id="284f8-257">Typ danych jest taki sam jak w przypadku programu <paramref name="o1" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-257">The data type is the same as that of <paramref name="o1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-258">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-258">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/right-shift-operator.md"><span data-ttu-id="284f8-259">&gt;&gt;Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-259">&gt;&gt; Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrCatObj">
      <MemberSignature Language="C#" Value="public static object StrCatObj (object vLeft, object vRight);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrCatObj(object vLeft, object vRight) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StrCatObj (vLeft As Object, vRight As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrCatObj(System::Object ^ vLeft, System::Object ^ vRight);" />
      <MemberSignature Language="F#" Value="static member StrCatObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj (vLeft, vRight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vLeft" Type="System.Object" />
        <Parameter Name="vRight" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="vLeft"><span data-ttu-id="284f8-260">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-260">Required.</span></span> <span data-ttu-id="284f8-261">Dowolne wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="284f8-261">Any expression.</span></span></param>
        <param name="vRight"><span data-ttu-id="284f8-262">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-262">Required.</span></span> <span data-ttu-id="284f8-263">Dowolne wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="284f8-263">Any expression.</span></span></param>
        <summary><span data-ttu-id="284f8-264">Wykonuje operację łączenia ciągów (&amp;).</span><span class="sxs-lookup"><span data-stu-id="284f8-264">Performs a string concatenation (&amp;) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-265">Ciąg reprezentujący łączenie <paramref name="vLeft" /> i <paramref name="vRight" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-265">A string representing the concatenation of <paramref name="vLeft" /> and <paramref name="vRight" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-266">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-266">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/concatenation-operator.md"><span data-ttu-id="284f8-267">&amp;Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-267">&amp; Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SubObj">
      <MemberSignature Language="C#" Value="public static object SubObj (object o1, object o2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object SubObj(object o1, object o2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubObj (o1 As Object, o2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ SubObj(System::Object ^ o1, System::Object ^ o2);" />
      <MemberSignature Language="F#" Value="static member SubObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj (o1, o2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="o2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o1"><span data-ttu-id="284f8-268">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-268">Required.</span></span> <span data-ttu-id="284f8-269">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-269">Any numeric expression.</span></span></param>
        <param name="o2"><span data-ttu-id="284f8-270">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-270">Required.</span></span> <span data-ttu-id="284f8-271">Dowolne wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-271">Any numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-272">Wykonuje operację odejmowania (-).</span><span class="sxs-lookup"><span data-stu-id="284f8-272">Performs a subtraction (-) operation.</span></span></summary>
        <returns><span data-ttu-id="284f8-273">Różnica między <paramref name="o1" /> i <paramref name="o2" />.</span><span class="sxs-lookup"><span data-stu-id="284f8-273">The difference between <paramref name="o1" /> and <paramref name="o2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-274">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-274">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/subtraction-operator.md"><span data-ttu-id="284f8-275">- — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-275">- Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="XorObj">
      <MemberSignature Language="C#" Value="public static object XorObj (object obj1, object obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static object XorObj(object obj1, object obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XorObj (obj1 As Object, obj2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ XorObj(System::Object ^ obj1, System::Object ^ obj2);" />
      <MemberSignature Language="F#" Value="static member XorObj : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj (obj1, obj2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Object" />
        <Parameter Name="obj2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj1"><span data-ttu-id="284f8-276">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="284f8-276">Required.</span></span> <span data-ttu-id="284f8-277">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-277">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <param name="obj2"><span data-ttu-id="284f8-278">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="284f8-278">Required.</span></span> <span data-ttu-id="284f8-279">Wyrażenie <see langword="Boolean" /> dowolne lub liczbowe.</span><span class="sxs-lookup"><span data-stu-id="284f8-279">Any <see langword="Boolean" /> or numeric expression.</span></span></param>
        <summary><span data-ttu-id="284f8-280"><see langword="Xor" /> Wykonuje porównanie.</span><span class="sxs-lookup"><span data-stu-id="284f8-280">Performs an <see langword="Xor" /> comparison.</span></span></summary>
        <returns><span data-ttu-id="284f8-281"><see langword="Boolean" /> Wartość numeryczna.</span><span class="sxs-lookup"><span data-stu-id="284f8-281">A <see langword="Boolean" /> or numeric value.</span></span> <span data-ttu-id="284f8-282">W celu <see langword="Boolean" /> porównania wartością zwracaną jest wykluczenie logiczne (wyłączne odłączenie logiczne) dwóch wartości. <see langword="Boolean" /></span><span class="sxs-lookup"><span data-stu-id="284f8-282">For a <see langword="Boolean" /> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <see langword="Boolean" /> values.</span></span> <span data-ttu-id="284f8-283">W przypadku operacji bitowych (numerycznych) zwracana wartość jest wartością liczbową reprezentującą wykluczenie bitowe (wyłączne rozłączenie bitowe) dwóch liczbowych wzorców bitowych.</span><span class="sxs-lookup"><span data-stu-id="284f8-283">For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns.</span></span> <span data-ttu-id="284f8-284">Aby uzyskać więcej informacji, zobacz <see href="https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators/xor-operator">operator XOR</see>.</span><span class="sxs-lookup"><span data-stu-id="284f8-284">For more information, see <see href="https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators/xor-operator">Xor Operator</see>.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="284f8-285">Ta klasa obsługuje kompilator Visual Basic i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="284f8-285">This class supports the Visual Basic compiler and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/xor-operator.md"><span data-ttu-id="284f8-286">Xor — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="284f8-286">Xor Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
