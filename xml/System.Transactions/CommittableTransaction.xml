<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommittableTransaction.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e29b4ca4f99af2e899c40f7e2588bbeb984e5e4a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e29b4ca4f99af2e899c40f7e2588bbeb984e5e4a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Transactions.CommittableTransaction">
          <source>Describes a committable transaction.</source>
          <target state="translated">W tym artykule opisano, w której transakcji.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class provides an explicit way for applications to use a transaction, as opposed to using the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class implicitly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> Klasa umożliwia jawne dla aplikacji, aby używać transakcji, a nie za pomocą <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> klasy niejawnie.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, the application writer needs to specifically call the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> methods in order to commit or abort the transaction.</source>
          <target state="translated">W odróżnieniu od <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> klasy, moduł zapisujący aplikacji musi w szczególności wywołać <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> i <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> metody, aby zatwierdzić lub przerwać transakcji.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>However, only the creator of a transaction can commit the transaction.</source>
          <target state="translated">Jednak tylko twórca transakcji można zatwierdzić transakcji.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Therefore, copies of a committable transaction, obtained through the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> method are not committable.</source>
          <target state="translated">W związku z tym kopie której transakcji uzyskanymi za pośrednictwem <ph id="ph1">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> nie są której metody.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>We recommend that you create implicit transactions using the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">Zaleca się utworzenie niejawne transakcji za pomocą <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> klasy, tak aby kontekstu transakcja otoczenia automatycznie odbywa się.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You should also use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">Należy też używać <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> i <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> klasy dla aplikacji, które korzystają z tej samej transakcji w wielu wywołań funkcji lub wielu wywołań wątku.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Aby uzyskać więcej informacji na ten model, zobacz <bpt id="p1">[</bpt>implementacji niejawnej transakcji przy użyciu zakresu transakcji<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> tematu.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Creating a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> does not automatically set the ambient transaction, which is the transaction your code executes in.</source>
          <target state="translated">Tworzenie <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> nie ustawia automatycznie transakcja otoczenia, czyli wykonuje kod w transakcji.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You can get or set the ambient transaction by calling the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> property of the global <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> object.</source>
          <target state="translated">Można pobrać lub ustawić transakcja otoczenia wywołując statycznych <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> właściwości globalne <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>For more information on ambient transactions, see the " Managing Transaction Flow using TransactionScopeOption" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Aby uzyskać więcej informacji na otoczenia transakcji, zobacz sekcję "Przepływu transakcji zarządzanie przy użyciu TransactionScopeOption" <bpt id="p1">[</bpt>implementacji niejawnej transakcji przy użyciu zakresu transakcji<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> tematu.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>If the ambient transaction is not set, any operation on a resource manager is not part of that transaction.</source>
          <target state="translated">Jeśli nie ustawiono transakcja otoczenia, wszelkie operacje na Menedżera zasobów nie jest częścią tej transakcji.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You need to explicitly set and reset the ambient transaction to ensure that resource managers operate under the right transaction context.</source>
          <target state="translated">Musisz jawnie ustawić i zresetuj transakcja otoczenia, aby upewnić się, że menedżerowie zasobów działają w kontekście transakcji prawo.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Until a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> has been committed, all the resources involved with the transaction are still locked.</source>
          <target state="translated">Dopóki <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> ma zatwierdzone, wszystkie zasoby związane z transakcją są nadal zablokowany.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object cannot be reused.</source>
          <target state="translated">Element <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> obiektu nie może być używany ponownie.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.</source>
          <target state="translated">Po została zatwierdzona lub wycofana, nie można użyć ponownie w transakcji lub Ustaw jako bieżący kontekst transakcja otoczenia.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>The following sample creates two new instances of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, commits and rolls back them respectively.</source>
          <target state="translated">Poniższy przykład tworzy dwie nowe wystąpienia klasy <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, zatwierdza i przedstawia odpowiednio je ponownie.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>This type is thread safe.</source>
          <target state="translated">Ten typ jest bezpieczny wątkowo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Transactions.CommittableTransaction">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>The following sample creates a new instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> and commits it.</source>
          <target state="translated">Poniższy przykład tworzy nowe wystąpienie klasy <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> i zatwierdza go.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Próba utworzenia transakcji w ramach systemu Windows 98, Windows 98 Wydanie drugie lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>The maximum amount of time the transaction can exist, before it is aborted.</source>
          <target state="translated">Maksymalną ilość czasu, który transakcja może istnieć przed jego zostało przerwane.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class with the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> value.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> klasy z określonym <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> wartość.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Próba utworzenia transakcji w ramach systemu Windows 98, Windows 98 Wydanie drugie lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> structure that describes the transaction options to use for the new transaction.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> strukturę, która zawiera opis opcji transakcji na potrzeby nowej transakcji.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class with the specified transaction options.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> klasy przy użyciu opcji określonej transakcji.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>The following sample creates a new instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> with options, and aborts it.</source>
          <target state="translated">Poniższy przykład tworzy nowe wystąpienie klasy <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> z opcjami, a jego przerwanie.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Próba utworzenia transakcji w ramach systemu Windows 98, Windows 98 Wydanie drugie lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> jest nieprawidłowy.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>Begins an attempt to commit the transaction asynchronously.</source>
          <target state="translated">Rozpoczyna się próba przekazania transakcji asynchronicznie.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> Interfejs, który może służyć przez obiekt wywołujący, aby sprawdzić stan operacji asynchronicznej lub zaczekać na ukończenie tej operacji.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>This method returns immediately, before the transaction has been completed.</source>
          <target state="translated">Ta metoda zwraca natychmiast, przed zakończeniem transakcji.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>The transaction then commits on a different thread, and the <ph id="ph1">`asyncCallback`</ph> delegate is invoked when it has completed.</source>
          <target state="translated">Transakcji, a następnie zatwierdzeń w innym wątku i <ph id="ph1">`asyncCallback`</ph> delegata jest wywoływane, gdy została ukończona.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>After this method is called, you do not receive the outcome of the transaction until you call <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.</source>
          <target state="translated">Po ta metoda jest wywoływana, nie jest wyświetlany wynik transakcji do czasu wywołania <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>The commit process may complete synchronously inside this method call.</source>
          <target state="translated">Proces może zakończyć się synchronicznie wewnątrz wywołanie tej metody.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Attempts to commit the transaction.</source>
          <target state="translated">Próba przekazania transakcji.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction.</source>
          <target state="translated">Gdy ta metoda jest wywoływana, wszystkie obiekty, które zostały zarejestrowane do udziału w transakcji są wysyłane i niezależnie może wskazywać na to ich głos zatwierdzenia lub Wycofaj tę transakcję.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>If any participant votes to roll back the transaction, it is rolled back and this method throws a <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> exception.</source>
          <target state="translated">Jeśli wszystkie uczestnika głosów można wycofać transakcji, zostanie wycofana, a ta metoda zgłasza <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> wyjątku.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>This is a normal occurrence for a transaction and your code should catch and process such exceptions.</source>
          <target state="translated">Jest to normalne dla transakcji i kod powinien catch i przetwarzania tych wyjątków.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> zablokować do czasu ukończenia pierwszą fazę przetwarzania transakcji.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.</source>
          <target state="translated">Pierwszą fazę kończy się po wszystkich menedżerów zasobów i rejestracji w transakcji zostały odrzucone na wynik transakcji i <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> trwale postanowiła Zatwierdź lub Przerwij transakcję.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">Na drugim etapie przetwarzania jest zawsze asynchroniczny.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">W związku z tym nie ma żadnej gwarancji, że dane tylko zatwierdzone z danej transakcji zostaną natychmiast dostępna później, gdy nie używać innej transakcji do wyświetlania tych danych.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">Ponieważ ten bloki metoda przed zakończeniem pierwszą fazę przetwarzanie transakcji, należy zachować ostrożność bardzo przy użyciu tej metody w aplikacji formularzy systemu Windows (kontrolce) lub zakleszczenie mogą wystąpić.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">Jeśli wywołanie tej metody wewnątrz jednego zdarzenia kontrolki formularza systemu Windows (na przykład kliknięcie przycisku) i używać synchroniczne <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> metodę, aby przekierować formantu do wykonania niektórych zadań interfejsu użytkownika (na przykład zmiany kolorów) w trakcie przetwarzania transakcji, nastąpi zakleszczenia.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>This is because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">Jest to spowodowane <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> metoda synchroniczna i blokuje wątku roboczego wątku interfejsu użytkownika zakończenie swojego zadania.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">Jednak w naszym scenariuszu wątku interfejsu użytkownika jest również oczekiwanie na wątku roboczego można zatwierdzić transakcji.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">Wynik jest, że żaden nie jest możliwe w i zakres nieskończoność czeka na zakończenie zatwierdzania.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">Należy używać <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> zamiast <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wszędzie tam, gdzie to możliwe, ponieważ jest asynchroniczne, a w związku z tym mniej podatna na zakleszczenie.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> is called on a transaction and the transaction becomes <ph id="ph2">&lt;see cref="F:System.Transactions.TransactionStatus.InDoubt" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> Wywołano transakcji i transakcji staje się <ph id="ph2">&lt;see cref="F:System.Transactions.TransactionStatus.InDoubt" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> is called and the transaction rolls back for the first time.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> nazywa się i przywraca transakcji po raz pierwszy.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>Ends an attempt to commit the transaction asynchronously.</source>
          <target state="translated">Kończy się próba przekazania transakcji asynchronicznie.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>You should call this method in the callback delegate specified as a parameter to the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> method, when you have finished any cleanup work associated with the asynchronous commitment.</source>
          <target state="translated">Tej metody należy wywołać w podane jako parametr do delegata wywołania zwrotnego <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> metody, po zakończeniu wszelkie Oczyszczanie związanych z asynchronicznego zobowiązań.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>You can also call this method early without waiting for the delegate.</source>
          <target state="translated">Tę metodę można wywołać również wczesne bez oczekiwania na delegata.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>If, by the time you call this method, the transaction has not completed, this method waits for its completion.</source>
          <target state="translated">Jeśli w czasie, ta metoda jest wywoływana, transakcja nie została ukończona, ta metoda oczekuje na jego zakończenia.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> property returned by <ph id="ph2">`asyncResult`</ph> is always <ph id="ph3">`false`</ph>, even if the operation completed synchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> Właściwości zwróconej przez <ph id="ph2">`asyncResult`</ph> jest zawsze <ph id="ph3">`false`</ph>nawet wtedy, gdy synchronicznie wykonać operacji.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> zablokować do czasu ukończenia pierwszą fazę przetwarzania transakcji.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.</source>
          <target state="translated">Pierwszą fazę kończy się po wszystkich menedżerów zasobów i rejestracji w transakcji zostały odrzucone na wynik transakcji i <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> trwale postanowiła Zatwierdź lub Przerwij transakcję.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">Na drugim etapie przetwarzania jest zawsze asynchroniczny.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">W związku z tym nie ma żadnej gwarancji, że dane tylko zatwierdzone z danej transakcji zostaną natychmiast dostępna później, gdy nie używać innej transakcji do wyświetlania tych danych.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> is called and the transaction rolls back for the first time.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> nazywa się i przywraca transakcji po raz pierwszy.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
          <source>Gets the object provided as the last parameter of the <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> method call.</source>
          <target state="translated">Pobiera obiekt podana jako ostatni parametr <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> wywołania metody.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
          <source>The object provided as the last parameter of the <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> method call.</source>
          <target state="translated">Obiekt udostępniany jako ostatni parametr <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> wywołania metody.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> umożliwiające poczekaj na zakończenie operacji asynchronicznych.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> umożliwiające poczekaj na zakończenie operacji asynchronicznych.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source>Gets an indication of whether the asynchronous commit operation completed synchronously.</source>
          <target state="translated">Pobiera wskazanie, czy operacja zatwierdzania asynchronicznego zakończona synchronicznie.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the asynchronous commit operation completed synchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli operacja zatwierdzania asynchronicznego wykonana synchronicznie; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source>This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> even if the operation completed synchronously.</source>
          <target state="translated">Ta właściwość zawsze zwraca <ph id="ph1">&lt;see langword="false" /&gt;</ph> nawet wtedy, gdy synchronicznie wykonać operacji.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
          <source>Gets an indication whether the asynchronous commit operation has completed.</source>
          <target state="translated">Pobiera wskazuje, czy operacja zatwierdzania asynchronicznego została ukończona.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is complete; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli operacja została zakończona; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>