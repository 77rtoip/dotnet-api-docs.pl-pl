<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISerializable.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e472d101330ad3fe07ac415fe5b90af0a16de62b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e472d101330ad3fe07ac415fe5b90af0a16de62b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Allows an object to control its own serialization and deserialization.</source>
          <target state="translated">Umożliwia obiekt do kontrolowania własną serializacji i deserializacji.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Any class that might be serialized must be marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>.</source>
          <target state="translated">Wszystkie klasy, która może być serializowany musi być oznaczone <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>If a class needs to control its serialization process, it can implement the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</source>
          <target state="translated">Jeśli klasa musi kontrolować procesu serializacji, można zaimplementować <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> at serialization time and populates the supplied <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with all the data required to represent the object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> Wywołania <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> podczas serializacji i wypełnia podane <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> przy użyciu danych wymaganych do reprezentowania obiektu.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with the type of the object in the graph.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> Tworzy <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> z typem obiektu na wykresie.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Objects that need to send proxies for themselves can use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt;</ph> methods on <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> to change the transmitted information.</source>
          <target state="translated">Obiekty, które musi wysłać proxy może się użyć <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt;</ph> metody <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> Aby zmienić informacje przesyłane.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>.</source>
          <target state="translated">W przypadku dziedziczenia klas jest możliwy do serializacji klasy, która pochodzi z klasy podstawowej, która implementuje <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In this case, the derived class should call the base class implementation of <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> inside its implementation of <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>.</source>
          <target state="translated">W takim przypadku Klasa pochodna powinny wywoływać implementację klasy podstawowej <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> wewnątrz jej implementacja <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Otherwise, the data from the base class will not be serialized.</source>
          <target state="translated">W przeciwnym razie nie będzie serializacji danych z klasy podstawowej.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface implies a constructor with the signature constructor (<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> information, <ph id="ph3">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> context).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> Interfejsu oznacza konstruktora z konstruktora podpisu (<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> informacji, <ph id="ph3">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> kontekstu).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>At deserialization time, the current constructor is called only after the data in the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> has been deserialized by the formatter.</source>
          <target state="translated">Podczas deserializacji, bieżąca Konstruktor jest wywoływany tylko po danych w <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> został zdeserializowany przez program formatujący.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In general, this constructor should be protected if the class is not sealed.</source>
          <target state="translated">Ogólnie rzecz biorąc ten konstruktor powinien być chroniony, jeśli klasa nie jest zapieczętowany.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The order in which objects are deserialized cannot be guaranteed.</source>
          <target state="translated">Nie można zagwarantować kolejność, w którym są deserializacji obiektów.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For example, if one type references a type that has not been deserialized yet, an exception will occur.</source>
          <target state="translated">Na przykład jeśli jeden typ odwołuje się do typu, który nie został jeszcze zdeserializować, wyjątek zostanie przeprowadzona.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>If you are creating types that have such dependencies, you can work around the problem by implementing the <ph id="ph1">`IDeserializationCallback`</ph> interface and the <ph id="ph2">`OnDeserialization`</ph> method.</source>
          <target state="translated">W przypadku tworzenia typów, które mają takie zależności można obejść problem zaimplementowanie <ph id="ph1">`IDeserializationCallback`</ph> interfejsu i <ph id="ph2">`OnDeserialization`</ph> metody.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The serialization architecture handles object types that extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> the same as types that extend <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Architektura serializacji obsługuje typy obiektów, które rozszerzają <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> taki sam jak typów rozszerzających <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>These types can be marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> and implement the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface as any other object type.</source>
          <target state="translated">Te typy może być oznaczony przez <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> i wdrożenie <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interfejs jako inny typ obiektu.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Their object state will be captured and persisted onto the stream.</source>
          <target state="translated">Ich stan obiektu zostanie przechwycony i utrwalony na strumienia.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>When these types are being used through <ph id="ph1">&lt;xref:System.Runtime.Remoting&gt;</ph>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">Kiedy te typy są używane przez <ph id="ph1">&lt;xref:System.Runtime.Remoting&gt;</ph>, w zdalnej infrastrukturze zapewnia surogatu zastępuje typowe serializacji, który serializuje zamiast tego serwer proxy <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</source>
          <target state="translated">Surogatu jest pomocnika, który potrafi w celu serializacji i deserializacji obiektów określonego typu.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The proxy, invisible to the user in most cases, will be of type <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph>.</source>
          <target state="translated">Serwer proxy, niewidoczne dla użytkownika, w większości przypadków będzie typu <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">Jako wzorzec projektowania ogólne wyjątkowo rzadko dla klasy z atrybutowi serializable można oznaczyć i rozszerzenie <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</source>
          <target state="translated">Deweloperzy należy rozważnie o możliwych scenariuszach serializacji i komunikacji zdalnej połączenie tych dwóch właściwości.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>One example where this might be applicable is with a <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Przykładem, gdy jest to stosowane jest z <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>While the base class of <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> (<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>) extends from <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph>, it is possible to capture the state of a <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> and restore it at will.</source>
          <target state="translated">Podczas klasę podstawową <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> (<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>) rozciąga się od <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph>, można przechwytywać stan <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> i przywrócenie go w momencie.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</source>
          <target state="translated">W związku z tym może być poprawne serializować stanu tego strumienia w bazie danych i przywróć ją w pewnym momencie nowsze w czasie.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>However, when used through remoting, an object of this type would be proxied.</source>
          <target state="translated">Jednakże w przypadku za pośrednictwem usługi zdalne obiektu tego typu może być serwerem proxy.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For more information about serialization of classes that extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, see <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat serializacji klas, które rozszerzają <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, zobacz <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For more information about implementing <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>, see <bpt id="p1">[</bpt>Custom Serialization<ept id="p1">](~/docs/standard/serialization/custom-serialization.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji o implementacji <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>, zobacz <bpt id="p1">[</bpt>serializacji niestandardowe<ept id="p1">](~/docs/standard/serialization/custom-serialization.md)</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface to define custom serialization behavior for a class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interfejs do definiowania zachowania niestandardowej serializacji dla klasy.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Implement this interface to allow an object to take part in its own serialization and deserialization.</source>
          <target state="translated">Implementuje ten interfejs, aby umożliwić wzięcie udziału w serializacji i deserializacji obiektu.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> to populate with data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> Do wypełniania danych.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination (see <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) for this serialization.</source>
          <target state="translated">Miejsce docelowe (zobacz <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) tej serializacji.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> with the data needed to serialize the target object.</source>
          <target state="translated">Wypełnia <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> z dane potrzebne do zserializowania obiektu docelowego.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Any objects that are included in the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> are automatically tracked and serialized by the formatter.</source>
          <target state="translated">Wszystkie obiekty, które znajdują się w <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> automatycznie są śledzone i serializowany przez program formatujący.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Code that calls <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> requires the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> for providing serialization services.</source>
          <target state="translated">Kod, który wywołuje <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> wymaga <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> do świadczenia usług serializacji.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration: <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>It is not guaranteed that this method will be called only once per object instance during serialization.</source>
          <target state="translated">Nie gwarantuje, że ta metoda zostanie wywołana tylko raz dla każdego wystąpienia obiektu podczas serializacji.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</source>
          <target state="translated">W związku z tym metody powinny być implementowane w taki sposób, że jego zachowanie jest taki sam, niezależnie od tego, ile razy, jest ona wywoływana.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> method to set alternate values for a serialized object.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> metodę, aby ustawić alternatywne wartości dla serializacji obiektu.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> class to store the alternate values when the object is serialized.</source>
          <target state="translated">W kodzie użyto <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A&gt;</ph> metody <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> klasę do przechowywania alternatywne wartości, gdy serializowany jest obiekt.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Conversely, when the constructor of the <ph id="ph1">`Person`</ph> class is called during deserialization, the alternatve values are retrieved using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A&gt;</ph> method and reassigned to the object's fields.</source>
          <target state="translated">Z drugiej strony, gdy Konstruktor obiektu <ph id="ph1">`Person`</ph> klasy jest wywoływana podczas deserializacji, alternatve są one pobierane przy użyciu <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A&gt;</ph> — metoda i przypisanie do pola obiektu.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Obiekt wywołujący nie posiada wymaganych uprawnień.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>