<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="881dfbfc930238abb1faeec6652b9625fbc2a99a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69087382" /></Metadata><TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia obiektowi sterowanie własną serializacji i deserializacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda klasa, która może być serializowana, musi być <xref:System.SerializableAttribute>oznaczona przy użyciu. Jeśli klasa musi kontrolować swój proces serializacji, może zaimplementować <xref:System.Runtime.Serialization.ISerializable> interfejs. Wywołania w czasie serializacji i wypełniają dostarczone <xref:System.Runtime.Serialization.SerializationInfo> ze wszystkimi danymi wymaganymi do reprezentowania obiektu. <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> <xref:System.Runtime.Serialization.Formatter> <xref:System.Runtime.Serialization.Formatter> Tworzy a<xref:System.Runtime.Serialization.SerializationInfo> z typem obiektu w grafie. Obiekty, które muszą wysyłać proxy dla siebie, mogą użyć <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> metod <xref:System.Runtime.Serialization.SerializationInfo> i <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> , aby zmienić przesyłane informacje.  
  
 W przypadku dziedziczenia klasy można serializować klasę, która dziedziczy z klasy bazowej implementującej <xref:System.Runtime.Serialization.ISerializable>. W takim przypadku Klasa pochodna powinna wywołać implementację <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> klasy bazowej w ramach jej <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>implementacji. W przeciwnym razie dane z klasy bazowej nie będą serializowane.  
  
 Interfejs sugeruje konstruktora z konstruktorem sygnatur (<xref:System.Runtime.Serialization.SerializationInfo> informacjami, <xref:System.Runtime.Serialization.StreamingContext> kontekstem). <xref:System.Runtime.Serialization.ISerializable> W czasie deserializacji bieżący Konstruktor jest wywoływany tylko po deserializacji danych w programie <xref:System.Runtime.Serialization.SerializationInfo> formatującego. Ogólnie rzecz biorąc, ten konstruktor powinien być chroniony, jeśli Klasa nie jest zapieczętowana.  
  
 Nie można zagwarantować kolejności, w której obiekty są deserializowane. Na przykład, jeśli jeden typ odwołuje się do typu, który nie został jeszcze odszeregowany, wystąpi wyjątek. W przypadku tworzenia typów, które mają takie zależności, można obejść ten problem, implementując `IDeserializationCallback` Interfejs `OnDeserialization` i metodę.  
  
 Architektura serializacji obsługuje typy obiektów, które zwiększają <xref:System.MarshalByRefObject> takie same jak typy, które wykraczają <xref:System.Object>na siebie. Te typy można oznaczyć przy użyciu <xref:System.SerializableAttribute> i <xref:System.Runtime.Serialization.ISerializable> zaimplementować interfejs jako każdy inny typ obiektu. Stan obiektu zostanie przechwycony i utrwalony w strumieniu.  
  
 Gdy te typy są używane przez <xref:System.Runtime.Remoting>program, infrastruktura zdalna zapewnia Surogat, który zastąpi typową serializację i zamiast tego serializować serwer proxy <xref:System.MarshalByRefObject>do. Surogat to pomocnik, który wie, jak serializować i deserializować obiekty określonego typu. Serwer proxy, niewidoczny dla użytkownika w większości przypadków, będzie typem <xref:System.Runtime.Remoting.ObjRef>.  
  
 Ogólny Wzorzec projektowy może być nietypowy dla klasy, która będzie jednocześnie oznaczona atrybutem SERIALIZABLE i rozszerzona <xref:System.MarshalByRefObject>. Deweloperzy powinni uważnie myśleć o możliwych scenariuszach serializacji i komunikacji zdalnej podczas łączenia tych dwóch cech. Przykładem może być to, że <xref:System.IO.MemoryStream>ma to zastosowanie. Podczas gdy Klasa <xref:System.IO.MemoryStream> bazowa (<xref:System.IO.Stream>) rozciąga się od <xref:System.MarshalByRefObject>, możliwe <xref:System.IO.MemoryStream> jest przechwycenie stanu i przywrócenie go. W związku z tym może być istotny dla serializacji stanu tego strumienia do bazy danych i przywracania go w późniejszym czasie. Jednak w przypadku użycia przez funkcję komunikacji zdalnej obiekt tego typu powinien być serwerem proxy.  
  
 Aby uzyskać więcej informacji na temat serializacji klas, <xref:System.MarshalByRefObject>które zwiększają, zobacz. <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector> Aby uzyskać więcej informacji na <xref:System.Runtime.Serialization.ISerializable>temat implementowania, zobacz [Serializacja](~/docs/standard/serialization/custom-serialization.md)niestandardowa.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Runtime.Serialization.ISerializable> interfejsu do definiowania niestandardowego zachowania serializacji dla klasy.  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Zaimplementuj ten interfejs, aby umożliwić obiektowi przejęcie części we własnej serializacji i deserializacji.</para></block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">Serializacja XML i SOAP</related>
    <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Serializacja niestandardowa</related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Do wypełnienia danymi.</param>
        <param name="context">Miejsce docelowe (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />) dla tej serializacji.</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Wypełnia dane, które są konieczne do serializacji obiektu docelowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie obiekty, które są zawarte w <xref:System.Runtime.Serialization.SerializationInfo> , są automatycznie śledzone i serializowane przez program formatujący.  
  
 Kod, który <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> wywołuje, <xref:System.Security.Permissions.SecurityPermission> wymaga do świadczenia usług serializacji. Powiązane wartość typu wyliczeniowego: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Nie ma gwarancji, że ta metoda zostanie wywołana tylko raz dla każdego wystąpienia obiektu podczas serializacji. W związku z tym metoda powinna być implementowana w taki sposób, że jego zachowanie będzie takie samo, niezależnie od tego, ile razy jest wywoływana.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> metody do ustawiania alternatywnych wartości dla serializowanego obiektu. Kod używa <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> metody <xref:System.Runtime.Serialization.SerializationInfo> klasy do przechowywania alternatywnych wartości podczas serializacji obiektu. Z drugiej strony, gdy Konstruktor `Person` klasy jest wywoływany podczas deserializacji, wartości alternatve są pobierane <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> przy użyciu metody i ponownie przypisywane do pól obiektu.  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Serializacja niestandardowa</related>
      </Docs>
    </Member>
  </Members>
</Type>
