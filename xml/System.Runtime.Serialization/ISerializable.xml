<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17f55c59f17b4264695f566b7e06f8e8c6188ed4" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48602988" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Pozwala kontrolować swój własny serializacji i deserializacji obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Muszą być oznaczone każdej klasy, który może być serializowany <xref:System.SerializableAttribute>. Jeśli klasa musi kontrolować jego procesem serializacji, można zaimplementować <xref:System.Runtime.Serialization.ISerializable> interfejsu. <xref:System.Runtime.Serialization.Formatter> Wywołania <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> podczas serializacji i wypełnia podane <xref:System.Runtime.Serialization.SerializationInfo> ze wszystkimi danymi, które są wymagane do reprezentowania obiektu. <xref:System.Runtime.Serialization.Formatter> Tworzy <xref:System.Runtime.Serialization.SerializationInfo> z typem obiektu na wykresie. Obiekty, które trzeba wysłać serwerów proxy dla siebie służy <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> i <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> metod <xref:System.Runtime.Serialization.SerializationInfo> zmienić przekazane informacje.  
  
 W przypadku dziedziczenia klas jest możliwe do serializacji klasę, która pochodzi z klasy bazowej, która implementuje <xref:System.Runtime.Serialization.ISerializable>. W takim przypadku Klasa pochodna powinny wywoływać implementację klasy bazowej <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> wewnątrz jego implementacja obiektu <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. W przeciwnym razie nie można serializować danych z klasy bazowej.  
  
 <xref:System.Runtime.Serialization.ISerializable> Interfejsu sugeruje konstruktora przy użyciu konstruktora podpisu (<xref:System.Runtime.Serialization.SerializationInfo> informacji, <xref:System.Runtime.Serialization.StreamingContext> kontekstu). Podczas deserializacji, bieżący Konstruktor jest wywoływana tylko po danych w <xref:System.Runtime.Serialization.SerializationInfo> deserializacji przez program formatujący. Ogólnie rzecz biorąc ten konstruktor powinien być chroniony, jeśli klasa nie jest zapieczętowany.  
  
 Nie można zagwarantować kolejność, w których obiekty są deserializacji. Na przykład jeśli jeden typ odwołuje się do typu, która nie została jeszcze przeprowadzona, wyjątek wystąpi. Jeśli tworzysz typy, które mają takie zależności można obejść ten problem przez zaimplementowanie `IDeserializationCallback` interfejsu i `OnDeserialization` metody.  
  
 Architektura serializacji obsługuje typy obiektów, które rozszerzają <xref:System.MarshalByRefObject> takie same jak typy, które rozszerzają <xref:System.Object>. Te typy mogą być oznaczone <xref:System.SerializableAttribute> i zaimplementować <xref:System.Runtime.Serialization.ISerializable> interfejs jako dowolnego typu obiektu. Ich stan obiektu zostanie przechwycony i utrwalone do strumienia.  
  
 Kiedy te typy są używane za pośrednictwem <xref:System.Runtime.Remoting>, infrastruktura usług zdalnych zapewnia zastępczy, zastępuje typowe serializacji, który serializuje zamiast tego serwer proxy, aby <xref:System.MarshalByRefObject>. Zastępczy jest pomocnika, który wie, jak do serializacji i deserializacji obiektów określonego typu. Serwer proxy, niewidoczne dla użytkownika, w większości przypadków będzie mieć typ <xref:System.Runtime.Remoting.ObjRef>.  
  
 Jako wzorzec projektowania ogólne, byłoby nietypowe klasa może być zarówno oznaczone atrybutem możliwy do serializacji i rozszerzać <xref:System.MarshalByRefObject>. Deweloperzy powinien należy dobrze przemyśleć możliwych scenariuszy serializacji i komunikacji zdalnej podczas łączenia tych dwóch właściwości. Jednym z przykładów gdzie może to być stosowane jest przy użyciu <xref:System.IO.MemoryStream>. Podczas gdy klasa bazowa <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) rozciąga się od <xref:System.MarshalByRefObject>, można przechwytywać stan <xref:System.IO.MemoryStream> i przywróć ją w momencie. W związku z tym, może być poprawne dla serializacji stan tego strumienia w bazie danych i przywróć ją w pewnym momencie później w czasie. Jednak w przypadku użycia za pomocą komunikacji zdalnej, obiekt tego typu może być serwerem proxy.  
  
 Aby uzyskać więcej informacji na temat serializacji w klasach, które rozszerzają <xref:System.MarshalByRefObject>, zobacz <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. Aby uzyskać więcej informacji o implementowaniu <xref:System.Runtime.Serialization.ISerializable>, zobacz [serializacja niestandardowa](~/docs/standard/serialization/custom-serialization.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Runtime.Serialization.ISerializable> interfejs zdefiniowanie zachowania niestandardowej serializacji dla klasy.  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implementuje ten interfejs, aby umożliwić wzięcie udziału w jego własnej serializacji i deserializacji obiektu.</para>
    </block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">Serializacja XML i SOAP</related>
    <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Niestandardowej serializacji</related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Do wypełniania danymi.</param>
        <param name="context">Miejsce docelowe (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />) tej serializacji.</param>
        <summary>Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> z dane potrzebne do zserializowania obiektu docelowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie obiekty, które są objęte <xref:System.Runtime.Serialization.SerializationInfo> są automatycznie śledzone i serializowany przez program formatujący.  
  
 Kod, który wywołuje <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> wymaga <xref:System.Security.Permissions.SecurityPermission> celu świadczenia usług serializacji. Powiązane wyliczenie: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Nie gwarantuje, że ta metoda zostanie wywołana tylko raz dla każdego wystąpienia obiektu podczas serializacji. Dlatego metoda powinny zostać wdrożone w taki sposób, że jego zachowanie będą takie same, niezależnie od liczby przypadków, gdy jest wywoływana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> metodę, aby ustawić alternatywne wartości dla serializacji obiektu. Kod używa <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> metody <xref:System.Runtime.Serialization.SerializationInfo> klasę do przechowywania alternatywne wartości, gdy serializowany jest obiekt. Z drugiej strony, gdy Konstruktor `Person` klasy jest wywoływana podczas deserializacji, alternatve są one pobierane przy użyciu <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> metody i ponownie przypisany do pola obiektu.  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Niestandardowej serializacji</related>
      </Docs>
    </Member>
  </Members>
</Type>