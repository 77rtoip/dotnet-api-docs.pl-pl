<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d66e8d135305fa433d16bdd35ec387e0480f348" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69265708" /></Metadata><TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f6df8-101">Umożliwia transformację zestawu plików schematu XML (XSD) do typów środowiska uruchomieniowego języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="f6df8-101">Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-102">Użyj w <xref:System.Runtime.Serialization.XsdDataContractImporter> przypadku tworzenia usługi sieci Web, która musi współdziałać z istniejącą usługą sieci Web, lub tworzyć typy kontraktów danych z schematów XML.</span><span class="sxs-lookup"><span data-stu-id="f6df8-102">Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</span></span> <span data-ttu-id="f6df8-103"><xref:System.Runtime.Serialization.XsdDataContractImporter>spowoduje przekształcenie zestawu schematów XML i utworzenie [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] typów, które reprezentują kontrakt danych w wybranym języku programowania.</span><span class="sxs-lookup"><span data-stu-id="f6df8-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language.</span></span> <span data-ttu-id="f6df8-104">Aby utworzyć kod, użyj klas w <xref:System.CodeDom> przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="f6df8-104">To create the code, use the classes in the <xref:System.CodeDom> namespace.</span></span>  
  
 <span data-ttu-id="f6df8-105">Z drugiej strony <xref:System.Runtime.Serialization.XsdDataContractExporter> , należy użyć klasy po utworzeniu usługi sieci Web, która zawiera dane reprezentowane przez typy CLR i kiedy trzeba wyeksportować schematy XML dla każdego typu danych, który ma być używany przez inne usługi sieci Web.</span><span class="sxs-lookup"><span data-stu-id="f6df8-105">Conversely, use the <xref:System.Runtime.Serialization.XsdDataContractExporter> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</span></span> <span data-ttu-id="f6df8-106">Oznacza to, <xref:System.Runtime.Serialization.XsdDataContractExporter> że program przekształca zestaw typów CLR w zestaw schematów XML.</span><span class="sxs-lookup"><span data-stu-id="f6df8-106">That is, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforms a set of CLR types into a set of XML schemas.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f6df8-107">Aby generować typy CLR ze schematów XML w czasie projektowania, użyj [Narzędzia metadanych ServiceModel (Svcutil. exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span><span class="sxs-lookup"><span data-stu-id="f6df8-107">To generate CLR types from XML schemas at design time, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span></span> <span data-ttu-id="f6df8-108">Aby wygenerować kod z plików XSD, użyj `/dataContractOnly` przełącznika narzędzia.</span><span class="sxs-lookup"><span data-stu-id="f6df8-108">To generated code from XSD files, use the `/dataContractOnly` switch of the tool.</span></span> <span data-ttu-id="f6df8-109">Można również użyć, <xref:System.Runtime.Serialization.XsdDataContractImporter> Jeśli potrzebna jest większa kontrola nad procesem lub trzeba ją programowo.</span><span class="sxs-lookup"><span data-stu-id="f6df8-109">You can also use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you need more control over the process or need to do it programmatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6df8-110">Poniższy przykład tworzy <xref:System.Xml.Schema.XmlSchemaSet> i <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> wywołuje metodę w celu utworzenia <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="f6df8-110">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="f6df8-111">Jest następnie używany do tworzenia zarówno plików wizualizacji C# , jak i kodu Visual Basic. <xref:System.CodeDom.CodeCompileUnit></span><span class="sxs-lookup"><span data-stu-id="f6df8-111">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md"><span data-ttu-id="f6df8-112">Używanie kontraktów danych</span><span class="sxs-lookup"><span data-stu-id="f6df8-112">Using Data Contracts</span></span></related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md"><span data-ttu-id="f6df8-113">Typy obsługiwane przez serializator kontraktu danych</span><span class="sxs-lookup"><span data-stu-id="f6df8-113">Types Supported by the Data Contract Serializer</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f6df8-114">Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="f6df8-114">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f6df8-115">Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="f6df8-115">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><span data-ttu-id="f6df8-116"><see cref="T:System.CodeDom.CodeCompileUnit" /> , Który będzie używany do przechowywania kodu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-116">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code.</span></span></param>
        <summary><span data-ttu-id="f6df8-117">Inicjuje nowe wystąpienie <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> klasy <see cref="T:System.CodeDom.CodeCompileUnit" /> za pomocą, która zostanie użyta do wygenerowania kodu CLR.</span><span class="sxs-lookup"><span data-stu-id="f6df8-117">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-118">Użyj tego konstruktora <xref:System.CodeDom.CodeCompileUnit> , aby dodać więcej kodu do, który został już wygenerowany.</span><span class="sxs-lookup"><span data-stu-id="f6df8-118">Use this constructor to add more code into a <xref:System.CodeDom.CodeCompileUnit> that has already been generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6df8-119">Poniższy przykład tworzy <xref:System.Xml.Schema.XmlSchemaSet> i <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> wywołuje metodę w celu utworzenia <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="f6df8-119">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="f6df8-120">Jest następnie używany do tworzenia zarówno plików wizualizacji C# , jak i kodu Visual Basic. <xref:System.CodeDom.CodeCompileUnit></span><span class="sxs-lookup"><span data-stu-id="f6df8-120">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f6df8-121">Pobiera wartość wskazującą, czy schematy można przekształcać w obiekt <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="f6df8-121">Gets a value that indicates whether the schemas can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-122">Aby uzyskać więcej informacji na temat typów, które można zaimportować, zobacz [Typy obsługiwane przez serializator kontraktu danych](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span><span class="sxs-lookup"><span data-stu-id="f6df8-122">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="f6df8-123"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> Zawierający schematy do przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="f6df8-123">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <summary><span data-ttu-id="f6df8-124">Pobiera wartość wskazującą, czy schematy zawarte w elemencie <see cref="T:System.Xml.Schema.XmlSchemaSet" /> można przekształcać w obiekt. <see cref="T:System.CodeDom.CodeCompileUnit" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-124">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="f6df8-125"><see langword="true" />Jeśli schematy można przekształcać w typy kontraktów danych; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-125"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6df8-126">Poniższy przykład wywołuje metodę, <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> aby określić, <xref:System.CodeDom.CodeCompileUnit> czy można generować.</span><span class="sxs-lookup"><span data-stu-id="f6df8-126">The following example calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6df8-127">Parametr ma wartość <see langword="null" />. <paramref name="schemas" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-127">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="f6df8-128">Kontrakt danych objęty importem jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="f6df8-128">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="f6df8-129"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> Zawierający schematy do przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="f6df8-129">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="typeNames"><span data-ttu-id="f6df8-130"><see cref="T:System.Collections.Generic.ICollection`1" /> Reprezentujezestawtypówschematów<see cref="T:System.Xml.XmlQualifiedName" /> do zaimportowania.</span><span class="sxs-lookup"><span data-stu-id="f6df8-130">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="f6df8-131">Pobiera wartość wskazującą, czy określony zestaw typów zawartych w elemencie <see cref="T:System.Xml.Schema.XmlSchemaSet" /> może być przekształcony na typy CLR generowane <see cref="T:System.CodeDom.CodeCompileUnit" />w.</span><span class="sxs-lookup"><span data-stu-id="f6df8-131">Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="f6df8-132"><see langword="true" />Jeśli schematy można przekształcać; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-132"><see langword="true" /> if the schemas can be transformed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6df8-133">Parametr <paramref name="schemas" /> lub <paramref name="typeNames" /> jest .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-133">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="f6df8-134">Kontrakt danych objęty importem jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="f6df8-134">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="f6df8-135"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> Do zaimportowania.</span><span class="sxs-lookup"><span data-stu-id="f6df8-135">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</span></span></param>
        <param name="element"><span data-ttu-id="f6df8-136">Specyficzne <see cref="T:System.Xml.Schema.XmlSchemaElement" /> do zaewidencjonowania zestawu schematów.</span><span class="sxs-lookup"><span data-stu-id="f6df8-136">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</span></span></param>
        <summary><span data-ttu-id="f6df8-137">Pobiera wartość wskazującą, czy określony element schematu zawarty w <see cref="T:System.Xml.Schema.XmlSchemaSet" /> elemencie może zostać zaimportowany.</span><span class="sxs-lookup"><span data-stu-id="f6df8-137">Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</span></span></summary>
        <returns><span data-ttu-id="f6df8-138"><see langword="true" />Jeśli element można zaimportować; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-138"><see langword="true" /> if the element can be imported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-139">Ta metoda sprawdza typ i wszystkie typy schematów, do których się odwołuje.</span><span class="sxs-lookup"><span data-stu-id="f6df8-139">This method checks the type and all schema types referenced from it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6df8-140">Parametr <paramref name="schemas" /> lub <paramref name="element" /> jest .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-140">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="f6df8-141">Kontrakt danych objęty importem jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="f6df8-141">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="f6df8-142">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> , który zawiera reprezentacje schematu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-142">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="f6df8-143">, Który określa nazwy typów schematów, które należy zaimportować z <see cref="T:System.Xml.Schema.XmlSchemaSet" />. <see cref="T:System.Collections.IList" /> <see cref="T:System.Xml.XmlQualifiedName" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-143">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></param>
        <summary><span data-ttu-id="f6df8-144">Pobiera wartość wskazującą, czy schematy zawarte w elemencie <see cref="T:System.Xml.Schema.XmlSchemaSet" /> można przekształcać w obiekt. <see cref="T:System.CodeDom.CodeCompileUnit" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-144">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="f6df8-145"><see langword="true" />Jeśli schematy można przekształcać w typy kontraktów danych; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-145"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-146">Aby uzyskać więcej informacji na temat typów, które można zaimportować, zobacz [Typy obsługiwane przez serializator kontraktu danych](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span><span class="sxs-lookup"><span data-stu-id="f6df8-146">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6df8-147">Parametr <paramref name="schemas" /> lub <paramref name="typeName" /> jest .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-147">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="f6df8-148">Kontrakt danych objęty importem jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="f6df8-148">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6df8-149"><see cref="T:System.CodeDom.CodeCompileUnit" /> Pobiera używany do przechowywania typów CLR.</span><span class="sxs-lookup"><span data-stu-id="f6df8-149">Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</span></span></summary>
        <value><span data-ttu-id="f6df8-150"><see cref="T:System.CodeDom.CodeCompileUnit" /> Używany do przechowywania generowanych typów CLR.</span><span class="sxs-lookup"><span data-stu-id="f6df8-150">A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-151">Wywołaj tę właściwość po zaimportowaniu <xref:System.Runtime.Serialization.XsdDataContractImporter> schematów przy użyciu <xref:System.CodeDom.CodeCompileUnit> programu, aby uzyskać dostęp do, w którym jest przechowywany cały wygenerowany kod.</span><span class="sxs-lookup"><span data-stu-id="f6df8-151">Call this property after importing schemas using the <xref:System.Runtime.Serialization.XsdDataContractImporter> to access the <xref:System.CodeDom.CodeCompileUnit> in which all the generated code is stored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6df8-152">Poniższy przykład używa tworzenia <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="f6df8-152">The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="f6df8-153">Jest następnie używany do tworzenia zarówno pliku wizualizacji C# , jak i kodu Visual Basic. <xref:System.CodeDom.CodeCompileUnit></span><span class="sxs-lookup"><span data-stu-id="f6df8-153">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f6df8-154"><see cref="T:System.CodeDom.CodeTypeReference" /> Zwraca dla określonego elementu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-154">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="f6df8-155">Określa typ schematu, który ma zostać wyszukany. <see cref="T:System.Xml.XmlQualifiedName" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-155">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</span></span></param>
        <summary><span data-ttu-id="f6df8-156">Zwraca do typu CLR wygenerowanego dla typu schematu z określonym <see cref="T:System.Xml.XmlQualifiedName" />. <see cref="T:System.CodeDom.CodeTypeReference" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-156">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</span></span></summary>
        <returns><span data-ttu-id="f6df8-157">Odwołanie do typu CLR wygenerowanego dla typu schematu <paramref name="typeName" /> z określonym. <see cref="T:System.CodeDom.CodeTypeReference" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-157">A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-158">Użyj tej metody, aby wyszukać odwołanie do wygenerowanego typu CLR po <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="f6df8-158">Use this method to look up the reference to a generated CLR type after calling the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span> <span data-ttu-id="f6df8-159">Zawiera nazwę wygenerowanego typu i może służyć do wyszukania odpowiedniego <xref:System.CodeDom.CodeTypeDeclaration> elementu w <xref:System.CodeDom.CodeCompileUnit>. <xref:System.CodeDom.CodeTypeReference></span><span class="sxs-lookup"><span data-stu-id="f6df8-159">The <xref:System.CodeDom.CodeTypeReference> contains the name of the generated type and can be used to look up the corresponding <xref:System.CodeDom.CodeTypeDeclaration> in the <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="f6df8-160"><see cref="T:System.Xml.XmlQualifiedName" /> Określa kwalifikowaną nazwę XML typu schematu do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="f6df8-160">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</span></span></param>
        <param name="element"><span data-ttu-id="f6df8-161"><see cref="T:System.Xml.Schema.XmlSchemaElement" /> Określa element w schemacie XML.</span><span class="sxs-lookup"><span data-stu-id="f6df8-161">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</span></span></param>
        <summary><span data-ttu-id="f6df8-162"><see cref="T:System.CodeDom.CodeTypeReference" /> Zwraca dla określonego elementu kwalifikowanego XML i elementu schematu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-162">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</span></span></summary>
        <returns><span data-ttu-id="f6df8-163"><see cref="T:System.CodeDom.CodeTypeReference" /> Reprezentuje typ, który został wygenerowany dla określonego typu schematu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-163">A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-164">Element Schema jest wymagany w przypadku danych o typie określonym w zakresie elementu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-164">The schema element is needed for data about the type that is specified at the element scope.</span></span> <span data-ttu-id="f6df8-165">Głównym przykładem jest atrybut `nillable`XSD.</span><span class="sxs-lookup"><span data-stu-id="f6df8-165">The main example of this is the XSD attribute `nillable`.</span></span> <span data-ttu-id="f6df8-166">W schemacie ustawienie `nillable` `true` jest określone w elemencie zawierającym schemat, a pojęcie wartości null jest wyrażone w typie <xref:System.Nullable%601>CLR.</span><span class="sxs-lookup"><span data-stu-id="f6df8-166">In schema, setting `nillable` to `true` is specified on the containing schema element whereas the concept of null is expressed in the CLR type <xref:System.Nullable%601>.</span></span> <span data-ttu-id="f6df8-167">Element jest przesyłany, dzięki czemu ten importer może wyszukiwać informacje na poziomie elementu i zwracać odpowiednie odwołanie do typu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-167">The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</span></span>  
  
 <span data-ttu-id="f6df8-168">Podczas importowania WSDL każdy parametr jest importowany oddzielnie, dlatego elementy parametrów muszą być przesyłane osobno.</span><span class="sxs-lookup"><span data-stu-id="f6df8-168">When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="f6df8-169">Reprezentuje typ schematu, dla którego mają być wyszukiwane znane typy. <see cref="T:System.Xml.XmlQualifiedName" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-169">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</span></span></param>
        <summary><span data-ttu-id="f6df8-170">Zwraca listę <see cref="T:System.CodeDom.CodeTypeReference" /> obiektów reprezentujących znane typy wygenerowane podczas generowania kodu dla określonego typu schematu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-170">Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</span></span></summary>
        <returns><span data-ttu-id="f6df8-171">A <see cref="T:System.Collections.Generic.IList`1" /> typu .<see cref="T:System.CodeDom.CodeTypeReference" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-171">A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-172">Podczas generowania typów CLR dla typów schematów generowane są również znane typy dla wszystkich typów pochodnych, które są obecne w schemacie.</span><span class="sxs-lookup"><span data-stu-id="f6df8-172">When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</span></span> <span data-ttu-id="f6df8-173">W wielu przypadkach te znane typy są dodawane przy użyciu atrybutów do wygenerowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-173">In many cases, these known types are added using attributes to the generated code.</span></span> <span data-ttu-id="f6df8-174">(Na przykład zapoznaj się <xref:System.Runtime.Serialization.KnownTypeAttribute> z klasą.</span><span class="sxs-lookup"><span data-stu-id="f6df8-174">(For example, see the <xref:System.Runtime.Serialization.KnownTypeAttribute> class.</span></span> <span data-ttu-id="f6df8-175">) Jednak dla typu najwyższego poziomu musi być sposób zwrócenia zestawu znanych typów.</span><span class="sxs-lookup"><span data-stu-id="f6df8-175">) However, for the top-level type, there needs to be a way to return the set of known types generated.</span></span> <span data-ttu-id="f6df8-176">Ta metoda zwraca <xref:System.CodeDom.CodeTypeReference> dla znanych typów, które zostały wygenerowane dla określonego typu schematu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-176">This method returns the <xref:System.CodeDom.CodeTypeReference> for known types that were generated for a specific schema type.</span></span>  
  
 <span data-ttu-id="f6df8-177">Aby uzyskać więcej informacji, zobacz [znane typy kontraktu danych](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span><span class="sxs-lookup"><span data-stu-id="f6df8-177">For more information, see [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/1a0baea1-27b7-470d-9136-5bbad86c4337"><span data-ttu-id="f6df8-178">Znane typy kontraktów danych</span><span class="sxs-lookup"><span data-stu-id="f6df8-178">Data Contract Known Types</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f6df8-179">Przekształca zestaw schematów XML w <see cref="T:System.CodeDom.CodeCompileUnit" /> używane do generowania kodu środowiska CLR.</span><span class="sxs-lookup"><span data-stu-id="f6df8-179">Transforms a set of XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> used to generate CLR code.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="f6df8-180">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> , który zawiera reprezentacje schematu do generowania typów CLR dla.</span><span class="sxs-lookup"><span data-stu-id="f6df8-180">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</span></span></param>
        <summary><span data-ttu-id="f6df8-181">Przekształca określony zestaw schematów XML zawartych w w <see cref="T:System.Xml.Schema.XmlSchemaSet" />. <see cref="T:System.CodeDom.CodeCompileUnit" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-181">Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6df8-182">W poniższym przykładzie zastosowano <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> metodę, aby sprawdzić, czy zestaw schematów może zostać zaimportowany.</span><span class="sxs-lookup"><span data-stu-id="f6df8-182">The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported.</span></span> <span data-ttu-id="f6df8-183">Jeśli metoda zwraca `true`, kod wywołuje metodę.<xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A></span><span class="sxs-lookup"><span data-stu-id="f6df8-183">If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6df8-184">Parametr ma wartość <see langword="null" />. <paramref name="schemas" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-184">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="f6df8-185">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> , który zawiera reprezentacje schematu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-185">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeNames"><span data-ttu-id="f6df8-186">A <see cref="T:System.Collections.Generic.ICollection`1" /> (z <see cref="T:System.Xml.XmlQualifiedName" />), który reprezentuje zestaw typów schematów do zaimportowania.</span><span class="sxs-lookup"><span data-stu-id="f6df8-186">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="f6df8-187">Przekształca określony zestaw typów schematu zawartych w do typów CLR, <see cref="T:System.Xml.Schema.XmlSchemaSet" /> które są generowane <see cref="T:System.CodeDom.CodeCompileUnit" />w.</span><span class="sxs-lookup"><span data-stu-id="f6df8-187">Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="f6df8-188"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> Zawierający schematy do przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="f6df8-188">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="element"><span data-ttu-id="f6df8-189"><see cref="T:System.Xml.Schema.XmlSchemaElement" /> Reprezentujący określony element schematu do przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="f6df8-189">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform.</span></span></param>
        <summary><span data-ttu-id="f6df8-190">Przekształca określony element schematu w zestawie określonych schematów <see cref="T:System.CodeDom.CodeCompileUnit" /> XML na a i <see cref="T:System.Xml.XmlQualifiedName" /> zwraca element reprezentujący nazwę kontraktu danych dla określonego elementu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-190">Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</span></span></summary>
        <returns><span data-ttu-id="f6df8-191"><see cref="T:System.Xml.XmlQualifiedName" /> Reprezentujący określony element.</span><span class="sxs-lookup"><span data-stu-id="f6df8-191">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6df8-192">Parametr <paramref name="schemas" /> lub <paramref name="element" /> jest .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-192">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="f6df8-193">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> , który zawiera reprezentacje schematu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-193">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="f6df8-194"><see cref="T:System.Xml.XmlQualifiedName" /> Reprezentujący określony typ schematu do zaimportowania.</span><span class="sxs-lookup"><span data-stu-id="f6df8-194">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</span></span></param>
        <summary><span data-ttu-id="f6df8-195">Przekształca określony typ schematu XML zawarty w <see cref="T:System.Xml.Schema.XmlSchemaSet" />. <see cref="T:System.CodeDom.CodeCompileUnit" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-195">Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6df8-196">Parametr <paramref name="schemas" /> lub <paramref name="typeName" /> jest .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="f6df8-196">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6df8-197">Pobiera lub ustawia element <see cref="T:System.Runtime.Serialization.ImportOptions" /> , który zawiera opcje settable dla operacji importowania.</span><span class="sxs-lookup"><span data-stu-id="f6df8-197">Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation.</span></span></summary>
        <value><span data-ttu-id="f6df8-198">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> , który zawiera opcje settable.</span><span class="sxs-lookup"><span data-stu-id="f6df8-198">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6df8-199">Użyj klasy <xref:System.Runtime.Serialization.ImportOptions> , aby dostosować sposób generowania typów CLR podczas importowania schematu.</span><span class="sxs-lookup"><span data-stu-id="f6df8-199">Use the <xref:System.Runtime.Serialization.ImportOptions> class to customize how the CLR types are generated during schema import.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>
