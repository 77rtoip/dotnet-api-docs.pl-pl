<Type Name="IDataContractSurrogate" FullName="System.Runtime.Serialization.IDataContractSurrogate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="266f75a28321ae8bd7c95cadd8d394d772ff12aa" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46688689" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataContractSurrogate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataContractSurrogate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IDataContractSurrogate" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataContractSurrogate" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataContractSurrogate" />
  <TypeSignature Language="F#" Value="type IDataContractSurrogate = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody wymagane do zastąpienia jednego typu na inny przez <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> podczas serializacji, deserializacji i eksportowania i importowania dokumentów schematu XML (XSD).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Runtime.Serialization.IDataContractSurrogate> przy użyciu <xref:System.Runtime.Serialization.DataContractSerializer> Jeśli trzeba wykonać jedną z następujących czynności: Zastąp jeden typ lub obiekt do innego lub do dynamicznego generowania zmian schematu. Dla przykładowej aplikacji, zobacz [DataContract — Surogat](~/docs/framework/wcf/samples/datacontract-surrogate.md). Aby uzyskać więcej informacji na temat kontraktów danych zobacz [za pomocą kontraktów danych](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 W czasie wykonywania, można znaleźć określonego <xref:System.Runtime.Serialization.DataContractSerializer> dla każdej operacji w usłudze przy użyciu <xref:System.ServiceModel.Description.OperationDescription> można znaleźć <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior> wystąpienia. Aby uzyskać więcej informacji na temat implementowania interfejsu do utworzenia zastępczy zobacz [surogaty kontraktu danych](~/docs/framework/wcf/extending/data-contract-surrogates.md).  
  
 Można również użyć <xref:System.Runtime.Serialization.IDataContractSurrogate> wpływa na importowanie i eksportowanie schematów XML, gdy używana jest <xref:System.Runtime.Serialization.XsdDataContractExporter> i <xref:System.Runtime.Serialization.XsdDataContractImporter> klasy. Możesz to zrobić, przypisując <xref:System.Runtime.Serialization.IDataContractSurrogate> do <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> właściwość <xref:System.Runtime.Serialization.ExportOptions> klasy lub <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> właściwość <xref:System.Runtime.Serialization.ImportOptions> klasy.  Aby uzyskać więcej informacji, zobacz [importowanie i eksportowanie schematu](~/docs/framework/wcf/feature-details/schema-import-and-export.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano implementację <xref:System.Runtime.Serialization.IDataContractSurrogate> interfejsu. Ten kod zastępuje serializacji `Person` wpisz `PersonSurrogated` klasy.  
  
 [!code-csharp[IDataContractSurrogate#0](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#0)]
 [!code-vb[IDataContractSurrogate#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
    <related type="Article" href="http://msdn.microsoft.com/library/b0188f3c-00a9-4cf0-a887-a2284c8fb014">Przykładowe DataContract — Surogat</related>
    <related type="Article" href="http://msdn.microsoft.com/library/8c31134c-46c5-4ed7-94af-bab0ac0dfce5">Surogaty kontraktu danych</related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md">Używanie kontraktów danych</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCustomDataToExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Podczas wykonywania operacji eksportu schematu wstawia adnotacje do schematu dla innych niż null wartości zwracanych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Reflection.MemberInfo memberInfo, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(System::Reflection::MemberInfo ^ memberInfo, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : System.Reflection.MemberInfo * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (memberInfo, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberInfo">Element <see cref="T:System.Reflection.MemberInfo" /> elementu członkowskiego, który opisuje.</param>
        <param name="dataContractType">A <see cref="T:System.Type" />.</param>
        <summary>Podczas wykonywania operacji eksportu schematu wstawia adnotacje do schematu dla innych niż null wartości zwracanych.</summary>
        <returns>Obiekt, który reprezentuje adnotację do wstawienia do definicji schematu XML.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (Type clrType, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Type clrType, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomDataToExport (clrType As Type, dataContractType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(Type ^ clrType, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : Type * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (clrType, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">Typ CLR, która ma zostać zastąpione.</param>
        <param name="dataContractType">Aby mieć adnotacji typu kontraktu danych.</param>
        <summary>Podczas wykonywania operacji eksportu schematu wstawia adnotacje do schematu dla innych niż null wartości zwracanych.</summary>
        <returns>Obiekt, który reprezentuje adnotację do wstawienia do definicji schematu XML.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataContractType">
      <MemberSignature Language="C#" Value="public Type GetDataContractType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDataContractType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDataContractType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetDataContractType : Type -&gt; Type" Usage="iDataContractSurrogate.GetDataContractType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ CLR <see cref="T:System.Type" /> do zastąpienia.</param>
        <summary>Podczas serializacji, deserializacji i importowanie i eksportowanie schematu zwraca wartość typu kontraktu danych, która zastępuje określonego typu.</summary>
        <returns>
          <see cref="T:System.Type" /> Do podstawienia w <paramref name="type" /> wartość. Ten typ musi być możliwy do serializacji, <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Na przykład, muszą być oznaczone za pomocą <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> atrybutu lub innych mechanizmów, które rozpoznaje serializatora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano implementację <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A> metody.  
  
 [!code-csharp[IDataContractSurrogate#1](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#1)]
 [!code-vb[IDataContractSurrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeserializedObject">
      <MemberSignature Language="C#" Value="public object GetDeserializedObject (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetDeserializedObject(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeserializedObject (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDeserializedObject(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetDeserializedObject : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetDeserializedObject (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">Zdeserializowany obiekt do zastąpienia.</param>
        <param name="targetType">
          <see cref="T:System.Type" /> , Podstawione obiekt powinien zostać przypisany do.</param>
        <summary>Podczas deserializacji zwraca obiekt, który zastępuje określony obiekt.</summary>
        <returns>Podstawione obiektu po deserializacji. Ten obiekt musi być typu, który jest możliwy do serializacji, <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Na przykład, muszą być oznaczone za pomocą <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> atrybutu lub innych mechanizmów, które rozpoznaje serializatora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W prostych implementacji, użyj if... then... else kontrolowanie struktury, aby przetestować czy `obj` wartość jest typu surrogated. Jeśli tak, przekształć je jako niezbędne i zwracają podstawione obiekt. Podstawione obiekt może być nowe wystąpienie lub taka sama `obj` wystąpienia.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano implementację <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A> metody.  
  
 [!code-csharp[IDataContractSurrogate#3](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#3)]
 [!code-vb[IDataContractSurrogate#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownCustomDataTypes">
      <MemberSignature Language="C#" Value="public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetKnownCustomDataTypes(class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; customDataTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetKnownCustomDataTypes (customDataTypes As Collection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetKnownCustomDataTypes(System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ customDataTypes);" />
      <MemberSignature Language="F#" Value="abstract member GetKnownCustomDataTypes : System.Collections.ObjectModel.Collection&lt;Type&gt; -&gt; unit" Usage="iDataContractSurrogate.GetKnownCustomDataTypes customDataTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDataTypes" Type="System.Collections.ObjectModel.Collection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="customDataTypes">A <see cref="T:System.Collections.ObjectModel.Collection`1" /> z <see cref="T:System.Type" /> znanych typów, aby dodać.</param>
        <summary>Określa, kolekcji znanych typów do użycia do serializacji i deserializacji obiektów danych niestandardowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wymagany podczas schematu eksportowanie lub Importowanie schematów tylko wtedy, gdy adnotacje są wstawiane do przy użyciu schematu <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectToSerialize">
      <MemberSignature Language="C#" Value="public object GetObjectToSerialize (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObjectToSerialize(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectToSerialize (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectToSerialize(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectToSerialize : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetObjectToSerialize (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do zastąpienia.</param>
        <param name="targetType">
          <see cref="T:System.Type" /> , Podstawione obiekt powinien zostać przypisany do.</param>
        <summary>Podczas serializacji zwraca obiekt, który zastępuje określony obiekt.</summary>
        <returns>Podstawione obiekt, który będzie serializowany. Obiekt musi być możliwy do serializacji, <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Na przykład, muszą być oznaczone za pomocą <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> atrybutu lub innych mechanizmów, które rozpoznaje serializatora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie może zwracać `null` ponieważ przy deserializacji danych będzie można rzutować na typ <xref:System.Object> i <xref:System.InvalidCastException> zgłaszany.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano implementację <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A> metody.  
  
 [!code-csharp[IDataContractSurrogate#2](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#2)]
 [!code-vb[IDataContractSurrogate#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedTypeOnImport">
      <MemberSignature Language="C#" Value="public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferencedTypeOnImport (typeName As String, typeNamespace As String, customData As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReferencedTypeOnImport(System::String ^ typeName, System::String ^ typeNamespace, System::Object ^ customData);" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedTypeOnImport : string * string * obj -&gt; Type" Usage="iDataContractSurrogate.GetReferencedTypeOnImport (typeName, typeNamespace, customData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="customData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeName">Nazwa typu w schemacie.</param>
        <param name="typeNamespace">Przestrzeń nazw typu w schemacie.</param>
        <param name="customData">Obiekt, który reprezentuje adnotacji wstawione do definicji schematu XML, które to dane, które mogą służyć do znajdowania typu odwołania.</param>
        <summary>Podczas importowania schematu zwraca typ odwołania w schemacie.</summary>
        <returns>
          <see cref="T:System.Type" /> Do użycia w przypadku typu odwołania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Null` powinna być zwrócona, jeśli typ CLR nie istnieje dla reprezentujący typ schematu. Spowoduje to nowy typ do wygenerowania podczas importowania schematu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano implementację <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A> metody.  
  
 [!code-csharp[IDataContractSurrogate#4](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#4)]
 [!code-vb[IDataContractSurrogate#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessImportedType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration ProcessImportedType(class System.CodeDom.CodeTypeDeclaration typeDeclaration, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessImportedType (typeDeclaration As CodeTypeDeclaration, compileUnit As CodeCompileUnit) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeDeclaration ^ ProcessImportedType(System::CodeDom::CodeTypeDeclaration ^ typeDeclaration, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="abstract member ProcessImportedType : System.CodeDom.CodeTypeDeclaration * System.CodeDom.CodeCompileUnit -&gt; System.CodeDom.CodeTypeDeclaration" Usage="iDataContractSurrogate.ProcessImportedType (typeDeclaration, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDeclaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="typeDeclaration">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> do procesu, który reprezentuje deklaracji typu wygenerowanych podczas importowania schematu.</param>
        <param name="compileUnit">
          <see cref="T:System.CodeDom.CodeCompileUnit" /> Zawierający kod, generowane podczas importowania schematu.</param>
        <summary>Przetwarza typ, który został wygenerowany z zaimportowanego schematu.</summary>
        <returns>Element <see cref="T:System.CodeDom.CodeTypeDeclaration" /> zawierający typ przetwarzania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dane wejściowe <xref:System.CodeDom.CodeTypeDeclaration> i inne informacje w <xref:System.CodeDom.CodeCompileUnit> może być modyfikowana przez użytkownika w przypadku tej metody. Jeśli `null` ma zostać zwrócona, spowoduje to, że typ nie zostanie wygenerowany. Jeśli nowy <xref:System.CodeDom.CodeTypeDeclaration> ma zostać zwrócona, spowoduje zastąpienie oryginalnego typu wygenerowany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>