<Type Name="IObjectReference" FullName="System.Runtime.Serialization.IObjectReference">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e66ecc80c8a7ca0b241e0a186794d1cb29ef2f55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36629319" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObjectReference" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObjectReference" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IObjectReference" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObjectReference" />
  <TypeSignature Language="C++ CLI" Value="public interface class IObjectReference" />
  <TypeSignature Language="F#" Value="type IObjectReference = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wskazuje, że bieżący implementujący interfejs jest odwołanie do innego obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implementuje ten interfejs obiektów odwołujących się do innego obiektu, którego nie można rozpoznać nazwy do momentu przywrócenia bieżący obiekt jest całkowicie. Na etapie naprawy żadnego obiekt implementujący <see cref="T:System.Runtime.Serialization.IObjectReference" /> zostanie zapytany o jego rzeczywistego obiektu i obiektu są wstawiane do wykresu. Naprawy odwołuje się do procesu finalizowanie odwołania nie zakończono podczas deserializacji obiektu.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="GetRealObject">
      <MemberSignature Language="C#" Value="public object GetRealObject (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRealObject(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRealObject (context As StreamingContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetRealObject(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetRealObject : System.Runtime.Serialization.StreamingContext -&gt; obj" Usage="iObjectReference.GetRealObject context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> z którego deserializowany jest bieżący obiekt.</param>
        <summary>Zwraca obiekt prawdziwe, który należy zdeserializować zamiast obiekt, który określa strumieniu serializowanym.</summary>
        <returns>Zwraca obiekt rzeczywiste do wykresu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przydatna w sytuacji usług zdalnych, gdzie serializacji obiektu proxy twórcą nie rzeczywistego obiektu. Gdy deserializowany jest obiekt serwera proxy twórcą, deserializacji wywołań jego <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A> metody. W tym momencie obiektu proxy twórcą tworzy nowe wystąpienie obiektu serwera proxy, który odwołuje się do rzeczywistego obiektu na przykład na komputerze zdalnym. Na koniec obiekt serwera proxy twórcą jest odrzucone i odzyskać później przez wyrzucanie elementów bezużytecznych.  
  
 Rozważmy na przykład jak <xref:System.Type> obiekty są serializowane. Zamiast przesyłania danych z <xref:System.Type> obiektu, obiekt właściciela o nazwie typu obiektu i informacji na temat zestawu, w którym został znaleziony w implementacji obiektu przesyła systemu <xref:System.Runtime.Serialization.IObjectReference>. Gdy dostępnych zarówno nazwę typu, jak i nazwy zestawu infrastruktury deserializacji wywołuje <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A> w obiekcie symbol zastępczy, która została przesłana. Zwraca to symbol zastępczy <xref:System.Type> obiekt, który jest wstawiany do wykresu.  
  
 Ta metoda jest chroniona przez <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> dla <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType> określony.  
  
   
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień. Połączenie nie będzie działać na Średnia zaufanych serwerów.</exception>
      </Docs>
    </Member>
  </Members>
</Type>