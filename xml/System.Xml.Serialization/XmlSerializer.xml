<Type Name="XmlSerializer" FullName="System.Xml.Serialization.XmlSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="27ab9939bf5a4c79ef30685cadd432730d74118c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36438823" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSerializer" />
  <TypeSignature Language="F#" Value="type XmlSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Serializuje i deserializuje obiektów do i z dokumentów XML. <see cref="T:System.Xml.Serialization.XmlSerializer" /> Umożliwia kontrolowanie, w jaki sposób obiekty są zakodowane w formacie XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Serializacja XML to proces konwertowania właściwości publiczne i pola obiektu do formatu szeregowe (w tym przypadku XML) do przechowywania. Deserializacja ponownie tworzy obiekt pierwotny stan z danych wyjściowych XML. Można potraktować serializacji sposób zapisywania do strumienia lub buforu stanu obiektu. Na przykład program ASP.NET używa <xref:System.Xml.Serialization.XmlSerializer> klasy do kodowania komunikatów usługi XML sieci Web.  
  
 Dane w obiekty opisano przy użyciu narzędzi programistycznych języka, takich jak klasy, pola, właściwości, typy pierwotne, tablice i XML nawet osadzone w formie <xref:System.Xml.XmlElement> lub <xref:System.Xml.XmlAttribute> obiektów. Istnieje możliwość tworzenia własnych klas adnotacji z atrybutów lub przy użyciu [narzędzie definicji schematu XML (Xsd.exe)](http://msdn.microsoft.com/library/a6e6e65c-347f-4494-9457-653bf29baac2) do generowania klasy oparte na istniejący dokument schematu XML definicji (XSD). Jeśli masz schematu XML, możesz uruchomić Xsd.exe Aby utworzyć zestaw klas, które są jednoznacznie określony typ schematu i adnotacji z atrybutów, które mają zgodny ze schematem. podczas serializacji.  
  
 Do transferu danych między obiektami i XML wymaga mapowania z konstrukcji języka programowania, do schematu XML i schematu XML do narzędzi programistycznych języka. <xref:System.Xml.Serialization.XmlSerializer> i pokrewne narzędzia, takie jak Xsd.exe Podaj mostka między te dwie technologie w czasie projektowania zarówno i środowiska wykonawczego. W czasie projektowania należy użyć Xsd.exe, aby wygenerować dokumentu schematu XML (XSD) z klas niestandardowych lub do tworzenia klas z danym schematu. W obu przypadkach klasy mają adnotacje z atrybutów niestandardowych nakazać programowi <xref:System.Xml.Serialization.XmlSerializer> sposób mapowania między systemem schematu XML i środowisko uruchomieniowe języka wspólnego. W czasie wykonywania wystąpienia klas może być Zserializowany do dokumentów XML, które należy wykonać dany schemat. Podobnie te dokumenty XML może zostać przeprowadzona deserializacja obiektów czasu wykonywania. Należy pamiętać, że schemat XML opcjonalne i nie są wymagane w czasie projektowania lub runtime.  
  
## <a name="controlling-generated-xml"></a>Kontrolowanie wygenerowanego XML  
 Aby kontrolować wygenerowany kod XML, można stosować atrybutów specjalne do klas i członków. Na przykład aby określić inną nazwę elementu XML, należy zastosować <xref:System.Xml.Serialization.XmlElementAttribute> pola publicznego lub właściwości i zestawu <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> właściwości. Pełną listę atrybutów podobne, zobacz [atrybuty że formant serializacji XML](http://msdn.microsoft.com/library/414b820f-a696-4206-b576-2711d85490c7). Można też wdrożyć <xref:System.Xml.Serialization.IXmlSerializable> interfejsu do sterowania dane wyjściowe XML.  
  
 Jeśli wygenerowany kod XML musi być zgodna z sekcji 5 dokumentu World Wide konsorcjum (www.w3.org), "Simple Object Access Protocol (SOAP) 1.1", należy tworzyć <xref:System.Xml.Serialization.XmlSerializer> z <xref:System.Xml.Serialization.XmlTypeMapping>. Do kontynuowania formantu XML zakodowanego protokołu SOAP, użyj atrybuty wymienione w [atrybuty że formant zakodowane SOAP serializacji](http://msdn.microsoft.com/library/93ee258c-9c0f-4a08-897c-c10db7a00f91).  
  
 Z <xref:System.Xml.Serialization.XmlSerializer> można korzystać w pracy z silnie typizowanej klasy i nadal swobodnie XML. Za pomocą pola lub właściwości typu <xref:System.Xml.XmlElement>, <xref:System.Xml.XmlAttribute> lub <xref:System.Xml.XmlNode> Twojego jednoznacznie klas może odczytywać części dokumentu XML bezpośrednio do obiektów XML.  
  
 Jeśli pracujesz z rozszerzonego schematów XML, można również użyć <xref:System.Xml.Serialization.XmlAnyElementAttribute> i <xref:System.Xml.Serialization.XmlAnyAttributeAttribute> atrybuty do serializacji i deserializacji elementów lub atrybutów, które nie znajdują się w oryginalnej schematu. Aby użyć obiektów, zastosuj <xref:System.Xml.Serialization.XmlAnyElementAttribute> do pola, które zwraca tablicę <xref:System.Xml.XmlElement> obiektów lub Zastosuj <xref:System.Xml.Serialization.XmlAnyAttributeAttribute> do pola, które zwraca tablicę <xref:System.Xml.XmlAttribute> obiektów.  
  
 Jeśli właściwość lub pole zwraca obiekt złożony (na przykład tablicy lub wystąpienia klasy), <xref:System.Xml.Serialization.XmlSerializer> konwertuje go do elementu zagnieżdżone w obrębie głównego dokumentu XML. Na przykład to pierwsza klasa w poniższym kodzie Zwraca wystąpienie klasy sekundy.  
  
```vb  
Public Class MyClass  
    Public MyObjectProperty As MyObject  
End Class  
  
Public Class MyObject  
    Public ObjectName As String  
End Class  
```  
  
```csharp  
public class MyClass  
{  
    public MyObject MyObjectProperty;  
}  
public class MyObject  
{  
    public string ObjectName;  
}  
```  
  
 Serializowana, dane wyjściowe XML wygląda następująco:  
  
```  
<MyClass>  
  <MyObjectProperty>  
  <ObjectName>My String</ObjectName>  
  </MyObjectProperty>  
</MyClass>  
```  
  
 Jeśli schemat zawiera element, który jest opcjonalny (minOccurs = "0"), lub jeśli schemat zawiera wartość domyślną, dostępne są dwie opcje. Jedną z opcji jest użycie <xref:System.ComponentModel.DefaultValueAttribute?displayProperty=nameWithType> można określić wartość domyślną, jak pokazano w poniższym kodzie.  
  
```vb  
Public Class PurchaseOrder  
    <System.ComponentModel.DefaultValueAttribute ("2002")> _  
    Public Year As String  
End Class  
```  
  
```csharp  
public class PurchaseOrder  
{  
    [System.ComponentModel.DefaultValueAttribute ("2002")]  
    public string Year;  
}  
```  
  
 Innym rozwiązaniem jest używać specjalnych wzorzec do tworzenia polem rozpoznał <xref:System.Xml.Serialization.XmlSerializer>oraz stosowanie <xref:System.Xml.Serialization.XmlIgnoreAttribute> do pola. Wzorzec jest tworzony w formie `propertyNameSpecified`. Na przykład, jeśli jest polem o nazwie "MyFirstName", należy także utworzyć pola o nazwie "MyFirstNameSpecified" który instruuje <xref:System.Xml.Serialization.XmlSerializer> czy generować element XML o nazwie "MyFirstName". Przedstawiono to w poniższym przykładzie.  
  
```vb  
Public Class OptionalOrder  
    ' This field's value should not be serialized   
    ' if it is uninitialized.  
    Public FirstOrder As String  
  
    ' Use the XmlIgnoreAttribute to ignore the   
    ' special field named "FirstOrderSpecified".  
    <System.Xml.Serialization.XmlIgnoreAttribute> _  
    Public FirstOrderSpecified As Boolean  
End Class  
```  
  
```csharp  
public class OptionalOrder  
{  
    // This field should not be serialized   
    // if it is uninitialized.  
    public string FirstOrder;  
  
    // Use the XmlIgnoreAttribute to ignore the   
    // special field named "FirstOrderSpecified".  
    [System.Xml.Serialization.XmlIgnoreAttribute]  
    public bool FirstOrderSpecified;  
}  
```  
  
## <a name="overriding-default-serialization"></a>Zastępowanie domyślnej serializacji  
 Możesz też przesłonić serializacji dowolny zbiór obiektów i ich pola i właściwości przez utworzenie odpowiednich atrybutów i dodanie go do wystąpienia <xref:System.Xml.Serialization.XmlAttributes> klasy. Zastępowanie serializacji w ten sposób ma dwa zastosowania: najpierw, można kontrolować i rozszerzyć serializacji znalezionych w bibliotece DLL, nawet jeśli nie masz dostępu do źródła; Po drugie można utworzyć jeden zestaw klas możliwych do serializacji, ale serializacji obiektów na wiele sposobów. Aby uzyskać więcej informacji, zobacz <xref:System.Xml.Serialization.XmlAttributeOverrides> klasy i [porady: pochodnej klasy formantów serializacji](http://msdn.microsoft.com/library/caa92596-9e15-4d91-acbe-56911ef47a84).  
  
 Szeregowania obiektu, należy wywołać <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> metody. Aby wykonywać deserializację obiektu, należy wywołać <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> metody.  
  
 Aby dodać przestrzenie nazw XML do dokumentu XML, zobacz <xref:System.Xml.Serialization.XmlSerializerNamespaces>.  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Daje szczególnego traktowania do klasy, które implementują <xref:System.Collections.IEnumerable> lub <xref:System.Collections.ICollection>. Klasa, która implementuje <xref:System.Collections.IEnumerable> musi implementować publiczny `Add` metodę, która przyjmuje jeden parametr. `Add` Parametru metody musi być tego samego typu, ponieważ jest zwracana z `Current` właściwości na wartość zwracana z `GetEnumerator`, lub jeden z typów podstawowych tego typu. Klasa, która implementuje <xref:System.Collections.ICollection> (takich jak <xref:System.Collections.CollectionBase>) oprócz <xref:System.Collections.IEnumerable> musi mieć publiczny `Item` indeksowane właściwości (indeksator w języku C#), który pobiera całkowitą i musi mieć publiczny `Count` właściwość typu integer. Parametr `Add` metoda musi być tego samego typu, jak jest zwracana z `Item` właściwości lub jednego z typów podstawowych tego typu. Dla klas które implementują <xref:System.Collections.ICollection>, są pobierane wartości, aby można było serializować z indeksowanej `Item` właściwości, a nie przez wywołanie metody `GetEnumerator`.  
  
 Musi mieć uprawnienia do zapisu w katalogu tymczasowym (zgodnie z definicją przez zmienną środowiskową TEMP) do deserializacji obiektu.  
  
## <a name="dynamically-generated-assemblies"></a>Dynamicznie generowanym zestawów  
 W celu zwiększenia wydajności w infrastrukturze serializacji XML dynamicznie generuje zestawów do serializacji i deserializacji określonych typów. Infrastruktura znajduje i ponownie używa tych zestawów. Dzieje się tak tylko w przypadku korzystania z następujących konstruktorów:  
  
 <xref:System.Xml.Serialization.XmlSerializer.%23ctor%28System.Type%29?displayProperty=nameWithType>  
  
 <xref:System.Xml.Serialization.XmlSerializer.%23ctor%28System.Type%2CSystem.String%29?displayProperty=nameWithType>  
  
 Korzystając z dowolnego z innych konstruktorów wiele wersji tego samego zestawu były generowane i nigdy nie zwolnione, której wynikiem jest przeciek pamięci i pogorszenie wydajności. Najlepszym rozwiązaniem jest użycia jednej z opisanych powyżej dwa konstruktory. W przeciwnym razie należy pamięci podręcznej zestawów w <xref:System.Collections.Hashtable>, jak pokazano w poniższym przykładzie.  
  
```csharp  
Hashtable serializers = new Hashtable();  
  
// Use the constructor that takes a type and XmlRootAttribute.  
XmlSerializer s = new XmlSerializer(typeof(MyClass), myRoot);  
  
// Implement a method named GenerateKey that creates unique keys   
// for each instance of the XmlSerializer. The code should take   
// into account all parameters passed to the XmlSerializer   
// constructor.  
object key = GenerateKey(typeof(MyClass), myRoot);  
  
// Check the local cache for a matching serializer.  
XmlSerializer ser = (XmlSerializer)serializers[key];  
if (ser == null)   
{  
    ser = new XmlSerializer(typeof(MyClass), myRoot);  
    // Cache the serializer.  
    serializers[key] = ser;  
}  
else  
{  
    // Use the serializer to serialize, or deserialize.  
}  
```  
  
```vb  
Dim serializers As New Hashtable()  
  
' Use the constructor that takes a type and XmlRootAttribute.  
Dim s As New XmlSerializer(GetType([MyClass]), myRoot)  
  
' Implement a method named GenerateKey that creates unique keys   
' for each instance of the XmlSerializer. The code should take   
' into account all parameters passed to the XmlSerializer   
' constructor.  
Dim key As Object = GenerateKey(GetType([MyClass]), myRoot)  
  
' Check the local cache for a matching serializer.  
Dim ser As XmlSerializer = CType(serializers(key), XmlSerializer)  
  
If ser Is Nothing Then  
    ser = New XmlSerializer(GetType([MyClass]), myRoot)  
    ' Cache the serializer.  
    serializers(key) = ser  
Else   
    ' Use the serializer to serialize, or deserialize.  
End If  
```  
  
## <a name="serialization-of-arraylist-and-generic-list"></a>Serializacja obiektu ArrayList i rodzajowy listy  
 <xref:System.Xml.Serialization.XmlSerializer> Nie można serializować lub deserializować następujące:  
  
-   Tablice <xref:System.Collections.ArrayList>  
  
-   Tablice <xref:System.Collections.Generic.List%601>  
  
## <a name="serialization-of-enumerations-of-unsigned-long"></a>Serializacja wyliczenia Unsigned Long  
 <xref:System.Xml.Serialization.XmlSerializer> Nie można utworzyć wystąpienia do serializacji wyliczenia, jeśli są spełnione następujące warunki: wyliczenie jest typu unsigned long (`ulong` w języku C#) i wyliczenia zawierają żadnego członka o wartości większej niż 9,223,372,036,854,775,807. Na przykład że nie można serializować.  
  
```  
public enum LargeNumbers: ulong  
{  
    a = 9223372036854775808  
}  
// At runtime, the following code will fail.  
xmlSerializer mySerializer=new XmlSerializer(typeof(LargeNumbers));  
```  
  
## <a name="objects-marked-with-the-obsolete-attribute-no-longer-serialized"></a>Obiekty oznaczone atrybutem przestarzałe już serializacji  
 W [!INCLUDE[netfx35_short](~/includes/netfx35-short-md.md)] <xref:System.Xml.Serialization.XmlSerializer> klasy serializuje już obiekty, które są oznaczone jako `[Obsolete]`.  
  
   
  
## Examples  
 Poniższy przykład zawiera dwie klasy głównym: `PurchaseOrder` i `Test`. `PurchaseOrder` Klasa zawiera informacje dotyczące jednego zakupu. `Test` Klasa zawiera metody, która Tworzenie zamówienia zakupu i który odczytywać zamówienia zakupu.  
  
 [!code-cpp[Classic XmlSerializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlText" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu przez to <see cref="T:System.Xml.Serialization.XmlSerializer" /> można serializować.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy, które można serializować obiektów określonego typu w dokumentach XML i deserializacji XML dokumentów do obiektów określonego typu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj aplikacji definiuje kilka klas, które <xref:System.Xml.Serialization.XmlSerializer> konwertuje w jednym dokumencie wystąpienie XML. Jednak <xref:System.Xml.Serialization.XmlSerializer> musi znać tylko jeden typ — typ klasy, która reprezentuje elementu głównego XML. <xref:System.Xml.Serialization.XmlSerializer> Automatycznie serializuje wszystkich wystąpień klas podrzędnych. Podobnie tylko typ elementu głównego XML jest wymagany przy deserializacji.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.Serialization.XmlSerializer> który serializuje obiekt o nazwie `Widget`. W przykładzie różne właściwości obiektu przed wywołaniem <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> metody.  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer6 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer6 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer6 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer6 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (System.Xml.Serialization.XmlTypeMapping xmlTypeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Serialization.XmlTypeMapping xmlTypeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(System::Xml::Serialization::XmlTypeMapping ^ xmlTypeMapping);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : System.Xml.Serialization.XmlTypeMapping -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer xmlTypeMapping" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlTypeMapping" Type="System.Xml.Serialization.XmlTypeMapping" />
      </Parameters>
      <Docs>
        <param name="xmlTypeMapping">
          <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> Mapujący jednego typu na inny.</param>
        <summary>Inicjuje wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> przy użyciu obiektu, który mapuje jednego typu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używany do tworzenia <xref:System.Xml.Serialization.XmlSerializer> podczas szeregowania obiektu do komunikatu protokołu SOAP. Aby kontrolować wiadomości protokołu SOAP wygenerowane, Użyj specjalnych atrybutów (zaczynający się od słowa "Soap") w <xref:System.Xml.Serialization> przestrzeni nazw.  
  
   
  
## Examples  
 Poniższy przykład serializuje klasę o nazwie `Group`. Serializacji `GroupName`, `IgnoreThis` pól i członków `GroupType` wyliczenie zostaną zastąpione. W `CreateOverrideSerializer` metody <xref:System.Xml.Serialization.SoapAttributeOverrides> obiekt został utworzony i dla każdej zastąpionym elementem członkowskim lub wyliczenia, <xref:System.Xml.Serialization.SoapAttributes> obiekt jest tworzony z odpowiedniej właściwości ustaw i dodane do <xref:System.Xml.Serialization.SoapAttributeOverrides> obiektu. <xref:System.Xml.Serialization.XmlMapping> Obiekt jest tworzony przy użyciu <xref:System.Xml.Serialization.SoapAttributeOverrides> obiektu, a <xref:System.Xml.Serialization.XmlMapping> obiekt jest używany do tworzenia <xref:System.Xml.Serialization.XmlSerializer> który zastąpienia domyślnej serializacji.  
  
 [!code-cpp[SoapAttributesOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapAttributesOverrides/CPP/soapover.cpp#1)]
 [!code-csharp[SoapAttributesOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapAttributesOverrides/CS/soapover.cs#1)]
 [!code-vb[SoapAttributesOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapAttributesOverrides/VB/SoapOver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, string defaultNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, string defaultNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::String ^ defaultNamespace);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * string -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, defaultNamespace)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="defaultNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu przez to <see cref="T:System.Xml.Serialization.XmlSerializer" /> można serializować.</param>
        <param name="defaultNamespace">Domyślny obszar nazw dla wszystkich elementów XML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy, które można serializować obiektów określonego typu w dokumentach XML i deserializacji XML dokumentów do obiektów określonego typu. Określa domyślną przestrzeń nazw dla wszystkich elementów XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.Serialization.XmlSerializer> który serializuje obiekt o nazwie `Widget`. W przykładzie różne właściwości obiektu przed wywołaniem <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> metody.  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, Type[] extraTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Type[] extraTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, cli::array &lt;Type ^&gt; ^ extraTypes);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * Type[] -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, extraTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu przez to <see cref="T:System.Xml.Serialization.XmlSerializer" /> można serializować.</param>
        <param name="extraTypes">A <see cref="T:System.Type" /> tablicy innych typów obiektów do serializacji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy, które można serializować obiektów określonego typu w dokumentach XML i deserializacji XML dokumentów do obiektu określonego typu. Jeśli właściwość lub pole zwraca tablicę <paramref name="extraTypes" /> parametr określa obiekty, które można wstawiać do tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie jeśli publiczną właściwość lub pole zwraca obiekt lub tablica obiektów, typy obiektów automatycznie są serializowane. Jednak jeśli klasa zawiera pole lub właściwość zwracającą tablicy typu <xref:System.Object>, dowolnego obiektu można wstawiać do tablicy. W takim przypadku <xref:System.Xml.Serialization.XmlSerializer> musi być instrukcją oczekiwać wszystkie typy możliwe obiektów, które są wstawiane do <xref:System.Object> tablicy. Aby to zrobić, użyj `extraTypes` parametr, aby określić typy dodatkowy obiekt do serializacji lub deserializacji.  
  
 Można również użyć `extraTypes` parametr, aby określić typy pochodzące od klasy podstawowej. Na przykład, załóżmy, że klasę podstawową o nazwie `Phone` istnieje i klasę o nazwie `InternationalPhone` pochodzi od niego. Użyj `extraTypes` parametru w celu określenia typu pochodnego.  
  
   
  
## Examples  
 Poniższy przykład serializuje wystąpienia klasy, która zawiera pole publiczne, która zwraca tablicę obiektów. `extraTypes` Parametr <xref:System.Xml.Serialization.XmlSerializer> Konstruktor Określa typy obiektów, które mogą być serializowane w tablicy.  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer3 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer3 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer3 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlAttributeOverrides ^ overrides);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlAttributeOverrides -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, overrides)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu do zserializowania.</param>
        <param name="overrides">
          <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy, które można serializować obiektów określonego typu w dokumentach XML i deserializacji XML dokumentów do obiektów określonego typu. Każdy obiekt ma zostać zserializowana sam zawierają wystąpień klasy, które tego przeciążenia można zastąpić z innych klas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `overrides` Parametr służy do kontrolowania sposobu pola i właściwości są zakodowane w formacie XML. Ustawienia te zastępują wszelkie atrybuty, które już istnieją na obiekty. Może to być przydatne, gdy nie można zmodyfikować kod źródłowy lub wielu kodowania są wymagane dla tej samej klasy.  
  
   
  
## Examples  
 Poniższy przykład serializuje wystąpienia klasy, która jest zdefiniowana w bibliotece DLL i aby to zrobić, zastępuje publiczne elementy członkowskie w bibliotece DLL.  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer4 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer4 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer4 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlRootAttribute root);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlRootAttribute root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlRootAttribute ^ root);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlRootAttribute -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, root)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu przez to <see cref="T:System.Xml.Serialization.XmlSerializer" /> można serializować.</param>
        <param name="root">
          <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> Reprezentujący elementu głównego XML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy, który można serializować obiektów określonego typu w dokumentach XML i deserializacji dokumentu XML do obiektu określonego typu. Określa klasę, aby używać jako elementu głównego XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Element główny dokumentu XML umieszcza wszystkie inne elementy. Domyślnie obiekt określony przez `type` parametru jest szeregowana jako element główny. Właściwości, takie jak nazwa elementu XML elementu głównego, są pobierane z `type` obiektu. Jednak `root` parametru pozwala zastąpić domyślny obiekt informacji przez określenie <xref:System.Xml.Serialization.XmlRootAttribute>; obiekt pozwala ustawić inny obszar nazw, nazwę elementu i tak dalej.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.Serialization.XmlSerializer> używającą <xref:System.Xml.Serialization.XmlRootAttribute> zawiera różne właściwości elementu głównego XML, takie jak jego nazwa przestrzeni nazw i elementu.  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlAttributeOverrides ^ overrides, cli::array &lt;Type ^&gt; ^ extraTypes, System::Xml::Serialization::XmlRootAttribute ^ root, System::String ^ defaultNamespace);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlAttributeOverrides * Type[] * System.Xml.Serialization.XmlRootAttribute * string -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, overrides, extraTypes, root, defaultNamespace)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu przez to <see cref="T:System.Xml.Serialization.XmlSerializer" /> można serializować.</param>
        <param name="overrides">
          <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> Rozszerza albo zastępuje zachowanie klasa określona w <c>typu</c> parametru.</param>
        <param name="extraTypes">A <see cref="T:System.Type" /> tablicy innych typów obiektów do serializacji.</param>
        <param name="root">
          <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> Definiuje właściwości elementu głównego XML.</param>
        <param name="defaultNamespace">Domyślny obszar nazw wszystkich elementów XML w dokumencie XML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy, która może serializować obiektów typu <see cref="T:System.Object" /> w formacie XML dokumentu wystąpień i deserializacji wystąpienia dokumentu XML na obiekty typu <see cref="T:System.Object" />. Każdy obiekt ma zostać zserializowana sam zawierają wystąpień klasy, które zastępuje to przeciążenie z innych klas. To przeciążenie określa również domyślny obszar nazw dla wszystkich elementów XML oraz klasy do użycia jako główny element XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `overrides` Parametru pozwala na tworzenie [XmlSerializer — Konstruktor (, XmlAttributeOverrides, typu\<xref:System.Xml.Serialization.XmlSerializer > serializujący klasę, która rozszerza lub przesłania zachowania Klasa podstawowa. Na przykład mając biblioteki DLL, istnieje możliwość utworzyć klasę, która dziedziczy lub rozszerza klasę zawartych w bibliotece DLL. Aby serializować taka klasa, należy użyć wystąpienia [XmlSerializer — Konstruktor (, XmlAttributeOverrides, typu\<xref:System.Xml.Serialization.XmlAttributeOverrides > klasy podczas konstruowania [XmlSerializer — Konstruktor ( Typ, XmlAttributeOverrides, typ\<xref:System.Xml.Serialization.XmlSerializer >. Aby uzyskać więcej informacji, zobacz [XmlSerializer — Konstruktor (, XmlAttributeOverrides, typu\<xref:System.Xml.Serialization.XmlAttributeOverrides >.  
  
 Domyślnie jeśli publiczną właściwość lub pole zwraca obiekt lub tablica obiektów, typy obiektów automatycznie są serializowane. Jednak jeśli klasa zawiera pole lub właściwość zwracającą tablicy typu [XmlSerializer — Konstruktor (, XmlAttributeOverrides, typu\<xref:System.Object >, dowolnego obiektu można wstawiać do tablicy. W takim przypadku [XmlSerializer — Konstruktor (, XmlAttributeOverrides, typu\<xref:System.Xml.Serialization.XmlSerializer > musi być instrukcją oczekiwać wszystkie typy możliwe obiektów, które są wstawiane do [XmlSerializer Konstruktor (, XmlAttributeOverrides, typu\<xref:System.Object > tablicy. Aby to zrobić, użyj `extraTypes` parametr, aby określić typy dodatkowy obiekt do serializacji lub deserializacji.  
  
 Element główny dokumentu XML umieszcza wszystkie inne elementy. Domyślnie obiekt określony przez `type` parametru jest szeregowana jako element główny. Właściwości, takie jak nazwa elementu XML elementu głównego są pobierane z `type` obiektu. Jednak `root` parametru pozwala zastąpić domyślny obiekt informacji przez określenie [XmlSerializer — Konstruktor (, XmlAttributeOverrides, typu\<xref:System.Xml.Serialization.XmlRootAttribute >; obiekt umożliwia ustawienie różnych przestrzeni nazw, nazwę elementu i tak dalej.  
  
 Użyj `defaultName` parametru w celu określenia domyślnej przestrzeni nazw wszystkich elementów XML wygenerowanych przez [XmlSerializer — Konstruktor (, XmlAttributeOverrides, typu\<xref:System.Xml.Serialization.XmlSerializer >.  
  
   
  
## Examples  
 Poniższy przykład serializuje wystąpienia klasy, która jest zdefiniowana w bibliotece DLL i aby to zrobić, zastępuje publiczne elementy członkowskie w klasie. W przykładzie określono również tablicę dodatkowe typy, domyślny obszar nazw dla wszystkich elementów XML oraz klasy do użycia, która zawiera informacje elementu głównego XML. W przykładzie założono, że kod na początku została skompilowana do biblioteki DLL o nazwie `HighSchool`.  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
        <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlAttributeOverrides ^ overrides, cli::array &lt;Type ^&gt; ^ extraTypes, System::Xml::Serialization::XmlRootAttribute ^ root, System::String ^ defaultNamespace, System::String ^ location);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlAttributeOverrides * Type[] * System.Xml.Serialization.XmlRootAttribute * string * string -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, overrides, extraTypes, root, defaultNamespace, location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
        <Parameter Name="location" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu przez to <see cref="T:System.Xml.Serialization.XmlSerializer" /> można serializować.</param>
        <param name="overrides">
          <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> Rozszerza albo zastępuje zachowanie klasa określona w <c>typu</c> parametru.</param>
        <param name="extraTypes">A <see cref="T:System.Type" /> tablicy innych typów obiektów do serializacji.</param>
        <param name="root">
          <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> Definiuje właściwości elementu głównego XML.</param>
        <param name="defaultNamespace">Domyślny obszar nazw wszystkich elementów XML w dokumencie XML.</param>
        <param name="location">Lokalizacja typów.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy, która może serializować obiektów typu <see cref="T:System.Object" /> w formacie XML dokumentu wystąpień i deserializacji wystąpienia dokumentu XML na obiekty typu <see cref="T:System.Object" />. Każdy obiekt ma zostać zserializowana sam zawierają wystąpień klasy, które zastępuje to przeciążenie z innych klas. To przeciążenie określa również domyślny obszar nazw dla wszystkich elementów XML oraz klasy do użycia jako główny element XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlAttributeOverrides ^ overrides, cli::array &lt;Type ^&gt; ^ extraTypes, System::Xml::Serialization::XmlRootAttribute ^ root, System::String ^ defaultNamespace, System::String ^ location, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlAttributeOverrides * Type[] * System.Xml.Serialization.XmlRootAttribute * string * string * System.Security.Policy.Evidence -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, overrides, extraTypes, root, defaultNamespace, location, evidence)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use a XmlSerializer constructor overload which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
        <Parameter Name="location" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu przez to <see cref="T:System.Xml.Serialization.XmlSerializer" /> można serializować.</param>
        <param name="overrides">
          <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> Rozszerza albo zastępuje zachowanie klasa określona w <c>typu</c> parametru.</param>
        <param name="extraTypes">A <see cref="T:System.Type" /> tablicy innych typów obiektów do serializacji.</param>
        <param name="root">
          <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> Definiuje właściwości elementu głównego XML.</param>
        <param name="defaultNamespace">Domyślny obszar nazw wszystkich elementów XML w dokumencie XML.</param>
        <param name="location">Lokalizacja typów.</param>
        <param name="evidence">Wystąpienie <see cref="T:System.Security.Policy.Evidence" /> klasę, która zawiera poświadczenia wymagane do dostęp do tych typów.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy, która może serializować obiektów określonego typu w wystąpieniach dokumentu XML i deserializacji wystąpienia dokumentu XML na obiekty określonego typu. To przeciążenie umożliwia podanie innych typów, które mogą wystąpić podczas operacji serializacji lub deserializacji, jak również domyślny obszar nazw dla wszystkich elementów XML, klasa ma być używana jako główny element XML, jej lokalizacja i poświadczeń wymaganych do dostępu .</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Umożliwia dokładniejszą kontrolę dostępu do katalogu tymczasowego i zapobiega iniekcji kodu i wykorzystania. Aby użyć tej metody, określ lokalizację i zapewniają dostęp tylko do określonych użytkowników. Administratorzy mogą skonfigurować zasady z listy dowody, które odpowiada dowód uprawnień.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDeserialize">
      <MemberSignature Language="C#" Value="public virtual bool CanDeserialize (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanDeserialize(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanDeserialize(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="abstract member CanDeserialize : System.Xml.XmlReader -&gt; bool&#xA;override this.CanDeserialize : System.Xml.XmlReader -&gt; bool" Usage="xmlSerializer.CanDeserialize xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <see cref="T:System.Xml.XmlReader" /> Wskazującego dokumentu do deserializacji.</param>
        <summary>Pobiera wartość wskazującą, czy to <see cref="T:System.Xml.Serialization.XmlSerializer" /> można rozszeregować określonego dokumentu XML.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Xml.Serialization.XmlSerializer" /> może wykonywać deserializację obiektu który <see cref="T:System.Xml.XmlReader" /> punktów do; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Następujące przykładowe wywołania <xref:System.Xml.Serialization.XmlSerializer.CanDeserialize%2A> metodę sprawdzania, czy można wykonać deserializacji dokumentu XML.  
  
 [!code-cpp[Classic XmlSerializer.CanDeserialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.CanDeserialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.CanDeserialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.CanDeserialize Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.CanDeserialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.CanDeserialize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="CreateReader">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Serialization.XmlSerializationReader CreateReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Serialization.XmlSerializationReader CreateReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.CreateReader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateReader () As XmlSerializationReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Serialization::XmlSerializationReader ^ CreateReader();" />
      <MemberSignature Language="F#" Value="abstract member CreateReader : unit -&gt; System.Xml.Serialization.XmlSerializationReader&#xA;override this.CreateReader : unit -&gt; System.Xml.Serialization.XmlSerializationReader" Usage="xmlSerializer.CreateReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializationReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca obiekt używany do odczytu dokumentu XML, aby można było serializować.</summary>
        <returns>
          <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> Używany do odczytu dokumentu XML.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">Wszelkie próby dostępu do metody, gdy metoda nie jest przesłonięcia w klasie elementów podrzędnych.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWriter">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Serialization.XmlSerializationWriter CreateWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Serialization.XmlSerializationWriter CreateWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.CreateWriter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateWriter () As XmlSerializationWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Serialization::XmlSerializationWriter ^ CreateWriter();" />
      <MemberSignature Language="F#" Value="abstract member CreateWriter : unit -&gt; System.Xml.Serialization.XmlSerializationWriter&#xA;override this.CreateWriter : unit -&gt; System.Xml.Serialization.XmlSerializationWriter" Usage="xmlSerializer.CreateWriter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializationWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po przesłonięciu w klasie pochodnej zwraca moduł zapisujący używany do serializacji obiektu.</summary>
        <returns>Wystąpienie, które implementuje <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> klasy.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">Wszelkie próby dostępu do metody, gdy metoda nie jest przesłonięcia w klasie elementów podrzędnych.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Deserialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Deserializuje dokumentu XML.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.IO.Stream -&gt; obj" Usage="xmlSerializer.Deserialize stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> Zawiera dokument XML do deserializacji.</param>
        <summary>Deserializuje dokumentu XML zawarty w określonym <see cref="T:System.IO.Stream" />.</summary>
        <returns>
          <see cref="T:System.Object" /> Deserializowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deserializacja polega na odczytywanie dokumentu XML i konstruowania obiektu, który jest silnie typizowane do schematu XML (XSD) dokumentu.  
  
 Przed deserializacji, <xref:System.Xml.Serialization.XmlSerializer> musi być skonstruowany przy użyciu typu obiektu, który jest poddawany deserializacji.  
  
 Użyj `stream` parametr, aby określić, która pochodzi z obiektu <xref:System.IO.Stream> klasy, która jest przeznaczona do zapisu do strumieni. Klasy, które pochodzą z <xref:System.IO.Stream> klasy obejmują:  
  
-   <xref:System.IO.BufferedStream>  
  
-   <xref:System.IO.FileStream>  
  
-   <xref:System.IO.MemoryStream>  
  
-   <xref:System.Net.Sockets.NetworkStream>  
  
-   <xref:System.Security.Cryptography.CryptoStream>  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można deserializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład deserializuje obiekt przy użyciu <xref:System.IO.Stream> obiektu.  
  
 [!code-cpp[Classic XmlSerializer.Deserialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Deserialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Deserialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Deserialize Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.IO.TextReader -&gt; obj" Usage="xmlSerializer.Deserialize textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <see cref="T:System.IO.TextReader" /> Zawiera dokument XML do deserializacji.</param>
        <summary>Deserializuje dokumentu XML zawarty w określonym <see cref="T:System.IO.TextReader" />.</summary>
        <returns>
          <see cref="T:System.Object" /> Deserializowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deserializacja polega na odczytywanie wystąpienia dokumentu XML i konstruowania obiektu, który jest silnie typizowane do schematu XML (XSD) dokumentu.  
  
 Przed deserializacji, <xref:System.Xml.Serialization.XmlSerializer> musi być skonstruowany przy użyciu typu obiektu, który jest poddawany deserializacji.  
  
 Klasy, które dziedziczą z <xref:System.IO.TextReader> obejmują <xref:System.IO.StringReader> i <xref:System.IO.StreamReader>. Jeśli używasz <xref:System.IO.StreamReader> do deserializacji obiektu, należy tworzyć <xref:System.IO.StreamReader> odpowiedni <xref:System.Text.Encoding>. Kodowanie określone w dokumencie XML jest ignorowana.  
  
> [!NOTE]
>  Aby korzystać z kodowaniem określonym przez dokument XML, użyj <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> przeciążenia, które przyjmuje <xref:System.Xml.XmlReader> zamiast tego. <xref:System.Xml.XmlReader> Automatycznie wykrywa i korzysta z kodowaniem określonym przez dokumentu XML.  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można deserializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład deserializuje obiekt przy użyciu <xref:System.IO.TextReader> obiektu.  
  
 [!code-cpp[Classic XmlSerializer.Deserialize1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Deserialize1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Deserialize1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas deserializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="protected virtual object Deserialize (System.Xml.Serialization.XmlSerializationReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object Deserialize(class System.Xml.Serialization.XmlSerializationReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Deserialize (reader As XmlSerializationReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ Deserialize(System::Xml::Serialization::XmlSerializationReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Xml.Serialization.XmlSerializationReader -&gt; obj&#xA;override this.Deserialize : System.Xml.Serialization.XmlSerializationReader -&gt; obj" Usage="xmlSerializer.Deserialize reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.Serialization.XmlSerializationReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> Zawiera dokument XML do deserializacji.</param>
        <summary>Deserializuje dokumentu XML zawarty w określonym <see cref="T:System.Xml.Serialization.XmlSerializationReader" />.</summary>
        <returns>Obiekt po deserializacji.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">Wszelkie próby dostępu do metody, gdy metoda nie jest przesłonięcia w klasie elementów podrzędnych.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.Xml.XmlReader -&gt; obj" Usage="xmlSerializer.Deserialize xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <see cref="T:System.Xml.XmlReader" /> Zawiera dokument XML do deserializacji.</param>
        <summary>Deserializuje dokumentu XML zawarty w określonym <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>
          <see cref="T:System.Object" /> Deserializowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deserializacja polega na odczytywanie wystąpienia dokumentu XML i konstruowania obiektu, który jest silnie typizowane do schematu XML (XSD) dokumentu.  
  
 Przed deserializacji, <xref:System.Xml.Serialization.XmlSerializer> musi być skonstruowany przy użyciu typu obiektu, który jest poddawany deserializacji.  
  
 <xref:System.Xml.XmlReader> Automatycznie wykrywa i korzysta z kodowaniem określonym przez dokumentu XML.  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można deserializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład deserializuje obiekt przy użyciu <xref:System.Xml.XmlReader>.  
  
 [!code-cpp[Classic XmlSerializer.Deserialize2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Deserialize2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Deserialize2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize2 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Deserialize2 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize2 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas deserializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.Xml.XmlReader xmlReader, string encodingStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.Xml.XmlReader xmlReader, string encodingStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::Xml::XmlReader ^ xmlReader, System::String ^ encodingStyle);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.Xml.XmlReader * string -&gt; obj" Usage="xmlSerializer.Deserialize (xmlReader, encodingStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
        <Parameter Name="encodingStyle" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <see cref="T:System.Xml.XmlReader" /> Zawiera dokument XML do deserializacji.</param>
        <param name="encodingStyle">Styl kodowania serializacji XML.</param>
        <summary>Deserializuje dokumentu XML zawarty w określonym <see cref="T:System.Xml.XmlReader" /> i styl kodowania.</summary>
        <returns>Obiekt po deserializacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deserializacja polega na odczytywanie wystąpienia dokumentu XML i konstruowania obiektu, który jest silnie typizowane do schematu XML (XSD) dokumentu.  
  
 Przed deserializacji, <xref:System.Xml.Serialization.XmlSerializer> musi być skonstruowany przy użyciu typu obiektu, który jest poddawany deserializacji.  
  
 Ustaw `encodingStyle` parametr "http://schemas.xmlsoap.org/soap/encoding/ " dla kodowania SOAP w wersji 1.1; w przeciwnym wypadku ustaw ją na "http://www.w3.org/2001/12/soap-encoding" dla kodowania w wersji 1.2 protokołu SOAP.  
  
 **Uwaga** <xref:System.Xml.Serialization.XmlSerializer> nie można deserializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas deserializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.Xml.XmlReader xmlReader, System.Xml.Serialization.XmlDeserializationEvents events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.Xml.XmlReader xmlReader, valuetype System.Xml.Serialization.XmlDeserializationEvents events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::Xml::XmlReader ^ xmlReader, System::Xml::Serialization::XmlDeserializationEvents events);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.Xml.XmlReader * System.Xml.Serialization.XmlDeserializationEvents -&gt; obj" Usage="xmlSerializer.Deserialize (xmlReader, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
        <Parameter Name="events" Type="System.Xml.Serialization.XmlDeserializationEvents" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <see cref="T:System.Xml.XmlReader" /> Zawiera dokument do deserializacji.</param>
        <param name="events">Wystąpienie <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> klasy.</param>
        <summary>Deserializuje dokument XML zawiera określony <see cref="T:System.Xml.XmlReader" /> i zezwala na zastępowanie zdarzeń występujących podczas deserializacji.</summary>
        <returns>
          <see cref="T:System.Object" /> Deserializowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt deserializowany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.Xml.XmlReader xmlReader, string encodingStyle, System.Xml.Serialization.XmlDeserializationEvents events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.Xml.XmlReader xmlReader, string encodingStyle, valuetype System.Xml.Serialization.XmlDeserializationEvents events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::Xml::XmlReader ^ xmlReader, System::String ^ encodingStyle, System::Xml::Serialization::XmlDeserializationEvents events);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.Xml.XmlReader * string * System.Xml.Serialization.XmlDeserializationEvents -&gt; obj" Usage="xmlSerializer.Deserialize (xmlReader, encodingStyle, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
        <Parameter Name="encodingStyle" Type="System.String" />
        <Parameter Name="events" Type="System.Xml.Serialization.XmlDeserializationEvents" />
      </Parameters>
      <Docs>
        <param name="xmlReader">Wystąpienie <see cref="T:System.Xml.XmlReader" /> klasa używana do odczytu dokumentu.</param>
        <param name="encodingStyle">Kodowanie używane.</param>
        <param name="events">Wystąpienie <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> klasy.</param>
        <summary>Deserializuje obiekt przy użyciu danych zawartych w określonym <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Obiekt deserializowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wymagany przy deserializacji nieznany nagłówki tylko w scenariuszach usługi sieci Web. Ta metoda umożliwia uniknięcie zdarzenia synchronizacji w metody usługi sieci Web.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromMappings">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy z określonego mapowania.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromMappings">
      <MemberSignature Language="C#" Value="public static System.Xml.Serialization.XmlSerializer[] FromMappings (System.Xml.Serialization.XmlMapping[] mappings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Serialization.XmlSerializer[] FromMappings(class System.Xml.Serialization.XmlMapping[] mappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMappings (mappings As XmlMapping()) As XmlSerializer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Xml::Serialization::XmlSerializer ^&gt; ^ FromMappings(cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings);" />
      <MemberSignature Language="F#" Value="static member FromMappings : System.Xml.Serialization.XmlMapping[] -&gt; System.Xml.Serialization.XmlSerializer[]" Usage="System.Xml.Serialization.XmlSerializer.FromMappings mappings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
      </Parameters>
      <Docs>
        <param name="mappings">Tablica <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> mapujący jednego typu na inny.</param>
        <summary>Zwraca tablicę <see cref="T:System.Xml.Serialization.XmlSerializer" /> obiekty utworzone na podstawie tablicy <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> obiektów.</summary>
        <returns>Tablica <see cref="T:System.Xml.Serialization.XmlSerializer" /> obiektów.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMappings">
      <MemberSignature Language="C#" Value="public static System.Xml.Serialization.XmlSerializer[] FromMappings (System.Xml.Serialization.XmlMapping[] mappings, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Serialization.XmlSerializer[] FromMappings(class System.Xml.Serialization.XmlMapping[] mappings, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Xml::Serialization::XmlSerializer ^&gt; ^ FromMappings(cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="static member FromMappings : System.Xml.Serialization.XmlMapping[] * System.Security.Policy.Evidence -&gt; System.Xml.Serialization.XmlSerializer[]" Usage="System.Xml.Serialization.XmlSerializer.FromMappings (mappings, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of FromMappings which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="mappings">Tablica <see cref="T:System.Xml.Serialization.XmlMapping" /> używany do mapowania jeden typ obiektów.</param>
        <param name="evidence">Wystąpienie <see cref="T:System.Security.Policy.Evidence" /> klasę, która zawiera hosta i zestawu danych, przedstawione wspólny system zasad środowiska uruchomieniowego języka.</param>
        <summary>Zwraca wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> utworzone na podstawie mapowania jednego typu XML do innej klasy.</summary>
        <returns>Wystąpienie <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMappings">
      <MemberSignature Language="C#" Value="public static System.Xml.Serialization.XmlSerializer[] FromMappings (System.Xml.Serialization.XmlMapping[] mappings, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Serialization.XmlSerializer[] FromMappings(class System.Xml.Serialization.XmlMapping[] mappings, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Xml::Serialization::XmlSerializer ^&gt; ^ FromMappings(cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member FromMappings : System.Xml.Serialization.XmlMapping[] * Type -&gt; System.Xml.Serialization.XmlSerializer[]" Usage="System.Xml.Serialization.XmlSerializer.FromMappings (mappings, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="mappings">Tablica <see cref="T:System.Xml.Serialization.XmlMapping" /> obiektów.</param>
        <param name="type">
          <see cref="T:System.Type" /> Zdeserializowany obiektu.</param>
        <summary>Zwraca wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy z określonego mapowania.</summary>
        <returns>Wystąpienie <see cref="T:System.Xml.Serialization.XmlSerializer" /> klasy.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTypes">
      <MemberSignature Language="C#" Value="public static System.Xml.Serialization.XmlSerializer[] FromTypes (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Serialization.XmlSerializer[] FromTypes(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromTypes (types As Type()) As XmlSerializer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Xml::Serialization::XmlSerializer ^&gt; ^ FromTypes(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="static member FromTypes : Type[] -&gt; System.Xml.Serialization.XmlSerializer[]" Usage="System.Xml.Serialization.XmlSerializer.FromTypes types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">Tablica <see cref="T:System.Type" /> obiektów.</param>
        <summary>Zwraca tablicę <see cref="T:System.Xml.Serialization.XmlSerializer" /> utworzone na podstawie tablicę typów obiektów.</summary>
        <returns>Tablica <see cref="T:System.Xml.Serialization.XmlSerializer" /> obiektów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A> Metoda pozwala na efektywne tworzenie tablicę <xref:System.Xml.Serialization.XmlSerializer> obiekty do przetwarzania tablicę <xref:System.Type> obiektów.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A> metoda zwraca tablicę <xref:System.Xml.Serialization.XmlSerializer> obiektów. Kod zawiera trzy definicje klas, które są używane do utworzenia tablicy <xref:System.Type> obiektów.  
  
 [!code-cpp[Classic XmlSerializer.FromTypes Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.FromTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.FromTypes Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.FromTypes Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.FromTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.FromTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GenerateSerializer">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca zestaw, który zawiera serializatorów typu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Narzędzie generowania serializatora XML (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md) tworzy zestawu serializacji XML dla typów w określonym zestawie poprawić wydajność środowiska wykonawczego <xref:System.Xml.Serialization.XmlSerializer> po serializuje i deserializuje obiektów określonych typów. Użyj <xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A> do zwracania nazwy takiego zestawu.  
  
 Jeśli jest rozpowszechniana zestawu jako części aplikacji klienckiej, która wywołuje usługę sieci Web, możesz zastosować <xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute> na typ klienta, aby określić lokalizację i nazwę zestawu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GenerateSerializer">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GenerateSerializer (Type[] types, System.Xml.Serialization.XmlMapping[] mappings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GenerateSerializer(class System.Type[] types, class System.Xml.Serialization.XmlMapping[] mappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenerateSerializer (types As Type(), mappings As XmlMapping()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GenerateSerializer(cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings);" />
      <MemberSignature Language="F#" Value="static member GenerateSerializer : Type[] * System.Xml.Serialization.XmlMapping[] -&gt; System.Reflection.Assembly" Usage="System.Xml.Serialization.XmlSerializer.GenerateSerializer (types, mappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
      </Parameters>
      <Docs>
        <param name="types">Kolekcji typów.</param>
        <param name="mappings">Kolekcja <see cref="T:System.Xml.Serialization.XmlMapping" /> obiektów używanych do przekonwertowania typu na inny.</param>
        <summary>Zwraca zestaw, który zawiera serializatorów utworzone przez użytkownika używany do serializacji lub deserializacji określonego typu lub typów przy użyciu określonego mapowania.</summary>
        <returns>
          <see cref="T:System.Reflection.Assembly" /> Obiekt, który zawiera serializatorów podane typy i mapowania.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSerializer">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GenerateSerializer (Type[] types, System.Xml.Serialization.XmlMapping[] mappings, System.CodeDom.Compiler.CompilerParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GenerateSerializer(class System.Type[] types, class System.Xml.Serialization.XmlMapping[] mappings, class System.CodeDom.Compiler.CompilerParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenerateSerializer (types As Type(), mappings As XmlMapping(), parameters As CompilerParameters) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GenerateSerializer(cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings, System::CodeDom::Compiler::CompilerParameters ^ parameters);" />
      <MemberSignature Language="F#" Value="static member GenerateSerializer : Type[] * System.Xml.Serialization.XmlMapping[] * System.CodeDom.Compiler.CompilerParameters -&gt; System.Reflection.Assembly" Usage="System.Xml.Serialization.XmlSerializer.GenerateSerializer (types, mappings, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
        <Parameter Name="parameters" Type="System.CodeDom.Compiler.CompilerParameters" />
      </Parameters>
      <Docs>
        <param name="types">Tablica typu <see cref="T:System.Type" /> zawierający obiekty używane do serializowania i deserializowania danych.</param>
        <param name="mappings">Tablica typu <see cref="T:System.Xml.Serialization.XmlMapping" /> mapuje dane XML z danymi typu.</param>
        <param name="parameters">Wystąpienie <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> klasa, która reprezentuje parametry używane do wywołania kompilatora.</param>
        <summary>Zwraca zestaw, który zawiera serializatorów utworzone przez użytkownika używany do serializacji lub deserializacji określonego typu lub typów przy użyciu określonego mapowania i ustawienia kompilatora i opcje.</summary>
        <returns>
          <see cref="T:System.Reflection.Assembly" /> Zawierający specjalnych wersji <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetXmlSerializerAssemblyName">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca nazwę zestawu, który zawiera jedną lub więcej wersji <see cref="T:System.Xml.Serialization.XmlSerializer" /> szczególnie utworzony do serializacji lub deserializacji określonych typów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Narzędzie generowania serializatora XML (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md) tworzy zestawu serializacji XML dla typów w określonym zestawie poprawić wydajność środowiska wykonawczego <xref:System.Xml.Serialization.XmlSerializer> po serializuje i deserializuje obiektów określonych typów. Użyj <xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A> do zwracania nazwy takiego zestawu.  
  
 Jeśli jest rozpowszechniana zestawu jako części aplikacji klienckiej, która wywołuje usługę sieci Web, możesz zastosować <xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute> na typ klienta, aby określić lokalizację i nazwę zestawu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetXmlSerializerAssemblyName">
      <MemberSignature Language="C#" Value="public static string GetXmlSerializerAssemblyName (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetXmlSerializerAssemblyName(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetXmlSerializerAssemblyName(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetXmlSerializerAssemblyName : Type -&gt; string" Usage="System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> Są deserializacji.</param>
        <summary>Zwraca nazwę zestawu, który zawiera jedną lub więcej wersji <see cref="T:System.Xml.Serialization.XmlSerializer" /> szczególnie utworzony do serializacji lub deserializacji określonego typu.</summary>
        <returns>Nazwa zestawu zawierającego <see cref="T:System.Xml.Serialization.XmlSerializer" /> dla typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Narzędzie generowania serializatora XML (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md) tworzy zestawu serializacji XML dla typów w określonym zestawie poprawić wydajność środowiska wykonawczego <xref:System.Xml.Serialization.XmlSerializer> po serializuje i deserializuje obiektów określonych typów. Użyj <xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A> do zwracania nazwy takiego zestawu.  
  
 Jeśli jest rozpowszechniana zestawu jako części aplikacji klienckiej, która wywołuje usługę sieci Web, możesz zastosować <xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute> na typ klienta, aby określić lokalizację i nazwę zestawu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSerializerAssemblyName">
      <MemberSignature Language="C#" Value="public static string GetXmlSerializerAssemblyName (Type type, string defaultNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetXmlSerializerAssemblyName(class System.Type type, string defaultNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetXmlSerializerAssemblyName(Type ^ type, System::String ^ defaultNamespace);" />
      <MemberSignature Language="F#" Value="static member GetXmlSerializerAssemblyName : Type * string -&gt; string" Usage="System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName (type, defaultNamespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="defaultNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> Planuje się.</param>
        <param name="defaultNamespace">Obszar nazw tego typu.</param>
        <summary>Zwraca nazwę zestawu zawierającego serializator dla określonego typu w określonej przestrzeni nazw.</summary>
        <returns>Nazwa zestawu zawierającego serializatorów specjalnie wbudowanych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Narzędzie generowania serializatora XML (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md) tworzy zestawu serializacji XML dla typów w określonym zestawie poprawić wydajność środowiska wykonawczego <xref:System.Xml.Serialization.XmlSerializer> po serializuje i deserializuje obiektów określonych typów. Użyj <xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A> do zwracania nazwy takiego zestawu.  
  
 Jeśli jest rozpowszechniana zestawu jako części aplikacji klienckiej, która wywołuje usługę sieci Web, możesz zastosować <xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute> na typ klienta, aby określić lokalizację i nazwę zestawu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Serialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Serializuje obiekt do dokumentu XML.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.IO.Stream stream, object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.IO.Stream stream, object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::IO::Stream ^ stream, System::Object ^ o);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.IO.Stream * obj -&gt; unit" Usage="xmlSerializer.Serialize (stream, o)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> Używany do zapisywania dokumentu XML.</param>
        <param name="o">
          <see cref="T:System.Object" /> Do serializacji.</param>
        <summary>Serializuje określony <see cref="T:System.Object" /> i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> Metoda konwertuje publiczne pola i właściwości odczytu/zapisu obiektu w formacie XML. Nie konwertuje metod, indeksatorów, prywatne pola lub właściwości tylko do odczytu. Wszystkie pola i właściwości obiektu serializować, zarówno publiczne i prywatne, użyj <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.  
  
 W `stream` parametru, określ obiekt, który pochodzi z klasy abstrakcyjnej <xref:System.IO.Stream> klasy. Klasy, które pochodzą z <xref:System.IO.Stream> obejmują:  
  
-   <xref:System.IO.BufferedStream>  
  
-   <xref:System.IO.FileStream>  
  
-   <xref:System.IO.MemoryStream>  
  
-   <xref:System.Net.Sockets.NetworkStream>  
  
-   <xref:System.Security.Cryptography.CryptoStream>  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można serializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład serializuje obiekt przy użyciu <xref:System.IO.Stream> obiektu.  
  
 [!code-cpp[Classic XmlSerializer.Serialize2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize2 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize2 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize2 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas serializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.IO.TextWriter textWriter, object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.IO.TextWriter textWriter, object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::IO::TextWriter ^ textWriter, System::Object ^ o);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.IO.TextWriter * obj -&gt; unit" Usage="xmlSerializer.Serialize (textWriter, o)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <see cref="T:System.IO.TextWriter" /> Używany do zapisywania dokumentu XML.</param>
        <param name="o">
          <see cref="T:System.Object" /> Do serializacji.</param>
        <summary>Serializuje określony <see cref="T:System.Object" /> i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> Metoda konwertuje publiczne pola i właściwości odczytu/zapisu obiektu w formacie XML. Nie konwertuje metod, indeksatorów, prywatne pola lub właściwości tylko do odczytu. Do serializacji obiektu wszystkie pola i właściwości, zarówno publiczne i prywatne, użyj <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.  
  
 W `textWriter` parametru, określ obiekt, który pochodzi z klasy abstrakcyjnej <xref:System.IO.TextWriter> klasy. Klasy, które pochodzą z <xref:System.IO.TextWriter> obejmują:  
  
-   <xref:System.IO.StreamWriter>  
  
-   <xref:System.IO.StringWriter>  
  
-   <xref:System.CodeDom.Compiler.IndentedTextWriter>  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można serializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład serializuje obiekt przy użyciu <xref:System.IO.TextWriter>.  
  
 [!code-cpp[Classic XmlSerializer.Serialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="protected virtual void Serialize (object o, System.Xml.Serialization.XmlSerializationWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Serialize(object o, class System.Xml.Serialization.XmlSerializationWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Serialize (o As Object, writer As XmlSerializationWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Serialize(System::Object ^ o, System::Xml::Serialization::XmlSerializationWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Xml.Serialization.XmlSerializationWriter -&gt; unit&#xA;override this.Serialize : obj * System.Xml.Serialization.XmlSerializationWriter -&gt; unit" Usage="xmlSerializer.Serialize (o, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="writer" Type="System.Xml.Serialization.XmlSerializationWriter" />
      </Parameters>
      <Docs>
        <param name="o">
          <see cref="T:System.Object" /> Do serializacji.</param>
        <param name="writer">
          <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> Używany do zapisywania dokumentu XML.</param>
        <summary>Serializuje określony <see cref="T:System.Object" /> i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">Wszelkie próby dostępu do metody, gdy metoda nie jest przesłonięcia w klasie elementów podrzędnych.</exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.Xml.XmlWriter xmlWriter, object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.Xml.XmlWriter xmlWriter, object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Xml::XmlWriter ^ xmlWriter, System::Object ^ o);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.Xml.XmlWriter * obj -&gt; unit" Usage="xmlSerializer.Serialize (xmlWriter, o)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">
          <see cref="T:System.Xml.XmlWriter" /> Używany do zapisywania dokumentu XML.</param>
        <param name="o">
          <see cref="T:System.Object" /> Do serializacji.</param>
        <summary>Serializuje określony <see cref="T:System.Object" /> i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> Metoda konwertuje publiczne pola i właściwości odczytu/zapisu obiektu w formacie XML. Nie konwertuje metod, indeksatorów, prywatne pola lub właściwości tylko do odczytu. Do serializacji obiektu wszystkie pola i właściwości, zarówno publiczne i prywatne, użyj <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.  
  
 W `xmlWriter` parametru, określ obiekt, który pochodzi z klasy abstrakcyjnej <xref:System.Xml.XmlWriter> klasy. <xref:System.Xml.XmlTextWriter> Pochodną <xref:System.Xml.XmlWriter>.  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można serializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład serializuje obiekt przy użyciu <xref:System.Xml.XmlWriter>.  
  
 [!code-cpp[Classic XmlSerializer.Serialize4 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize4 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize4 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize4 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize4 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize4 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas serializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.IO.Stream stream, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.IO.Stream stream, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::IO::Stream ^ stream, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.IO.Stream * obj * System.Xml.Serialization.XmlSerializerNamespaces -&gt; unit" Usage="xmlSerializer.Serialize (stream, o, namespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> Używany do zapisywania dokumentu XML.</param>
        <param name="o">
          <see cref="T:System.Object" /> Do serializacji.</param>
        <param name="namespaces">
          <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> Odwołuje się obiekt.</param>
        <summary>Serializuje określony <see cref="T:System.Object" /> i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.IO.Stream" /> który odwołuje się do określonych przestrzeni nazw.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> wywołania metody, właściwości odczytu/zapisu obiektu i pola publiczne są konwertowane na XML. Metody, indeksatorów pól prywatnych i właściwości tylko do odczytu nie są serializowane. Aby serializować wszystkie pola i właściwości, zarówno publiczne i prywatne, użyj <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.  
  
 Użyj `stream` parametr, aby określić obiekt, który pochodzi z klasy abstrakcyjnej <xref:System.IO.Stream> klasy, która jest przeznaczona do zapisu do strumieni. Klasy, które pochodzą z <xref:System.IO.Stream> klasy obejmują:  
  
-   <xref:System.IO.BufferedStream>  
  
-   <xref:System.IO.FileStream>  
  
-   <xref:System.IO.MemoryStream>  
  
-   <xref:System.Net.Sockets.NetworkStream>  
  
-   <xref:System.Security.Cryptography.CryptoStream>  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można serializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład serializuje obiekt z <xref:System.IO.Stream> obiektu. W przykładzie jest tworzony także <xref:System.Xml.Serialization.XmlSerializerNamespaces> i dodaje dwie przestrzenie nazw do obiektu. Klasa, która definiuje Zserializowany obiekt ma również atrybut <xref:System.Xml.Serialization.XmlElementAttribute> atrybutów, aby określić przestrzeń nazw dla każdego elementu.  
  
 [!code-cpp[Classic XmlSerializer.Serialize3 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize3 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize3 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas serializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.IO.TextWriter textWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.IO.TextWriter textWriter, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::IO::TextWriter ^ textWriter, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.IO.TextWriter * obj * System.Xml.Serialization.XmlSerializerNamespaces -&gt; unit" Usage="xmlSerializer.Serialize (textWriter, o, namespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <see cref="T:System.IO.TextWriter" /> Używany do zapisywania dokumentu XML.</param>
        <param name="o">
          <see cref="T:System.Object" /> Do serializacji.</param>
        <param name="namespaces">
          <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> Zawierający przestrzeni nazw dla wygenerowanego dokumentu XML.</param>
        <summary>Serializuje określony <see cref="T:System.Object" /> i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.IO.TextWriter" /> i odwołuje się do określonych przestrzeni nazw.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> wywoływana jest metoda pola publiczne i odczytu/zapisu właściwości obiektu są konwertowane na XML. Metody, indeksatorów pól prywatnych i właściwości tylko do odczytu nie są serializowane. Aby serializować wszystkie pola i właściwości, zarówno publiczne i prywatne, użyj <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.  
  
 Użyj `textWriter` parametr, aby określić obiekt, który pochodzi z klasy abstrakcyjnej <xref:System.IO.TextWriter> klasy. Klasy, które pochodzą z <xref:System.IO.TextWriter> klasy obejmują:  
  
-   <xref:System.IO.StreamWriter>  
  
-   <xref:System.IO.StringWriter>  
  
-   <xref:System.CodeDom.Compiler.IndentedTextWriter>  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można serializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład serializuje obiekt z <xref:System.IO.TextWriter>. W przykładzie jest tworzony także <xref:System.Xml.Serialization.XmlSerializerNamespaces> obiektu i dodaje dwie przestrzenie nazw do obiektu. Klasa, która definiuje Zserializowany obiekt ma również atrybut <xref:System.Xml.Serialization.XmlElementAttribute> atrybutów, aby określić przestrzeń nazw dla każdego elementu.  
  
 [!code-cpp[Classic XmlSerializer.Serialize1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize1 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize1 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize1 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas serializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.Xml.XmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.Xml.XmlWriter xmlWriter, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Xml::XmlWriter ^ xmlWriter, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.Xml.XmlWriter * obj * System.Xml.Serialization.XmlSerializerNamespaces -&gt; unit" Usage="xmlSerializer.Serialize (xmlWriter, o, namespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">
          <see cref="T:System.Xml.XmlWriter" /> Używany do zapisywania dokumentu XML.</param>
        <param name="o">
          <see cref="T:System.Object" /> Do serializacji.</param>
        <param name="namespaces">
          <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> Odwołuje się obiekt.</param>
        <summary>Serializuje określony <see cref="T:System.Object" /> i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.Xml.XmlWriter" /> i odwołuje się do określonych przestrzeni nazw.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> wywołania metody, właściwości odczytu/zapisu obiektu i pola publiczne są konwertowane na XML. Metody, indeksatorów pól prywatnych i właściwości tylko do odczytu nie są serializowane. Aby serializować wszystkie pola i właściwości, zarówno publiczne i prywatne, użyj <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.  
  
 Użyj `xmlWriter` parametr, aby określić obiekt, który pochodzi z klasy abstrakcyjnej <xref:System.Xml.XmlWriter> klasy, która służy do zapisywania dokumentów XML. <xref:System.Xml.XmlTextWriter> Pochodną <xref:System.Xml.XmlWriter>.  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można serializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
   
  
## Examples  
 Poniższy przykład serializuje obiekt z <xref:System.Xml.XmlWriter>. W przykładzie jest tworzony także <xref:System.Xml.Serialization.XmlSerializerNamespaces> i dodaje dwie przestrzenie nazw do obiektu. Kilka wystąpień <xref:System.Xml.Serialization.XmlElementAttribute> klasy są stosowane do elementów członkowskich klasy, aby określić przestrzeń nazw dla każdego elementu.  
  
 [!code-cpp[Classic XmlSerializer.Serialize5 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize5 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize5 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize5 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize5 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize5 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize5 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize5 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas serializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.Xml.XmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.Xml.XmlWriter xmlWriter, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Xml::XmlWriter ^ xmlWriter, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces, System::String ^ encodingStyle);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.Xml.XmlWriter * obj * System.Xml.Serialization.XmlSerializerNamespaces * string -&gt; unit" Usage="xmlSerializer.Serialize (xmlWriter, o, namespaces, encodingStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
        <Parameter Name="encodingStyle" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">
          <see cref="T:System.Xml.XmlWriter" /> Używany do zapisywania dokumentu XML.</param>
        <param name="o">Obiekt do zserializowania.</param>
        <param name="namespaces">
          <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> Odwołuje się obiekt.</param>
        <param name="encodingStyle">Styl kodowania serializacji XML.</param>
        <summary>Serializuje określony obiekt i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.Xml.XmlWriter" /> i odwołuje się do określonych przestrzeni nazw i styl kodowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> wywołania metody, właściwości odczytu/zapisu obiektu i pola publiczne są konwertowane na XML. Metody, indeksatorów pól prywatnych i właściwości tylko do odczytu nie są serializowane. Aby serializować wszystkie pola i właściwości, zarówno publiczne i prywatne, użyj <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.  
  
 Użyj `xmlWriter` parametr, aby określić obiekt, który pochodzi z klasy abstrakcyjnej <xref:System.Xml.XmlWriter> klasy, która służy do zapisywania dokumentów XML. <xref:System.Xml.XmlTextWriter> Pochodną <xref:System.Xml.XmlWriter>.  
  
 Ustaw `encodingStyle` parametr "http://schemas.xmlsoap.org/soap/encoding/"dla kodowania SOAP w wersji 1.1; w przeciwnym wypadku ustaw ją na"http://www.w3.org/2001/12/soap-encoding" dla kodowania w wersji 1.2 protokołu SOAP.  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlSerializer> Nie można serializować następujące: tablice <xref:System.Collections.ArrayList> i tablic <xref:System.Collections.Generic.List%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas serializacji. Pierwotny wyjątek jest dostępne przy użyciu <see cref="P:System.Exception.InnerException" /> właściwości.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.Xml.XmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.Xml.XmlWriter xmlWriter, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Xml::XmlWriter ^ xmlWriter, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces, System::String ^ encodingStyle, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.Xml.XmlWriter * obj * System.Xml.Serialization.XmlSerializerNamespaces * string * string -&gt; unit" Usage="xmlSerializer.Serialize (xmlWriter, o, namespaces, encodingStyle, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
        <Parameter Name="encodingStyle" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">
          <see cref="T:System.Xml.XmlWriter" /> Używany do zapisywania dokumentu XML.</param>
        <param name="o">Obiekt do zserializowania.</param>
        <param name="namespaces">Wystąpienie <see langword="XmlSerializaerNamespaces" /> zawiera obszary nazw i prefiksy do zastosowania.</param>
        <param name="encodingStyle">Kodowanie używane w dokumencie.</param>
        <param name="id">Dla protokołu SOAP kodowany w formacie wiadomości, podstawowy służący do generowania atrybuty identyfikatora.</param>
        <summary>Serializuje określony <see cref="T:System.Object" /> i zapisuje dokument XML w pliku za pomocą określonego <see cref="T:System.Xml.XmlWriter" />, przestrzeni nazw XML, kodowania i.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *Identyfikator* parametru zapewnia podstawową ciąg używany do tworzenia identyfikatorów SOAP. Domyślnie są to "id1", "identyfikator 2" i tak dalej. Ale jeśli parametr ma wartość "myBase" wygenerowanego wartości są "myBaseid1", "myBaseid2" i tak dalej. Ta funkcja służy do tworzenia wartości Unikatowy identyfikator w całej komunikatu protokołu SOAP.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownAttribute">
      <MemberSignature Language="C#" Value="public event System.Xml.Serialization.XmlAttributeEventHandler UnknownAttribute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Serialization.XmlAttributeEventHandler UnknownAttribute" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnknownAttribute As XmlAttributeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Serialization::XmlAttributeEventHandler ^ UnknownAttribute;" />
      <MemberSignature Language="F#" Value="member this.UnknownAttribute : System.Xml.Serialization.XmlAttributeEventHandler " Usage="member this.UnknownAttribute : System.Xml.Serialization.XmlAttributeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAttributeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="T:System.Xml.Serialization.XmlSerializer" /> napotka atrybutu XML nieznanego typu podczas deserializacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie po wywołaniu <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> metody <xref:System.Xml.Serialization.XmlSerializer> ignoruje atrybuty XML nieznanych typów. Jednak tego zdarzenia można używać do obsługi takich typów węzłów.  
  
 Jeśli wystąpienie klasy deserializowane zawiera pola, które zwraca tablicę <xref:System.Xml.XmlAttribute> obiektów i <xref:System.Xml.Serialization.XmlAnyAttributeAttribute> zostały zastosowane do tego pola <xref:System.Xml.Serialization.XmlSerializer.UnknownAttribute> zdarzenie nie występuje. Zamiast tego wszystkie nieznane atrybuty XML są zbierane w tablicy.  
  
   
  
## Examples  
 Poniższy przykład wyświetla informacje o żadnych atrybutów nieznany podczas deserializacji dokumentu XML.  
  
 [!code-cpp[Classic XmlSerializer.UnknownAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.UnknownAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.UnknownAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.UnknownAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.UnknownAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.UnknownAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
        <altmember cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="UnknownElement">
      <MemberSignature Language="C#" Value="public event System.Xml.Serialization.XmlElementEventHandler UnknownElement;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Serialization.XmlElementEventHandler UnknownElement" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Serialization.XmlSerializer.UnknownElement" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnknownElement As XmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Serialization::XmlElementEventHandler ^ UnknownElement;" />
      <MemberSignature Language="F#" Value="member this.UnknownElement : System.Xml.Serialization.XmlElementEventHandler " Usage="member this.UnknownElement : System.Xml.Serialization.XmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="T:System.Xml.Serialization.XmlSerializer" /> napotka — element XML nieznanego typu podczas deserializacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie po wywołaniu <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> metody <xref:System.Xml.Serialization.XmlSerializer> ignoruje atrybuty XML nieznanych typów. Jednak tego zdarzenia można używać do obsługi takich typów węzłów.  
  
> [!NOTE]
>  Jeśli <xref:System.Xml.Serialization.XmlAnyElementAttribute> jest stosowany do pola, które zwraca tablicę <xref:System.Xml.XmlElement> obiektów, wszystkie elementy nieznany są zbierane w tablicy. W takim przypadku <xref:System.Xml.Serialization.XmlSerializer.UnknownElement> zdarzenie nie występuje.  
  
   
  
## Examples  
 Poniższy przykład deserializuje klasę o nazwie `Group` z pliku o nazwie UnknownElements.xml. Zawsze, gdy element zostanie znaleziony w pliku, który ma odpowiedniego elementu członkowskiego w klasie <xref:System.Xml.Serialization.XmlSerializer.UnknownElement> zdarzenie. Aby wypróbować w przykładzie, wklej następujący kod XML w pliku o nazwie UnknownElements.xml.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
  <GroupName>MyGroup</GroupName>  
  <GroupSize>Large</GroupSize>  
  <GroupNumber>444</GroupNumber>  
  <GroupBase>West</GroupBase>  
</Group>  
```  
  
 [!code-cpp[XmlSerializer.UnknownElement Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerializer.UnknownElement Example/CPP/unknownelement.cpp#1)]
 [!code-csharp[XmlSerializer.UnknownElement Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerializer.UnknownElement Example/CS/unknownelement.cs#1)]
 [!code-vb[XmlSerializer.UnknownElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlSerializer.UnknownElement Example/VB/unknownelement.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
        <altmember cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
        <altmember cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="UnknownNode">
      <MemberSignature Language="C#" Value="public event System.Xml.Serialization.XmlNodeEventHandler UnknownNode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Serialization.XmlNodeEventHandler UnknownNode" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnknownNode As XmlNodeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Serialization::XmlNodeEventHandler ^ UnknownNode;" />
      <MemberSignature Language="F#" Value="member this.UnknownNode : System.Xml.Serialization.XmlNodeEventHandler " Usage="member this.UnknownNode : System.Xml.Serialization.XmlNodeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlNodeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="T:System.Xml.Serialization.XmlSerializer" /> napotkał nieznany typ węzła XML podczas deserializacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie po wywołaniu <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> metody <xref:System.Xml.Serialization.XmlSerializer> ignoruje węzłów XML nieznanych typów. Jednak tego zdarzenia można używać do obsługi takich typów węzłów.  
  
   
  
## Examples  
 Poniższy przykład Wyświetla typ żadnych napotkano nieznany węzeł.  
  
 [!code-cpp[Classic XmlSerializer.UnknownNode Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.UnknownNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.UnknownNode Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.UnknownNode Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.UnknownNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.UnknownNode Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
        <altmember cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
        <altmember cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="UnreferencedObject">
      <MemberSignature Language="C#" Value="public event System.Xml.Serialization.UnreferencedObjectEventHandler UnreferencedObject;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Serialization.UnreferencedObjectEventHandler UnreferencedObject" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnreferencedObject As UnreferencedObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Serialization::UnreferencedObjectEventHandler ^ UnreferencedObject;" />
      <MemberSignature Language="F#" Value="member this.UnreferencedObject : System.Xml.Serialization.UnreferencedObjectEventHandler " Usage="member this.UnreferencedObject : System.Xml.Serialization.UnreferencedObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.UnreferencedObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje podczas deserializacji obiektu stream SOAP zakodowane w formacie XML, gdy <see cref="T:System.Xml.Serialization.XmlSerializer" /> napotka rozpoznawanym typem, który nie jest używana lub jest bez odwołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject> Zdarzeń występuje tylko wtedy, gdy <xref:System.Xml.Serialization.XmlSerializer> służy do deserializacji dokumentu XML z komunikatem protokołu SOAP, które odpowiada sekcji 5 dokumentu konsorcjum World Wide Web (www.w3.org), "Simple Object Access Protocol (SOAP) 1.1".  
  
 Dokumenty, które są zgodne z sekcji 5 są w formacie specjalnych. Co najmniej takiego dokumentu obejmuje główną część komunikatu protokołu SOAP. Jednak zamiast zawierające wszystkie typy zdefiniowanymi w tekście w dokumencie, niektóre definicje typów mogą być kodowane jako odwołania do elementów najwyższego poziomu w dokumencie. W związku z tym każdy element znaleziono w treści głównego, który jest odwołanie, musi istnieć odpowiedniego elementu zawierający definicję tego typu. Aby skorelować element odwołujący się, jak i definicja typu, definicja typu zawiera `id` ma atrybut identyfikator unikatowy ciąg i odwołaniem do elementu ustawioną `href` atrybut, który odwołuje się do tego samego identyfikatora.  
  
```  
<Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="id1" n1:GroupName=".NET" GroupNumber="ZDI=" CreationDate="2002-05-02" xmlns:n1="http:'www.cpandl.com">  
    <PosInt xsi:type="xsd:nonNegativeInteger">10000</PosInt>  
    <GroupVehicle href="#id2" />  
  </Group>  
  <Vehicle id="id2" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance">  
    <licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string">1234</licenseNumber>  
  </Vehicle>  
```  
  
 <xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject> Zdarzeń wystąpić, gdy jest definicją typu odnaleziono w dokumencie, ale nie parametru w treści głównego odwołuje się on. Po wystąpieniu zdarzenia, można pobrać typu XML obiektu bez odwołań, sprawdzając <xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject%2A> właściwość <xref:System.Xml.Serialization.UnreferencedObjectEventArgs> klasy. Zwraca identyfikator XML obiektu <xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId%2A> właściwości.  
  
 <xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject> Zdarzeń nie należy mylić z <xref:System.Xml.Serialization.XmlSerializer.UnknownElement> i <xref:System.Xml.Serialization.XmlSerializer.UnknownNode> zdarzenia, które występują, gdy nie ma żadnego członka klasy umożliwiająca typ węzła lub elementu XML.  
  
   
  
## Examples  
 W poniższym przykładzie dodano <xref:System.Xml.Serialization.UnreferencedObjectEventHandler> do <xref:System.Xml.Serialization.XmlSerializer>. Zdarzenie jest obsługiwane przez `Serializer``_``UnreferencedObject` metody. Aby uruchomić przykład, wycinanie i wklej następujący kod XML w pliku o nazwie "UnrefObj.xml".  
  
```  
<wrapper>  
  <Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="id1" n1:GroupName=".NET" xmlns:n1="http://www.cpandl.com">  
   </Group>  
<Vehicle id="id2" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance">  
    <licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string">ABCD</licenseNumber>  
  </Vehicle>  
<Vehicle id="id3" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance">  
    <licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string">1234</licenseNumber>  
  </Vehicle>  
</wrapper>  
```  
  
 [!code-cpp[UnreferencedObject Event Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/UnreferencedObject Event Example/CPP/unrefobj.cpp#1)]
 [!code-csharp[UnreferencedObject Event Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/UnreferencedObject Event Example/CS/unrefobj.cs#1)]
 [!code-vb[UnreferencedObject Event Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/UnreferencedObject Event Example/VB/unrefobj.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
  </Members>
</Type>