<Type Name="XmlElementAttribute" FullName="System.Xml.Serialization.XmlElementAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a3ee602aac8b9d5af9ec42ec2fbb9974f9e4cf8" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52235454" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlElementAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlElementAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wskazuje, że publiczne pole lub właściwość reprezentuje XML element podczas <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializuje i deserializuje obiekt, który go zawiera.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlElementAttribute> Należy do rodziny atrybuty, które kontroluje sposób, w jaki <xref:System.Xml.Serialization.XmlSerializer> serializuje i deserializuje obiekt. Pełną listę atrybutów podobne zobacz [atrybuty czy kontroli serializacji XML](~/docs/standard/serialization/attributes-that-control-xml-serialization.md).  
  
 Dokument XML zwykle zawiera elementy XML, z których każda obejmuje trzy części: otwierający tag z atrybutami możliwe, tag zamykający i danych między tagami. Tagi XML mogą być zagnieżdżane — czyli, dane między tagami można też elementów XML. Tej pojemności jeden element, aby ująć innego umożliwia zawierać hierarchie danych. XML element może również obejmować atrybuty.  
  
 Zastosuj <xref:System.Xml.Serialization.XmlElementAttribute> publiczny pola lub właściwości publiczne odczytu/zapisu do kontrolowania właściwości elementów XML, takie jak nazwa elementu i przestrzeni nazw.  
  
 <xref:System.Xml.Serialization.XmlElementAttribute> Można zastosować wiele razy do pola, które zwraca tablicę obiektów. Celem tego jest określenie (za pośrednictwem <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> właściwość) różne typy, które mogą być wstawiane do tablicy. Na przykład tablicy w poniższym kodzie języka C# akceptuje ciągi i liczby całkowite.  
  
```  
public class Things{  
   [XmlElement(Type = typeof(string)),  
   XmlElement(Type = typeof(int))]  
   public object[] StringsAndInts;  
}  
```  
  
 Skutkuje to plik XML, który może wyglądać w następujący sposób.  
  
```  
<Things>  
   <string>Hello</string>  
   <int>999</int>  
   <string>World</string>  
</Things>  
```  
  
 Należy pamiętać, że po zastosowaniu <xref:System.Xml.Serialization.XmlElementAttribute> wiele razy bez określania <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> wartości właściwości, elementy są nazwane jego imieniem typ dopuszczalne obiektów.  
  
 Jeśli zastosujesz <xref:System.Xml.Serialization.XmlElementAttribute> na pole lub właściwość, która zwraca tablicę elementów w tablicy są zakodowane jako sekwencję elementów XML.  
  
 Natomiast jeśli <xref:System.Xml.Serialization.XmlElementAttribute> nie ma zastosowania do takiego pola lub właściwości, elementów w tablicy są zakodowane jako sekwencję elementów zagnieżdżonych w ramach elementu o nazwie po pole lub właściwość. (Użyj <xref:System.Xml.Serialization.XmlArrayAttribute> i <xref:System.Xml.Serialization.XmlArrayItemAttribute> atrybuty kontrolować, jak tablica jest serializowana.)  
  
 Możesz ustawić <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> właściwości w celu określenia typu, która jest pochodną typ oryginalny pole lub właściwość — to znaczy, pole lub właściwość do którego zastosowano <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
 Jeśli pole lub właściwość zwraca <xref:System.Collections.ArrayList>, można zastosować wiele wystąpień <xref:System.Xml.Serialization.XmlElementAttribute> do elementu członkowskiego. Dla każdego wystąpienia, należy ustawić <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> właściwości typu obiektu, który mogą być wstawiane do tablicy.  
  
 Aby uzyskać więcej informacji o korzystaniu z atrybutów, zobacz [atrybuty](~/docs/standard/attributes/index.md).  
  
> [!NOTE]
>  Można użyć słowa `XmlElement` w kodzie zamiast dłuższe <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
   
  
## Examples  
 Poniższy przykład szereguje klasę o nazwie `Group` i stosuje <xref:System.Xml.Serialization.XmlElementAttribute> na kilku członków. Pole o nazwie `Employees` zwraca tablicę `Employee` obiektów. W tym przypadku <xref:System.Xml.Serialization.XmlElementAttribute> Określa, że wynikowy kod XML będzie nie być zagnieżdżony (jest to domyślne zachowanie elementów w tablicy).  
  
 [!code-cpp[Classic XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlElementAttributes" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
    <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">Wprowadzenie do serializacji XML</related>
    <related type="Article" href="~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md">Porady: Określanie alternatywnej nazwy elementu dla Stream XML</related>
    <related type="Article" href="~/docs/standard/serialization/controlling-xml-serialization-using-attributes.md">Kontrolowanie serializacji XML przy użyciu atrybutów</related>
    <related type="Article" href="~/docs/standard/serialization/examples-of-xml-serialization.md">Przykłady serializacji XML</related>
    <related type="Article" href="~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md">Narzędzie definicji schematu XML (Xsd.exe)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Następujący przykład dotyczy <xref:System.Xml.Serialization.XmlElementAttribute> do klasy.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Nazwa elementu XML serializacji elementu członkowskiego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> klasy i określa nazwę elementu XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Xml.Serialization.XmlSerializer> używa nazwy elementu członkowskiego jako nazwa elementu XML podczas serializacji wystąpienia klasy. Na przykład pole o nazwie `Vehicle` generuje element XML o nazwie `Vehicle`. Jednak jeśli potrzebujesz różnych elementów, takich jak `Cars`, przekaż go w `elementName` parametru.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono prosty klasę, która zawiera jedno pole o nazwie `Vehicles`. Przykład dotyczy <xref:System.Xml.Serialization.XmlElementAttribute> do pola i zawiera `elementName` parametru, w tym samym poinstruowanie <xref:System.Xml.Serialization.XmlSerializer> do generowania elementów XML o nazwie "Samochody" zamiast "Pojazdów".  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> Pochodzi od typu elementu członkowskiego obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> klasy i określa typ elementu członkowskiego, do którego <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> jest stosowany. Ten typ jest używany przez <see cref="T:System.Xml.Serialization.XmlSerializer" /> podczas serializacji lub deserializacji obiektu, który go zawiera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `type` parametru, aby określić typ, który pochodzi z klasy bazowej. Na przykład, załóżmy, że właściwość o nazwie `MyAnimal` zwraca `Animal` obiektu. Aby poprawić obiektu, aby utworzyć nową klasę o nazwie `Mammal` tej, która dziedziczy `Animal` klasy. Aby nakazać <xref:System.Xml.Serialization.XmlSerializer> do akceptowania `Mammal` klasy, gdy to szereguje `MyAnimal` właściwość, — dostęp próbny <xref:System.Type> z `Mammal` klasy do konstruktora.  
  
   
  
## Examples  
 Poniższy przykład szereguje klasę o nazwie `Orchestra` zawiera jedno pole o nazwie `Instruments`, która zwraca tablicę `Instrument` obiektów. Druga klasa o nazwie `Brass` dziedziczy `Instrument` klasy. Przykład dotyczy <xref:System.Xml.Serialization.XmlElementAttribute> do `Instruments` pola, a następnie określa `Brass` typ, dzięki czemu `Instruments` pola, aby zaakceptować `Brass` obiektów. W przykładzie określono również nazwa elementu XML, ustawiając <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> właściwości.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string * Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute (elementName, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">Nazwa elementu XML serializacji elementu członkowskiego.</param>
        <param name="type">
          <see cref="T:System.Type" /> Pochodzi od typu elementu członkowskiego obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> i określa nazwę elementu XML i typu pochodnego dla elementu członkowskiego, do którego <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> jest stosowany. Ten typ elementu członkowskiego jest używany podczas <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializuje obiekt, który go zawiera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Xml.Serialization.XmlSerializer> używa nazwy elementu członkowskiego jako nazwa elementu XML podczas serializacji wystąpienia klasy. Na przykład pole o nazwie `Vehicle` generuje element XML o nazwie `Vehicle`. Jednak jeśli potrzebujesz różnych elementów, takich jak `Cars`, przekaż go w `elementName` parametru.  
  
 Użyj `type` parametru, aby określić typ, który pochodzi z klasy bazowej. Na przykład, załóżmy, że właściwość o nazwie `MyAnimal` zwraca `Animal` obiektu. Aby poprawić obiektu, aby utworzyć nową klasę o nazwie `Mammal` tej, która dziedziczy `Animal` klasy. Aby nakazać <xref:System.Xml.Serialization.XmlSerializer> do akceptowania `Mammal` klasy, gdy to szereguje `MyAnimal` właściwość, — dostęp próbny <xref:System.Type> z `Mammal` klasy do konstruktora.  
  
   
  
## Examples  
 Poniższy przykład szereguje klasę o nazwie `Orchestra` zawiera jedno pole o nazwie `Instruments`, która zwraca tablicę `Instrument` obiektów. Druga klasa o nazwie `Brass` dziedziczy `Instrument` klasy. Przykład dotyczy <xref:System.Xml.Serialization.XmlElementAttribute> do `Instruments` pola, a następnie określa `Brass` typ, dzięki czemu `Instruments` pola, aby zaakceptować `Brass` obiektów. W przykładzie określono również nazwa elementu XML, ustawiając <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> właściwości.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ danych (XSD) definicji schematu XML elementu XML generowanych przez <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
        <value>Typem danych schematu XML, zgodnie z definicją w dokumencie World Wide Web Consortium (www.w3.org) o nazwie "XML schematu część 2: typy danych".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono typy proste dane schematu XML z their.NET odpowiedniki.  
  
 Dla schematu XML `base64Binary` i `hexBinary` typy danych, skorzystaj z tablicy z <xref:System.Byte> struktury i zastosować <xref:System.Xml.Serialization.XmlElementAttribute> z <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> "base64Binary" lub "hexBinary", zgodnie z potrzebami. Dla schematu XML `time` i `date` typy danych, użyj <xref:System.DateTime> wpisz i zastosować <xref:System.Xml.Serialization.XmlElementAttribute> z <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> "Data" lub "time".  
  
 Dla każdego typu schematu XML, który jest mapowany na ciąg, zastosuj <xref:System.Xml.Serialization.XmlElementAttribute> z jego <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> właściwość ustawioną na typ schematu XML. Istnieje możliwość, że ta zmiana formatu serializacji, a nie tylko schematu dla elementu członkowskiego.  
  
> [!NOTE]
>  Właściwość jest rozróżniana wielkość liter, musisz więc ustawić jej dokładnie do jednego z typów danych schematu XML.  
  
> [!NOTE]
>  Przekazywanie danych binarnych jako XML element jest bardziej wydajne niż przekazanie jej jako atrybut schematu XML.  
  
 Aby uzyskać więcej informacji na temat typów danych XML zobacz dokument World Wide Web Consortium (www.w3.org) o nazwie "XML schematu część 2: typy danych".  
  
|Typ danych XSD|Typ danych .NET|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|Tablica <xref:System.Byte> obiektów|  
|wartość logiczna|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|Data|<xref:System.DateTime>|  
|Data i godzina|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|JEDNOSTKI|<xref:System.String>|  
|JEDNOSTKI|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|Tablica <xref:System.Byte> obiektów|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|integer|<xref:System.String>|  
|język|<xref:System.String>|  
|long|<xref:System.Int64>|  
|Nazwa|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTACJA|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|czas trwania|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|czas|<xref:System.DateTime>|  
|Token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 Poniższy przykład szereguje klasę o nazwie `Group` zawiera pole o nazwie `ExtraInfo`, co powoduje zwrócenie <xref:System.Collections.ArrayList>. Przykład dotyczy dwóch wystąpień <xref:System.Xml.Serialization.XmlElementAttribute> do pola i umożliwia określenie różnych <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> wartości dla każdego wystąpienia. Każde wystąpienie umożliwia <xref:System.Xml.Serialization.XmlSerializer> do serializacji określonego typu, które są wstawiane do tablicy.  
  
 [!code-cpp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Typ danych schematu XML, który określiłeś, nie można zamapować na typ danych środowiska.NET.</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę elementu XML wygenerowany.</summary>
        <value>Nazwa elementu XML wygenerowany. Wartość domyślna to identyfikator elementu członkowskiego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Określ <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> Jeśli nazwa elementu XML wygenerowanego różnią się od identyfikatora elementu członkowskiego.  
  
 Możesz ustawić taki sam <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> wartość do więcej niż jedną składową klasy, jeśli wygenerowanego dokumentu XML używa przestrzeni nazw XML do rozróżniania między o identycznej nazwie elementów członkowskich. Aby uzyskać więcej informacji na temat korzystania z prefiksem nazwy i przestrzenie nazw w dokumencie XML, zobacz <xref:System.Xml.Serialization.XmlSerializerNamespaces> klasy.  
  
   
  
## Examples  
 Poniższy przykład ustawia <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> właściwość <xref:System.Xml.Serialization.XmlElementAttribute> na nową wartość.  
  
 [!code-cpp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName" />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Xml.Schema.XmlSchemaForm with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element jest kwalifikowana.</summary>
        <value>Jedną z <see cref="T:System.Xml.Schema.XmlSchemaForm" /> wartości. Wartość domyślna to <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> Właściwość określa, czy XML element jest kwalifikowana lub niekwalifikowane. <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> Właściwości jest zgodny ze specyfikacją World Wide Web Consortium (www.w3.org) 1999 "Przestrzeni nazw w języku XML".  
  
 Jeśli <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> właściwość jest ustawiona na dowolną wartość z ustawieniem <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> właściwość `XmlSchemaForm.Unqualified` zgłasza wyjątek. Ustawieniem domyślnym `XmlSchemaForm.None`, powoduje, że <xref:System.Xml.Serialization.XmlSerializer> do schematu dla dokumentu XML ustalić, czy przestrzeń nazw kwalifikuje się do sprawdzenia. Jeśli schemat nie określa wartości dla pojedynczego elementu lub atrybutu <xref:System.Xml.Serialization.XmlSerializer> używa `elementFormDefault` i `attributeFormDefault` wartości do określenia, czy element lub atrybut jest kwalifikowana. Poniższy kod XML pokazuje schematu:  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified"... >  
 <element name="Name"/>  
 <attribute name="Number"/>  
</schema>  
```  
  
 Gdy <xref:System.Xml.Serialization.XmlSerializer> odczytuje schemat na <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> wartość dla obu `Name` i `Number` jest `XmlSchemaForm.None`, ale `Name` element jest kwalifikowana, podczas `Number` element jest niekwalifikowana.  
  
   
  
## Examples  
 Poniższy przykład ustawia <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> właściwość `XmlSchemaForm.Unqualified`.  
  
 [!code-cpp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Xml.Serialization.XmlSerializer" /> muszą serializację elementu członkowskiego, który jest ustawiony na <see langword="null" /> jako pustą etykietę, za pomocą <see langword="xsi:nil" /> ustawioną wartość atrybutu <see langword="true" />.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Xml.Serialization.XmlSerializer" /> generuje <see langword="xsi:nil" /> atrybutu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specyfikację schematu XML dla struktur umożliwia dokumentu XML jawnie sygnalizować, Brak zawartości elementu. Taki element zawiera atrybut `xsi:nil` równa `true`. Aby uzyskać więcej informacji zobacz specyfikację World Wide Web Consortium (www.w3.org) "XML schematu część 1: struktur".  
  
 Jeśli <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> właściwość jest ustawiona na `true`, `xsi:nil` atrybutu jest generowany dla składowych klasy, które zostały ustawione na `null`. Na przykład jeśli ustawisz pole o nazwie `MyStringArray` do `null`, <xref:System.Xml.Serialization.XmlSerializer> generuje następujący kod XML.  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 Jeśli <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> właściwość `false`, Brak elementu XML jest generowany dla składowych klasy, które zostały ustawione na `null`.  
  
> [!NOTE]
>  Nie można zastosować <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> właściwości do elementu członkowskiego wpisanych jako typ wartości, ponieważ typ wartości nie mogą zawierać `null`. Ponadto nie można ustawić tę właściwość na `false` dla typów wartości null. Jeśli takie typy są `null`, będą wykonywane szeregowo, ustawiając `xsi:nil` do `true`.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono pole z <xref:System.Xml.Serialization.XmlElementAttribute> zastosowano i <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> właściwością `false`.  
  
 [!code-cpp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obszar nazw, przypisany do elementu XML, który występuje, gdy klasa jest serializowana.</summary>
        <value>Przestrzeń nazw elementu XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> Właściwości, który jest zgodny ze specyfikacją World Wide Web Consortium (www.w3.org), "Przestrzeni nazw w języku XML".  
  
 Aby utworzyć przestrzeni nazw, które są skojarzone z prefiksem, należy utworzyć <xref:System.Xml.Serialization.XmlSerializerNamespaces> zawiera przestrzenie nazw i prefiksy używane w dokumencie XML. Jak ustawić przestrzeni nazw, dla każdego <xref:System.Xml.Serialization.XmlArrayAttribute>, musi on być zgodny jednej z przestrzeni nazw w <xref:System.Xml.Serialization.XmlSerializerNamespaces>. Po wygenerowaniu pliku XML, tablic poprawnie jest poprzedzony znakiem prefiks skojarzony z określonego obszaru nazw.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Order : int with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jawnego kolejności, w której elementy są serializowany lub deserializowany.</summary>
        <value>Kolejność generowania kodu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder> wyliczeniu, aby nakazać <xref:System.Web.Services.Description.ServiceDescriptionImporter> do generowania kodu, który ustawia <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> właściwości.  
  
> [!IMPORTANT]
>  Raz <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> właściwość została już użyta w na jednym właściwość publiczna lub pola w typie, należy zastosować do wszystkich właściwości publiczne i pola dla tego typu i wszystkie odziedziczone typów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ obiektu, używany do reprezentowania elementu XML.</summary>
        <value>
          <see cref="T:System.Type" /> Elementu członkowskiego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> właściwości w celu określenia typu pochodnego dla pola lub właściwości.  
  
 Jeśli pole lub właściwość zwraca <xref:System.Collections.ArrayList>, można zastosować wiele wystąpień <xref:System.Xml.Serialization.XmlElementAttribute> do elementu członkowskiego. Dla każdego wystąpienia, należy ustawić <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> właściwości typu obiektu, który mogą być wstawiane do tablicy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> właściwości w celu określenia obiekt pochodnych dla <xref:System.Xml.Serialization.XmlElementAttribute>. Przykład dotyczy także trzy wystąpienia <xref:System.Xml.Serialization.XmlElementAttribute> do pola, które zwraca <xref:System.Collections.ArrayList>. Każde wystąpienie określa typ, który może w tym polu.  
  
 [!code-cpp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>