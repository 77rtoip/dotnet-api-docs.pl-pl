<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eece6612c57c7a96a0b5c439c3efee9cbf82f73" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69276170" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje zamkniętą część typu obiektów załadowana do celów tylko do inspekcji. Każdy MetadataLoadContext może mieć własne reguły powiązania i jest odizolowany od wszystkich innych MetadataLoadContexts.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

A `MetadataLoadContext` służy jako słownik, który wiąże nazwy zestawów z <xref:System.Reflection.Assembly> wystąpieniami, które zostały wcześniej załadowane do kontekstu lub muszą zostać załadowane.

Zestawy są traktowane jako metadane. Nie ma żadnych ograniczeń dotyczących ładowania zestawów na podstawie platformy docelowej, architektury procesora lub rozmiaru wskaźnika. Nie ma żadnych ograniczeń dotyczących zestawu wyznaczono jako zestaw podstawowy (**mscorlib**).

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><see cref="T:System.Reflection.MetadataAssemblyResolver" /> Wystąpienie.</param>
        <param name="coreAssemblyName">Nazwa zestawu, który zawiera typy podstawowe, takie jak <see cref="T:System.Object" />. Zwykle jest to "mscorlib".</param>
        <summary>Tworzy nowy <see cref="T:System.Reflection.MetadataLoadContext" /> obiekt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zestaw, który oznacza "zestaw systemowy", który jest przeznaczony dla dobrze znanych typów, takich jak <see cref="T:System.Int32" />.</summary>
        <value><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Podstawowy zestaw jest traktowany inaczej niż inne zestawy, ponieważ odwołania do tych dobrze znanych typów nie zawierają odwołania do zestawu, w przeciwieństwie do typów normalnych.
            
Zazwyczaj ten zestaw nosi nazwę "mscorlib" lub "standard". Jeśli podstawowy zestaw nie może zostać znaleziony, wartość będzie `null`i wiele innych metod odbicia, w tym tych, które przeanalizują sygnatury metod, spowoduje zgłoszenie wyjątku.
            
Jest określany przez `coreAssemblyName` przekazanie parametru przekazywanego <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> do <xref:System.Reflection.MetadataAssemblyResolver> konstruktora do metody. `CoreAssembly`

Jeśli żaden `coreAssemblyName` argument nie został określony w <xref:System.Reflection.MetadataLoadContext>konstruktorze, są używane wartości domyślne, w tym "mscorlib", "System. Runtime" i "Standard standardowy".
            
Wydzielony zestaw podstawowy nie musi bezpośrednio zawierać typów podstawowych. Można wpisać je dalej do innych zestawów. Z tego względu doskonale można używać biblioteki mscorlib elewacji jako zestawu podstawowego.
            
Należy zauważyć <xref:System.Runtime> , że nie jest idealnym zestawem podstawowym, ponieważ wyklucza niektóre z niestandardowych typów atrybutów związanych z międzyoperacyjną, takich jak. <xref:System.Runtime.InteropServices.DllImportAttribute> Jednak może ona działać, jeśli nie masz zainteresowania z tymi atrybutami. Interfejs API CustomAttributes — pominie te atrybuty, jeśli zestaw podstawowy nie zawiera wymaganych typów.
            
Zestaw podstawowy nie jest ładowany, dopóki nie jest to konieczne. Następujące interfejsy API nie wyzwalają wyszukiwania zestawu podstawowego:

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
Jeśli nie można znaleźć podstawowego zestawu lub jeśli w zestawie podstawowym brakuje typów, wpłynie to na zachowanie <xref:System.Reflection.MetadataLoadContext> w następujący sposób:
            
* Interfejsy API, które muszą analizować sygnatury lub typespecs i zwracać wyniki <xref:System.Type> , ponieważ obiekty generują wyjątek. Przykład:

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty-nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* Interfejsy API, które muszą porównywać typy z dobrze znanymi typami podstawowymi, nie będą zgłaszać wyjątku, a porównanie zostanie `false`oszacowane jako. Na przykład, jeśli nie określisz zestawu podstawowego, <xref:System.Type.IsPrimitive> program zwróci `false` wszystkie typy, nawet o nazwie <xref:System.Int32>. Podobnie, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> program zwróci <xref:System.TypeCode.Object> wszystko.
            
* Jeśli jednostka metadanych ustawia flagi, które są oznaczone jako atrybut pseudo-niestandardowy, a zestaw podstawowy nie zawiera typu atrybutu pseudo-niestandardowego, wymagany Konstruktor lub którykolwiek z typów parametrów konstruktora, <xref:System.Reflection.MetadataLoadContext> nie zostanie zgłoszony. Spowoduje to pominięcie atrybutu pseudo-Custom z listy zwracanych atrybutów.
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby natywne (takie jak blokady plików w plikach zestawu).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Po usunięciu nie można bezpiecznie używać żadnych <xref:System.Reflection.Assembly> obiektów, które zostały zastąpione <xref:System.Reflection.MetadataLoadContext> przez obiekty lub dowolne odbicie obiektów, które <xref:System.Reflection.Assembly> zostały zastąpione przez te obiekty.

Chociaż obiekty udostępniane przez <xref:System.Reflection.MetadataLoadContext> dążenie do <xref:System.ObjectDisposedException>wyrzucania, nie jest to gwarantowane.

Niektóre interfejsy API mogą zwracać stałe lub wcześniej buforowane dane. Uzyskiwanie dostępu do <xref:System.Reflection.MetadataLoadContext.Dispose%2A> obiektów *w trakcie* wywołania metody może spowodować niezarządzane naruszenie dostępu i przepełnienie.
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwróć niepodzielną migawkę zestawów, które zostały załadowane do <see cref="T:System.Reflection.MetadataLoadContext" />.</summary>
        <returns>Wyliczalna kolekcja <see xref="T:System.Reflection.Assembly" /> obiektów.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><see cref="T:System.Reflection.AssemblyName" /> Wystąpienie.</param>
        <summary>Rozpoznaje podaną nazwę zestawu do zestawu. Jeśli zestaw został wcześniej powiązany z tą nazwą, ten zestaw jest zwracany. W przeciwnym razie <see cref="T:System.Reflection.MetadataAssemblyResolver" />wywołuje określony. <see cref="T:System.Reflection.MetadataLoadContext" /></summary>
        <returns><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
Należy zauważyć, że zachowanie tej metody jest zgodne z zachowaniem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> zdarzenia Rozwiązuj, ale nie jest zgodne z <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>zachowaniem. (Ostatnia z nich nie powoduje ponoszenia zdarzenia rozwiązania).
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Program rozpoznawania nazw <see langword="null" />zwraca wartość.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><see cref="T:System.String" /> Reprezentujący nazwę zestawu.</param>
        <summary>Rozpoznaje podaną nazwę zestawu do zestawu. Jeśli zestaw został wcześniej powiązany z tą nazwą, ten zestaw jest zwracany. W przeciwnym razie <see cref="T:System.Reflection.MetadataAssemblyResolver" />wywołuje określony. <see cref="T:System.Reflection.MetadataLoadContext" /></summary>
        <returns><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

Należy zauważyć, że zachowanie tej metody jest zgodne z zachowaniem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> zdarzenia Rozwiązuj, ale nie jest zgodne z <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>zachowaniem. (Ostatnia z nich nie powoduje ponoszenia zdarzenia rozwiązania).

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Program rozpoznawania nazw <see langword="null" />zwraca wartość.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><see cref="T:System.String" /> Reprezentujący ścieżkę do zestawu.</param>
        <summary>Ładuje zestaw z określonej ścieżki na dysku i wiąże jego nazwę <see cref="T:System.Reflection.MetadataLoadContext" />zestawu z. Jeśli wcześniejszy zestaw o tej samej nazwie został już załadowany do <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedni zestaw.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Dwa zestawy nie mają tego samego MVID.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><see cref="T:System.Byte[]" /> Posiadanie zestawu.</param>
        <summary>Ładuje zestaw z tablicy bajtów i powiąże jego nazwę <see cref="T:System.Reflection.MetadataLoadContext" />zestawu z. Jeśli wcześniejszy zestaw o tej samej nazwie został już załadowany do <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedni zestaw.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Dwa zestawy nie mają tego samego MVID.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><see cref="T:System.IO.Stream" /> Posiadanie zestawu.</param>
        <summary>Ładuje zestaw ze strumienia i powiąże jego nazwę <see cref="T:System.Reflection.MetadataLoadContext" />zestawu z. Jeśli wcześniejszy zestaw o tej samej nazwie został już załadowany do <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedni zestaw.</summary>
        <returns>Załadowany zestaw.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> Przejmuje własność <xref:System.IO.Stream> przekazaną do tej metody. <xref:System.Reflection.MetadataLoadContext> Oryginalny właściciel nie może zmienić jego pozycji, usunąć <xref:System.IO.Stream>lub założyć, że jego pozycja pozostanie niezmieniona.

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">Dwa zestawy nie mają tego samego MVID.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
