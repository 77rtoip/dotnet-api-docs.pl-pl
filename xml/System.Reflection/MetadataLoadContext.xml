<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b6a57dbb5dc6a01c5eba76ff27d3fa458a46188" /><Meta Name="ms.sourcegitcommit" Value="93667418e6e77da6ba7109a407c61b8969cec4ec" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/05/2019" /><Meta Name="ms.locfileid" Value="67571130" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje zamknięte działasz obiekty typu załadowane do celów tylko do inspekcji. Każdy MetadataLoadContext może mieć własne zasady powiązania i jest odizolowana od wszystkich innych MetadataLoadContexts.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

A `MetadataLoadContext` służy jako słownik, który wiąże nazwy zestawu do <xref:System.Reflection.Assembly> wystąpień, które wcześniej zostały załadowane do kontekstu lub muszą być załadowane.

Zestawy są ściśle traktowane jako metadanych. Istnieją ograniczenia dotyczące ładowania zestawów w oparciu o platformę docelową, architektura procesora CPU lub rozmiar wskaźnika. Nie ma żadnych ograniczeń w zestawie, wyznaczony jako zestaw podstawowych (**mscorlib**).

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> wystąpienia.</param>
        <param name="coreAssemblyName">Nazwa zestawu, który zawiera typy podstawowe, takie jak <see cref="T:System.Object" />. Zazwyczaj powinien to być "mscorlib".</param>
        <summary>Tworzy nową <see cref="T:System.Reflection.MetadataLoadContext" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zestaw, który oznacza "assembly systemu", o który przechowuje dobrze znanych typów, takich jak <see cref="T:System.Int32" />.</summary>
        <value><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Zestaw podstawowych jest traktowany inaczej niż inne zestawy, ponieważ odwołania do tych znanych typów nie zawierają odwołanie do zestawu, w odróżnieniu od normalnych typów.
            
Zazwyczaj ten zestaw o nazwie "mscorlib" lub "netstandard". Jeśli nie można odnaleźć zestawu core, wartość będzie `null`, i wiele innych metod odbicia, łącznie z tymi, które przeanalizować podpisy metoda zgłosi wyjątek.
            
`CoreAssembly` Jest określana przez przekazanie `coreAssemblyName` parametr przekazany do <xref:System.Reflection.MetadataAssemblyResolver> Konstruktor <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> metody.

Jeśli nie `coreAssemblyName` argument został określony w Konstruktorze typu <xref:System.Reflection.MetadataLoadContext>, a następnie są używane wartości domyślne, takich jak "mscorlib", "System.Runtime" i "netstandard".
            
Zestaw podstawowych wyznaczonym nie trzeba bezpośrednio zawierają typy podstawowe. Można wpisać Prześlij je dalej do innych zestawów. W związku z tym, doskonale dopuszczalne jest użyć fasady mscorlib jako zestawu wyznaczonym core.
            
Należy pamiętać, że <xref:System.Runtime> nie jest zestawem idealne core, ponieważ niektóre typy związane z interop pseudolosowego niestandardowy atrybut takich jak wyklucza <xref:System.Runtime.InteropServices.DllImportAttribute>. Jednak może służyć, jeśli nie postanowienie te atrybuty. Customattributes — interfejs API pominie te atrybuty, jeśli zestaw podstawowych nie ma potrzeby typów.
            
Zestaw podstawowych nie został załadowany do potrzeb. Następujące funkcje interfejsu API nie wyzwalają Wyszukaj zestaw podstawowych:

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
Jeśli nie można odnaleźć zestawu podstawowych lub zestaw podstawowych brakuje typów, to będzie mieć wpływ na zachowanie <xref:System.Reflection.MetadataLoadContext> w następujący sposób:
            
* Interfejsy API, które należy przeanalizować podpisom lub elementami TypeSpec i zwracają wyniki w postaci <xref:System.Type> obiekty spowoduje zgłoszenie wyjątku. Na przykład:

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty-nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* Interfejsy API, które trzeba porównać typów podstawowych dobrze znanych typów nie spowoduje zgłoszenie wyjątku i obliczenia w celu porównania `false`. Na przykład, jeśli nie określisz zestaw podstawowych <xref:System.Type.IsPrimitive> zwróci `false` wszystko, nawet wtedy, typach o nazwie <xref:System.Int32>. Podobnie <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> zwróci <xref:System.TypeCode.Object> wszystko.
            
* Jeśli jednostka metadanych Ustawia flagi tej powierzchni jako atrybut niestandardowy pseudolosowego i zestaw podstawowych nie zawiera typu atrybutu niestandardowego pseudolosowego niezbędne konstruktora lub dowolnego typu parametru konstruktora, <xref:System.Reflection.MetadataLoadContext> nie zgłosi wyjątku. Będzie on pominąć pseudolosowego niestandardowego atrybutu z listy atrybutów zwracane.
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby natywne (na przykład pliku blokady na pliki zestawów).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Po usuwania, nie jest bezpieczne użyć dowolnego <xref:System.Reflection.Assembly> obiektów pominięte przez <xref:System.Reflection.MetadataLoadContext> lub jakiekolwiek obiekty odbicia pominięte przy użyciu <xref:System.Reflection.Assembly> obiektów.

Chociaż obiekty dostarczane przez <xref:System.Reflection.MetadataLoadContext> wszelkich starań, aby zgłosić <xref:System.ObjectDisposedException>, to nie jest gwarantowana.

Niektóre interfejsy API mogą zwracać ustalony rozmiar lub wcześniej buforowanych danych. Uzyskiwanie dostępu do obiektów *podczas* <xref:System.Reflection.MetadataLoadContext.Dispose%2A> wywołania metody może spowodować naruszenie zasad dostępu niezarządzanych i failfast.
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwróć atomic migawki zestawów, które zostały załadowane do <see cref="T:System.Reflection.MetadataLoadContext" />.</summary>
        <returns>Wyliczalne zbiór <see xref="T:System.Reflection.Assembly" /> obiektów.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><see cref="T:System.Reflection.AssemblyName" /> Wystąpienia.</param>
        <summary>Usuwa nazwę zestawu dostarczony do zestawu. Jeśli zespół był wcześniej powiązany z tej nazwy, zwracany jest tego zestawu. W przeciwnym razie <see cref="T:System.Reflection.MetadataLoadContext" /> wywołuje określony <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
Należy pamiętać, że zachowanie tej metody jest zgodny z zachowaniem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> rozpoznać zdarzenia, ale jest niezgodny z zachowaniem <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>. (Ten ostatni rezygnuje bez zgłaszania zdarzeń jego rozwiązania.)
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Zwraca program rozpoznawania nazw <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">A <see cref="T:System.String" /> reprezentujący nazwę zestawu.</param>
        <summary>Usuwa nazwę zestawu dostarczony do zestawu. Jeśli zespół był wcześniej powiązany z tej nazwy, zwracany jest tego zestawu. W przeciwnym razie <see cref="T:System.Reflection.MetadataLoadContext" /> wywołuje określony <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

Należy pamiętać, że zachowanie tej metody jest zgodny z zachowaniem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> rozpoznać zdarzenia, ale jest niezgodny z zachowaniem <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>. (Ten ostatni rezygnuje bez zgłaszania zdarzeń jego rozwiązania.)

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Zwraca program rozpoznawania nazw <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath">A <see cref="T:System.String" /> reprezentuje ścieżkę do zestawu.</param>
        <summary>Ładuje zestaw z określonej ścieżki na dysku i wiąże go w jego nazwy zestawu <see cref="T:System.Reflection.MetadataLoadContext" />. Jeśli wcześniejsze zestawu o takiej samej nazwie został już załadowany w <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedniego zestawu.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Dwa zestawy nie mają tego samego identyfikatora Mvid.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly">Element <see cref="T:System.Byte[]" /> zawierający zestaw.</param>
        <summary>Ładuje zestaw z tablicy bajtowej i wiąże go w jego nazwy zestawu <see cref="T:System.Reflection.MetadataLoadContext" />. Jeśli wcześniejsze zestawu o takiej samej nazwie został już załadowany w <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedniego zestawu.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Dwa zestawy nie mają tego samego identyfikatora Mvid.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly">Element <see cref="T:System.IO.Stream" /> zawierający zestaw.</param>
        <summary>Ładuje zestaw ze strumienia i wiąże go w jego nazwy zestawu <see cref="T:System.Reflection.MetadataLoadContext" />. Jeśli wcześniejsze zestawu o takiej samej nazwie został już załadowany w <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedniego zestawu.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <xref:System.Reflection.MetadataLoadContext> Przejmuje na własność <xref:System.IO.Stream> przekazany do tej metody. Pierwotny właściciel musi mutować położenia, nie dispose <xref:System.IO.Stream>, lub przyjąć, że jego położenie pozostaną niezmienione.

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">Dwa zestawy nie mają tego samego identyfikatora Mvid.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
