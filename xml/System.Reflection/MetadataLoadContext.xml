<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eece6612c57c7a96a0b5c439c3efee9cbf82f73" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69276170" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="15bbd-101">Reprezentuje zamkniętą część typu obiektów załadowana do celów tylko do inspekcji.</span><span class="sxs-lookup"><span data-stu-id="15bbd-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="15bbd-102">Każdy MetadataLoadContext może mieć własne reguły powiązania i jest odizolowany od wszystkich innych MetadataLoadContexts.</span><span class="sxs-lookup"><span data-stu-id="15bbd-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="15bbd-103">A `MetadataLoadContext` służy jako słownik, który wiąże nazwy zestawów z <xref:System.Reflection.Assembly> wystąpieniami, które zostały wcześniej załadowane do kontekstu lub muszą zostać załadowane.</span><span class="sxs-lookup"><span data-stu-id="15bbd-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="15bbd-104">Zestawy są traktowane jako metadane.</span><span class="sxs-lookup"><span data-stu-id="15bbd-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="15bbd-105">Nie ma żadnych ograniczeń dotyczących ładowania zestawów na podstawie platformy docelowej, architektury procesora lub rozmiaru wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="15bbd-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="15bbd-106">Nie ma żadnych ograniczeń dotyczących zestawu wyznaczono jako zestaw podstawowy (**mscorlib**).</span><span class="sxs-lookup"><span data-stu-id="15bbd-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="15bbd-107"><see cref="T:System.Reflection.MetadataAssemblyResolver" /> Wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="15bbd-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="15bbd-108">Nazwa zestawu, który zawiera typy podstawowe, takie jak <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="15bbd-108">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="15bbd-109">Zwykle jest to "mscorlib".</span><span class="sxs-lookup"><span data-stu-id="15bbd-109">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="15bbd-110">Tworzy nowy <see cref="T:System.Reflection.MetadataLoadContext" /> obiekt.</span><span class="sxs-lookup"><span data-stu-id="15bbd-110">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="15bbd-111">Pobiera lub ustawia zestaw, który oznacza "zestaw systemowy", który jest przeznaczony dla dobrze znanych typów, takich jak <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="15bbd-111">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="15bbd-112"><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="15bbd-112">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="15bbd-113">Podstawowy zestaw jest traktowany inaczej niż inne zestawy, ponieważ odwołania do tych dobrze znanych typów nie zawierają odwołania do zestawu, w przeciwieństwie do typów normalnych.</span><span class="sxs-lookup"><span data-stu-id="15bbd-113">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>
            
<span data-ttu-id="15bbd-114">Zazwyczaj ten zestaw nosi nazwę "mscorlib" lub "standard".</span><span class="sxs-lookup"><span data-stu-id="15bbd-114">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="15bbd-115">Jeśli podstawowy zestaw nie może zostać znaleziony, wartość będzie `null`i wiele innych metod odbicia, w tym tych, które przeanalizują sygnatury metod, spowoduje zgłoszenie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="15bbd-115">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>
            
<span data-ttu-id="15bbd-116">Jest określany przez `coreAssemblyName` przekazanie parametru przekazywanego <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> do <xref:System.Reflection.MetadataAssemblyResolver> konstruktora do metody. `CoreAssembly`</span><span class="sxs-lookup"><span data-stu-id="15bbd-116">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="15bbd-117">Jeśli żaden `coreAssemblyName` argument nie został określony w <xref:System.Reflection.MetadataLoadContext>konstruktorze, są używane wartości domyślne, w tym "mscorlib", "System. Runtime" i "Standard standardowy".</span><span class="sxs-lookup"><span data-stu-id="15bbd-117">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>
            
<span data-ttu-id="15bbd-118">Wydzielony zestaw podstawowy nie musi bezpośrednio zawierać typów podstawowych.</span><span class="sxs-lookup"><span data-stu-id="15bbd-118">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="15bbd-119">Można wpisać je dalej do innych zestawów.</span><span class="sxs-lookup"><span data-stu-id="15bbd-119">It can type forward them to other assemblies.</span></span> <span data-ttu-id="15bbd-120">Z tego względu doskonale można używać biblioteki mscorlib elewacji jako zestawu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="15bbd-120">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>
            
<span data-ttu-id="15bbd-121">Należy zauważyć <xref:System.Runtime> , że nie jest idealnym zestawem podstawowym, ponieważ wyklucza niektóre z niestandardowych typów atrybutów związanych z międzyoperacyjną, takich jak. <xref:System.Runtime.InteropServices.DllImportAttribute></span><span class="sxs-lookup"><span data-stu-id="15bbd-121">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="15bbd-122">Jednak może ona działać, jeśli nie masz zainteresowania z tymi atrybutami.</span><span class="sxs-lookup"><span data-stu-id="15bbd-122">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="15bbd-123">Interfejs API CustomAttributes — pominie te atrybuty, jeśli zestaw podstawowy nie zawiera wymaganych typów.</span><span class="sxs-lookup"><span data-stu-id="15bbd-123">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>
            
<span data-ttu-id="15bbd-124">Zestaw podstawowy nie jest ładowany, dopóki nie jest to konieczne.</span><span class="sxs-lookup"><span data-stu-id="15bbd-124">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="15bbd-125">Następujące interfejsy API nie wyzwalają wyszukiwania zestawu podstawowego:</span><span class="sxs-lookup"><span data-stu-id="15bbd-125">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
<span data-ttu-id="15bbd-126">Jeśli nie można znaleźć podstawowego zestawu lub jeśli w zestawie podstawowym brakuje typów, wpłynie to na zachowanie <xref:System.Reflection.MetadataLoadContext> w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="15bbd-126">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>
            
* <span data-ttu-id="15bbd-127">Interfejsy API, które muszą analizować sygnatury lub typespecs i zwracać wyniki <xref:System.Type> , ponieważ obiekty generują wyjątek.</span><span class="sxs-lookup"><span data-stu-id="15bbd-127">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="15bbd-128">Przykład:</span><span class="sxs-lookup"><span data-stu-id="15bbd-128">For example:</span></span>

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty-nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* <span data-ttu-id="15bbd-129">Interfejsy API, które muszą porównywać typy z dobrze znanymi typami podstawowymi, nie będą zgłaszać wyjątku, a porównanie zostanie `false`oszacowane jako.</span><span class="sxs-lookup"><span data-stu-id="15bbd-129">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="15bbd-130">Na przykład, jeśli nie określisz zestawu podstawowego, <xref:System.Type.IsPrimitive> program zwróci `false` wszystkie typy, nawet o nazwie <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="15bbd-130">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="15bbd-131">Podobnie, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> program zwróci <xref:System.TypeCode.Object> wszystko.</span><span class="sxs-lookup"><span data-stu-id="15bbd-131">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>
            
* <span data-ttu-id="15bbd-132">Jeśli jednostka metadanych ustawia flagi, które są oznaczone jako atrybut pseudo-niestandardowy, a zestaw podstawowy nie zawiera typu atrybutu pseudo-niestandardowego, wymagany Konstruktor lub którykolwiek z typów parametrów konstruktora, <xref:System.Reflection.MetadataLoadContext> nie zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="15bbd-132">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="15bbd-133">Spowoduje to pominięcie atrybutu pseudo-Custom z listy zwracanych atrybutów.</span><span class="sxs-lookup"><span data-stu-id="15bbd-133">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="15bbd-134">Zwalnia wszystkie zasoby natywne (takie jak blokady plików w plikach zestawu).</span><span class="sxs-lookup"><span data-stu-id="15bbd-134">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="15bbd-135">Po usunięciu nie można bezpiecznie używać żadnych <xref:System.Reflection.Assembly> obiektów, które zostały zastąpione <xref:System.Reflection.MetadataLoadContext> przez obiekty lub dowolne odbicie obiektów, które <xref:System.Reflection.Assembly> zostały zastąpione przez te obiekty.</span><span class="sxs-lookup"><span data-stu-id="15bbd-135">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="15bbd-136">Chociaż obiekty udostępniane przez <xref:System.Reflection.MetadataLoadContext> dążenie do <xref:System.ObjectDisposedException>wyrzucania, nie jest to gwarantowane.</span><span class="sxs-lookup"><span data-stu-id="15bbd-136">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="15bbd-137">Niektóre interfejsy API mogą zwracać stałe lub wcześniej buforowane dane.</span><span class="sxs-lookup"><span data-stu-id="15bbd-137">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="15bbd-138">Uzyskiwanie dostępu do <xref:System.Reflection.MetadataLoadContext.Dispose%2A> obiektów *w trakcie* wywołania metody może spowodować niezarządzane naruszenie dostępu i przepełnienie.</span><span class="sxs-lookup"><span data-stu-id="15bbd-138">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="15bbd-139">Zwróć niepodzielną migawkę zestawów, które zostały załadowane do <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="15bbd-139">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="15bbd-140">Wyliczalna kolekcja <see xref="T:System.Reflection.Assembly" /> obiektów.</span><span class="sxs-lookup"><span data-stu-id="15bbd-140">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="15bbd-141"><see cref="T:System.Reflection.AssemblyName" /> Wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="15bbd-141">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="15bbd-142">Rozpoznaje podaną nazwę zestawu do zestawu.</span><span class="sxs-lookup"><span data-stu-id="15bbd-142">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="15bbd-143">Jeśli zestaw został wcześniej powiązany z tą nazwą, ten zestaw jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="15bbd-143">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="15bbd-144">W przeciwnym razie <see cref="T:System.Reflection.MetadataAssemblyResolver" />wywołuje określony. <see cref="T:System.Reflection.MetadataLoadContext" /></span><span class="sxs-lookup"><span data-stu-id="15bbd-144">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="15bbd-145"><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="15bbd-145">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="15bbd-146">Należy zauważyć, że zachowanie tej metody jest zgodne z zachowaniem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> zdarzenia Rozwiązuj, ale nie jest zgodne z <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>zachowaniem.</span><span class="sxs-lookup"><span data-stu-id="15bbd-146">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="15bbd-147">(Ostatnia z nich nie powoduje ponoszenia zdarzenia rozwiązania).</span><span class="sxs-lookup"><span data-stu-id="15bbd-147">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="15bbd-148">Program rozpoznawania nazw <see langword="null" />zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="15bbd-148">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="15bbd-149"><see cref="T:System.String" /> Reprezentujący nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="15bbd-149">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="15bbd-150">Rozpoznaje podaną nazwę zestawu do zestawu.</span><span class="sxs-lookup"><span data-stu-id="15bbd-150">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="15bbd-151">Jeśli zestaw został wcześniej powiązany z tą nazwą, ten zestaw jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="15bbd-151">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="15bbd-152">W przeciwnym razie <see cref="T:System.Reflection.MetadataAssemblyResolver" />wywołuje określony. <see cref="T:System.Reflection.MetadataLoadContext" /></span><span class="sxs-lookup"><span data-stu-id="15bbd-152">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="15bbd-153"><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="15bbd-153">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

<span data-ttu-id="15bbd-154">Należy zauważyć, że zachowanie tej metody jest zgodne z zachowaniem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> zdarzenia Rozwiązuj, ale nie jest zgodne z <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>zachowaniem.</span><span class="sxs-lookup"><span data-stu-id="15bbd-154">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="15bbd-155">(Ostatnia z nich nie powoduje ponoszenia zdarzenia rozwiązania).</span><span class="sxs-lookup"><span data-stu-id="15bbd-155">(The latter gives up without raising its resolve event.)</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="15bbd-156">Program rozpoznawania nazw <see langword="null" />zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="15bbd-156">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="15bbd-157"><see cref="T:System.String" /> Reprezentujący ścieżkę do zestawu.</span><span class="sxs-lookup"><span data-stu-id="15bbd-157">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="15bbd-158">Ładuje zestaw z określonej ścieżki na dysku i wiąże jego nazwę <see cref="T:System.Reflection.MetadataLoadContext" />zestawu z.</span><span class="sxs-lookup"><span data-stu-id="15bbd-158">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="15bbd-159">Jeśli wcześniejszy zestaw o tej samej nazwie został już załadowany do <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedni zestaw.</span><span class="sxs-lookup"><span data-stu-id="15bbd-159">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="15bbd-160"><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="15bbd-160">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="15bbd-161">Dwa zestawy nie mają tego samego MVID.</span><span class="sxs-lookup"><span data-stu-id="15bbd-161">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="15bbd-162"><see cref="T:System.Byte[]" /> Posiadanie zestawu.</span><span class="sxs-lookup"><span data-stu-id="15bbd-162">A <see cref="T:System.Byte[]" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="15bbd-163">Ładuje zestaw z tablicy bajtów i powiąże jego nazwę <see cref="T:System.Reflection.MetadataLoadContext" />zestawu z.</span><span class="sxs-lookup"><span data-stu-id="15bbd-163">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="15bbd-164">Jeśli wcześniejszy zestaw o tej samej nazwie został już załadowany do <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedni zestaw.</span><span class="sxs-lookup"><span data-stu-id="15bbd-164">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="15bbd-165"><see cref="T:System.Reflection.Assembly" /> Wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="15bbd-165">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="15bbd-166">Dwa zestawy nie mają tego samego MVID.</span><span class="sxs-lookup"><span data-stu-id="15bbd-166">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="15bbd-167"><see cref="T:System.IO.Stream" /> Posiadanie zestawu.</span><span class="sxs-lookup"><span data-stu-id="15bbd-167">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="15bbd-168">Ładuje zestaw ze strumienia i powiąże jego nazwę <see cref="T:System.Reflection.MetadataLoadContext" />zestawu z.</span><span class="sxs-lookup"><span data-stu-id="15bbd-168">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="15bbd-169">Jeśli wcześniejszy zestaw o tej samej nazwie został już załadowany do <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedni zestaw.</span><span class="sxs-lookup"><span data-stu-id="15bbd-169">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="15bbd-170">Załadowany zestaw.</span><span class="sxs-lookup"><span data-stu-id="15bbd-170">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="15bbd-171">Przejmuje własność <xref:System.IO.Stream> przekazaną do tej metody. <xref:System.Reflection.MetadataLoadContext></span><span class="sxs-lookup"><span data-stu-id="15bbd-171">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="15bbd-172">Oryginalny właściciel nie może zmienić jego pozycji, usunąć <xref:System.IO.Stream>lub założyć, że jego pozycja pozostanie niezmieniona.</span><span class="sxs-lookup"><span data-stu-id="15bbd-172">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="15bbd-173">Dwa zestawy nie mają tego samego MVID.</span><span class="sxs-lookup"><span data-stu-id="15bbd-173">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
