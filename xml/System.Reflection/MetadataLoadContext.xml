<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b6a57dbb5dc6a01c5eba76ff27d3fa458a46188" /><Meta Name="ms.sourcegitcommit" Value="93667418e6e77da6ba7109a407c61b8969cec4ec" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/05/2019" /><Meta Name="ms.locfileid" Value="67571130" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="f8082-101">Reprezentuje zamknięte działasz obiekty typu załadowane do celów tylko do inspekcji.</span><span class="sxs-lookup"><span data-stu-id="f8082-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="f8082-102">Każdy MetadataLoadContext może mieć własne zasady powiązania i jest odizolowana od wszystkich innych MetadataLoadContexts.</span><span class="sxs-lookup"><span data-stu-id="f8082-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="f8082-103">A `MetadataLoadContext` służy jako słownik, który wiąże nazwy zestawu do <xref:System.Reflection.Assembly> wystąpień, które wcześniej zostały załadowane do kontekstu lub muszą być załadowane.</span><span class="sxs-lookup"><span data-stu-id="f8082-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="f8082-104">Zestawy są ściśle traktowane jako metadanych.</span><span class="sxs-lookup"><span data-stu-id="f8082-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="f8082-105">Istnieją ograniczenia dotyczące ładowania zestawów w oparciu o platformę docelową, architektura procesora CPU lub rozmiar wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="f8082-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="f8082-106">Nie ma żadnych ograniczeń w zestawie, wyznaczony jako zestaw podstawowych (**mscorlib**).</span><span class="sxs-lookup"><span data-stu-id="f8082-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="f8082-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="f8082-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="f8082-108">Nazwa zestawu, który zawiera typy podstawowe, takie jak <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-108">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="f8082-109">Zazwyczaj powinien to być "mscorlib".</span><span class="sxs-lookup"><span data-stu-id="f8082-109">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="f8082-110">Tworzy nową <see cref="T:System.Reflection.MetadataLoadContext" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="f8082-110">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f8082-111">Pobiera lub ustawia zestaw, który oznacza "assembly systemu", o który przechowuje dobrze znanych typów, takich jak <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-111">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="f8082-112"><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="f8082-112">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f8082-113">Zestaw podstawowych jest traktowany inaczej niż inne zestawy, ponieważ odwołania do tych znanych typów nie zawierają odwołanie do zestawu, w odróżnieniu od normalnych typów.</span><span class="sxs-lookup"><span data-stu-id="f8082-113">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>
            
<span data-ttu-id="f8082-114">Zazwyczaj ten zestaw o nazwie "mscorlib" lub "netstandard".</span><span class="sxs-lookup"><span data-stu-id="f8082-114">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="f8082-115">Jeśli nie można odnaleźć zestawu core, wartość będzie `null`, i wiele innych metod odbicia, łącznie z tymi, które przeanalizować podpisy metoda zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="f8082-115">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>
            
<span data-ttu-id="f8082-116">`CoreAssembly` Jest określana przez przekazanie `coreAssemblyName` parametr przekazany do <xref:System.Reflection.MetadataAssemblyResolver> Konstruktor <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="f8082-116">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="f8082-117">Jeśli nie `coreAssemblyName` argument został określony w Konstruktorze typu <xref:System.Reflection.MetadataLoadContext>, a następnie są używane wartości domyślne, takich jak "mscorlib", "System.Runtime" i "netstandard".</span><span class="sxs-lookup"><span data-stu-id="f8082-117">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>
            
<span data-ttu-id="f8082-118">Zestaw podstawowych wyznaczonym nie trzeba bezpośrednio zawierają typy podstawowe.</span><span class="sxs-lookup"><span data-stu-id="f8082-118">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="f8082-119">Można wpisać Prześlij je dalej do innych zestawów.</span><span class="sxs-lookup"><span data-stu-id="f8082-119">It can type forward them to other assemblies.</span></span> <span data-ttu-id="f8082-120">W związku z tym, doskonale dopuszczalne jest użyć fasady mscorlib jako zestawu wyznaczonym core.</span><span class="sxs-lookup"><span data-stu-id="f8082-120">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>
            
<span data-ttu-id="f8082-121">Należy pamiętać, że <xref:System.Runtime> nie jest zestawem idealne core, ponieważ niektóre typy związane z interop pseudolosowego niestandardowy atrybut takich jak wyklucza <xref:System.Runtime.InteropServices.DllImportAttribute>.</span><span class="sxs-lookup"><span data-stu-id="f8082-121">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="f8082-122">Jednak może służyć, jeśli nie postanowienie te atrybuty.</span><span class="sxs-lookup"><span data-stu-id="f8082-122">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="f8082-123">Customattributes — interfejs API pominie te atrybuty, jeśli zestaw podstawowych nie ma potrzeby typów.</span><span class="sxs-lookup"><span data-stu-id="f8082-123">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>
            
<span data-ttu-id="f8082-124">Zestaw podstawowych nie został załadowany do potrzeb.</span><span class="sxs-lookup"><span data-stu-id="f8082-124">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="f8082-125">Następujące funkcje interfejsu API nie wyzwalają Wyszukaj zestaw podstawowych:</span><span class="sxs-lookup"><span data-stu-id="f8082-125">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
<span data-ttu-id="f8082-126">Jeśli nie można odnaleźć zestawu podstawowych lub zestaw podstawowych brakuje typów, to będzie mieć wpływ na zachowanie <xref:System.Reflection.MetadataLoadContext> w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="f8082-126">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>
            
* <span data-ttu-id="f8082-127">Interfejsy API, które należy przeanalizować podpisom lub elementami TypeSpec i zwracają wyniki w postaci <xref:System.Type> obiekty spowoduje zgłoszenie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="f8082-127">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="f8082-128">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="f8082-128">For example:</span></span>

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty-nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* <span data-ttu-id="f8082-129">Interfejsy API, które trzeba porównać typów podstawowych dobrze znanych typów nie spowoduje zgłoszenie wyjątku i obliczenia w celu porównania `false`.</span><span class="sxs-lookup"><span data-stu-id="f8082-129">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="f8082-130">Na przykład, jeśli nie określisz zestaw podstawowych <xref:System.Type.IsPrimitive> zwróci `false` wszystko, nawet wtedy, typach o nazwie <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="f8082-130">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="f8082-131">Podobnie <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> zwróci <xref:System.TypeCode.Object> wszystko.</span><span class="sxs-lookup"><span data-stu-id="f8082-131">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>
            
* <span data-ttu-id="f8082-132">Jeśli jednostka metadanych Ustawia flagi tej powierzchni jako atrybut niestandardowy pseudolosowego i zestaw podstawowych nie zawiera typu atrybutu niestandardowego pseudolosowego niezbędne konstruktora lub dowolnego typu parametru konstruktora, <xref:System.Reflection.MetadataLoadContext> nie zgłosi wyjątku.</span><span class="sxs-lookup"><span data-stu-id="f8082-132">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="f8082-133">Będzie on pominąć pseudolosowego niestandardowego atrybutu z listy atrybutów zwracane.</span><span class="sxs-lookup"><span data-stu-id="f8082-133">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8082-134">Zwalnia wszystkie zasoby natywne (na przykład pliku blokady na pliki zestawów).</span><span class="sxs-lookup"><span data-stu-id="f8082-134">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="f8082-135">Po usuwania, nie jest bezpieczne użyć dowolnego <xref:System.Reflection.Assembly> obiektów pominięte przez <xref:System.Reflection.MetadataLoadContext> lub jakiekolwiek obiekty odbicia pominięte przy użyciu <xref:System.Reflection.Assembly> obiektów.</span><span class="sxs-lookup"><span data-stu-id="f8082-135">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="f8082-136">Chociaż obiekty dostarczane przez <xref:System.Reflection.MetadataLoadContext> wszelkich starań, aby zgłosić <xref:System.ObjectDisposedException>, to nie jest gwarantowana.</span><span class="sxs-lookup"><span data-stu-id="f8082-136">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="f8082-137">Niektóre interfejsy API mogą zwracać ustalony rozmiar lub wcześniej buforowanych danych.</span><span class="sxs-lookup"><span data-stu-id="f8082-137">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="f8082-138">Uzyskiwanie dostępu do obiektów *podczas* <xref:System.Reflection.MetadataLoadContext.Dispose%2A> wywołania metody może spowodować naruszenie zasad dostępu niezarządzanych i failfast.</span><span class="sxs-lookup"><span data-stu-id="f8082-138">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8082-139">Zwróć atomic migawki zestawów, które zostały załadowane do <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-139">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="f8082-140">Wyliczalne zbiór <see xref="T:System.Reflection.Assembly" /> obiektów.</span><span class="sxs-lookup"><span data-stu-id="f8082-140">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="f8082-141"><see cref="T:System.Reflection.AssemblyName" /> Wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="f8082-141">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="f8082-142">Usuwa nazwę zestawu dostarczony do zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-142">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="f8082-143">Jeśli zespół był wcześniej powiązany z tej nazwy, zwracany jest tego zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-143">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="f8082-144">W przeciwnym razie <see cref="T:System.Reflection.MetadataLoadContext" /> wywołuje określony <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-144">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="f8082-145"><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="f8082-145">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="f8082-146">Należy pamiętać, że zachowanie tej metody jest zgodny z zachowaniem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> rozpoznać zdarzenia, ale jest niezgodny z zachowaniem <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f8082-146">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f8082-147">(Ten ostatni rezygnuje bez zgłaszania zdarzeń jego rozwiązania.)</span><span class="sxs-lookup"><span data-stu-id="f8082-147">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f8082-148">Zwraca program rozpoznawania nazw <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-148">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="f8082-149">A <see cref="T:System.String" /> reprezentujący nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-149">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="f8082-150">Usuwa nazwę zestawu dostarczony do zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-150">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="f8082-151">Jeśli zespół był wcześniej powiązany z tej nazwy, zwracany jest tego zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-151">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="f8082-152">W przeciwnym razie <see cref="T:System.Reflection.MetadataLoadContext" /> wywołuje określony <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-152">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="f8082-153"><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="f8082-153">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

<span data-ttu-id="f8082-154">Należy pamiętać, że zachowanie tej metody jest zgodny z zachowaniem <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> rozpoznać zdarzenia, ale jest niezgodny z zachowaniem <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f8082-154">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f8082-155">(Ten ostatni rezygnuje bez zgłaszania zdarzeń jego rozwiązania.)</span><span class="sxs-lookup"><span data-stu-id="f8082-155">(The latter gives up without raising its resolve event.)</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f8082-156">Zwraca program rozpoznawania nazw <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-156">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="f8082-157">A <see cref="T:System.String" /> reprezentuje ścieżkę do zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-157">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="f8082-158">Ładuje zestaw z określonej ścieżki na dysku i wiąże go w jego nazwy zestawu <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-158">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="f8082-159">Jeśli wcześniejsze zestawu o takiej samej nazwie został już załadowany w <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedniego zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-159">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="f8082-160"><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="f8082-160">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="f8082-161">Dwa zestawy nie mają tego samego identyfikatora Mvid.</span><span class="sxs-lookup"><span data-stu-id="f8082-161">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="f8082-162">Element <see cref="T:System.Byte[]" /> zawierający zestaw.</span><span class="sxs-lookup"><span data-stu-id="f8082-162">A <see cref="T:System.Byte[]" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="f8082-163">Ładuje zestaw z tablicy bajtowej i wiąże go w jego nazwy zestawu <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-163">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="f8082-164">Jeśli wcześniejsze zestawu o takiej samej nazwie został już załadowany w <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedniego zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-164">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="f8082-165"><see cref="T:System.Reflection.Assembly" /> Wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="f8082-165">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="f8082-166">Dwa zestawy nie mają tego samego identyfikatora Mvid.</span><span class="sxs-lookup"><span data-stu-id="f8082-166">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="f8082-167">Element <see cref="T:System.IO.Stream" /> zawierający zestaw.</span><span class="sxs-lookup"><span data-stu-id="f8082-167">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="f8082-168">Ładuje zestaw ze strumienia i wiąże go w jego nazwy zestawu <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="f8082-168">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="f8082-169">Jeśli wcześniejsze zestawu o takiej samej nazwie został już załadowany w <see cref="T:System.Reflection.MetadataLoadContext" />, zostanie zwrócony poprzedniego zestawu.</span><span class="sxs-lookup"><span data-stu-id="f8082-169">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="f8082-170"><xref:System.Reflection.MetadataLoadContext> Przejmuje na własność <xref:System.IO.Stream> przekazany do tej metody.</span><span class="sxs-lookup"><span data-stu-id="f8082-170">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="f8082-171">Pierwotny właściciel musi mutować położenia, nie dispose <xref:System.IO.Stream>, lub przyjąć, że jego położenie pozostaną niezmienione.</span><span class="sxs-lookup"><span data-stu-id="f8082-171">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="f8082-172">Dwa zestawy nie mają tego samego identyfikatora Mvid.</span><span class="sxs-lookup"><span data-stu-id="f8082-172">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
