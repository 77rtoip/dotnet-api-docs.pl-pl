<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyInfo.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5938c9dbaa20ead9dda7c3ac22b41168c0fe93a5c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">938c9dbaa20ead9dda7c3ac22b41168c0fe93a5c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Discovers the attributes of a property and provides access to property metadata.</source>
          <target state="translated">Umożliwia odnalezienie atrybuty właściwości i udostępnia metadane właściwości.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties are logically the same as fields.</source>
          <target state="translated">Właściwości logicznie są takie same jak pól.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>A property is a named aspect of an object's state whose value is typically accessible through <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors.</source>
          <target state="translated">Właściwość jest nazwane aspektów stanu obiektu, którego wartość jest zazwyczaj dostępna za pośrednictwem <ph id="ph1">`get`</ph> i <ph id="ph2">`set`</ph> metody dostępu.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties may be read-only, in which case a set routine is not supported.</source>
          <target state="translated">Właściwości mogą być tylko do odczytu, w którym to przypadku procedury zestaw nie jest obsługiwane.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>To determine whether a property is <ph id="ph1">`static`</ph>, you must obtain the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph3">`get`</ph> or <ph id="ph4">`set`</ph> accessor, by calling the <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> or the <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> method, and examine its <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> property.</source>
          <target state="translated">Aby określić, czy właściwość jest <ph id="ph1">`static`</ph>, należy uzyskać <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> dla <ph id="ph3">`get`</ph> lub <ph id="ph4">`set`</ph> przez wywołanie metody dostępu <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> lub <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> metody i sprawdź, czy jego <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Several methods in this class assume that the <ph id="ph1">`get`</ph> accessor and <ph id="ph2">`set`</ph> accessor methods of a property have certain formats.</source>
          <target state="translated">Kilka metod w tej klasie przyjęto założenie, że <ph id="ph1">`get`</ph> metody dostępu i <ph id="ph2">`set`</ph> określonych formatów ma metody dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The signatures of the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must match the following convention:</source>
          <target state="translated">Podpisy <ph id="ph1">`get`</ph> i <ph id="ph2">`set`</ph> metody muszą być zgodne z następującą konwencją:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The return type of the <ph id="ph1">`get`</ph> method and the last argument of the <ph id="ph2">`set`</ph> method must be identical.</source>
          <target state="translated">Zwracany typ <ph id="ph1">`get`</ph> — metoda i ostatni argument <ph id="ph2">`set`</ph> metody muszą być takie same.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This is the type of the property.</source>
          <target state="translated">Jest to typ właściwości.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must have the same number, type, and order of indices.</source>
          <target state="translated"><ph id="ph1">`get`</ph> i <ph id="ph2">`set`</ph> metody musi mieć numer, typ i kolejność indeksów.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>If this format is not followed, the behavior of the <ph id="ph1">`GetValue`</ph> and <ph id="ph2">`SetValue`</ph> methods is undefined.</source>
          <target state="translated">Jeśli ten format nie jest zakończony, zachowanie <ph id="ph1">`GetValue`</ph> i <ph id="ph2">`SetValue`</ph> metody jest niezdefiniowana.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`PropertyInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">Wywoływanie <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> na <ph id="ph2">`PropertyInfo`</ph> podczas <ph id="ph3">`inherit`</ph> parametr <ph id="ph4">`GetCustomAttributes`</ph> jest <ph id="ph5">`true`</ph> nie zawiera hierarchii typów.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> dziedziczy atrybuty niestandardowe.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">W tym przykładzie pokazano, jak używać różnych klas odbicia do analizowania metadanych zawarty w zestawie.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: <bpt id="p1">**</bpt>example.exe &gt; propertyinfo.txt<ept id="p1">**</ept></source>
          <target state="translated">W tym przykładzie generuje około 55,000 wiersze danych, który można przekierować do pliku tekstowego w wierszu polecenia w następujący sposób: <bpt id="p1">**</bpt>example.exe &gt; propertyinfo.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">aby uzyskać pełne zaufanie dla obiektów dziedziczących.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Klasa ta nie może być dziedziczona przez kod częściowo zaufany.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Ten typ jest bezpieczny wątkowo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</source>
          <target state="translated">Przy dziedziczeniu z <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, konieczne jest przesłonięcie następujących członków: <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, i <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Gets the attributes for this property.</source>
          <target state="translated">Pobiera atrybuty dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes of this property.</source>
          <target state="translated">Atrybuty tej właściwości.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property returns the attributes associated with the property represented by this <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> Właściwość zwraca atrybuty skojarzone z właściwości reprezentowanej przez to <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a <ph id="ph1">`SpecialName`</ph> property, and so on.</source>
          <target state="translated">Atrybuty są głównie Modyfikatory stosowane przez kompilatora podczas tworzenia właściwości; wskazują, czy właściwość jest właściwością domyślną <ph id="ph1">`SpecialName`</ph> właściwości i tak dalej.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Note that, for almost all properties found in types in the .NET Framework class library, the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property is <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Należy zauważyć, że dla prawie wszystkich właściwości znalezionych w typach w bibliotece klas programu .NET Framework, wartość <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> jest właściwość <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>In most cases, you probably want to retrieve the custom attributes associated with a property.</source>
          <target state="translated">W większości przypadków prawdopodobnie chcesz pobrać niestandardowe atrybuty powiązane z właściwością.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To do this, retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> property, or call one of the overloads of the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method.</source>
          <target state="translated">Aby to zrobić, należy pobrać wartość <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> właściwość lub wywołanie jednego z przeciążeń <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property:</source>
          <target state="translated">Aby uzyskać <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> właściwości:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type to which the property belongs.</source>
          <target state="translated">Pobierz <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje typ, do którego należy właściwość.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object by calling an overload of the <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pobierz <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu przez wywołanie metody przeciążenia <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Retrieve the property's attributes from the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">Pobierz atrybuty właściwości z <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> method and supplying a value for the <ph id="ph2">`attributes`</ph> argument.</source>
          <target state="translated">Można zdefiniować atrybutów właściwości dla typu utworzony dynamicznie przy użyciu odbicia Emituj wywołując przeciążenia <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> — metoda i podanie wartości dla <ph id="ph2">`attributes`</ph> argumentu.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>Gets a value indicating whether the property can be read.</source>
          <target state="translated">Pobiera wartość wskazującą, czy właściwość może zostać odczytany.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ta właściwość może zostać odczytany; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>If the property does not have a <ph id="ph1">`get`</ph> accessor, it cannot be read.</source>
          <target state="translated">Jeśli nie ma właściwości <ph id="ph1">`get`</ph> dostępu, nie może być odczytać.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>To get the <ph id="ph1">`CanRead`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">`CanRead`</ph> właściwość, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`CanRead`</ph> value.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, Pobierz <ph id="ph2">`CanRead`</ph> wartość.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The following example defines two properties.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano dwie właściwości.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The first property is readable and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Pierwszą właściwością jest możliwy do odczytu i <ph id="ph1">`CanRead`</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The second property is not readable (there is no get accessor), and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Druga właściwość nie jest do odczytu (jest nie metody dostępu get) i <ph id="ph1">`CanRead`</ph> jest właściwość <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Gets a value indicating whether the property can be written to.</source>
          <target state="translated">Pobiera wartość wskazującą, czy właściwość może być zapisywane.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be written to; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ta właściwość może zostać zapisana na; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> returns <ph id="ph2">`true`</ph> if the property has a <ph id="ph3">`set`</ph> accessor, even if the accessor is <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (or <ph id="ph6">`Friend`</ph> in Visual Basic), or <ph id="ph7">`protected`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> Zwraca <ph id="ph2">`true`</ph> Jeśli właściwość ma <ph id="ph3">`set`</ph> dostępu, nawet jeśli jest akcesor <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (lub <ph id="ph6">`Friend`</ph> w języku Visual Basic), lub <ph id="ph7">`protected`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>If the property does not have a <ph id="ph1">`set`</ph> accessor, the method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Jeśli nie ma właściwości <ph id="ph1">`set`</ph> dostępu, metoda zwraca <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>To get the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property:</source>
          <target state="translated">Aby uzyskać wartość <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> właściwości:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Get the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object of the type that includes the property.</source>
          <target state="translated">Pobierz <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiektu typu, który zawiera właściwości.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Call the <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> to get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> uzyskanie <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiekt, który reprezentuje właściwość.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">Pobrać wartość <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The following example defines two properties.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano dwie właściwości.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The first property is writable and the <ph id="ph1">`CanWrite`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Pierwszą właściwością jest zapisywalny i <ph id="ph1">`CanWrite`</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The second property is not writable (there is no <ph id="ph1">`set`</ph> accessor), and the <ph id="ph2">`CanWrite`</ph> property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Druga właściwość nie jest zapisywalny (Brak nie <ph id="ph1">`set`</ph> akcesor) i <ph id="ph2">`CanWrite`</ph> jest właściwość <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt do porównania z tym wystąpieniem lub <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals, typ i wartość tego wystąpienia; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns an array of the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors on this property.</source>
          <target state="translated">Zwraca tablicę <ph id="ph1">&lt;see langword="get" /&gt;</ph> i <ph id="ph2">&lt;see langword="set" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Returns an array whose elements reflect the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Zwraca tablicę, której elementy odzwierciedlają publicznego <ph id="ph1">&lt;see langword="get" /&gt;</ph> i <ph id="ph2">&lt;see langword="set" /&gt;</ph> metody dostępu właściwości odzwierciedlone przez bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects that reflect the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> and <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> obiektów, które odzwierciedlać publicznego <ph id="ph2">&lt;see langword="get" /&gt;</ph> i <ph id="ph3">&lt;see langword="set" /&gt;</ph> metody dostępu właściwości odzwierciedlone przez bieżące wystąpienie, jeśli znaleziono; w przeciwnym razie ta metoda zwraca wartość zero (0) elementów tablicy.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">Aby wywołać <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> metody:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Pobierz <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje klasę.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiektów, Pobierz <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiekt, należy wywołać <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>The following example retrieves the public accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">Poniższy przykład pobiera publicznego metod dostępu <ph id="ph1">`ClassWithProperty.Caption`</ph> właściwości i wyświetla informacje o nich.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">Wywołuje również <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> metody ustawiającej można ustawić wartości właściwości i metody pobierającej można pobrać wartości właściwości.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Indicates whether non-public methods should be returned in the returned array.</source>
          <target state="translated">Wskazuje, czy metody niepublicznej powinny być zwracane w zwróconej tablicy.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli metody niepublicznej mają zostać uwzględnione; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Returns an array whose elements reflect the public and, if specified, non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Zwraca tablicę, której elementy odzwierciedlają publicznego i, jeśli jest określony, niepublicznych <ph id="ph1">&lt;see langword="get" /&gt;</ph> i <ph id="ph2">&lt;see langword="set" /&gt;</ph> metody dostępu właściwości odzwierciedlone przez bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>An array whose elements reflect the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Tablica której elementy odzwierciedlają <ph id="ph1">&lt;see langword="get" /&gt;</ph> i <ph id="ph2">&lt;see langword="set" /&gt;</ph> metody dostępu właściwości odzwierciedlone przez bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, this array contains public and non-public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> jest <ph id="ph2">&lt;see langword="true" /&gt;</ph>, ta tablica zawiera publicznego i niepublicznych <ph id="ph3">&lt;see langword="get" /&gt;</ph> i <ph id="ph4">&lt;see langword="set" /&gt;</ph> metody dostępu.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>, this array contains only public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> jest <ph id="ph2">&lt;see langword="false" /&gt;</ph>, to tablica zawiera tylko publiczne <ph id="ph3">&lt;see langword="get" /&gt;</ph> i <ph id="ph4">&lt;see langword="set" /&gt;</ph> metody dostępu.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</source>
          <target state="translated">Jeśli nie zostaną znalezione nie metod dostępu z określonym widoczność, ta metoda zwraca tablicę z zero (0) elementów.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">Aby wywołać <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> metody:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Pobierz <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje klasę.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiektów, Pobierz <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiekt, należy wywołać <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>The following example retrieves the accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">Poniższy przykład pobiera metod dostępu z <ph id="ph1">`ClassWithProperty.Caption`</ph> właściwości i wyświetla informacje o nich.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">Wywołuje również <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> metody ustawiającej można ustawić wartości właściwości i metody pobierającej można pobrać wartości właściwości.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">Zwraca wartość literału skojarzony z właściwością przez kompilator.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Zawiera wartość literału skojarzony z właściwością.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeśli wartość literału jest typ klasy z wartością elementu o wartości zero, jest zwracana wartość <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Ta metoda jest dostępna dla projektantów kompilatory zarządzanych i analizatorów kodu.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Do not use this method in the reflection-only context, because it might cause code to execute.</source>
          <target state="translated">Nie należy używać tej metody w kontekstu reflection-only, ponieważ może spowodować, że kod do wykonania.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> method instead.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> metody zamiast tego.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">W metadanych niezarządzane stałej tabela jest używana do przechowywania wartości stałych pól, parametrów i właściwości.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Informacje o stałej nie wpływają bezpośrednio zachowania w czasie wykonywania.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">Kompilatory sprawdzić te informacje w czasie kompilacji podczas importowania metadanych.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Jeśli używany, wartość stałą jest osadzony w strumieniu język pośredni (MSIL) firmy Microsoft, które kompilator emituje.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">Nie ma żadnych instrukcji MSIL, które mogą służyć do dostępu do tabeli stałej w czasie wykonywania.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Więcej informacji o stałej tabeli i wartości stałych znajduje się w dokumentacji ECMA II partycji.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Dokumentacja jest dostępna w trybie online; zobacz <bpt id="p1">[</bpt>ECMA C# i wspólne normy infrastruktury języka<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> w witrynie MSDN i <bpt id="p2">[</bpt>standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> w witrynie sieci Web międzynarodowej Ecma.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">Stałe tabeli w niezarządzanych metadanych nie zawiera wartości stałej dla bieżącej właściwości.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">Typ wartości nie jest jednym z typów dopuszczonych wspólnej specyfikacji języka (CLS).</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>See the ECMA Partition II specification, Metadata.</source>
          <target state="translated">Zobacz specyfikację II partycji ECMA metadanych.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="get" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Zwraca publicznego <ph id="ph1">&lt;see langword="get" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public or does not exist.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> obiekt reprezentujący publicznego <ph id="ph2">&lt;see langword="get" /&gt;</ph> metody dostępu dla tej właściwości lub <ph id="ph3">&lt;see langword="null" /&gt;</ph> Jeśli <ph id="ph4">&lt;see langword="get" /&gt;</ph> metody dostępu jest niepublicznego lub nie istnieje.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetGetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Jest to metoda wygody, który zawiera implementację klasy abstrakcyjnej <ph id="ph1">`GetGetMethod`</ph> metody z <ph id="ph2">`nonPublic`</ph> ustawiono parametr <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby użyć <ph id="ph1">`GetGetMethod`</ph> metody, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, użyj <ph id="ph2">`GetGetMethod`</ph> metody.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Indicates whether a non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor should be returned.</source>
          <target state="translated">Wskazuje, czy niepublicznych <ph id="ph1">&lt;see langword="get" /&gt;</ph> akcesor ma zostać zwrócony.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli akcesor niepubliczne, jest zwracana; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the public or non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej zwraca publicznego lub niepubliczne <ph id="ph1">&lt;see langword="get" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, if <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> reprezentujący obiekt <ph id="ph2">&lt;see langword="get" /&gt;</ph> metody dostępu dla tej właściwości, jeśli <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> jest <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> and the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public, or if <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph6">&lt;see langword="true" /&gt;</ph> but no <ph id="ph7">&lt;see langword="get" /&gt;</ph> accessors exist.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see langword="null" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> jest <ph id="ph3">&lt;see langword="false" /&gt;</ph> i <ph id="ph4">&lt;see langword="get" /&gt;</ph> akcesor jest niepubliczne, lub jeśli <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> jest <ph id="ph6">&lt;see langword="true" /&gt;</ph> , lecz nie <ph id="ph7">&lt;see langword="get" /&gt;</ph> istnieje metody dostępu.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>This property is the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> representing the get accessor.</source>
          <target state="translated">Ta właściwość jest <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący metody dostępu get.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby użyć <ph id="ph1">`GetGetMethod`</ph> metody, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, użyj <ph id="ph2">`GetGetMethod`</ph> metody.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The following example displays the public or non-public <ph id="ph1">`get`</ph> accessor for the specified property.</source>
          <target state="translated">W poniższym przykładzie przedstawiono publicznego lub niepubliczne <ph id="ph1">`get`</ph> akcesora dla określonej właściwości.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">Żądana metoda jest niepubliczne, a obiekt wywołujący nie ma <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> do uwzględnienia w tej metodzie niepubliczne.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Zwraca kod skrótu dla tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>When overridden in a derived class, returns an array of all the index parameters for the property.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej zwraca tablicę wszystkich parametrów indeksu dla właściwości.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> containing the parameters for the indexes.</source>
          <target state="translated">Tablica typu <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> zawierających parametry dla indeksów.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>If the property is not indexed, the array has 0 (zero) elements.</source>
          <target state="translated">Jeśli właściwość nie jest indeksowana, tablica ma 0 (zero) elementów.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Extract any required parameter information from the returned array.</source>
          <target state="translated">Wyodrębnij wszelkie wymagane parametry z zwróconej tablicy.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>To use the <ph id="ph1">`GetIndexParameters`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby użyć <ph id="ph1">`GetIndexParameters`</ph> metody, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetIndexParameters`</ph> method.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, użyj <ph id="ph2">`GetIndexParameters`</ph> metody.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>The following example displays the index parameters of the specified property.</source>
          <target state="translated">W poniższym przykładzie przedstawiono parametry indeks określonej właściwości.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see langword="get" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>The <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="get" /&gt;</ph> Metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>Returns an array of types representing the optional custom modifiers of the property.</source>
          <target state="translated">Zwraca tablicę typy reprezentujące opcjonalne Modyfikatory niestandardowej właściwości.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektów, które takie jak zidentyfikować opcjonalne Modyfikatory niestandardowych bieżącej właściwości <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> lub <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> metody są udostępniane dla projektantów kompilatory zarządzanych.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Aby uzyskać więcej informacji na Modyfikatory niestandardowych, zobacz <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> i powiązanych klas w <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> przestrzeni nazw i specyfikacja metadanych w dokumentacji ECMA II partycji.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Dokumentacja jest dostępna w trybie online; zobacz <bpt id="p1">[</bpt>ECMA C# i wspólne normy infrastruktury języka<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> w witrynie MSDN i <bpt id="p2">[</bpt>standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> w witrynie sieci Web międzynarodowej Ecma.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">Zwraca wartość literału skojarzony z właściwością przez kompilator.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Zawiera wartość literału skojarzony z właściwością.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeśli wartość literału jest typ klasy z wartością elementu o wartości zero, jest zwracana wartość <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Ta metoda jest dostępna dla projektantów kompilatory zarządzanych i analizatorów kodu.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Tej metody można użyć zarówno kontekstu wykonywania i kontekstu reflection-only.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">W metadanych niezarządzane stałej tabela jest używana do przechowywania wartości stałych pól, parametrów i właściwości.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Informacje o stałej nie wpływają bezpośrednio zachowania w czasie wykonywania.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">Kompilatory sprawdzić te informacje w czasie kompilacji podczas importowania metadanych.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Jeśli używany, wartość stałą jest osadzony w strumieniu język pośredni (MSIL) firmy Microsoft, które kompilator emituje.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">Nie ma żadnych instrukcji MSIL, które mogą służyć do dostępu do tabeli stałej w czasie wykonywania.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Więcej informacji o stałej tabeli i wartości stałych znajduje się w dokumentacji ECMA II partycji.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Dokumentacja jest dostępna w trybie online; zobacz <bpt id="p1">[</bpt>ECMA C# i wspólne normy infrastruktury języka<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> w witrynie MSDN i <bpt id="p2">[</bpt>standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> w witrynie sieci Web międzynarodowej Ecma.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">Stałe tabeli w niezarządzanych metadanych nie zawiera wartości stałej dla bieżącej właściwości.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">Typ wartości nie jest jednym z typów dopuszczonych wspólnej specyfikacji języka (CLS).</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">Zobacz specyfikację ECMA II partycji logicznej Format metadanych: inne struktury, używane w podpisach typów elementów.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>Returns an array of types representing the required custom modifiers of the property.</source>
          <target state="translated">Zwraca tablicę typy reprezentujące wymagane Modyfikatory niestandardowej właściwości.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektów, które takie jak zidentyfikować wymagane Modyfikatory niestandardowych bieżącej właściwości <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> lub <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> metody są udostępniane dla projektantów kompilatory zarządzanych.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Aby uzyskać więcej informacji na Modyfikatory niestandardowych, zobacz <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> i powiązanych klas w <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> przestrzeni nazw i specyfikacja metadanych w dokumentacji ECMA II partycji.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Dokumentacja jest dostępna w trybie online; zobacz <bpt id="p1">[</bpt>ECMA C# i wspólne normy infrastruktury języka<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> w witrynie MSDN i <bpt id="p2">[</bpt>standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> w witrynie sieci Web międzynarodowej Ecma.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="set" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Zwraca publicznego <ph id="ph1">&lt;see langword="set" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="Set" /&gt;</ph> method for this property if the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> if the <ph id="ph5">&lt;see langword="set" /&gt;</ph> accessor is not public.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> Reprezentujący obiekt <ph id="ph2">&lt;see langword="Set" /&gt;</ph> metody dla tej właściwości Jeśli <ph id="ph3">&lt;see langword="set" /&gt;</ph> metoda dostępu nie jest publiczny, lub <ph id="ph4">&lt;see langword="null" /&gt;</ph> Jeśli <ph id="ph5">&lt;see langword="set" /&gt;</ph> metoda dostępu nie jest publiczny.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetSetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Jest to metoda wygody, który zawiera implementację klasy abstrakcyjnej <ph id="ph1">`GetSetMethod`</ph> metody z <ph id="ph2">`nonPublic`</ph> ustawiono parametr <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby użyć <ph id="ph1">`GetSetMethod`</ph> metody, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, użyj <ph id="ph2">`GetSetMethod`</ph> metody.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Indicates whether the accessor should be returned if it is non-public.</source>
          <target state="translated">Wskazuje, czy akcesor ma zostać zwrócony, jeśli jest niepubliczny.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli akcesor niepubliczne, jest zwracana; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Po przesłonięciu w klasie pochodnej zwraca <ph id="ph1">&lt;see langword="set" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>This property's <ph id="ph1">&lt;see langword="Set" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">Ta właściwość <ph id="ph1">&lt;see langword="Set" /&gt;</ph> metody, lub <ph id="ph2">&lt;see langword="null" /&gt;</ph>, jak pokazano w poniższej tabeli.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Wartość</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Warunek</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> The <ph id="ph5">&lt;see langword="Set" /&gt;</ph> method for this property.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> <ph id="ph5">&lt;see langword="Set" /&gt;</ph> Metody dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> <ph id="ph3">&lt;see langword="set" /&gt;</ph> Metoda dostępu nie jest publiczny.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> jest <ph id="ph2">&lt;see langword="true" /&gt;</ph> i <ph id="ph3">&lt;see langword="set" /&gt;</ph> akcesor jest niepubliczny.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph7">&lt;see langword="true" /&gt;</ph>, but the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> jest <ph id="ph7">&lt;see langword="true" /&gt;</ph>, ale właściwość jest tylko do odczytu.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> jest <ph id="ph2">&lt;see langword="false" /&gt;</ph> i <ph id="ph3">&lt;see langword="set" /&gt;</ph> akcesor jest niepubliczny.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>There is no <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">Brak nie <ph id="ph1">&lt;see langword="set" /&gt;</ph> dostępu.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby użyć <ph id="ph1">`GetSetMethod`</ph> metody, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, użyj <ph id="ph2">`GetSetMethod`</ph> metody.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The following example displays the <ph id="ph1">`set`</ph> accessor for the specified property.</source>
          <target state="translated">W poniższym przykładzie przedstawiono <ph id="ph1">`set`</ph> akcesora dla określonej właściwości.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">Żądana metoda jest niepubliczne, a obiekt wywołujący nie ma <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> do uwzględnienia w tej metodzie niepubliczne.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">Zwraca wartość właściwości określonego obiektu.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Obiekt, którego wartość właściwości zostanie zwrócony.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">Zwraca wartość właściwości określonego obiektu.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The property value of the specified object.</source>
          <target state="translated">Wartość właściwości określonego obiektu.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> exception.</source>
          <target state="translated">Należy wywołać <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> przeciążenia można pobrać wartości właściwości nieindeksowanych; próba pobrania wartości właściwości indeksowanych metoda zgłasza <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> wyjątku.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You can determine whether a property is indexed or not by calling the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Można określić, czy właściwość jest indeksowany nie wywołując <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>If the length of the returned <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array is zero, the property is not indexed.</source>
          <target state="translated">Jeśli długość zwracana <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> tablicy wynosi zero, właściwość nie jest indeksowana.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> parameter set to <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, the <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> set to <ph id="ph5">`null`</ph>, the object array of index values set to <ph id="ph6">`null`</ph>, and the <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> set to <ph id="ph8">`null`</ph>.</source>
          <target state="translated">Jest to metoda wygody, który zawiera implementację klasy abstrakcyjnej <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> metody z <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> ustawiona <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> ustawioną <ph id="ph5">`null`</ph>, obiekt tablicę wartości indeksu ustawioną <ph id="ph6">`null`</ph>, i <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> ustawioną <ph id="ph8">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The following example defines a <ph id="ph1">`Planet`</ph> class that has two properties: <ph id="ph2">`Name`</ph>, the name of the planet; and <ph id="ph3">`Distance`</ph>, the planet's distance from Earth.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano <ph id="ph1">`Planet`</ph> klasy, która ma dwie właściwości: <ph id="ph2">`Name`</ph>, nazwę świecie; i <ph id="ph3">`Distance`</ph>, na świecie odległość od ziemi.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The example instantiates a <ph id="ph1">`Planet`</ph> object that represents the planet Jupiter and passes it to a <ph id="ph2">`GetPropertyValues`</ph> method that displays information about the properties and uses the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> method to get the value of each <ph id="ph4">`Planet`</ph> property.</source>
          <target state="translated">Przykład tworzy <ph id="ph1">`Planet`</ph> obiekt, który reprezentuje świecie Jupiter i przekazuje je do <ph id="ph2">`GetPropertyValues`</ph> metodę, która zawiera informacje o właściwości i używa <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> metodę, aby uzyskać wartość każdego <ph id="ph4">`Planet`</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Obiekt, którego wartość właściwości zostanie zwrócony.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Opcjonalne indeks wartości dla właściwości indeksowane.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The indexes of indexed properties are zero-based.</source>
          <target state="translated">Indeksy właściwości indeksowanych jest liczony od zera.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Ta wartość powinna być <ph id="ph1">&lt;see langword="null" /&gt;</ph> nieindeksowanych właściwości.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Returns the property value of a specified object with optional index values for indexed properties.</source>
          <target state="translated">Zwraca wartość właściwości określonego obiektu za pomocą wartości indeksu opcjonalne dla właściwości indeksowane.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property value of the specified object.</source>
          <target state="translated">Wartość właściwości określonego obiektu.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Aby określić, czy właściwość jest indeksowana, użyj <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Jeśli tablica wynikowa musi 0 (zero) elementy właściwości nie jest indeksowana.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetValue`</ph> method with a <ph id="ph2">`BindingFlags`</ph> parameter of <ph id="ph3">`Default`</ph>, the <ph id="ph4">`Binder`</ph> set to <ph id="ph5">`null`</ph>, and the <ph id="ph6">`CultureInfo`</ph> set to <ph id="ph7">`null`</ph>.</source>
          <target state="translated">Jest to metoda wygody, który zawiera implementację klasy abstrakcyjnej <ph id="ph1">`GetValue`</ph> metody z <ph id="ph2">`BindingFlags`</ph> parametr <ph id="ph3">`Default`</ph>, <ph id="ph4">`Binder`</ph> ustawioną <ph id="ph5">`null`</ph>i <ph id="ph6">`CultureInfo`</ph> ustawioną <ph id="ph7">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">Ponieważ statycznej właściwości należeć do tego typu, a nie pojedyncze obiekty, Pobierz statycznej właściwości przez przekazanie <ph id="ph1">`null`</ph> jako argument obiektu.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">Na przykład użyć poniższego kodu, aby uzyskać statycznych <ph id="ph1">`CurrentCulture`</ph> właściwości <ph id="ph2">`CultureInfo`</ph> :</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby użyć <ph id="ph1">`GetValue`</ph> metody, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, użyj <ph id="ph2">`GetValue`</ph> metody.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, ta metoda umożliwia dostęp do elementów członkowskich niepubliczne, jeśli element wywołujący zostało udzielone <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> z <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> Flaga i jeśli zestaw grant niepublicznych elementów członkowskich jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Zobacz <bpt id="p1">[</bpt>zagadnienia dotyczące zabezpieczeń dla odbicia<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Aby używać tej funkcji, należy docelowy aplikacji <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> lub nowszym.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The following example shows how to get the value of an indexed property.</source>
          <target state="translated">Poniższy przykład pokazuje, jak można pobrać wartości właściwości indeksowanych.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> property is the default property (the indexer in C#) of the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> Właściwości domyślnej właściwości (indeksator w języku C#) jest <ph id="ph2">&lt;xref:System.String&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> Tablicy nie zawiera typy argumentów potrzebne.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">Właściwość <ph id="ph1">&lt;see langword="get" /&gt;</ph> nie znaleziono metody dostępu.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> zamiast tego.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt nie jest zgodny z typem docelowym lub właściwość jest właściwością wystąpienia, ale <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Liczba parametrów w <ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest niezgodna z liczbą parametrów indeksowanej właściwości ma.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch wyjątku klasy podstawowej <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, zamiast tego.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Wystąpił niedozwolona próba uzyskania dostępu do prywatne lub chronione metody w klasie.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">Wystąpił błąd podczas pobierania wartości właściwości.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Na przykład wartość indeksu określona dla właściwości indeksowanych jest poza zakresem.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> Właściwość wskazuje przyczynę błędu.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Obiekt, którego wartość właściwości zostanie zwrócony.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, and <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Bitowe połączenie następujące elementy członkowskie wyliczenia określających atrybut wywołania: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, i <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">Należy określić atrybut odpowiedniego wywołania.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">Na przykład, aby wywołać statyczny element członkowski, należy ustawić <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flagi.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> obiektów przez odbicie.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Jeśli <bpt id="p1">&lt;c&gt;</bpt>integratora<ept id="p1">&lt;/c&gt;</ept> jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, używany jest domyślny integrator.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Opcjonalne indeks wartości dla właściwości indeksowane.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Ta wartość powinna być <ph id="ph1">&lt;see langword="null" /&gt;</ph> nieindeksowanych właściwości.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">Kultura, dla którego ma zostać zlokalizowany zasób.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">Jeśli zasób nie jest zlokalizowany na tę kulturę <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> właściwość zostanie wywołana kolejno w poszukiwaniu dopasowania.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Jeśli ta wartość jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, informacje specyficzne dla kultury są uzyskiwane z <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej zwraca wartość właściwości określonego obiektu, który ma określone powiązanie, indeksu i informacje specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property value of the specified object.</source>
          <target state="translated">Wartość właściwości określonego obiektu.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Aby określić, czy właściwość jest indeksowana, użyj <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Jeśli tablica wynikowa musi 0 (zero) elementy właściwości nie jest indeksowana.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">Ponieważ statycznej właściwości należeć do tego typu, a nie pojedyncze obiekty, Pobierz statycznej właściwości przez przekazanie <ph id="ph1">`null`</ph> jako argument obiektu.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">Na przykład użyć poniższego kodu, aby uzyskać statycznych <ph id="ph1">`CurrentCulture`</ph> właściwości <ph id="ph2">`CultureInfo`</ph> :</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby użyć <ph id="ph1">`GetValue`</ph> metody, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, użyj <ph id="ph2">`GetValue`</ph> metody.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, ta metoda umożliwia dostęp do elementów członkowskich niepubliczne, jeśli element wywołujący zostało udzielone <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> z <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> Flaga i jeśli zestaw grant niepublicznych elementów członkowskich jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Zobacz <bpt id="p1">[</bpt>zagadnienia dotyczące zabezpieczeń dla odbicia<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Aby używać tej funkcji, należy docelowy aplikacji <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> lub nowszym.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> Tablicy nie zawiera typy argumentów potrzebne.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">Właściwość <ph id="ph1">&lt;see langword="get" /&gt;</ph> nie znaleziono metody dostępu.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt nie jest zgodny z typem docelowym lub właściwość jest właściwością wystąpienia, ale <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Liczba parametrów w <ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest niezgodna z liczbą parametrów indeksowanej właściwości ma.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Wystąpił niedozwolona próba uzyskania dostępu do prywatne lub chronione metody w klasie.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">Wystąpił błąd podczas pobierania wartości właściwości.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Na przykład wartość indeksu określona dla właściwości indeksowanych jest poza zakresem.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> Właściwość wskazuje przyczynę błędu.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>Gets a value indicating whether the property is the special name.</source>
          <target state="translated">Pobiera wartość wskazującą, czy właściwość jest specjalną nazwą.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property is the special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ta właściwość jest specjalną nazwą; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>The <ph id="ph1">`SpecialName`</ph> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</source>
          <target state="translated"><ph id="ph1">`SpecialName`</ph> Bit jest ustawiony na wartość Flaga elementów członkowskich, które są traktowane w specjalny sposób przez niektóre kompilatory (na przykład metod dostępu do właściwości i metod przeładowania operatora).</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>To get the <ph id="ph1">`IsSpecialName`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">`IsSpecialName`</ph> właściwość, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`IsSpecialName`</ph> value.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, Pobierz <ph id="ph2">`IsSpecialName`</ph> wartość.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> wartość wskazującą, czy ten element członkowski jest właściwością.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> wartość wskazującą, czy ten element członkowski jest właściwością.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Ta właściwość zastępuje <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> only when a given member is a property.</source>
          <target state="translated">W związku z tym podczas badania zestawu <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obiektów — na przykład tablicy zwracanej przez <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> zwraca <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> tylko wtedy, gdy dany element jest właściwością.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source><ph id="ph1">`MemberType`</ph> is a derived class of <ph id="ph2">`MemberInfo`</ph> and specifies the type of member this is.</source>
          <target state="translated"><ph id="ph1">`MemberType`</ph> jest klasą pochodne <ph id="ph2">`MemberInfo`</ph> i określa typ elementu członkowskiego jest.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Member types are constructors, properties, fields, and methods.</source>
          <target state="translated">Typy elementów członkowskich są konstruktorów, właściwości, pól i metod.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Since this is a <ph id="ph1">`PropertyInfo`</ph> property, the returned type is a property.</source>
          <target state="translated">Ponieważ jest to <ph id="ph1">`PropertyInfo`</ph> zwrócony typ właściwości jest właściwością.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">`MemberType`</ph> właściwość, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`MemberType`</ph> value.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, Pobierz <ph id="ph2">`MemberType`</ph> wartość.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>The following example displays the type of the specified member.</source>
          <target state="translated">W poniższym przykładzie przedstawiono typ określonego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Pierwszy obiekt, który ma zostać porównany.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Drugi obiekt, który będzie porównywany.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Wskazuje, czy dwa <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> obiekty są takie same.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="left" /&gt;</ph> jest równa <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; w przeciwnym razie <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Pierwszy obiekt, który ma zostać porównany.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Drugi obiekt, który będzie porównywany.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Wskazuje, czy dwa <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> obiekty nie są takie same.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="left" /&gt;</ph> nie jest równa <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; w przeciwnym razie <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Gets the type of this property.</source>
          <target state="translated">Pobiera typ tej właściwości.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The type of this property.</source>
          <target state="translated">Typ tej właściwości.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>To determine the type of a particular property, do the following:</source>
          <target state="translated">Aby określić typ określonej właściwości, wykonaj następujące czynności:</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type (the class or structure) that contains the property.</source>
          <target state="translated">Pobierz <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje typ (klasy lub struktury), który zawiera właściwości.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>If you are working with an object (an instance of a type), you can call its <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method.</source>
          <target state="translated">Jeśli pracujesz z obiektem (wystąpienia typu), można wywołać jej <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</source>
          <target state="translated">W przeciwnym razie można używać operatora C# lub operator języka Visual Basic, co w przykładzie przedstawiono.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property in which you're interested.</source>
          <target state="translated">Pobierz <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiekt, który reprezentuje właściwości, w którym Cię.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>You can do this by getting an array of all properties from the <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> method and then iterating the elements in the array, or you can retrieve the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property directly by calling the <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method and specifying the property name.</source>
          <target state="translated">Aby to zrobić, uzyskiwanie tablicę wszystkich właściwości z <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> metody, a następnie iteracja elementów w tablicy, lub można pobrać <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiekt, który reprezentuje właściwość bezpośrednio przez wywołanie metody <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> — metoda i określając Nazwa właściwości.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Pobrać wartość <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> właściwość z <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class that has five properties.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano <ph id="ph1">`Employee`</ph> klasy, która ma pięć właściwości.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>It then uses retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects that represent those properties and displays the name and type of each.</source>
          <target state="translated">Go, a następnie używa pobiera tablicę <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiekty, które reprezentują te właściwości i wyświetla nazwę i typ każdego z nich.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see langword="set" /&gt;</ph> metody dostępu dla tej właściwości.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>The <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="set" /&gt;</ph> Metody dostępu dla tej właściwości lub <ph id="ph2">&lt;see langword="null" /&gt;</ph> Jeśli właściwość jest tylko do odczytu.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> property is equivalent to calling the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> method with a value of <ph id="ph3">`true`</ph> for the <ph id="ph4">`nonPublic`</ph> argument.</source>
          <target state="translated">Pobieranie wartości <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> właściwość jest odpowiednikiem wywołania <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> metody o wartości <ph id="ph3">`true`</ph> dla <ph id="ph4">`nonPublic`</ph> argumentu.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Sets the property value for a specified object.</source>
          <target state="translated">Ustawia wartości właściwości dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The object whose property value will be set.</source>
          <target state="translated">Obiekt, którego właściwość zostanie ustawiona.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The new property value.</source>
          <target state="translated">Nowa wartość właściwości.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Sets the property value of a specified object.</source>
          <target state="translated">Ustawia wartości właściwości określonego obiektu.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> overload sets the value of a non-indexed property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> Przeciążenia ustawia wartości właściwości nieindeksowanych.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To determine whether a property is indexed, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Aby ustalić, czy właściwość jest indeksowana, należy wywołać <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Jeśli tablica wynikowa musi 0 (zero) elementy właściwości nie jest indeksowana.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To set the value of an indexed property, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> overload.</source>
          <target state="translated">Aby ustawić wartość właściwości indeksowanej, należy wywołać <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> przeciążenia.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the property type of this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, the property will be set to the default value for that type.</source>
          <target state="translated">Jeśli typ to właściwość <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu jest typem wartości i <ph id="ph2">`value`</ph> jest <ph id="ph3">`null`</ph>, właściwość zostanie ustawiona na wartość domyślną dla tego typu.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> for <ph id="ph7">`Object[]`</ph>, and <ph id="ph8">`null`</ph> for <ph id="ph9">`CultureInfo`</ph>.</source>
          <target state="translated">Jest metoda wygody, która wywołuje implementacji środowiska uruchomieniowego klasy abstrakcyjnej <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> metody, określając <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> dla <ph id="ph3">`BindingFlags`</ph> parametru <ph id="ph4">`null`</ph> dla <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> dla <ph id="ph7">`Object[]`</ph>i <ph id="ph8">`null`</ph> dla <ph id="ph9">`CultureInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Aby użyć <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metoda, pierwszy get <ph id="ph2">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje klasę.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Type&gt;</ph>, Pobierz <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiekt, należy wywołać <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, ta metoda umożliwia dostęp do elementów członkowskich niepubliczne, jeśli element wywołujący zostało udzielone <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> z <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> Flaga i jeśli zestaw grant niepublicznych elementów członkowskich jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Zobacz <bpt id="p1">[</bpt>zagadnienia dotyczące zabezpieczeń dla odbicia<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Aby używać tej funkcji, należy docelowy aplikacji <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> lub nowszym.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with one <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) and one instance property.</source>
          <target state="translated">Poniższy przykład deklaruje klasę o nazwie <ph id="ph1">`Example`</ph> z jednym <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> w języku Visual Basic), a właściwość jedno wystąpienie.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> method to change the original property values and displays the original and final values.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> metodę, aby zmienić właściwości oryginalnej wartości i wyświetla wartości oryginalnej i końcowe.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">Właściwość <ph id="ph1">&lt;see langword="set" /&gt;</ph> nie znaleziono metody dostępu.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> Nie można przekonwertować na typ <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> zamiast tego.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> does not match the target type, or a property is an instance property but <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Typ <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> nie jest zgodny z typem docelowym, lub właściwość jest właściwością wystąpienia, ale <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch wyjątku klasy podstawowej <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, zamiast tego.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Wystąpił niedozwolona próba uzyskania dostępu do prywatne lub chronione metody w klasie.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Wystąpił błąd podczas ustawiania wartości właściwości.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> Właściwość wskazuje przyczynę błędu.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object whose property value will be set.</source>
          <target state="translated">Obiekt, którego właściwość zostanie ustawiona.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The new property value.</source>
          <target state="translated">Nowa wartość właściwości.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Opcjonalne indeks wartości dla właściwości indeksowane.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Ta wartość powinna być <ph id="ph1">&lt;see langword="null" /&gt;</ph> nieindeksowanych właściwości.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Sets the property value of a specified object with optional index values for index properties.</source>
          <target state="translated">Ustawia wartości właściwości określonego obiektu z wartości indeksu opcjonalne właściwości indeksu.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu jest typem wartości i <ph id="ph2">`value`</ph> jest <ph id="ph3">`null`</ph>, a następnie właściwość zostanie ustawiona na wartość domyślną dla tego typu.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Aby określić, czy właściwość jest indeksowana, użyj <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Jeśli tablica wynikowa musi 0 (zero) elementy właściwości nie jest indeksowana.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, and <ph id="ph6">`null`</ph> for <ph id="ph7">`CultureInfo`</ph>.</source>
          <target state="translated">Jest metoda wygody, która wywołuje implementacji środowiska uruchomieniowego klasy abstrakcyjnej <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> metody, określając <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> dla <ph id="ph3">`BindingFlags`</ph> parametru <ph id="ph4">`null`</ph> dla <ph id="ph5">`Binder`</ph>, i <ph id="ph6">`null`</ph> dla <ph id="ph7">`CultureInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Aby użyć <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metoda, pierwszy get <ph id="ph2">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje klasę.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Type&gt;</ph>, Pobierz <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">Z <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, użyj <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, ta metoda umożliwia dostęp do elementów członkowskich niepubliczne, jeśli element wywołujący zostało udzielone <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> z <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> Flaga i jeśli zestaw grant niepublicznych elementów członkowskich jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Zobacz <bpt id="p1">[</bpt>zagadnienia dotyczące zabezpieczeń dla odbicia<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Aby używać tej funkcji, należy docelowy aplikacji <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> lub nowszym.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example defines a class named <ph id="ph1">`TestClass`</ph> that has a read-write property named <ph id="ph2">`Caption`</ph>.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano klasę o nazwie <ph id="ph1">`TestClass`</ph> mający właściwość odczytu i zapisu o nazwie <ph id="ph2">`Caption`</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>It  displays the default value of the <ph id="ph1">`Caption`</ph> property, calls the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the property value, and displays the result.</source>
          <target state="translated">Wyświetla wartość domyślną <ph id="ph1">`Caption`</ph> właściwości, wywołania <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metodę, aby zmienić wartość właściwości i wyświetla wyniki.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Note that, because the <ph id="ph1">`Caption`</ph> property is not a parameter array, the <ph id="ph2">`index`</ph> argument is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Należy zauważyć, że ponieważ <ph id="ph1">`Caption`</ph> właściwość nie jest tablicą parametrów <ph id="ph2">`index`</ph> argument jest <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with three properties: a <ph id="ph2">`static`</ph> property (<ph id="ph3">`Shared`</ph> in Visual Basic), an instance property, and an indexed instance property.</source>
          <target state="translated">Poniższy przykład deklaruje klasę o nazwie <ph id="ph1">`Example`</ph> z trzy właściwości: <ph id="ph2">`static`</ph> właściwości (<ph id="ph3">`Shared`</ph> w języku Visual Basic), właściwości wystąpienia i właściwości indeksowanych wystąpienia.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the default values of the properties and displays the original and final values.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metodę, aby zmienić domyślne wartości właściwości i wyświetla wartości oryginalnej i końcowe.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</source>
          <target state="translated">Nazwę, która służy do wyszukiwania dla właściwości indeksowanych wystąpienia za pomocą odbicia różni się w zależności od języka i na atrybuty stosowane do właściwości.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In Visual Basic, the property name is always used to search for the property with reflection.</source>
          <target state="translated">W języku Visual Basic nazwa właściwości zawsze jest używany do wyszukiwania właściwości za pomocą odbicia.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">`Default`</ph> keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</source>
          <target state="translated">Można użyć <ph id="ph1">`Default`</ph> Właściwość indeksowana — słowo kluczowe, aby ustawić właściwość domyślną, w którym to przypadku można pominąć nazwę podczas uzyskiwania dostępu do właściwości, jak w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can also use the property name.</source>
          <target state="translated">Można również użyć nazwy właściwości.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</source>
          <target state="translated">W języku C# właściwości indeksowanych wystąpienia jest domyślna właściwość o nazwie indeksatora, a nazwa nigdy nie jest używana podczas uzyskiwania dostępu do właściwości w kodzie.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>By default, the name of the property is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection.</source>
          <target state="translated">Domyślnie, nazwa właściwości jest <ph id="ph1">`Item`</ph>, musisz użyć tej nazwy podczas wyszukiwania właściwości za pomocą odbicia.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the indexer a different name.</source>
          <target state="translated">Można użyć <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> atrybutu umożliwiają indeksatora inną nazwę.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In this example, the name is <ph id="ph1">`IndexedInstanceProperty`</ph>.</source>
          <target state="translated">W tym przykładzie nazwa jest <ph id="ph1">`IndexedInstanceProperty`</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C++, the <ph id="ph1">`default`</ph> specifier can be used to make an indexed property a default indexed property (class indexer).</source>
          <target state="translated">W języku C++ <ph id="ph1">`default`</ph> specyfikator można wprowadzić właściwość indeksowana domyślnie indeksowane właściwości (klasa indeksatora).</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In that case, the name of the property by default is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection, as in this example.</source>
          <target state="translated">W takim przypadku nazwa właściwości domyślnie jest <ph id="ph1">`Item`</ph>, musisz użyć tej nazwy podczas wyszukiwania właściwości za pomocą odbicia, jak w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</source>
          <target state="translated">Można użyć <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> atrybutu umożliwić klasa indeksatora inną nazwę w odbicia, ale nie można użyć tej nazwy do dostępu do właściwości w kodzie.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</source>
          <target state="translated">Właściwość indeksowana, który nie jest klasa indeksatora dostęp jest uzyskiwany przy użyciu nazwy, zarówno w kodzie, jak i w odbicia.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> Tablicy nie zawiera typy argumentów potrzebne.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">Właściwość <ph id="ph1">&lt;see langword="set" /&gt;</ph> nie znaleziono metody dostępu.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> Nie można przekonwertować na typ <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> zamiast tego.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt nie jest zgodny z typem docelowym lub właściwość jest właściwością wystąpienia, ale <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Liczba parametrów w <ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest niezgodna z liczbą parametrów indeksowanej właściwości ma.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch wyjątku klasy podstawowej <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, zamiast tego.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Wystąpił niedozwolona próba uzyskania dostępu do prywatne lub chronione metody w klasie.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Wystąpił błąd podczas ustawiania wartości właściwości.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Na przykład wartość indeksu określona dla właściwości indeksowanych jest poza zakresem.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> Właściwość wskazuje przyczynę błędu.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be set.</source>
          <target state="translated">Obiekt, którego właściwość zostanie ustawiona.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The new property value.</source>
          <target state="translated">Nowa wartość właściwości.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Bitowe połączenie następujące elementy członkowskie wyliczenia określających atrybut wywołania: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, lub <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">Należy określić atrybut odpowiedniego wywołania.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">Na przykład, aby wywołać statyczny element członkowski, należy ustawić <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flagi.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> obiektów przez odbicie.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Jeśli <bpt id="p1">&lt;c&gt;</bpt>integratora<ept id="p1">&lt;/c&gt;</ept> jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, używany jest domyślny integrator.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Opcjonalne indeks wartości dla właściwości indeksowane.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Ta wartość powinna być <ph id="ph1">&lt;see langword="null" /&gt;</ph> nieindeksowanych właściwości.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">Kultura, dla którego ma zostać zlokalizowany zasób.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">Jeśli zasób nie jest zlokalizowany na tę kulturę <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> właściwość zostanie wywołana kolejno w poszukiwaniu dopasowania.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Jeśli ta wartość jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, informacje specyficzne dla kultury są uzyskiwane z <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, ustawia wartości właściwości dla określonego obiektu, który ma określone powiązanie, indeksu i informacje specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> obiektu jest typem wartości i <ph id="ph2">`value`</ph> jest <ph id="ph3">`null`</ph>, a następnie właściwość zostanie ustawiona na wartość domyślną dla tego typu.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Aby określić, czy właściwość jest indeksowana, użyj <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Jeśli tablica wynikowa musi 0 (zero) elementy właściwości nie jest indeksowana.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Ograniczenia dostępu są ignorowane w przypadku całkowicie zaufanego kodu.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</source>
          <target state="translated">Oznacza to konstruktory prywatne, pola, metody i właściwości można można uzyskać dostępu do i wywoływane za pośrednictwem odbicia zawsze, gdy kod jest w pełni zaufany.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`SetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Aby użyć <ph id="ph1">`SetValue`</ph> metody, najpierw uzyskać klasy <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`SetValue`</ph> method.</source>
          <target state="translated">Z <ph id="ph1">`PropertyInfo`</ph>, użyj <ph id="ph2">`SetValue`</ph> metody.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, ta metoda umożliwia dostęp do elementów członkowskich niepubliczne, jeśli element wywołujący zostało udzielone <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> z <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> Flaga i jeśli zestaw grant niepublicznych elementów członkowskich jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Zobacz <bpt id="p1">[</bpt>zagadnienia dotyczące zabezpieczeń dla odbicia<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Aby używać tej funkcji, należy docelowy aplikacji <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> lub nowszym.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> Tablicy nie zawiera typy argumentów potrzebne.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">Właściwość <ph id="ph1">&lt;see langword="set" /&gt;</ph> nie znaleziono metody dostępu.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> Nie można przekonwertować na typ <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt nie jest zgodny z typem docelowym lub właściwość jest właściwością wystąpienia, ale <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Liczba parametrów w <ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest niezgodna z liczbą parametrów indeksowanej właściwości ma.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Wystąpił niedozwolona próba uzyskania dostępu do prywatne lub chronione metody w klasie.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Wystąpił błąd podczas ustawiania wartości właściwości.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Na przykład wartość indeksu określona dla właściwości indeksowanych jest poza zakresem.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> Właściwość wskazuje przyczynę błędu.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Musi być wartością IID_NULL.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Przekazana tablica nazw ma być mapowana.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Liczba nazw, które mają być mapowane.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący obiekt <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący obiekt <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informacje o typie, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identyfikator regionalny dla informacji o typie.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Określa element członkowski.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Musi być wartością IID_NULL.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flagi opisujące kontekst wywołania.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Wskaźnik do struktury, która zawiera informacje o wyjątku.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indeks pierwszego argumentu, który zawiera błąd.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::Invoke`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>