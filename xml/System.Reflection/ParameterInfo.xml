<Type Name="ParameterInfo" FullName="System.Reflection.ParameterInfo">
  <TypeSignature Language="C#" Value="public class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._ParameterInfo, System.Runtime.Serialization.IObjectReference" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit ParameterInfo extends System.Object implements class System.Reflection.ICustomAttributeProvider, class System.Runtime.InteropServices._ParameterInfo, class System.Runtime.Serialization.IObjectReference" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ParameterInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class ParameterInfo&#xA;Implements _ParameterInfo, ICustomAttributeProvider, IObjectReference" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParameterInfo : System::Reflection::ICustomAttributeProvider, System::Runtime::InteropServices::_ParameterInfo, System::Runtime::Serialization::IObjectReference" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.ICustomAttributeProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._ParameterInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IObjectReference</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ParameterInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9ff51-101">Umożliwia odnalezienie atrybuty parametru i udostępnia metadane parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-101">Discovers the attributes of a parameter and provides access to parameter metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-102">Użyj wystąpienia `ParameterInfo` Aby uzyskać informacje o typie danych wartości parametru, wartość domyślna i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="9ff51-102">Use an instance of `ParameterInfo` to obtain information about the parameter's data type, default value, and so on.</span></span>  
  
 <span data-ttu-id="9ff51-103"><xref:System.Reflection.MethodBase.GetParameters%2A> Zwraca tablicę `ParameterInfo` obiekty reprezentujące parametry metody, w kolejności.</span><span class="sxs-lookup"><span data-stu-id="9ff51-103"><xref:System.Reflection.MethodBase.GetParameters%2A> returns an array of `ParameterInfo` objects representing the parameters of a method, in order.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-104">W tym przykładzie pokazano, jak używać różnych klas odbicia do analizowania metadanych zawarty w zestawie.</span><span class="sxs-lookup"><span data-stu-id="9ff51-104">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9ff51-105">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="9ff51-105">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ParameterInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ParameterInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ff51-106">Inicjuje nowe wystąpienie klasy <see langword="ParameterInfo" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="9ff51-106">Initializes a new instance of the <see langword="ParameterInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ParameterAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.ParameterAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Attributes As ParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterAttributes Attributes { System::Reflection::ParameterAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-107">Pobiera atrybuty dla tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-107">Gets the attributes for this parameter.</span></span></summary>
        <value><span data-ttu-id="9ff51-108">A <see langword="ParameterAttributes" /> obiekt reprezentujący atrybuty dla tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-108">A <see langword="ParameterAttributes" /> object representing the attributes for this parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-109">Ta metoda używa <xref:System.Reflection.ParameterInfo.AttrsImpl> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-109">This method utilizes the <xref:System.Reflection.ParameterInfo.AttrsImpl> method.</span></span>  
  
 <span data-ttu-id="9ff51-110">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-110">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-111">W poniższym przykładzie zdefiniowano metody z trzema parametrami.</span><span class="sxs-lookup"><span data-stu-id="9ff51-111">The following example defines a method with three parameters.</span></span> <span data-ttu-id="9ff51-112">Używa <xref:System.Reflection.ParameterInfo.Attributes%2A> właściwość, aby pobrać atrybutów drugiego parametru i wyświetlaj je w konsoli.</span><span class="sxs-lookup"><span data-stu-id="9ff51-112">It uses the <xref:System.Reflection.ParameterInfo.Attributes%2A> property to get the attributes of the second parameter and display them at the console.</span></span>  
  
 [!code-cpp[ParameterInfo_Attributes1#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_Attributes1/CPP/parameterinfo_attributes1.cpp#1)]
 [!code-csharp[ParameterInfo_Attributes1#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_Attributes1/CS/parameterinfo_attributes1.cs#1)]
 [!code-vb[ParameterInfo_Attributes1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_Attributes1/VB/parameterinfo_attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ParameterAttributes" />
      </Docs>
    </Member>
    <Member MemberName="AttrsImpl">
      <MemberSignature Language="C#" Value="protected System.Reflection.ParameterAttributes AttrsImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family valuetype System.Reflection.ParameterAttributes AttrsImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.AttrsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected AttrsImpl As ParameterAttributes " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Reflection::ParameterAttributes AttrsImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-113">Atrybuty parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-113">The attributes of the parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-114">To pole jest przeznaczona tylko dla użytkowników, którzy są wyprowadzanie klasy z `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-114">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="9ff51-115">Jest typowy do atrybuty parametru za pomocą <xref:System.Reflection.ParameterInfo.Attributes%2A>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-115">Typical access to parameter attributes is through <xref:System.Reflection.ParameterInfo.Attributes%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassImpl">
      <MemberSignature Language="C#" Value="protected Type ClassImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Type ClassImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.ClassImpl" />
      <MemberSignature Language="VB.NET" Value="Protected ClassImpl As Type " />
      <MemberSignature Language="C++ CLI" Value="protected: Type ^ ClassImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-116"><see langword="Type" /> Parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-116">The <see langword="Type" /> of the parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-117">To pole jest przeznaczona tylko dla użytkowników, którzy są wyprowadzanie klasy z `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-117">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="9ff51-118">Typowy dostęp do typów parametrów jest za pośrednictwem <xref:System.Reflection.ParameterInfo.ParameterType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-118">Typical access to parameter types is through <xref:System.Reflection.ParameterInfo.ParameterType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.CustomAttributeData&gt; CustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.CustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ CustomAttributes { System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-119">Pobiera kolekcję, która zawiera atrybuty niestandardowe dla tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-119">Gets a collection that contains this parameter's custom attributes.</span></span></summary>
        <value><span data-ttu-id="9ff51-120">Kolekcja, która zawiera atrybuty niestandardowe dla tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-120">A collection that contains this parameter's custom attributes.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public virtual object DefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ DefaultValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-121">Pobiera wartość wskazującą wartość domyślną, jeśli parametr ma wartość domyślną.</span><span class="sxs-lookup"><span data-stu-id="9ff51-121">Gets a value indicating the default value if the parameter has a default value.</span></span></summary>
        <value><span data-ttu-id="9ff51-122">Wartość domyślna parametru lub <see cref="F:System.DBNull.Value" /> Jeśli parametr nie ma wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="9ff51-122">The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-123">Ta właściwość jest używana tylko w kontekście wykonywania.</span><span class="sxs-lookup"><span data-stu-id="9ff51-123">This property is used only in the execution context.</span></span> <span data-ttu-id="9ff51-124">W kontekście tylko odbicie, użyj <xref:System.Reflection.ParameterInfo.RawDefaultValue%2A> właściwości zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-124">In the reflection-only context, use the <xref:System.Reflection.ParameterInfo.RawDefaultValue%2A> property instead.</span></span>  
  
 <span data-ttu-id="9ff51-125">Wartością domyślną jest używany, gdy bieżąca wartość nie jest określona w wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-125">The default value is used when an actual value is not specified in the method call.</span></span> <span data-ttu-id="9ff51-126">Parametr może mieć wartości domyślnej, która jest `null`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-126">A parameter can have a default value that is `null`.</span></span> <span data-ttu-id="9ff51-127">To różni się od liter, w którym nie zdefiniowano wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="9ff51-127">This is distinct from the case where a default value is not defined.</span></span>  
  
 <span data-ttu-id="9ff51-128">Ta metoda używa <xref:System.Reflection.ParameterInfo.DefaultValueImpl> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-128">This method utilizes the <xref:System.Reflection.ParameterInfo.DefaultValueImpl> method.</span></span>  
  
 <span data-ttu-id="9ff51-129">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-129">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValueImpl">
      <MemberSignature Language="C#" Value="protected object DefaultValueImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family object DefaultValueImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.DefaultValueImpl" />
      <MemberSignature Language="VB.NET" Value="Protected DefaultValueImpl As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Object ^ DefaultValueImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-130">Wartość domyślna parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-130">The default value of the parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-131">To pole jest przeznaczona tylko dla użytkowników, którzy są wyprowadzanie klasy z `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-131">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="9ff51-132">Typowy dostęp do wartości domyślnej parametru jest za pośrednictwem <xref:System.Reflection.ParameterInfo.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-132">Typical access to the default value of the parameter is through <xref:System.Reflection.ParameterInfo.DefaultValue%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9ff51-133">Pobiera atrybuty niestandardowe zastosowane do tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-133">Gets the custom attributes applied to this parameter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public virtual object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="9ff51-134">Ten argument jest ignorowany w przypadku obiektów tego typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-134">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="9ff51-135">Pobiera atrybuty niestandardowe zdefiniowane dla tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-135">Gets all the custom attributes defined on this parameter.</span></span></summary>
        <returns><span data-ttu-id="9ff51-136">Tablica, która zawiera wszystkie atrybuty niestandardowe zastosowane do tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-136">An array that contains all the custom attributes applied to this parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-137">Ta metoda powoduje ignorowanie `inherit` parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-137">This method ignores the `inherit` parameter.</span></span> <span data-ttu-id="9ff51-138">Aby przeszukać łańcuch dziedziczenia dla atrybutów dla parametrów, należy użyć odpowiedniego przeciążenia metody <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-138">To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-139">W poniższym przykładzie przedstawiono sposób niestandardowych atrybutów, które zostały zastosowane do parametrów metody mogą być pobierane w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="9ff51-139">The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time.</span></span> <span data-ttu-id="9ff51-140">W przykładzie zdefiniowano atrybutu niestandardowego o nazwie `MyAttribute` , który można zastosować do parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-140">The example defines a custom attribute named `MyAttribute` that can be applied to parameters.</span></span> <span data-ttu-id="9ff51-141">Przykład definiuje klasę o nazwie `MyClass` za pomocą metody o nazwie `MyMethod`i stosuje `MyAttribute` do parametru metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-141">The example then defines a class named `MyClass` with a method named `MyMethod`, and applies `MyAttribute` to a parameter of the method.</span></span>  
  
 <span data-ttu-id="9ff51-142">Po uruchomieniu przykładzie używa <xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29> metoda pobierania atrybutów niestandardowych, które zostały zastosowane do wszystkich parametrów wszystkie metody w `MyClass`i wyświetla je w konsoli.</span><span class="sxs-lookup"><span data-stu-id="9ff51-142">When the example is run, it uses the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29> method to retrieve the custom attributes that have been applied to all parameters of all methods in `MyClass`, and displays them at the console.</span></span>  
  
 [!code-cpp[ParameterInfo_GetCustomAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_GetCustomAttributes/CPP/source.cpp#1)]
 [!code-csharp[ParameterInfo_GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_GetCustomAttributes/CS/source.cs#1)]
 [!code-vb[ParameterInfo_GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_GetCustomAttributes/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9ff51-143">Nie można załadować typu atrybutu niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-143">A custom attribute type could not be loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="9ff51-144">Niestandardowe atrybuty identyfikowanych według typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-144">The custom attributes identified by type.</span></span></param>
        <param name="inherit"><span data-ttu-id="9ff51-145">Ten argument jest ignorowany w przypadku obiektów tego typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-145">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="9ff51-146">Pobiera atrybuty niestandardowe określonego typu lub jego typów pochodnych, które są stosowane do tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-146">Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</span></span></summary>
        <returns><span data-ttu-id="9ff51-147">Tablica, która zawiera atrybuty niestandardowe określonego typu lub jego typów pochodnych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-147">An array that contains the custom attributes of the specified type or its derived types.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-148">Ta metoda powoduje ignorowanie `inherit` parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-148">This method ignores the `inherit` parameter.</span></span> <span data-ttu-id="9ff51-149">Aby przeszukać łańcuch dziedziczenia dla atrybutów dla parametrów, należy użyć odpowiedniego przeciążenia metody <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-149">To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9ff51-150">Typ musi być typem dostarczonym źródłowy system plików wykonywalnych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-150">The type must be a type provided by the underlying runtime system.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9ff51-151"><paramref name="attributeType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-151"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9ff51-152">Nie można załadować typu atrybutu niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-152">A custom attribute type could not be loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ff51-153">Zwraca listę <see cref="T:System.Reflection.CustomAttributeData" /> obiekty dla bieżącego parametru, którego można użyć w kontekstu reflection-only.</span><span class="sxs-lookup"><span data-stu-id="9ff51-153">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects for the current parameter, which can be used in the reflection-only context.</span></span></summary>
        <returns><span data-ttu-id="9ff51-154">Ogólny listę <see cref="T:System.Reflection.CustomAttributeData" /> obiekty reprezentujące dane dotyczące atrybutów, które zostały zastosowane do bieżącego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-154">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-155">Użyj tej metody do sprawdzenia kod w kontekście tylko odbicie w przypadkach, gdzie same atrybuty niestandardowe są zdefiniowane w kodzie, który jest ładowany do kontekstu reflection-only atrybutów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-155">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="9ff51-156">Metody, takie jak <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> i <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType> nie można użyć w takich przypadkach, ponieważ tworzenia wystąpień atrybutów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-156">Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="9ff51-157">Nie można wykonać kodu w kontekstu reflection-only.</span><span class="sxs-lookup"><span data-stu-id="9ff51-157">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="9ff51-158">Aby uzyskać więcej informacji i przykładowy kod, zobacz <xref:System.Reflection.CustomAttributeData> klasy.</span><span class="sxs-lookup"><span data-stu-id="9ff51-158">For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ff51-159">Pobiera opcjonalne Modyfikatory niestandardowego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-159">Gets the optional custom modifiers of the parameter.</span></span></summary>
        <returns><span data-ttu-id="9ff51-160">Tablica <see cref="T:System.Type" /> obiektów, które zidentyfikować opcjonalne Modyfikatory niestandardowe bieżącego parametru, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" /> lub <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-160">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-161"><xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> i <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> metody są udostępniane dla projektantów kompilatory zarządzanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-161">The <xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="9ff51-162">Aby uzyskać więcej informacji na Modyfikatory niestandardowych, zobacz <xref:System.Runtime.CompilerServices.IsBoxed> i powiązanych klas w <xref:System.Runtime.CompilerServices> przestrzeni nazw i specyfikacja metadanych w dokumentacji ECMA II partycji.</span><span class="sxs-lookup"><span data-stu-id="9ff51-162">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace, and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="9ff51-163">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="9ff51-163">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRealObject">
      <MemberSignature Language="C#" Value="public object GetRealObject (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRealObject(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRealObject (context As StreamingContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRealObject(System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="9ff51-164">Serializowanym strumieniu, z którego deserializowany jest bieżący obiekt.</span><span class="sxs-lookup"><span data-stu-id="9ff51-164">The serialized stream from which the current object is deserialized.</span></span></param>
        <summary><span data-ttu-id="9ff51-165">Zwraca obiekt prawdziwe, który należy zdeserializować zamiast obiekt, który określa strumieniu serializowanym.</span><span class="sxs-lookup"><span data-stu-id="9ff51-165">Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</span></span></summary>
        <returns><span data-ttu-id="9ff51-166">Obiekt rzeczywiste do wykresu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-166">The actual object that is put into the graph.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-167">Ta metoda implementuje <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-167">This method implements the <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><span data-ttu-id="9ff51-168">Pozycja parametru na liście parametrów jego skojarzony członek nie jest prawidłowa dla tego elementu członkowskiego typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-168">The parameter's position in the parameter list of its associated member is not valid for that member's type.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="9ff51-169">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-169">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="9ff51-170">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span><span class="sxs-lookup"><span data-stu-id="9ff51-170">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ff51-171">Pobiera wymagane Modyfikatory niestandardowego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-171">Gets the required custom modifiers of the parameter.</span></span></summary>
        <returns><span data-ttu-id="9ff51-172">Tablica <see cref="T:System.Type" /> obiektów, które zidentyfikować wymagane Modyfikatory niestandardowe bieżącego parametru, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" /> lub <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-172">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-173"><xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> i <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> metody są udostępniane dla projektantów kompilatory zarządzanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-173">The <xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="9ff51-174">Aby uzyskać więcej informacji na Modyfikatory niestandardowych, zobacz <xref:System.Runtime.CompilerServices.IsBoxed> i powiązanych klas w <xref:System.Runtime.CompilerServices> przestrzeni nazw i specyfikacja metadanych w dokumentacji ECMA II partycji.</span><span class="sxs-lookup"><span data-stu-id="9ff51-174">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace, and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="9ff51-175">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="9ff51-175">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDefaultValue">
      <MemberSignature Language="C#" Value="public virtual bool HasDefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasDefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.HasDefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasDefaultValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasDefaultValue { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-176">Pobiera wartość wskazującą, czy ten parametr ma wartość domyślną.</span><span class="sxs-lookup"><span data-stu-id="9ff51-176">Gets a value that indicates whether this parameter has a default value.</span></span></summary>
        <value>
          <span data-ttu-id="9ff51-177"><see langword="true" /> Jeśli ten parametr ma wartość domyślną; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-177"><see langword="true" /> if this parameter has a default value; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="9ff51-178"><see langword="Type" /> Obiektu do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="9ff51-178">The <see langword="Type" /> object to search for.</span></span></param>
        <param name="inherit"><span data-ttu-id="9ff51-179">Ten argument jest ignorowany w przypadku obiektów tego typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-179">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="9ff51-180">Określa, czy atrybut niestandardowy określonego typu lub jego typów pochodnych jest stosowane do tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-180">Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</span></span></summary>
        <returns>
          <span data-ttu-id="9ff51-181"><see langword="true" /> Jeśli jeden lub więcej wystąpień <paramref name="attributeType" /> lub jego typów pochodnych są stosowane do tego parametru, a w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-181"><see langword="true" /> if one or more instances of <paramref name="attributeType" /> or its derived types are applied to this parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-182">Ta metoda powoduje ignorowanie `inherit` parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-182">This method ignores the `inherit` parameter.</span></span> <span data-ttu-id="9ff51-183">Aby przeszukać łańcuch dziedziczenia dla atrybutów dla parametrów, należy użyć odpowiedniego przeciążenia metody <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-183">To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-184">W poniższym przykładzie zdefiniowano dwa atrybuty niestandardowe, `MyAttribute` i `MyDerivedAttribute`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-184">The following example defines two custom attributes, `MyAttribute` and `MyDerivedAttribute`.</span></span> <span data-ttu-id="9ff51-185">`MyDerivedAttribute` jest pochodną `MyAttribute`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-185">`MyDerivedAttribute` is derived from `MyAttribute`.</span></span> <span data-ttu-id="9ff51-186">Przykład następnie stosuje te atrybuty z parametrami metody przykład klasy.</span><span class="sxs-lookup"><span data-stu-id="9ff51-186">The example then applies these attributes to the parameters of a method of an example class.</span></span>  
  
 <span data-ttu-id="9ff51-187">Po uruchomieniu przykładzie używa <xref:System.Reflection.ParameterInfo.IsDefined%2A> metody do testowania wszystkie parametry wszystkie metody w klasie przykład.</span><span class="sxs-lookup"><span data-stu-id="9ff51-187">When the example is run, it uses the <xref:System.Reflection.ParameterInfo.IsDefined%2A> method to test all parameters of all methods in the example class.</span></span> <span data-ttu-id="9ff51-188">Następnie wyświetla parametry, które mają `MyAttribute` lub `MyDerivedAttribute`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-188">It then displays the parameters that have `MyAttribute` or `MyDerivedAttribute`.</span></span>  
  
 [!code-cpp[ParameterInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_GetCustomAttribute_IsDefined/CPP/ParameterInfo_GetCustomAttribute_IsDefined.cpp#1)]
 [!code-csharp[ParameterInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_GetCustomAttribute_IsDefined/CS/parameterinfo_getcustomattribute_isdefined.cs#1)]
 [!code-vb[ParameterInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_GetCustomAttribute_IsDefined/VB/parameterinfo_getcustomattribute_isdefined.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9ff51-189"><paramref name="attributeType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-189"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ff51-190"><paramref name="attributeType" /> nie jest <see cref="T:System.Type" /> obiekt dostarczony przez środowisko uruchomieniowe języka wspólnego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-190"><paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the common language runtime.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsIn">
      <MemberSignature Language="C#" Value="public bool IsIn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIn" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsIn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIn { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-191">Pobiera wartość wskazującą, czy jest to parametr wejściowy.</span><span class="sxs-lookup"><span data-stu-id="9ff51-191">Gets a value indicating whether this is an input parameter.</span></span></summary>
        <value>
          <span data-ttu-id="9ff51-192"><see langword="true" /> Jeśli parametr jest parametrem wejściowym; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-192"><see langword="true" /> if the parameter is an input parameter; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-193">Ta metoda jest zależna od flagi opcjonalne metadanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-193">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="9ff51-194">Ta flaga mogą być wstawiane przez kompilatory, ale kompilatory nie obowiązku to zrobić.</span><span class="sxs-lookup"><span data-stu-id="9ff51-194">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="9ff51-195">Ta metoda korzysta z `In` flagę `ParameterAttributes` modułu wyliczającego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-195">This method utilizes the `In` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="9ff51-196">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-196">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-197">Poniższy przykład przedstawia sposób parametry metody do testowania <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, i <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> atrybutów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-197">The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> attributes.</span></span>  
  
 <span data-ttu-id="9ff51-198">Przykład zawierający `DefineMethod` metodę, która wykonuje następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="9ff51-198">The example contains a `DefineMethod` method that does the following:</span></span>  
  
-   <span data-ttu-id="9ff51-199">Tworzy zestaw dynamiczny, zawierający `MyType` typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-199">Creates a dynamic assembly containing a `MyType` type.</span></span>  
  
-   <span data-ttu-id="9ff51-200">Dodaje `MyMethod` metodę `MyType`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-200">Adds a `MyMethod` method to `MyType`.</span></span> <span data-ttu-id="9ff51-201">`MyMethod` ma trzy parametry.</span><span class="sxs-lookup"><span data-stu-id="9ff51-201">`MyMethod` has three parameters.</span></span> <span data-ttu-id="9ff51-202">Pierwszy parametr jest zdefiniowana z <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, druga z <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, a trzeci z <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-202">The first parameter is defined with <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, the second with <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and the third with <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9ff51-203">Wywołania <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> do ukończenia typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-203">Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> to complete the type.</span></span>  
  
 <span data-ttu-id="9ff51-204">Po wykonaniu `DefineMethod`, przykładzie wyszukiwania zestawów, które są aktualnie ładowane, aż do znalezienia zestawu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-204">After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</span></span> <span data-ttu-id="9ff51-205">Ładuje `MyType` z zestawu, pobiera <xref:System.Reflection.MethodInfo> obiekt do `MyMethod` metody i sprawdza, czy parametry.</span><span class="sxs-lookup"><span data-stu-id="9ff51-205">It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters.</span></span> <span data-ttu-id="9ff51-206">W przykładzie użyto <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, i <xref:System.Reflection.ParameterInfo.IsOptional%2A> właściwości, aby wyświetlić informacje na temat parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-206">The example uses the <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, and <xref:System.Reflection.ParameterInfo.IsOptional%2A> properties to display information about the parameters.</span></span>  
  
 [!code-cpp[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/CPP/ParameterInfo_IsIn_IsOut_IsOptional.cpp#1)]
 [!code-csharp[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/CS/parameterinfo_isin_isout_isoptional.cs#1)]
 [!code-vb[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/VB/parameterinfo_isin_isout_isoptional.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLcid">
      <MemberSignature Language="C#" Value="public bool IsLcid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLcid" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsLcid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLcid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLcid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-207">Pobiera wartość wskazującą, czy ten parametr jest identyfikator ustawień regionalnych (lcid).</span><span class="sxs-lookup"><span data-stu-id="9ff51-207">Gets a value indicating whether this parameter is a locale identifier (lcid).</span></span></summary>
        <value>
          <span data-ttu-id="9ff51-208"><see langword="true" /> Jeśli parametr jest identyfikatora ustawień regionalnych. w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-208"><see langword="true" /> if the parameter is a locale identifier; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-209">Ta metoda jest zależna od flagi opcjonalne metadanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-209">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="9ff51-210">Ta flaga mogą być wstawiane przez kompilatory, ale kompilatory nie obowiązku to zrobić.</span><span class="sxs-lookup"><span data-stu-id="9ff51-210">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="9ff51-211">Ta metoda korzysta z `Lcid` flagę `ParameterAttributes` modułu wyliczającego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-211">This method utilizes the `Lcid` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="9ff51-212">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-212">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOptional">
      <MemberSignature Language="C#" Value="public bool IsOptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOptional" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsOptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-213">Pobiera wartość wskazującą, czy ten parametr jest opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="9ff51-213">Gets a value indicating whether this parameter is optional.</span></span></summary>
        <value>
          <span data-ttu-id="9ff51-214"><see langword="true" /> Jeśli parametr jest opcjonalny; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-214"><see langword="true" /> if the parameter is optional; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-215">Ta metoda jest zależna od flagi opcjonalne metadanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-215">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="9ff51-216">Ta flaga mogą być wstawiane przez kompilatory, ale kompilatory nie obowiązku to zrobić.</span><span class="sxs-lookup"><span data-stu-id="9ff51-216">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="9ff51-217">Ta metoda korzysta z `Optional` flagę `ParameterAttributes` modułu wyliczającego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-217">This method utilizes the `Optional` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="9ff51-218">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw pobrać metodę, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-218">To get the <xref:System.Reflection.ParameterInfo> array, first get the method and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-219">Poniższy przykład przedstawia sposób parametry metody do testowania <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, i <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> atrybutów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-219">The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> attributes.</span></span>  
  
 <span data-ttu-id="9ff51-220">Przykład zawierający `DefineMethod` metodę, która wykonuje następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="9ff51-220">The example contains a `DefineMethod` method that does the following:</span></span>  
  
-   <span data-ttu-id="9ff51-221">Tworzy zestaw dynamiczny, zawierający `MyType` typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-221">Creates a dynamic assembly containing a `MyType` type.</span></span>  
  
-   <span data-ttu-id="9ff51-222">Dodaje `MyMethod` metodę `MyType`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-222">Adds a `MyMethod` method to `MyType`.</span></span> <span data-ttu-id="9ff51-223">`MyMethod` ma trzy parametry.</span><span class="sxs-lookup"><span data-stu-id="9ff51-223">`MyMethod` has three parameters.</span></span> <span data-ttu-id="9ff51-224">Pierwszy parametr jest zdefiniowana z <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, druga z <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, a trzeci z <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-224">The first parameter is defined with <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, the second with <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and the third with <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9ff51-225">Wywołania <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> do ukończenia typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-225">Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> to complete the type.</span></span>  
  
 <span data-ttu-id="9ff51-226">Po wykonaniu `DefineMethod`, przykładzie wyszukiwania zestawów, które są aktualnie ładowane, aż do znalezienia zestawu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-226">After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</span></span> <span data-ttu-id="9ff51-227">Ładuje `MyType` z zestawu, pobiera <xref:System.Reflection.MethodInfo> obiekt do `MyMethod` metody i sprawdza, czy parametry.</span><span class="sxs-lookup"><span data-stu-id="9ff51-227">It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters.</span></span> <span data-ttu-id="9ff51-228">W przykładzie użyto <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, i <xref:System.Reflection.ParameterInfo.IsOptional%2A> właściwości, aby wyświetlić informacje na temat parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-228">The example uses the <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, and <xref:System.Reflection.ParameterInfo.IsOptional%2A> properties to display information about the parameters.</span></span>  
  
 [!code-cpp[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/cpp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/CPP/ParameterInfo_IsIn_IsOut_IsOptional.cpp#1)]
 [!code-csharp[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/CS/parameterinfo_isin_isout_isoptional.cs#1)]
 [!code-vb[ParameterInfo_IsIn_IsOut_IsOptional#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional/VB/parameterinfo_isin_isout_isoptional.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOut">
      <MemberSignature Language="C#" Value="public bool IsOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOut" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsOut" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOut { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-229">Pobiera wartość wskazującą, czy jest to parametr wyjściowy.</span><span class="sxs-lookup"><span data-stu-id="9ff51-229">Gets a value indicating whether this is an output parameter.</span></span></summary>
        <value>
          <span data-ttu-id="9ff51-230"><see langword="true" /> Jeśli parametr jest parametrem wyjściowym; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-230"><see langword="true" /> if the parameter is an output parameter; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-231">Ta metoda jest zależna od flagi opcjonalne metadanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-231">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="9ff51-232">Ta flaga mogą być wstawiane przez kompilatory, ale kompilatory nie obowiązku to zrobić.</span><span class="sxs-lookup"><span data-stu-id="9ff51-232">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="9ff51-233">Ta metoda korzysta z `Out` flagę `ParameterAttributes` modułu wyliczającego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-233">This method utilizes the `Out` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="9ff51-234">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-234">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-235">Poniższy przykład przedstawia sposób parametry metody do testowania <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, i <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> atrybutów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-235">The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType> attributes.</span></span>  
  
 <span data-ttu-id="9ff51-236">Przykład zawierający `DefineMethod` metodę, która wykonuje następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="9ff51-236">The example contains a `DefineMethod` method that does the following:</span></span>  
  
-   <span data-ttu-id="9ff51-237">Tworzy zestaw dynamiczny, zawierający `MyType` typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-237">Creates a dynamic assembly containing a `MyType` type.</span></span>  
  
-   <span data-ttu-id="9ff51-238">Dodaje `MyMethod` metodę `MyType`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-238">Adds a `MyMethod` method to `MyType`.</span></span> <span data-ttu-id="9ff51-239">`MyMethod` ma trzy parametry.</span><span class="sxs-lookup"><span data-stu-id="9ff51-239">`MyMethod` has three parameters.</span></span> <span data-ttu-id="9ff51-240">Pierwszy parametr jest zdefiniowana z <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, druga z <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, a trzeci z <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-240">The first parameter is defined with <xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType>, the second with <xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType>, and the third with <xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9ff51-241">Wywołania <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> do ukończenia typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-241">Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> to complete the type.</span></span>  
  
 <span data-ttu-id="9ff51-242">Po wykonaniu `DefineMethod`, przykładzie wyszukiwania zestawów, które są aktualnie ładowane, aż do znalezienia zestawu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-242">After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</span></span> <span data-ttu-id="9ff51-243">Ładuje `MyType` z zestawu, pobiera <xref:System.Reflection.MethodInfo> obiekt do `MyMethod` metody i sprawdza, czy parametry.</span><span class="sxs-lookup"><span data-stu-id="9ff51-243">It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters.</span></span> <span data-ttu-id="9ff51-244">W przykładzie użyto <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, i <xref:System.Reflection.ParameterInfo.IsOptional%2A> właściwości, aby wyświetlić informacje na temat parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-244">The example uses the <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, and <xref:System.Reflection.ParameterInfo.IsOptional%2A> properties to display information about the parameters.</span></span>  
  
 [!code-cpp[Classic ParameterInfo.IsOut Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ParameterInfo.IsOut Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ParameterInfo.IsOut Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ParameterInfo.IsOut Example/CS/source.cs#1)]
 [!code-vb[Classic ParameterInfo.IsOut Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ParameterInfo.IsOut Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRetval">
      <MemberSignature Language="C#" Value="public bool IsRetval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRetval" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.IsRetval" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRetval As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRetval { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-245">Pobiera wartość wskazującą, czy jest to <see langword="Retval" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-245">Gets a value indicating whether this is a <see langword="Retval" /> parameter.</span></span></summary>
        <value>
          <span data-ttu-id="9ff51-246"><see langword="true" /> Jeśli parametr jest <see langword="Retval" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-246"><see langword="true" /> if the parameter is a <see langword="Retval" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-247">Ta metoda jest zależna od flagi opcjonalne metadanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-247">This method depends on an optional metadata flag.</span></span> <span data-ttu-id="9ff51-248">Ta flaga mogą być wstawiane przez kompilatory, ale kompilatory nie obowiązku to zrobić.</span><span class="sxs-lookup"><span data-stu-id="9ff51-248">This flag can be inserted by compilers, but the compilers are not obligated to do so.</span></span>  
  
 <span data-ttu-id="9ff51-249">Ta metoda korzysta z `Retval` flagę `ParameterAttributes` modułu wyliczającego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-249">This method utilizes the `Retval` flag of the `ParameterAttributes` enumerator.</span></span>  
  
 <span data-ttu-id="9ff51-250">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-250">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo Member" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.Member" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Member As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberInfo ^ Member { System::Reflection::MemberInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-251">Pobiera wartość wskazującą element członkowski, w którym zaimplementowano parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-251">Gets a value indicating the member in which the parameter is implemented.</span></span></summary>
        <value><span data-ttu-id="9ff51-252">Element członkowski, który używane parametru reprezentowanego przez ten <see cref="T:System.Reflection.ParameterInfo" />.</span><span class="sxs-lookup"><span data-stu-id="9ff51-252">The member which implanted the parameter represented by this <see cref="T:System.Reflection.ParameterInfo" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberImpl">
      <MemberSignature Language="C#" Value="protected System.Reflection.MemberInfo MemberImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Reflection.MemberInfo MemberImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.MemberImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MemberImpl As MemberInfo " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Reflection::MemberInfo ^ MemberImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-253">Element członkowski, w którym zaimplementowano pola.</span><span class="sxs-lookup"><span data-stu-id="9ff51-253">The member in which the field is implemented.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-254">To pole jest przeznaczona tylko dla użytkowników, którzy są wyprowadzanie klasy z `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-254">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="9ff51-255">Typowy dostęp do nazwy parametru jest za pośrednictwem <xref:System.Reflection.ParameterInfo.Member%2A>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-255">Typical access to the parameter name is through the <xref:System.Reflection.ParameterInfo.Member%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataToken">
      <MemberSignature Language="C#" Value="public virtual int MetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.MetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MetadataToken { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-256">Pobiera wartość, która identyfikuje ten parametr w metadanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-256">Gets a value that identifies this parameter in metadata.</span></span></summary>
        <value><span data-ttu-id="9ff51-257">Wartość, która w połączeniu z modułem, unikatowo identyfikuje tego parametru w metadanych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-257">A value which, in combination with the module, uniquely identifies this parameter in metadata.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-258">Aby uzyskać modułu, należy użyć <xref:System.Reflection.MemberInfo.Module%2A> właściwość elementu członkowskiego, który definiuje tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-258">To get the module, use the <xref:System.Reflection.MemberInfo.Module%2A> property of the member that defines this parameter.</span></span>  
  
 <span data-ttu-id="9ff51-259">Tokeny przy użyciu tej właściwości mogą być przekazywane do niezarządzanego API odbicia.</span><span class="sxs-lookup"><span data-stu-id="9ff51-259">The tokens obtained using this property can be passed to the unmanaged Reflection API.</span></span> <span data-ttu-id="9ff51-260">Aby uzyskać więcej informacji, zobacz [niezarządzanego API odbicia](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span><span class="sxs-lookup"><span data-stu-id="9ff51-260">For more information, please see [Unmanaged Reflection API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-261">Pobiera nazwę parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-261">Gets the name of the parameter.</span></span></summary>
        <value><span data-ttu-id="9ff51-262">Prosta nazwa tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-262">The simple name of this parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-263">Ta właściwość korzysta z chronionej <xref:System.Reflection.ParameterInfo.NameImpl> pola i zależy od flagi opcjonalne metadane mogą nie być dostępne w wszystkie kompilatory.</span><span class="sxs-lookup"><span data-stu-id="9ff51-263">This property utilizes the protected <xref:System.Reflection.ParameterInfo.NameImpl> field, and depends on an optional metadata flag that might not be available in all compilers.</span></span>  
  
 <span data-ttu-id="9ff51-264">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-264">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call the <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="9ff51-265">Jeśli <xref:System.Reflection.ParameterInfo> reprezentuje zwracaną wartość (to znaczy, jeśli zostały pobrane przy użyciu <xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType> właściwości), ta właściwość będzie `null`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-265">If this <xref:System.Reflection.ParameterInfo> represents a return value (that is, if it was obtained by using the <xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType> property), this property will be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-266">Poniższy przykład przedstawia sposób uzyskać <xref:System.Reflection.ParameterInfo> obiektów dla parametrów metody, a następnie użyć <xref:System.Reflection.ParameterInfo.Name%2A> właściwości można uzyskać nazwy parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-266">The following example shows how to get <xref:System.Reflection.ParameterInfo> objects for the parameters of a method, and then use the <xref:System.Reflection.ParameterInfo.Name%2A> property to obtain the parameter names.</span></span>  
  
 [!code-cpp[Classic ParameterInfo.Name Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ParameterInfo.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ParameterInfo.Name Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ParameterInfo.Name Example/CS/source.cs#1)]
 [!code-vb[Classic ParameterInfo.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ParameterInfo.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameImpl">
      <MemberSignature Language="C#" Value="protected string NameImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family string NameImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.NameImpl" />
      <MemberSignature Language="VB.NET" Value="Protected NameImpl As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ NameImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-267">Nazwa parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-267">The name of the parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-268">To pole jest przeznaczona tylko dla użytkowników, którzy są wyprowadzanie klasy z `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-268">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="9ff51-269">Typowy dostęp do nazwy parametru jest za pośrednictwem <xref:System.Reflection.ParameterInfo.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-269">Typical access to the parameter name is through the <xref:System.Reflection.ParameterInfo.Name%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterType">
      <MemberSignature Language="C#" Value="public virtual Type ParameterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ParameterType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.ParameterType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ParameterType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ParameterType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-270">Pobiera <see langword="Type" /> tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-270">Gets the <see langword="Type" /> of this parameter.</span></span></summary>
        <value><span data-ttu-id="9ff51-271"><see langword="Type" /> Obiekt, który reprezentuje <see langword="Type" /> tego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-271">The <see langword="Type" /> object that represents the <see langword="Type" /> of this parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-272">Ta metoda jest zależna od opcjonalne metadane i może nie być dostępne na wszystkich kompilatory.</span><span class="sxs-lookup"><span data-stu-id="9ff51-272">This method depends on an optional metadata and might not be available in all compilers.</span></span>  
  
 <span data-ttu-id="9ff51-273">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-273">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ff51-274">Poniższy przykład przedstawia sposób uzyskać <xref:System.Reflection.ParameterInfo> obiektów dla parametrów metody, a następnie użyć <xref:System.Reflection.ParameterInfo.ParameterType%2A> właściwość, aby wyświetlić typ każdego parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-274">The following example shows how to get <xref:System.Reflection.ParameterInfo> objects for the parameters of a method, and then use the <xref:System.Reflection.ParameterInfo.ParameterType%2A> property to display the type of each parameter.</span></span>  
  
 [!code-cpp[Classic ParameterInfo.ParameterType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ParameterInfo.ParameterType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ParameterInfo.ParameterType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ParameterInfo.ParameterType Example/CS/source.cs#1)]
 [!code-vb[Classic ParameterInfo.ParameterType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ParameterInfo.ParameterType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public virtual int Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Position" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Position As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Position { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-275">Pobiera liczona od zera pozycja parametru na liście parametrów formalnych.</span><span class="sxs-lookup"><span data-stu-id="9ff51-275">Gets the zero-based position of the parameter in the formal parameter list.</span></span></summary>
        <value><span data-ttu-id="9ff51-276">Całkowitą reprezentującą położenie tego parametru zajmuje się na liście parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-276">An integer representing the position this parameter occupies in the parameter list.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-277">Tylko parametry w podpisie metody (to znaczy, że na liście parametrów formalnych) są brane pod uwagę podczas obliczania pozycji.</span><span class="sxs-lookup"><span data-stu-id="9ff51-277">Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position.</span></span> <span data-ttu-id="9ff51-278">Na przykład metody, parametr ukryty, który reprezentuje `this` (`Me` w języku Visual Basic) jest pomijany.</span><span class="sxs-lookup"><span data-stu-id="9ff51-278">For instance methods, the hidden parameter that represents `this` (`Me` in Visual Basic) is not counted.</span></span>  
  
 <span data-ttu-id="9ff51-279">Ta metoda używa <xref:System.Reflection.ParameterInfo.PositionImpl> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-279">This method utilizes the <xref:System.Reflection.ParameterInfo.PositionImpl> method.</span></span>  
  
 <span data-ttu-id="9ff51-280">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-280">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.ParameterInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="PositionImpl">
      <MemberSignature Language="C#" Value="protected int PositionImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 PositionImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ParameterInfo.PositionImpl" />
      <MemberSignature Language="VB.NET" Value="Protected PositionImpl As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected: int PositionImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-281">Liczony od zera pozycja parametru na liście parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ff51-281">The zero-based position of the parameter in the parameter list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-282">To pole jest przeznaczona tylko dla użytkowników, którzy są wyprowadzanie klasy z `ParameterInfo`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-282">This field is intended only for users who are deriving classes from `ParameterInfo`.</span></span>  
  
 <span data-ttu-id="9ff51-283">Typowy dostęp do nazwy parametru odbywa się za pośrednictwem <xref:System.Reflection.ParameterInfo.Position%2A>.</span><span class="sxs-lookup"><span data-stu-id="9ff51-283">Typical access to the name of the parameter is through <xref:System.Reflection.ParameterInfo.Position%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawDefaultValue">
      <MemberSignature Language="C#" Value="public virtual object RawDefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object RawDefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ParameterInfo.RawDefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RawDefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ RawDefaultValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ff51-284">Pobiera wartość wskazującą wartość domyślną, jeśli parametr ma wartość domyślną.</span><span class="sxs-lookup"><span data-stu-id="9ff51-284">Gets a value indicating the default value if the parameter has a default value.</span></span></summary>
        <value><span data-ttu-id="9ff51-285">Wartość domyślna parametru lub <see cref="F:System.DBNull.Value" /> Jeśli parametr nie ma wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="9ff51-285">The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-286">Tej właściwości można użyć zarówno kontekstu wykonywania i kontekstu reflection-only.</span><span class="sxs-lookup"><span data-stu-id="9ff51-286">This property can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="9ff51-287">Wartością domyślną jest używany, gdy bieżąca wartość nie jest określona w wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-287">The default value is used when an actual value is not specified in the method call.</span></span> <span data-ttu-id="9ff51-288">Parametr może mieć wartości domyślnej, która jest `null`.</span><span class="sxs-lookup"><span data-stu-id="9ff51-288">A parameter can have a default value that is `null`.</span></span> <span data-ttu-id="9ff51-289">To różni się od liter, w którym nie zdefiniowano wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="9ff51-289">This is distinct from the case where a default value is not defined.</span></span>  
  
 <span data-ttu-id="9ff51-290">Aby uzyskać <xref:System.Reflection.ParameterInfo> tablicy, najpierw uzyskać metody lub konstruktora, a następnie wywołać <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="9ff51-290">To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call the <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.IsDefined">
      <MemberSignature Language="C#" Value="bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Reflection.ICustomAttributeProvider.IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Reflection.ICustomAttributeProvider.IsDefined(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::IsDefined;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _ParameterInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _ParameterInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_ParameterInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="9ff51-291">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="9ff51-291">Reserved for future use.</span></span> <span data-ttu-id="9ff51-292">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="9ff51-292">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="9ff51-293">Przekazana tablica nazw ma być mapowana.</span><span class="sxs-lookup"><span data-stu-id="9ff51-293">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="9ff51-294">Liczba nazw, które mają być mapowane.</span><span class="sxs-lookup"><span data-stu-id="9ff51-294">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="9ff51-295">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</span><span class="sxs-lookup"><span data-stu-id="9ff51-295">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="9ff51-296">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</span><span class="sxs-lookup"><span data-stu-id="9ff51-296">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="9ff51-297">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</span><span class="sxs-lookup"><span data-stu-id="9ff51-297">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-298">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-298">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9ff51-299">Aby uzyskać więcej informacji na temat `IDispatch::GetIDsOfNames`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="9ff51-299">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="9ff51-300">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="9ff51-300">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ParameterInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _ParameterInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _ParameterInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_ParameterInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="9ff51-301">Informacje o typie, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="9ff51-301">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="9ff51-302">Identyfikator regionalny dla informacji o typie.</span><span class="sxs-lookup"><span data-stu-id="9ff51-302">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="9ff51-303">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-303">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="9ff51-304">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-304">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-305">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-305">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9ff51-306">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfo`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="9ff51-306">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="9ff51-307">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="9ff51-307">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _ParameterInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _ParameterInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_ParameterInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="9ff51-308">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="9ff51-308">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="9ff51-309">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</span><span class="sxs-lookup"><span data-stu-id="9ff51-309">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-310">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9ff51-311">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfoCount`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="9ff51-311">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="9ff51-312">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="9ff51-312">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ParameterInfo.Invoke">
      <MemberSignature Language="C#" Value="void _ParameterInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ParameterInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _ParameterInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ParameterInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_ParameterInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ParameterInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="9ff51-313">Określa element członkowski.</span><span class="sxs-lookup"><span data-stu-id="9ff51-313">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="9ff51-314">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="9ff51-314">Reserved for future use.</span></span> <span data-ttu-id="9ff51-315">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="9ff51-315">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="9ff51-316">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</span><span class="sxs-lookup"><span data-stu-id="9ff51-316">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="9ff51-317">Flagi opisujące kontekst wywołania.</span><span class="sxs-lookup"><span data-stu-id="9ff51-317">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="9ff51-318">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</span><span class="sxs-lookup"><span data-stu-id="9ff51-318">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="9ff51-319">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</span><span class="sxs-lookup"><span data-stu-id="9ff51-319">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="9ff51-320">Wskaźnik do struktury, która zawiera informacje o wyjątku.</span><span class="sxs-lookup"><span data-stu-id="9ff51-320">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="9ff51-321">Indeks pierwszego argumentu, który zawiera błąd.</span><span class="sxs-lookup"><span data-stu-id="9ff51-321">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="9ff51-322">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="9ff51-322">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ff51-323">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="9ff51-323">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9ff51-324">Aby uzyskać więcej informacji na temat `IDispatch::Invoke`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="9ff51-324">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="9ff51-325">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="9ff51-325">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ParameterInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ff51-326">Pobiera typ parametru i nazwa wyświetlana w postaci ciągu.</span><span class="sxs-lookup"><span data-stu-id="9ff51-326">Gets the parameter type and name represented as a string.</span></span></summary>
        <returns><span data-ttu-id="9ff51-327">Ciąg zawierający typ i nazwa parametru.</span><span class="sxs-lookup"><span data-stu-id="9ff51-327">A string containing the type and the name of the parameter.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>