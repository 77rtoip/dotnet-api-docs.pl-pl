<Type Name="EventInfo" FullName="System.Reflection.EventInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="518f709ef6e173b6819e286d5e46c8f5b691e7c6" /><Meta Name="ms.sourcegitcommit" Value="24f564114ee2fa9c63dbac1b25b82826cc4e320f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/25/2019" /><Meta Name="ms.locfileid" Value="68487438" /></Metadata><TypeSignature Language="C#" Value="public abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit EventInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.EventInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventInfo&#xA;Inherits MemberInfo&#xA;Implements _EventInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_EventInfo" />
  <TypeSignature Language="F#" Value="type EventInfo = class&#xA;    inherit MemberInfo&#xA;    interface _EventInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._EventInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EventInfo))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c1e62-101">Odnajduje atrybuty zdarzenia i zapewnia dostęp do metadanych zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-101">Discovers the attributes of an event and provides access to event metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-102">Użyj klasy, aby sprawdzić zdarzenia i podłączyć procedury obsługi zdarzeń, jak pokazano w przykładowym kodzie <xref:System.Reflection.EventInfo.AddEventHandler%2A> dla metody. <xref:System.Reflection.EventInfo></span><span class="sxs-lookup"><span data-stu-id="c1e62-102">Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c1e62-103"><xref:System.Reflection.EventInfo>nie jest przeznaczony do wywoływania zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-103"><xref:System.Reflection.EventInfo> is not intended to be used to raise events.</span></span> <span data-ttu-id="c1e62-104">Obiekt zgłasza zdarzenia zgodnie z ich stanem wewnętrznym.</span><span class="sxs-lookup"><span data-stu-id="c1e62-104">An object raises events as dictated by its internal state.</span></span>  
  
 <span data-ttu-id="c1e62-105">Zdarzenia są używane z delegatami.</span><span class="sxs-lookup"><span data-stu-id="c1e62-105">Events are used with delegates.</span></span> <span data-ttu-id="c1e62-106">Odbiornik zdarzeń tworzy wystąpienie delegata programu obsługi zdarzeń, który jest wywoływany za każdym razem, gdy zdarzenie jest zgłaszane przez Źródło zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-106">An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</span></span> <span data-ttu-id="c1e62-107">Aby można było nawiązać połączenie ze źródłem zdarzeń, odbiornik zdarzeń dodaje tego delegata do listy wywołań źródła.</span><span class="sxs-lookup"><span data-stu-id="c1e62-107">In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</span></span> <span data-ttu-id="c1e62-108">Gdy zdarzenie jest zgłaszane, wywoływana jest metoda Invoke delegata obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-108">When the event is raised, the invoke method of the event-handler delegate is called.</span></span> <span data-ttu-id="c1e62-109">Obsługiwane są zarówno powiadomienia multiemisji, jak i pojedynczej rzutowania.</span><span class="sxs-lookup"><span data-stu-id="c1e62-109">Both multicast and single-cast event notifications are supported.</span></span> <span data-ttu-id="c1e62-110">Metody i, a `Remove` także Klasa delegatów obsługi zdarzeń skojarzonych ze zdarzeniem, muszą być oznaczone w metadanych. `Add`</span><span class="sxs-lookup"><span data-stu-id="c1e62-110">The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</span></span>  
  
 <span data-ttu-id="c1e62-111">Delegaty to wskaźniki funkcji zorientowane obiektowo.</span><span class="sxs-lookup"><span data-stu-id="c1e62-111">Delegates are object-oriented function pointers.</span></span> <span data-ttu-id="c1e62-112">W języku C C++lub, wskaźnik funkcji jest odwołaniem do metody.</span><span class="sxs-lookup"><span data-stu-id="c1e62-112">In C or C++, a function pointer is a reference to a method.</span></span> <span data-ttu-id="c1e62-113">W przeciwieństwie do wskaźnika C C++ lub funkcji delegat zawiera dwa odwołania: odwołanie do metody i odwołanie do obiektu, który obsługuje metodę.</span><span class="sxs-lookup"><span data-stu-id="c1e62-113">In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</span></span> <span data-ttu-id="c1e62-114">Delegaty mogą wywołać metodę bez znajomości typu klasy, która deklaruje lub dziedziczy metodę.</span><span class="sxs-lookup"><span data-stu-id="c1e62-114">Delegates can invoke a method without knowing the class type that declares or inherits the method.</span></span> <span data-ttu-id="c1e62-115">Delegaty muszą znać tylko typ zwracany i listę parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="c1e62-115">Delegates need only know the return type and parameter list of the method.</span></span>  
  
 <span data-ttu-id="c1e62-116">Model zdarzeń działa równie dobrze w przypadku delegatów z pojedynczym rzutem i multiemisją.</span><span class="sxs-lookup"><span data-stu-id="c1e62-116">The event model works equally well for single-cast and multicast delegates.</span></span> <span data-ttu-id="c1e62-117">Gdy wywoływana jest metoda Invoke obiektu delegowanego, tylko jeden obiekt będzie miał metodę o nazwie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-117">When the delegate's invoke method is called, only a single object will have a method called on it.</span></span> <span data-ttu-id="c1e62-118">Modyfikator multiemisji można zastosować do deklaracji delegata, która umożliwia wywoływanie wielu metod, gdy wywoływana jest metoda Invoke obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-118">A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</span></span>  
  
 <span data-ttu-id="c1e62-119"><xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType>Wywoływanie , gdy`inherit`parametr elementu`GetCustomAttributes` nie przeprowadzihierarchiitypów.`true` `EventInfo`</span><span class="sxs-lookup"><span data-stu-id="c1e62-119">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="c1e62-120">Służy <xref:System.Attribute?displayProperty=nameWithType> do dziedziczenia atrybutów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="c1e62-120">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1e62-121">Poniższy kod pobiera <xref:System.Reflection.EventInfo> obiekt <xref:System.Windows.Forms.Control.Click> dla zdarzenia <xref:System.Windows.Forms.Button> klasy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-121">The following code gets an <xref:System.Reflection.EventInfo> object for the <xref:System.Windows.Forms.Control.Click> event of the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[type_getevent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[type_getevent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[type_getevent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="c1e62-122">aby uzyskać pełne zaufanie dla obiektów dziedziczących.</span><span class="sxs-lookup"><span data-stu-id="c1e62-122">for full trust for inheritors.</span></span> <span data-ttu-id="c1e62-123">Klasa ta nie może być dziedziczona przez kod częściowo zaufany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-123">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="c1e62-124">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="c1e62-124">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="c1e62-125">W przypadku dziedziczenia <see langword="EventInfo" />z, należy zastąpić następujące elementy członkowskie: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, i <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-125">When you inherit from <see langword="EventInfo" />, you must override the following members: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, and <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1e62-126">Inicjuje nowe wystąpienie klasy <see langword="EventInfo" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-126">Initializes a new instance of the <see langword="EventInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-127">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-127">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-128">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-128">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public virtual void AddEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddEventHandler : obj * Delegate -&gt; unit&#xA;override this.AddEventHandler : obj * Delegate -&gt; unit" Usage="eventInfo.AddEventHandler (target, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="c1e62-129">Źródło zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-129">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="c1e62-130">Hermetyzuje metodę lub metody, które mają być wywoływane, gdy zdarzenie jest zgłaszane przez element docelowy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-130">Encapsulates a method or methods to be invoked when the event is raised by the target.</span></span></param>
        <summary><span data-ttu-id="c1e62-131">Dodaje procedurę obsługi zdarzeń do źródła zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-131">Adds an event handler to an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-132">Ta metoda próbuje dodać delegata, aby zsynchronizować zdarzenie w obiekcie docelowym.</span><span class="sxs-lookup"><span data-stu-id="c1e62-132">This method attempts to add a delegate to synchronize the event on the target object.</span></span>  
  
 <span data-ttu-id="c1e62-133">Za każdym razem, gdy zdarzenie jest zgłaszane przez parametr docelowy, metoda lub metody hermetyzowane przez program obsługi są wywoływane.</span><span class="sxs-lookup"><span data-stu-id="c1e62-133">Each time the event is raised by the target parameter, the method or methods encapsulated by the handler are invoked.</span></span>  
  
<span data-ttu-id="c1e62-134">`AddEventHandler` Metody można użyć podczas ładowania typu po zakończeniu kompilowania programu, gdy nie można użyć składni C# + = lub Visual Basic `WithEvents` i `Handles` słów kluczowych, aby podłączyć zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-134">You might use the `AddEventHandler` method when you load a type after the program is already compiled, when it is not possible to use the C# += syntax or the Visual Basic `WithEvents` and `Handles` keywords to hook up the event.</span></span>   
  
## Examples  
 <span data-ttu-id="c1e62-135">Poniższy przykład tworzy wystąpienie <xref:System.Timers.Timer?displayProperty=nameWithType> klasy, tworzy procedurę obsługi zdarzeń przy użyciu zestawu dynamicznego i łączy dynamiczną procedurę obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-135">The following example creates an instance of the <xref:System.Timers.Timer?displayProperty=nameWithType> class, creates an event handler using a dynamic assembly, and hooks up the dynamic event handler.</span></span> <span data-ttu-id="c1e62-136">Wszystkie akcje są wykonywane przy użyciu późnego wiązania.</span><span class="sxs-lookup"><span data-stu-id="c1e62-136">All actions are performed using late binding.</span></span>  
  
 <span data-ttu-id="c1e62-137">Wystąpienie jest przechowywane w zmiennej typu <xref:System.Object>, a wszystkie <xref:System.Timers.Timer> kod, który uzyskuje dostęp do obiektu to z opóźnieniem. <xref:System.Timers.Timer></span><span class="sxs-lookup"><span data-stu-id="c1e62-137">The <xref:System.Timers.Timer> instance is stored in a variable of type <xref:System.Object>, and all code that accesses the <xref:System.Timers.Timer> does so late-bound.</span></span> <span data-ttu-id="c1e62-138">W przykładzie zastosowano <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> metodę w celu <xref:System.Timers.Timer.Elapsed> pobrania zdarzenia i <xref:System.Reflection.EventInfo.EventHandlerType%2A> właściwości, aby uzyskać typ delegata dla zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-138">The example uses the <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method to get the <xref:System.Timers.Timer.Elapsed> event, and the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to get the delegate type for the event.</span></span>  
  
 <span data-ttu-id="c1e62-139">Przykład pobiera <xref:System.Reflection.MethodInfo> `Invoke` metodę dla typu delegata i uzyskuje podpis delegata z <xref:System.Reflection.MethodInfo> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-139">The example gets a <xref:System.Reflection.MethodInfo> for the `Invoke` method of the delegate type and obtains the signature of the delegate from the <xref:System.Reflection.MethodInfo> instance.</span></span> <span data-ttu-id="c1e62-140">Przykład tworzy zestaw `Handler` dynamiczny z jednym modułem zawierającym pojedynczy typ o nazwie i nadaje typ a `static` metody (`Shared` Metoda w Visual Basic) o nazwie `DynamicHandler` , która obsługuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-140">The example then creates a dynamic assembly with one module containing a single type named `Handler` and gives the type a `static` method (`Shared` method in Visual Basic) named `DynamicHandler` that handles the event.</span></span>  
  
 <span data-ttu-id="c1e62-141">Po utworzeniu typu dynamicznego, przykład pobiera <xref:System.Reflection.MethodInfo> dla gotowej metody i używa jej do utworzenia wystąpienia delegata.</span><span class="sxs-lookup"><span data-stu-id="c1e62-141">After the dynamic type is created, the example gets a <xref:System.Reflection.MethodInfo> for the finished method and uses it to create a delegate instance.</span></span> <span data-ttu-id="c1e62-142">To wystąpienie jest przesyłane do <xref:System.Reflection.EventInfo.AddEventHandler%2A> metody, aby podłączyć zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-142">This instance is passed to the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method to hook up the event.</span></span> <span data-ttu-id="c1e62-143">Program wstrzymuje działanie, aby zezwolić na podniesienie zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-143">The program then pauses to allow the event to be raised.</span></span>  
  
 [!code-csharp[AddEventHandler#1](~/samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/cs/source.cs)]
 [!code-vb[AddEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddEventHandler/vb/source.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1e62-144">Zdarzenie nie ma publicznej <see langword="add" /> metody dostępu.</span><span class="sxs-lookup"><span data-stu-id="c1e62-144">The event does not have a public <see langword="add" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1e62-145">Nie można użyć programu obsługi, który został przekazano.</span><span class="sxs-lookup"><span data-stu-id="c1e62-145">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="c1e62-146">W programie <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET dla aplikacji do sklepu Windows</see> lub <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">przenośnej biblioteki klas</see>Przechwyć wyjątek <see cref="T:System.MemberAccessException" />klasy bazowej, zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-146">In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="c1e62-147">Obiekt wywołujący nie ma uprawnień dostępu do elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-147">The caller does not have access permission to the member.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="c1e62-148">W programie <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET dla aplikacji do sklepu Windows</see> lub <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">przenośnej biblioteki klas</see>Przechwyć <see cref="T:System.Exception" /> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-148">In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="c1e62-149"><paramref name="target" /> Parametr jest<see langword="null" /> i zdarzenie nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="c1e62-149">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
<span data-ttu-id="c1e62-150">—lub—</span><span class="sxs-lookup"><span data-stu-id="c1e62-150">-or-</span></span> 
<span data-ttu-id="c1e62-151">Nie <see cref="T:System.Reflection.EventInfo" /> jest zadeklarowany w elemencie docelowym.</span><span class="sxs-lookup"><span data-stu-id="c1e62-151">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-152">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-152">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-153">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-153">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="AddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo AddMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo AddMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.AddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AddMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ AddMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AddMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.AddMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c1e62-154"><see cref="T:System.Reflection.MethodInfo" /> Pobiera obiekt<see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> dla metody zdarzenia, łącznie z metodami niepublicznymi.</span><span class="sxs-lookup"><span data-stu-id="c1e62-154">Gets the <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="c1e62-155"><see cref="T:System.Reflection.MethodInfo" /> Obiekt<see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> dla metody.</span><span class="sxs-lookup"><span data-stu-id="c1e62-155">The <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-156">Ta właściwość jest odpowiednikiem wywołania <xref:System.Reflection.EventInfo.GetAddMethod%2A> z `true`wartością.</span><span class="sxs-lookup"><span data-stu-id="c1e62-156">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.EventAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As EventAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::EventAttributes Attributes { System::Reflection::EventAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.EventAttributes" Usage="System.Reflection.EventInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c1e62-157">Pobiera atrybuty dla tego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-157">Gets the attributes for this event.</span></span></summary>
        <value><span data-ttu-id="c1e62-158">Atrybuty tylko do odczytu dla tego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-158">The read-only attributes for this event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-159">Atrybuty są zwracane w 4-bajtowej liczbie całkowitej reprezentującej mapę bitową atrybutów ustawionych dla zdarzenia odzwierciedlonego przez to wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-159">The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="eventInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="c1e62-160">Obiekt, <see langword="null" />który ma zostać porównany z tym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="c1e62-160">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c1e62-161">Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</span><span class="sxs-lookup"><span data-stu-id="c1e62-161">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="c1e62-162"><see langword="true" />Jeśli <paramref name="obj" /> jest równa typu i wartości tego wystąpienia; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="c1e62-162"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerType">
      <MemberSignature Language="C#" Value="public virtual Type EventHandlerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EventHandlerType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.EventHandlerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventHandlerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ EventHandlerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventHandlerType : Type" Usage="System.Reflection.EventInfo.EventHandlerType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.EventHandlerType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c1e62-163"><see langword="Type" /> Pobiera obiekt źródłowego delegata obsługi zdarzeń skojarzonego z tym zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="c1e62-163">Gets the <see langword="Type" /> object of the underlying event-handler delegate associated with this event.</span></span></summary>
        <value><span data-ttu-id="c1e62-164">Obiekt tylko <see langword="Type" /> do odczytu reprezentujący procedurę obsługi zdarzeń delegata.</span><span class="sxs-lookup"><span data-stu-id="c1e62-164">A read-only <see langword="Type" /> object representing the delegate event handler.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c1e62-165">W poniższym przykładzie zastosowano <xref:System.Reflection.EventInfo.EventHandlerType%2A> właściwość w celu odnalezienia typu delegata zdarzenia i wyświetlenia jego typów parametrów.</span><span class="sxs-lookup"><span data-stu-id="c1e62-165">The following example uses the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to discover the delegate type of an event and to display its parameter types.</span></span>  
  
 <span data-ttu-id="c1e62-166">W przykładzie zdefiniowano delegata `MyDelegate` o nazwie i zdarzeniu o `MyDelegate`nazwie `ev` typu.</span><span class="sxs-lookup"><span data-stu-id="c1e62-166">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="c1e62-167">Kod w `Main` metodzie odnajduje sygnaturę zdarzenia, pobierając typ delegata zdarzenia, `Invoke` pobierając metodę typu delegata, a następnie pobierając i wyświetlając parametry.</span><span class="sxs-lookup"><span data-stu-id="c1e62-167">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c1e62-168">Obiekt wywołujący nie posiada wymaganych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="c1e62-168">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAddMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c1e62-169">Zwraca metodę użytą do dodania delegata programu obsługi zdarzeń do źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-169">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetAddMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1e62-170">Zwraca metodę użytą do dodania delegata programu obsługi zdarzeń do źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-170">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
        <returns><span data-ttu-id="c1e62-171"><see cref="T:System.Reflection.MethodInfo" /> Obiekt reprezentujący metodę służącą do dodawania delegata programu obsługi zdarzeń do źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-171">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-172">`GetAddMethod`Inicjuje i dodaje metodę subskrybowania zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-172">`GetAddMethod` initializes and adds the event subscribe method.</span></span> <span data-ttu-id="c1e62-173">`AddEventHandler` Metoda służy do dodawania delegata obsługi zdarzeń do listy wywołań źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-173">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1e62-174">Zazwyczaj metoda ma następujący podpis:</span><span class="sxs-lookup"><span data-stu-id="c1e62-174">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-175">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-175">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-176">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-176">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAddMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetAddMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="c1e62-177"><see langword="true" />Jeśli można zwrócić metody niepubliczne; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="c1e62-177"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c1e62-178">Gdy jest zastępowany w klasie pochodnej, pobiera <see langword="MethodInfo" /> obiekt <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> dla metody zdarzenia, określając, czy zwracać metody niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="c1e62-178">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="c1e62-179"><see cref="T:System.Reflection.MethodInfo" /> Obiekt reprezentujący metodę służącą do dodawania delegata programu obsługi zdarzeń do źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-179">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-180">`GetAddMethod` Inicjuje i dodaje metodę subskrybowania zdarzenia jako wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="c1e62-180">The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value.</span></span> <span data-ttu-id="c1e62-181">`AddEventHandler` Metoda służy do dodawania delegata obsługi zdarzeń do listy wywołań źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-181">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1e62-182">Zazwyczaj metoda ma następujący podpis:</span><span class="sxs-lookup"><span data-stu-id="c1e62-182">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="c1e62-183"><paramref name="nonPublic" />jest <see langword="true" />, metoda użyta do dodania delegata programu obsługi zdarzeń jest niepubliczna, a obiekt wywołujący nie ma uprawnień do odzwierciedlenia w metodach niepublicznych.</span><span class="sxs-lookup"><span data-stu-id="c1e62-183"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-184">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-184">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-185">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-185">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="eventInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1e62-186">Zwraca kod skrótu dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-186">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="c1e62-187">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="c1e62-187">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetOtherMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c1e62-188">Zwraca metody, które zostały skojarzone ze zdarzeniem w MSIL przy użyciu <see langword=".other" /> dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-188">Returns the methods that were associated with an event in MSIL using the <see langword=".other" /> directive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetOtherMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo[] GetOtherMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOtherMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods();" />
      <MemberSignature Language="F#" Value="member this.GetOtherMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="eventInfo.GetOtherMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1e62-189">Zwraca metody publiczne, które zostały skojarzone ze zdarzeniem w metadanych przy użyciu <see langword=".other" /> dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-189">Returns the public methods that have been associated with an event in metadata using the <see langword=".other" /> directive.</span></span></summary>
        <returns><span data-ttu-id="c1e62-190">Tablica reprezentująca metody publiczne, które zostały skojarzone ze zdarzeniem w metadanych przy użyciu <see langword=".other" /> dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-190">An array representing the public methods that have been associated with the event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="c1e62-191">Jeśli nie ma takich metod publicznych, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="c1e62-191">If there are no such public methods, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-192">Metadane zdarzenia mogą skojarzyć cztery rodzaje metod ze zdarzeniem:</span><span class="sxs-lookup"><span data-stu-id="c1e62-192">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="c1e62-193">`.addon` Dyrektywa określa metodę używaną do dodawania obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-193">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="c1e62-194">Użyj metody, aby <xref:System.Reflection.EventInfo> pobrać dla tej metody. <xref:System.Reflection.EventInfo.GetAddMethod%2A></span><span class="sxs-lookup"><span data-stu-id="c1e62-194">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="c1e62-195">`.removeon` Dyrektywa określa metodę używaną do odłączania obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-195">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="c1e62-196">Użyj metody, aby <xref:System.Reflection.EventInfo> pobrać dla tej metody. <xref:System.Reflection.EventInfo.GetRemoveMethod%2A></span><span class="sxs-lookup"><span data-stu-id="c1e62-196">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="c1e62-197">`.fire` Dyrektywa określa metodę używaną do podniesienia poziomu zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-197">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="c1e62-198">Użyj metody, aby <xref:System.Reflection.EventInfo> pobrać dla tej metody. <xref:System.Reflection.EventInfo.GetRaiseMethod%2A></span><span class="sxs-lookup"><span data-stu-id="c1e62-198">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="c1e62-199">`.other` Dyrektywa określa wszelkie inne metody skojarzone ze zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="c1e62-199">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="c1e62-200">Użyj metody <xref:System.Reflection.EventInfo.GetOtherMethods%2A> , aby pobrać <xref:System.Reflection.EventInfo> tablicę obiektów dla tych metod.</span><span class="sxs-lookup"><span data-stu-id="c1e62-200">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="c1e62-201">Metody skojarzone ze zdarzeniem przy użyciu `.other` dyrektywy nie mają specjalnego znaczenia dla środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-201">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="c1e62-202">Kompilatory C# i Visual Basic nie używają `.other` dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-202">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetOtherMethods(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOtherMethods (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetOtherMethods : bool -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetOtherMethods : bool -&gt; System.Reflection.MethodInfo[]" Usage="eventInfo.GetOtherMethods nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="c1e62-203"><see langword="true" />do uwzględnienia metod niepublicznych; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="c1e62-203"><see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c1e62-204">Zwraca metody, które zostały skojarzone ze zdarzeniem w metadanych przy użyciu <see langword=".other" /> dyrektywy, określając, czy mają zostać dołączone metody niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="c1e62-204">Returns the methods that have been associated with the event in metadata using the <see langword=".other" /> directive, specifying whether to include non-public methods.</span></span></summary>
        <returns><span data-ttu-id="c1e62-205">Tablica reprezentująca metody skojarzone ze zdarzeniem w metadanych przy użyciu <see langword=".other" /> dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-205">An array representing methods that have been associated with an event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="c1e62-206">Jeśli nie ma żadnych metod pasujących do specyfikacji, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="c1e62-206">If there are no methods matching the specification, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-207">Metadane zdarzenia mogą skojarzyć cztery rodzaje metod ze zdarzeniem:</span><span class="sxs-lookup"><span data-stu-id="c1e62-207">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="c1e62-208">`.addon` Dyrektywa określa metodę używaną do dodawania obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-208">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="c1e62-209">Użyj metody, aby <xref:System.Reflection.EventInfo> pobrać dla tej metody. <xref:System.Reflection.EventInfo.GetAddMethod%2A></span><span class="sxs-lookup"><span data-stu-id="c1e62-209">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="c1e62-210">`.removeon` Dyrektywa określa metodę używaną do odłączania obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-210">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="c1e62-211">Użyj metody <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> , aby <xref:System.Reflection.EventInfo> pobrać dla tej metody.</span><span class="sxs-lookup"><span data-stu-id="c1e62-211">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="c1e62-212">`.fire` Dyrektywa określa metodę używaną do podniesienia poziomu zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-212">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="c1e62-213">Użyj metody <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> , aby <xref:System.Reflection.EventInfo> pobrać dla tej metody.</span><span class="sxs-lookup"><span data-stu-id="c1e62-213">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="c1e62-214">`.other` Dyrektywa określa wszelkie inne metody skojarzone ze zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="c1e62-214">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="c1e62-215">Użyj metody <xref:System.Reflection.EventInfo.GetOtherMethods%2A> , aby pobrać <xref:System.Reflection.EventInfo> tablicę obiektów dla tych metod.</span><span class="sxs-lookup"><span data-stu-id="c1e62-215">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="c1e62-216">Metody skojarzone ze zdarzeniem przy użyciu `.other` dyrektywy nie mają specjalnego znaczenia dla środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-216">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="c1e62-217">Kompilatory C# i Visual Basic nie używają `.other` dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-217">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c1e62-218">Ta metoda nie jest zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="c1e62-218">This method is not implemented.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRaiseMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c1e62-219">Zwraca metodę, która jest wywoływana, gdy zdarzenie jest zgłaszane.</span><span class="sxs-lookup"><span data-stu-id="c1e62-219">Returns the method that is called when the event is raised.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRaiseMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRaiseMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRaiseMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1e62-220">Zwraca metodę, która jest wywoływana, gdy zdarzenie jest zgłaszane.</span><span class="sxs-lookup"><span data-stu-id="c1e62-220">Returns the method that is called when the event is raised.</span></span></summary>
        <returns><span data-ttu-id="c1e62-221">Metoda, która jest wywoływana, gdy zdarzenie jest zgłaszane.</span><span class="sxs-lookup"><span data-stu-id="c1e62-221">The method that is called when the event is raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-222">Ta metoda zwykle zwraca `null` dla zdarzeń zadeklarowanych C# `event` za pomocą słowa kluczowego `Event` lub słowa kluczowego Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c1e62-222">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="c1e62-223">Dzieje się tak, C# ponieważ kompilatory i Visual Basic nie generują takiej metody domyślnie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-223">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-224">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-224">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-225">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-225">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRaiseMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRaiseMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetRaiseMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="c1e62-226"><see langword="true" />Jeśli można zwrócić metody niepubliczne; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="c1e62-226"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c1e62-227">Gdy jest zastępowany w klasie pochodnej, zwraca metodę, która jest wywoływana, gdy zdarzenie jest wywoływane, określając, czy zwracać metody niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="c1e62-227">When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="c1e62-228"><see langword="MethodInfo" /> Obiekt, który został wywołany, gdy zdarzenie zostało zgłoszone.</span><span class="sxs-lookup"><span data-stu-id="c1e62-228">A <see langword="MethodInfo" /> object that was called when the event was raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-229">Ta metoda zwykle zwraca `null` dla zdarzeń zadeklarowanych C# `event` za pomocą słowa kluczowego `Event` lub słowa kluczowego Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c1e62-229">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="c1e62-230">Dzieje się tak, C# ponieważ kompilatory i Visual Basic nie generują takiej metody domyślnie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-230">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="c1e62-231"><paramref name="nonPublic" />jest <see langword="true" />, metoda użyta do dodania delegata programu obsługi zdarzeń jest niepubliczna, a obiekt wywołujący nie ma uprawnień do odzwierciedlenia w metodach niepublicznych.</span><span class="sxs-lookup"><span data-stu-id="c1e62-231"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-232">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-233">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRemoveMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c1e62-234">Zwraca metodę, która służy do usuwania delegata programu obsługi zdarzeń ze źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-234">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRemoveMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemoveMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRemoveMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1e62-235">Zwraca metodę, która służy do usuwania delegata programu obsługi zdarzeń ze źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-235">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
        <returns><span data-ttu-id="c1e62-236"><see cref="T:System.Reflection.MethodInfo" /> Obiekt reprezentujący metodę służącą do usuwania delegata programu obsługi zdarzeń ze źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-236">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c1e62-237">Zazwyczaj metoda ma następujący podpis:</span><span class="sxs-lookup"><span data-stu-id="c1e62-237">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-238">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-238">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-239">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-239">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRemoveMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRemoveMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetRemoveMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="c1e62-240"><see langword="true" />Jeśli można zwrócić metody niepubliczne; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="c1e62-240"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c1e62-241">Gdy jest zastępowany w klasie pochodnej, pobiera <see langword="MethodInfo" /> obiekt do usunięcia metody zdarzenia, określając, czy zwracać metody niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="c1e62-241">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="c1e62-242"><see cref="T:System.Reflection.MethodInfo" /> Obiekt reprezentujący metodę służącą do usuwania delegata programu obsługi zdarzeń ze źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-242">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c1e62-243">Zazwyczaj metoda ma następujący podpis:</span><span class="sxs-lookup"><span data-stu-id="c1e62-243">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="c1e62-244"><paramref name="nonPublic" />jest <see langword="true" />, metoda użyta do dodania delegata programu obsługi zdarzeń jest niepubliczna, a obiekt wywołujący nie ma uprawnień do odzwierciedlenia w metodach niepublicznych.</span><span class="sxs-lookup"><span data-stu-id="c1e62-244"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-245">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-245">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-246">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-246">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="eventInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMulticast">
      <MemberSignature Language="C#" Value="public virtual bool IsMulticast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMulticast" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsMulticast" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMulticast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMulticast { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMulticast : bool" Usage="System.Reflection.EventInfo.IsMulticast" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsMulticast</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c1e62-247">Pobiera wartość wskazującą, czy zdarzenie jest multiemisją.</span><span class="sxs-lookup"><span data-stu-id="c1e62-247">Gets a value indicating whether the event is multicast.</span></span></summary>
        <value><span data-ttu-id="c1e62-248"><see langword="true" />Jeśli delegat jest wystąpieniem delegata multiemisji; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="c1e62-248"><see langword="true" /> if the delegate is an instance of a multicast delegate; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c1e62-249">Obiekt wywołujący nie posiada wymaganych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="c1e62-249">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.EventInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c1e62-250">Pobiera wartość wskazującą, <see langword="EventInfo" /> czy ma nazwę o specjalnym znaczeniu.</span><span class="sxs-lookup"><span data-stu-id="c1e62-250">Gets a value indicating whether the <see langword="EventInfo" /> has a name with a special meaning.</span></span></summary>
        <value><span data-ttu-id="c1e62-251"><see langword="true" />Jeśli to zdarzenie ma specjalną nazwę; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="c1e62-251"><see langword="true" /> if this event has a special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-252">Ta właściwość określa, czy nazwa zdarzenia ma specjalne znaczenie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-252">This property determines whether the event's name has a special meaning.</span></span> <span data-ttu-id="c1e62-253">Nazwy rozpoczynające się od znaku podkreślenia (_), metody dostępu do właściwości i metod przeciążania operatora są przykładami nazw, które mogą wymagać specjalnego traktowania przez niektóre kompilatory.</span><span class="sxs-lookup"><span data-stu-id="c1e62-253">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventAttributes" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.EventInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c1e62-254"><see cref="T:System.Reflection.MemberTypes" /> Pobiera wartość wskazującą, że ten element członkowski jest zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="c1e62-254">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></summary>
        <value><span data-ttu-id="c1e62-255"><see cref="T:System.Reflection.MemberTypes" /> Wartość wskazująca, że ten element członkowski jest zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="c1e62-255">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-256">Ta właściwość przesłania <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c1e62-256">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="c1e62-257">W związku z tym podczas badania <xref:System.Reflection.MemberInfo> zestawu obiektów — na przykład tablica zwracana przez <xref:System.Type.GetMembers%2A> - <xref:System.Reflection.MemberInfo.MemberType%2A> Właściwość zwraca <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> tylko wtedy, gdy dany element członkowski jest zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="c1e62-257">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> only when a given member is an event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.EventInfo * System.Reflection.EventInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="c1e62-258">Pierwszy obiekt, który ma zostać porównany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-258">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="c1e62-259">Drugi obiekt, który będzie porównywany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-259">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="c1e62-260">Wskazuje, czy <see cref="T:System.Reflection.EventInfo" /> dwa obiekty są równe.</span><span class="sxs-lookup"><span data-stu-id="c1e62-260">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="c1e62-261"><see langword="true" />Jeśli <paramref name="left" /> jest <see langword="false" />równa; w przeciwnym razie,. <paramref name="right" /></span><span class="sxs-lookup"><span data-stu-id="c1e62-261"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.EventInfo * System.Reflection.EventInfo -&gt; bool" Usage="System.Reflection.EventInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="c1e62-262">Pierwszy obiekt, który ma zostać porównany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-262">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="c1e62-263">Drugi obiekt, który będzie porównywany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-263">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="c1e62-264">Wskazuje, czy <see cref="T:System.Reflection.EventInfo" /> dwa obiekty nie są równe.</span><span class="sxs-lookup"><span data-stu-id="c1e62-264">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="c1e62-265"><see langword="true" />Jeśli <paramref name="left" /> nie jest <paramref name="right" />równe; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-265"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RaiseMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RaiseMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RaiseMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RaiseMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RaiseMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.RaiseMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c1e62-266">Pobiera metodę, która jest wywoływana, gdy zdarzenie jest zgłaszane, łącznie z metodami niepublicznymi.</span><span class="sxs-lookup"><span data-stu-id="c1e62-266">Gets the method that is called when the event is raised, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="c1e62-267">Metoda, która jest wywoływana, gdy zdarzenie jest zgłaszane.</span><span class="sxs-lookup"><span data-stu-id="c1e62-267">The method that is called when the event is raised.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-268">Ta właściwość jest odpowiednikiem wywołania <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> z `true`wartością.</span><span class="sxs-lookup"><span data-stu-id="c1e62-268">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public virtual void RemoveEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventHandler : obj * Delegate -&gt; unit&#xA;override this.RemoveEventHandler : obj * Delegate -&gt; unit" Usage="eventInfo.RemoveEventHandler (target, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="c1e62-269">Źródło zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-269">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="c1e62-270">Delegat, który ma zostać odkojarzony z zdarzeń zgłoszonych przez element docelowy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-270">The delegate to be disassociated from the events raised by target.</span></span></param>
        <summary><span data-ttu-id="c1e62-271">Usuwa procedurę obsługi zdarzeń ze źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="c1e62-271">Removes an event handler from an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-272">Ta metoda próbuje usunąć delegata, który może synchronizować to zdarzenie w obiekcie docelowym.</span><span class="sxs-lookup"><span data-stu-id="c1e62-272">This method attempts to remove the delegate that may synchronize this event on the target object.</span></span>  
  
 <span data-ttu-id="c1e62-273">Gdy zdarzenie jest zgłaszane przez obiekt docelowy, metoda lub metody hermetyzowane przez `handler` nie będą już wywoływane.</span><span class="sxs-lookup"><span data-stu-id="c1e62-273">When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1e62-274">Zdarzenie nie ma publicznej <see langword="remove" /> metody dostępu.</span><span class="sxs-lookup"><span data-stu-id="c1e62-274">The event does not have a public <see langword="remove" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1e62-275">Nie można użyć programu obsługi, który został przekazano.</span><span class="sxs-lookup"><span data-stu-id="c1e62-275">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="c1e62-276">W programie <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET dla aplikacji do sklepu Windows</see> lub <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">przenośnej biblioteki klas</see>Przechwyć <see cref="T:System.Exception" /> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-276">In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="c1e62-277"><paramref name="target" /> Parametr jest<see langword="null" /> i zdarzenie nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="c1e62-277">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
<span data-ttu-id="c1e62-278">—lub—</span><span class="sxs-lookup"><span data-stu-id="c1e62-278">-or-</span></span> 
<span data-ttu-id="c1e62-279">Nie <see cref="T:System.Reflection.EventInfo" /> jest zadeklarowany w elemencie docelowym.</span><span class="sxs-lookup"><span data-stu-id="c1e62-279">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="c1e62-280">W programie <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET dla aplikacji do sklepu Windows</see> lub <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">przenośnej biblioteki klas</see>Przechwyć wyjątek <see cref="T:System.MemberAccessException" />klasy bazowej, zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-280">In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="c1e62-281">Obiekt wywołujący nie ma uprawnień dostępu do elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-281">The caller does not have access permission to the member.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="c1e62-282">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="c1e62-282">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="c1e62-283">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c1e62-283">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RemoveMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RemoveMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoveMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RemoveMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoveMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.RemoveMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c1e62-284"><see langword="MethodInfo" /> Pobiera obiekt służący do usuwania metody zdarzenia, w tym metod niepublicznych.</span><span class="sxs-lookup"><span data-stu-id="c1e62-284">Gets the <see langword="MethodInfo" /> object for removing a method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="c1e62-285"><see langword="MethodInfo" /> Obiekt służący do usuwania metody zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="c1e62-285">The <see langword="MethodInfo" /> object for removing a method of the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-286">Ta właściwość jest odpowiednikiem wywołania <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> z `true`wartością.</span><span class="sxs-lookup"><span data-stu-id="c1e62-286">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _EventInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_EventInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="c1e62-287">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="c1e62-287">Reserved for future use.</span></span> <span data-ttu-id="c1e62-288">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="c1e62-288">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="c1e62-289">Przekazana tablica nazw ma być mapowana.</span><span class="sxs-lookup"><span data-stu-id="c1e62-289">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="c1e62-290">Liczba nazw, które mają być mapowane.</span><span class="sxs-lookup"><span data-stu-id="c1e62-290">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="c1e62-291">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</span><span class="sxs-lookup"><span data-stu-id="c1e62-291">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="c1e62-292">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</span><span class="sxs-lookup"><span data-stu-id="c1e62-292">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="c1e62-293">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</span><span class="sxs-lookup"><span data-stu-id="c1e62-293">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-294">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-294">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c1e62-295">Więcej informacji o `IDispatch::GetIDsOfNames`programie znajduje się w bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="c1e62-295">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c1e62-296">Dostęp z późnym wiązaniem przy użyciu interfejsu COM <c>IDispatch</c> nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-296">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetType">
      <MemberSignature Language="C#" Value="Type _EventInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._EventInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _EventInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._EventInfo.GetType() = System::Runtime::InteropServices::_EventInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1e62-297">Zwraca obiekt <c>T:System.Type</c> reprezentujący <see cref="T:System.Reflection.EventInfo" /> typ.</span><span class="sxs-lookup"><span data-stu-id="c1e62-297">Returns a <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="c1e62-298">Obiekt <c>T:System.Type</c> reprezentujący <see cref="T:System.Reflection.EventInfo" /> typ.</span><span class="sxs-lookup"><span data-stu-id="c1e62-298">A <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _EventInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="c1e62-299">Informacje o typie, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-299">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="c1e62-300">Identyfikator regionalny dla informacji o typie.</span><span class="sxs-lookup"><span data-stu-id="c1e62-300">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="c1e62-301">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</span><span class="sxs-lookup"><span data-stu-id="c1e62-301">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="c1e62-302">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</span><span class="sxs-lookup"><span data-stu-id="c1e62-302">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-303">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-303">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c1e62-304">Więcej informacji o `IDispatch::GetTypeInfo`programie znajduje się w bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="c1e62-304">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c1e62-305">Dostęp z późnym wiązaniem przy użyciu interfejsu COM <c>IDispatch</c> nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-305">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _EventInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="c1e62-306">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="c1e62-306">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="c1e62-307">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</span><span class="sxs-lookup"><span data-stu-id="c1e62-307">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-308">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-308">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c1e62-309">Więcej informacji o `IDispatch::GetTypeInfoCount`programie znajduje się w bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="c1e62-309">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c1e62-310">Dostęp z późnym wiązaniem przy użyciu interfejsu COM <c>IDispatch</c> nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-310">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.Invoke">
      <MemberSignature Language="C#" Value="void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _EventInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_EventInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="c1e62-311">Określa element członkowski.</span><span class="sxs-lookup"><span data-stu-id="c1e62-311">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="c1e62-312">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="c1e62-312">Reserved for future use.</span></span> <span data-ttu-id="c1e62-313">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="c1e62-313">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="c1e62-314">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</span><span class="sxs-lookup"><span data-stu-id="c1e62-314">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="c1e62-315">Flagi opisujące kontekst wywołania.</span><span class="sxs-lookup"><span data-stu-id="c1e62-315">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="c1e62-316">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</span><span class="sxs-lookup"><span data-stu-id="c1e62-316">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="c1e62-317">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</span><span class="sxs-lookup"><span data-stu-id="c1e62-317">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="c1e62-318">Wskaźnik do struktury, która zawiera informacje o wyjątku.</span><span class="sxs-lookup"><span data-stu-id="c1e62-318">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="c1e62-319">Indeks pierwszego argumentu, który zawiera błąd.</span><span class="sxs-lookup"><span data-stu-id="c1e62-319">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="c1e62-320">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="c1e62-320">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1e62-321">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="c1e62-321">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c1e62-322">Więcej informacji o `IDispatch::Invoke`programie znajduje się w bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="c1e62-322">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c1e62-323">Dostęp z późnym wiązaniem przy użyciu interfejsu COM <c>IDispatch</c> nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="c1e62-323">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
