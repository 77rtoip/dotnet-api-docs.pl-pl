<Type Name="EventInfo" FullName="System.Reflection.EventInfo">
  <TypeSignature Language="C#" Value="public abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit EventInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.EventInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventInfo&#xA;Inherits MemberInfo&#xA;Implements _EventInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_EventInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._EventInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EventInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0b16a-101">Umożliwia odnalezienie atrybuty zdarzenia i zapewnia dostęp do metadanych zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-101">Discovers the attributes of an event and provides access to event metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-102">Użyj <xref:System.Reflection.EventInfo> klasa zdarzeń inspekcji i dołączenie obsługi zdarzeń, jak pokazano w przykładzie kodu <xref:System.Reflection.EventInfo.AddEventHandler%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-102">Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b16a-103"><xref:System.Reflection.EventInfo> nie jest przeznaczony do użycia, aby wywołać zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-103"><xref:System.Reflection.EventInfo> is not intended to be used to raise events.</span></span> <span data-ttu-id="0b16a-104">Obiekt informuje o zdarzeniach, zgodnie z ustawieniem jego stanu wewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-104">An object raises events as dictated by its internal state.</span></span>  
  
 <span data-ttu-id="0b16a-105">Zdarzenia są używane z obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="0b16a-105">Events are used with delegates.</span></span> <span data-ttu-id="0b16a-106">Odbiornik zdarzeń tworzy delegowanego obsługi zdarzeń, które jest wywoływane zawsze, gdy zdarzenie zostanie wywołane przez źródło zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-106">An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</span></span> <span data-ttu-id="0b16a-107">Aby połączyć się ze źródłem zdarzeń, odbiornik zdarzeń dodaje ten delegat do listy wywołania w źródle.</span><span class="sxs-lookup"><span data-stu-id="0b16a-107">In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</span></span> <span data-ttu-id="0b16a-108">Gdy zdarzenie jest zgłaszane, nosi nazwę metody invoke obiektu delegowanego obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-108">When the event is raised, the invoke method of the event-handler delegate is called.</span></span> <span data-ttu-id="0b16a-109">Obsługiwane są zarówno powiadomienia o zdarzeniach rzutowania pojedynczej i multiemisji.</span><span class="sxs-lookup"><span data-stu-id="0b16a-109">Both multicast and single-cast event notifications are supported.</span></span> <span data-ttu-id="0b16a-110">`Add` i `Remove` metody, a także klasy obiektu delegowanego obsługi zdarzeń skojarzone ze zdarzeniem, muszą być oznaczone w metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b16a-110">The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</span></span>  
  
 <span data-ttu-id="0b16a-111">Obiekty delegowane są wskaźnikami zorientowane obiektowo funkcji.</span><span class="sxs-lookup"><span data-stu-id="0b16a-111">Delegates are object-oriented function pointers.</span></span> <span data-ttu-id="0b16a-112">C lub C++ wskaźnika funkcji jest odwołanie do metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-112">In C or C++, a function pointer is a reference to a method.</span></span> <span data-ttu-id="0b16a-113">W przeciwieństwie do wskaźnika funkcji języka C lub C++ delegata zawiera dwa odwołania: odwołania do metody i odwołanie do obiektu, który obsługuje metodę.</span><span class="sxs-lookup"><span data-stu-id="0b16a-113">In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</span></span> <span data-ttu-id="0b16a-114">Obiekty delegowane można wywołać metody bez wiedzy o typ klasy, który deklaruje dziedziczy z metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-114">Delegates can invoke a method without knowing the class type that declares or inherits the method.</span></span> <span data-ttu-id="0b16a-115">Tylko delegatów muszą wiedzieć, zwracany typ parametru liście i metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-115">Delegates need only know the return type and parameter list of the method.</span></span>  
  
 <span data-ttu-id="0b16a-116">Model zdarzeń działa równie dobrze w przypadku delegatów rzutowania pojedynczej i multiemisji.</span><span class="sxs-lookup"><span data-stu-id="0b16a-116">The event model works equally well for single-cast and multicast delegates.</span></span> <span data-ttu-id="0b16a-117">Podczas wywołania elementu delegat metoda jest wywoływana, tylko jeden obiekt ma wywoływać w nim metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-117">When the delegate's invoke method is called, only a single object will have a method called on it.</span></span> <span data-ttu-id="0b16a-118">Modyfikator multiemisji można zastosować do deklaracji obiektu delegowanego, dzięki czemu wiele metod ma być wywoływana po wywołaniu metody invoke delegata.</span><span class="sxs-lookup"><span data-stu-id="0b16a-118">A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</span></span>  
  
 <span data-ttu-id="0b16a-119">Wywoływanie <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> na `EventInfo` podczas `inherit` parametr `GetCustomAttributes` jest `true` nie zawiera hierarchii typów.</span><span class="sxs-lookup"><span data-stu-id="0b16a-119">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="0b16a-120">Użyj <xref:System.Attribute?displayProperty=nameWithType> dziedziczy atrybuty niestandardowe.</span><span class="sxs-lookup"><span data-stu-id="0b16a-120">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b16a-121">Poniższy kod pobiera <xref:System.Reflection.EventInfo> obiekt do <xref:System.Windows.Forms.Control.Click> zdarzenie <xref:System.Windows.Forms.Button> klasy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-121">The following code gets an <xref:System.Reflection.EventInfo> object for the <xref:System.Windows.Forms.Control.Click> event of the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[type_getevent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[type_getevent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[type_getevent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="0b16a-122">aby uzyskać pełne zaufanie dla obiektów dziedziczących.</span><span class="sxs-lookup"><span data-stu-id="0b16a-122">for full trust for inheritors.</span></span> <span data-ttu-id="0b16a-123">Klasa ta nie może być dziedziczona przez kod częściowo zaufany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-123">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="0b16a-124">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="0b16a-124">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="0b16a-125">Przy dziedziczeniu z <see langword="EventInfo" />, konieczne jest przesłonięcie następujących członków: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, i <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-125">When you inherit from <see langword="EventInfo" />, you must override the following members: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, and <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span></span></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b16a-126">Inicjuje nowe wystąpienie klasy <see langword="EventInfo" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-126">Initializes a new instance of the <see langword="EventInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-127">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-127">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-128">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-128">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public virtual void AddEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="0b16a-129">Źródło zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-129">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="0b16a-130">Hermetyzuje metodę lub metody do wywołania, gdy zdarzenie zostanie wywołane przez element docelowy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-130">Encapsulates a method or methods to be invoked when the event is raised by the target.</span></span></param>
        <summary><span data-ttu-id="0b16a-131">Dodaje program obsługi zdarzeń do źródła zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-131">Adds an event handler to an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-132">Ta metoda próbuje dodać pełnomocnika, aby zsynchronizować zdarzeń w obiekcie docelowym.</span><span class="sxs-lookup"><span data-stu-id="0b16a-132">This method attempts to add a delegate to synchronize the event on the target object.</span></span>  
  
 <span data-ttu-id="0b16a-133">Zawsze, gdy zdarzenie zostanie wywołane przez parametr docelowy metody lub metody hermetyzowany przez program obsługi zostanie wywołany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-133">Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b16a-134">Poniższy przykład kodu pokazuje, jak do załadowania zestawu, utworzyć wystąpienia typu z zestawu tworzenie obsługi zdarzeń przy użyciu zestawu dynamicznego i dołączenie obsługi zdarzenia dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-134">The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler.</span></span> <span data-ttu-id="0b16a-135">Wszystkie akcje są wykonywane przy użyciu późnego wiązania.</span><span class="sxs-lookup"><span data-stu-id="0b16a-135">All actions are performed using late binding.</span></span>  
  
 <span data-ttu-id="0b16a-136">Przykładowy kod ładuje System.dll i tworzy wystąpienie <xref:System.Timers.Timer?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-136">The code example loads System.dll and creates an instance of the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="0b16a-137">W przykładzie użyto <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Timers.Timer.Elapsed> zdarzenia i <xref:System.Reflection.EventInfo.EventHandlerType%2A> właściwości do pobrania z typem obiektu delegowanego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-137">The example uses the <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method to get the <xref:System.Timers.Timer.Elapsed> event, and the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to get the delegate type for the event.</span></span>  
  
 <span data-ttu-id="0b16a-138">Przykładowy kod pobiera <xref:System.Reflection.MethodInfo> dla `Invoke` metody obiektu delegowanego typu i z <xref:System.Reflection.MethodInfo> uzyskuje podpis delegata.</span><span class="sxs-lookup"><span data-stu-id="0b16a-138">The code example gets a <xref:System.Reflection.MethodInfo> for the `Invoke` method of the delegate type, and from the <xref:System.Reflection.MethodInfo> obtains the signature of the delegate.</span></span> <span data-ttu-id="0b16a-139">Przykład kodu tworzy następnie zestawie dynamicznym z modułów zawierających jeden typ o nazwie `Handler`i udostępnia typ `static` — metoda (`Shared` metody w języku Visual Basic) o nazwie `DynamicHandler` który będzie używany do obsługi zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-139">The code example then creates a dynamic assembly with one module containing a single type named `Handler`, and gives the type a `static` method (`Shared` method in Visual Basic) named `DynamicHandler` that will be used to handle the event.</span></span>  
  
 <span data-ttu-id="0b16a-140">Po utworzeniu typu dynamicznego przykładowy kod pobiera <xref:System.Reflection.MethodInfo> Zakończono metody i używa go do utworzenia wystąpienia obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-140">After the dynamic type is created, the code example gets a <xref:System.Reflection.MethodInfo> for the finished method and uses it to create a delegate instance.</span></span> <span data-ttu-id="0b16a-141">To wystąpienie jest przekazywana do <xref:System.Reflection.EventInfo.AddEventHandler%2A> metodę podłączenie zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-141">This instance is passed to the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method to hook up the event.</span></span> <span data-ttu-id="0b16a-142">Program następnie wstrzymuje umożliwia się zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-142">The program then pauses to allow the event to be raised.</span></span>  
  
 [!code-cpp[AddEventHandler#1](~/samples/snippets/cpp/VS_Snippets_CLR/AddEventHandler/cpp/source.cpp#1)]
 [!code-csharp[AddEventHandler#1](~/samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/cs/source.cs#1)]
 [!code-vb[AddEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddEventHandler/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b16a-143">Zdarzenie nie ma publicznego <see langword="add" /> metody dostępu.</span><span class="sxs-lookup"><span data-stu-id="0b16a-143">The event does not have a public <see langword="add" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0b16a-144">Nie można użyć programu obsługi, która została przekazana.</span><span class="sxs-lookup"><span data-stu-id="0b16a-144">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="0b16a-145">W [.NET dla Sklepu Windows apps](http://go.microsoft.com/fwlink/?LinkID=247912) lub [przenośnej biblioteki klas](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch wyjątku klasy podstawowej <see cref="T:System.MemberAccessException" />, zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-145">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="0b16a-146">Obiekt wywołujący nie ma uprawnień dostępu do elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-146">The caller does not have access permission to the member.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="0b16a-147">W [.NET dla Sklepu Windows apps](http://go.microsoft.com/fwlink/?LinkID=247912) lub [przenośnej biblioteki klas](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-147">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="0b16a-148"><paramref name="target" /> Parametr jest <see langword="null" /> i zdarzenie nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="0b16a-148">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
 <span data-ttu-id="0b16a-149">—lub—</span><span class="sxs-lookup"><span data-stu-id="0b16a-149">-or-</span></span>  
  
 <span data-ttu-id="0b16a-150"><see cref="T:System.Reflection.EventInfo" /> Nie jest zadeklarowany w elemencie docelowym.</span><span class="sxs-lookup"><span data-stu-id="0b16a-150">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-151">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-151">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-152">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-152">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="AddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo AddMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo AddMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.AddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AddMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ AddMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b16a-153">Pobiera <see cref="T:System.Reflection.MethodInfo" /> obiekt do <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> metoda zdarzenia, w tym metody niepublicznej.</span><span class="sxs-lookup"><span data-stu-id="0b16a-153">Gets the <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="0b16a-154"><see cref="T:System.Reflection.MethodInfo" /> Obiekt do <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-154">The <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-155">Ta właściwość jest odpowiednikiem wywołania metody <xref:System.Reflection.EventInfo.GetAddMethod%2A> o wartości `true`.</span><span class="sxs-lookup"><span data-stu-id="0b16a-155">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.EventAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As EventAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::EventAttributes Attributes { System::Reflection::EventAttributes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b16a-156">Pobiera atrybuty dla tego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-156">Gets the attributes for this event.</span></span></summary>
        <value><span data-ttu-id="0b16a-157">Atrybut tylko do odczytu dla tego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-157">The read-only attributes for this event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-158">Atrybuty są zwracane w 4-bajtowych liczb całkowitych, reprezentujący mapy bitowej atrybutów, ustaw dla zdarzenia według tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-158">The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="0b16a-159">Obiekt do porównania z tym wystąpieniem lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-159">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="0b16a-160">Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</span><span class="sxs-lookup"><span data-stu-id="0b16a-160">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="0b16a-161"><see langword="true" /> Jeśli <paramref name="obj" /> equals, typ i wartość tego wystąpienia; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-161"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerType">
      <MemberSignature Language="C#" Value="public virtual Type EventHandlerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EventHandlerType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.EventHandlerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventHandlerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ EventHandlerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.EventHandlerType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b16a-162">Pobiera <see langword="Type" /> obiektu źródłowego obiektu delegowanego obsługi zdarzeń skojarzonych z tym zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="0b16a-162">Gets the <see langword="Type" /> object of the underlying event-handler delegate associated with this event.</span></span></summary>
        <value><span data-ttu-id="0b16a-163">Tylko do odczytu <see langword="Type" /> obiekt reprezentujący obiektu delegowanego obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-163">A read-only <see langword="Type" /> object representing the delegate event handler.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0b16a-164">W poniższym przykładzie użyto <xref:System.Reflection.EventInfo.EventHandlerType%2A> właściwości, aby wykryć typ delegata zdarzenia i wyświetlić jego typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="0b16a-164">The following example uses the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to discover the delegate type of an event and to display its parameter types.</span></span>  
  
 <span data-ttu-id="0b16a-165">W przykładzie zdefiniowano delegata o nazwie `MyDelegate` i zdarzenia o nazwie `ev` typu `MyDelegate`.</span><span class="sxs-lookup"><span data-stu-id="0b16a-165">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="0b16a-166">Kod w `Main` metody odnajduje z sygnaturą zdarzenia pobierając typ delegata zdarzenia, uzyskiwanie `Invoke` metody typu delegowanego, a następnie pobierania i wyświetlania parametrów.</span><span class="sxs-lookup"><span data-stu-id="0b16a-166">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="0b16a-167">Obiekt wywołujący nie posiada wymaganych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="0b16a-167">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAddMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b16a-168">Zwraca metodę umożliwiają dodawanie obsługi zdarzeń przekazać źródło zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-168">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetAddMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b16a-169">Zwraca metodę umożliwiają dodawanie obsługi zdarzeń przekazać źródło zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-169">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
        <returns><span data-ttu-id="0b16a-170">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metodę używaną do dodania do delegata obsługi zdarzeń do źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-170">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-171">`GetAddMethod` Inicjuje i dodaje zdarzenie subskrypcji metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-171">`GetAddMethod` initializes and adds the event subscribe method.</span></span> <span data-ttu-id="0b16a-172">`AddEventHandler` Metoda służy do dodawania obiektu delegowanego obsługi zdarzeń do listy wywołania źródła zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-172">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b16a-173">Metoda ma zazwyczaj następującą sygnaturą:</span><span class="sxs-lookup"><span data-stu-id="0b16a-173">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-174">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-174">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-175">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-175">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAddMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetAddMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="0b16a-176"><see langword="true" /> Jeśli może być zwracany metody niepublicznej; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-176"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0b16a-177">W przypadku przesłonięcia w klasie pochodnej pobiera <see langword="MethodInfo" /> obiekt do <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> metoda zdarzenia, określania, czy mają być zwracane metody niepublicznej.</span><span class="sxs-lookup"><span data-stu-id="0b16a-177">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="0b16a-178">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metodę używaną do dodania do delegata obsługi zdarzeń do źródła zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-178">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-179">`GetAddMethod` Inicjuje i dodaje zdarzenie subskrypcji metodę jako wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="0b16a-179">The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value.</span></span> <span data-ttu-id="0b16a-180">`AddEventHandler` Metoda służy do dodawania obiektu delegowanego obsługi zdarzeń do listy wywołania źródła zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-180">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b16a-181">Metoda ma zazwyczaj następującą sygnaturą:</span><span class="sxs-lookup"><span data-stu-id="0b16a-181">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="0b16a-182"><paramref name="nonPublic" /> jest <see langword="true" />metodę używaną do dodawania obiektu delegowanego obsługi zdarzeń jest niepublicznych i obiekt wywołujący nie ma uprawnień do uwzględnienia w metodach niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="0b16a-182"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-183">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-183">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-184">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-184">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b16a-185">Zwraca kod skrótu dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-185">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="0b16a-186">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="0b16a-186">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetOtherMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b16a-187">Zwraca metody, które były wcześniej skojarzone ze zdarzeniem przy użyciu MSIL <see langword=".other" /> dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-187">Returns the methods that were associated with an event in MSIL using the <see langword=".other" /> directive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetOtherMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo[] GetOtherMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOtherMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b16a-188">Zwraca metody publiczne, które zostały skojarzone ze zdarzeniem przy użyciu metadanych <see langword=".other" /> dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-188">Returns the public methods that have been associated with an event in metadata using the <see langword=".other" /> directive.</span></span></summary>
        <returns><span data-ttu-id="0b16a-189">Tablica <see cref="T:System.Reflection.EventInfo" /> obiekty reprezentujące metody publiczne, które zostały skojarzone ze zdarzeniem w metadanych za pomocą <see langword=".other" /> dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-189">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public methods that have been associated with the event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="0b16a-190">Jeśli nie takich metod publicznych, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="0b16a-190">If there are no such public methods, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-191">Metadane dla zdarzenia można skojarzyć cztery rodzaje metod ze zdarzeniem:</span><span class="sxs-lookup"><span data-stu-id="0b16a-191">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="0b16a-192">`.addon` Dyrektywa określa metodę używaną do dodania procedury obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-192">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="0b16a-193">Użyj <xref:System.Reflection.EventInfo.GetAddMethod%2A> metoda pobierania <xref:System.Reflection.EventInfo> dla tej metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-193">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="0b16a-194">`.removeon` Dyrektywa określa metodę używaną do odłączenia procedury obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-194">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="0b16a-195">Użyj <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> metoda pobierania <xref:System.Reflection.EventInfo> dla tej metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-195">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="0b16a-196">`.fire` Dyrektywa określa metodę używaną do zgłoszenia zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-196">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="0b16a-197">Użyj <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> metoda pobierania <xref:System.Reflection.EventInfo> dla tej metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-197">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="0b16a-198">`.other` Dyrektywa określa innych metod, skojarzone ze zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="0b16a-198">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="0b16a-199">Użyj <xref:System.Reflection.EventInfo.GetOtherMethods%2A> metoda pobierania tablicę <xref:System.Reflection.EventInfo> obiektów dla jednej z tych metod.</span><span class="sxs-lookup"><span data-stu-id="0b16a-199">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="0b16a-200">Metod skojarzonych z zdarzeń przy użyciu `.other` dyrektywy nie ma specjalnego znaczenia do środowiska wykonawczego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-200">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="0b16a-201">Kompilatory języka C# i Visual Basic nie należy używać `.other` dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-201">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetOtherMethods(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOtherMethods (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="0b16a-202"><see langword="true" /> Aby uwzględnić metody niepublicznej; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-202"><see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0b16a-203">Zwraca metody, które zostały skojarzone ze zdarzeniem przy użyciu metadanych <see langword=".other" /> dyrektywy określenie, czy dołączać metody niepublicznej.</span><span class="sxs-lookup"><span data-stu-id="0b16a-203">Returns the methods that have been associated with the event in metadata using the <see langword=".other" /> directive, specifying whether to include non-public methods.</span></span></summary>
        <returns><span data-ttu-id="0b16a-204">Tablica <see cref="T:System.Reflection.EventInfo" /> obiekty reprezentujące metod, które zostały skojarzone ze zdarzeniem w metadanych za pomocą <see langword=".other" /> dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-204">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing methods that have been associated with an event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="0b16a-205">Jeśli nie żadnych metod dopasowywania specyfikację, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="0b16a-205">If there are no methods matching the specification, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-206">Metadane dla zdarzenia można skojarzyć cztery rodzaje metod ze zdarzeniem:</span><span class="sxs-lookup"><span data-stu-id="0b16a-206">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="0b16a-207">`.addon` Dyrektywa określa metodę używaną do dodania procedury obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-207">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="0b16a-208">Użyj <xref:System.Reflection.EventInfo.GetAddMethod%2A> metoda pobierania <xref:System.Reflection.EventInfo> dla tej metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-208">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="0b16a-209">`.removeon` Dyrektywa określa metodę używaną do odłączenia procedury obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-209">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="0b16a-210">Użyj <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> metoda pobierania <xref:System.Reflection.EventInfo> dla tej metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-210">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="0b16a-211">`.fire` Dyrektywa określa metodę używaną do zgłoszenia zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-211">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="0b16a-212">Użyj <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> metoda pobierania <xref:System.Reflection.EventInfo> dla tej metody.</span><span class="sxs-lookup"><span data-stu-id="0b16a-212">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="0b16a-213">`.other` Dyrektywa określa innych metod, skojarzone ze zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="0b16a-213">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="0b16a-214">Użyj <xref:System.Reflection.EventInfo.GetOtherMethods%2A> metoda pobierania tablicę <xref:System.Reflection.EventInfo> obiektów dla jednej z tych metod.</span><span class="sxs-lookup"><span data-stu-id="0b16a-214">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="0b16a-215">Metod skojarzonych z zdarzeń przy użyciu `.other` dyrektywy nie ma specjalnego znaczenia do środowiska wykonawczego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-215">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="0b16a-216">Kompilatory języka C# i Visual Basic nie należy używać `.other` dyrektywy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-216">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0b16a-217">Ta metoda nie jest zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="0b16a-217">This method is not implemented.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRaiseMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b16a-218">Zwraca metodę wywoływaną, gdy zdarzenie jest wywoływane.</span><span class="sxs-lookup"><span data-stu-id="0b16a-218">Returns the method that is called when the event is raised.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRaiseMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRaiseMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRaiseMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b16a-219">Zwraca metodę wywoływaną, gdy zdarzenie jest wywoływane.</span><span class="sxs-lookup"><span data-stu-id="0b16a-219">Returns the method that is called when the event is raised.</span></span></summary>
        <returns><span data-ttu-id="0b16a-220">Metoda wywoływana, gdy zdarzenie jest wywoływane.</span><span class="sxs-lookup"><span data-stu-id="0b16a-220">The method that is called when the event is raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-221">Ta metoda jest zwykle zwraca `null` dla zdarzenia deklarowane z języka C# `event` — słowo kluczowe lub Visual Basic `Event` — słowo kluczowe.</span><span class="sxs-lookup"><span data-stu-id="0b16a-221">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="0b16a-222">Jest to spowodowane C# i Visual Basic kompilatory nie generują taka metoda domyślnie.</span><span class="sxs-lookup"><span data-stu-id="0b16a-222">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-223">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-223">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-224">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-224">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRaiseMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRaiseMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="0b16a-225"><see langword="true" /> Jeśli może być zwracany metody niepublicznej; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-225"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0b16a-226">W przypadku przesłonięcia w klasie pochodnej zwraca metodę wywoływaną, gdy zdarzenie jest zgłaszane, określenie, czy mają być zwracane metody niepublicznej.</span><span class="sxs-lookup"><span data-stu-id="0b16a-226">When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="0b16a-227">A <see langword="MethodInfo" /> obiekt, który został wywołany po zdarzeniu został zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="0b16a-227">A <see langword="MethodInfo" /> object that was called when the event was raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-228">Ta metoda jest zwykle zwraca `null` dla zdarzenia deklarowane z języka C# `event` — słowo kluczowe lub Visual Basic `Event` — słowo kluczowe.</span><span class="sxs-lookup"><span data-stu-id="0b16a-228">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="0b16a-229">Jest to spowodowane C# i Visual Basic kompilatory nie generują taka metoda domyślnie.</span><span class="sxs-lookup"><span data-stu-id="0b16a-229">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="0b16a-230"><paramref name="nonPublic" /> jest <see langword="true" />metodę używaną do dodawania obiektu delegowanego obsługi zdarzeń jest niepublicznych i obiekt wywołujący nie ma uprawnień do uwzględnienia w metodach niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="0b16a-230"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-231">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-231">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-232">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-232">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRemoveMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b16a-233">Zwraca metodę, aby usunąć program obsługi zdarzeń delegować w źródle zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-233">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRemoveMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemoveMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRemoveMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b16a-234">Zwraca metodę, aby usunąć program obsługi zdarzeń delegować w źródle zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-234">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
        <returns><span data-ttu-id="0b16a-235">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metodę używaną do usunięcia obiektu delegowanego obsługi zdarzeń w źródle zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-235">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0b16a-236">Metoda ma zazwyczaj następującą sygnaturą:</span><span class="sxs-lookup"><span data-stu-id="0b16a-236">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-237">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-237">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-238">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-238">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRemoveMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRemoveMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="0b16a-239"><see langword="true" /> Jeśli może być zwracany metody niepublicznej; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-239"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0b16a-240">W przypadku przesłonięcia w klasie pochodnej pobiera <see langword="MethodInfo" /> obiektu usuwania metoda zdarzenia, określania, czy mają być zwracane metody niepublicznej.</span><span class="sxs-lookup"><span data-stu-id="0b16a-240">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="0b16a-241">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metodę używaną do usunięcia obiektu delegowanego obsługi zdarzeń w źródle zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="0b16a-241">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0b16a-242">Metoda ma zazwyczaj następującą sygnaturą:</span><span class="sxs-lookup"><span data-stu-id="0b16a-242">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="0b16a-243"><paramref name="nonPublic" /> jest <see langword="true" />metodę używaną do dodawania obiektu delegowanego obsługi zdarzeń jest niepublicznych i obiekt wywołujący nie ma uprawnień do uwzględnienia w metodach niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="0b16a-243"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-244">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-244">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-245">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-245">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsMulticast">
      <MemberSignature Language="C#" Value="public virtual bool IsMulticast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMulticast" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsMulticast" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMulticast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMulticast { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsMulticast</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b16a-246">Pobiera wartość wskazującą, czy zdarzenie jest multiemisji.</span><span class="sxs-lookup"><span data-stu-id="0b16a-246">Gets a value indicating whether the event is multicast.</span></span></summary>
        <value>
          <span data-ttu-id="0b16a-247"><see langword="true" /> Jeśli delegat jest wystąpieniem multiemisji delegata; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-247"><see langword="true" /> if the delegate is an instance of a multicast delegate; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="0b16a-248">Obiekt wywołujący nie posiada wymaganych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="0b16a-248">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b16a-249">Pobiera wartość wskazującą czy <see langword="EventInfo" /> ma nazwę o specjalnym znaczeniu.</span><span class="sxs-lookup"><span data-stu-id="0b16a-249">Gets a value indicating whether the <see langword="EventInfo" /> has a name with a special meaning.</span></span></summary>
        <value>
          <span data-ttu-id="0b16a-250"><see langword="true" /> Jeśli to zdarzenie ma specjalną nazwą; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-250"><see langword="true" /> if this event has a special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-251">Ta właściwość określa, czy nazwa zdarzenia ma specjalne znaczenie.</span><span class="sxs-lookup"><span data-stu-id="0b16a-251">This property determines whether the event's name has a special meaning.</span></span> <span data-ttu-id="0b16a-252">Nazwy zaczynać ani zawierać znaku podkreślenia (_), metod dostępu do właściwości i metod przeładowanie operatora są przykłady nazw, które mogą wymagać specjalnego przetwarzania przez niektóre kompilatory.</span><span class="sxs-lookup"><span data-stu-id="0b16a-252">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventAttributes" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b16a-253">Pobiera <see cref="T:System.Reflection.MemberTypes" /> wartość wskazującą, czy ten element członkowski jest zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="0b16a-253">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></summary>
        <value><span data-ttu-id="0b16a-254">A <see cref="T:System.Reflection.MemberTypes" /> wartość wskazującą, czy ten element członkowski jest zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="0b16a-254">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-255">Ta właściwość zastępuje <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="0b16a-255">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="0b16a-256">W związku z tym podczas badania zestawu <xref:System.Reflection.MemberInfo> obiektów — na przykład tablicy zwracanej przez <xref:System.Type.GetMembers%2A> — <xref:System.Reflection.MemberInfo.MemberType%2A> zwraca <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> tylko wtedy, gdy dany element jest zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="0b16a-256">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> only when a given member is an event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="0b16a-257">Pierwszy obiekt, który ma zostać porównany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-257">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="0b16a-258">Drugi obiekt, który będzie porównywany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-258">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="0b16a-259">Wskazuje, czy dwa <see cref="T:System.Reflection.EventInfo" /> obiekty są takie same.</span><span class="sxs-lookup"><span data-stu-id="0b16a-259">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="0b16a-260"><see langword="true" /> Jeśli <paramref name="left" /> jest równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-260"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="0b16a-261">Pierwszy obiekt, który ma zostać porównany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-261">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="0b16a-262">Drugi obiekt, który będzie porównywany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-262">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="0b16a-263">Wskazuje, czy dwa <see cref="T:System.Reflection.EventInfo" /> obiekty nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="0b16a-263">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="0b16a-264"><see langword="true" /> Jeśli <paramref name="left" /> nie jest równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-264"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RaiseMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RaiseMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RaiseMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RaiseMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b16a-265">Pobiera metodę wywoływaną, gdy zdarzenie jest zgłaszane, włączając metody niepublicznej.</span><span class="sxs-lookup"><span data-stu-id="0b16a-265">Gets the method that is called when the event is raised, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="0b16a-266">Metoda wywoływana, gdy zdarzenie jest wywoływane.</span><span class="sxs-lookup"><span data-stu-id="0b16a-266">The method that is called when the event is raised.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-267">Ta właściwość jest odpowiednikiem wywołania metody <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> o wartości `true`.</span><span class="sxs-lookup"><span data-stu-id="0b16a-267">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public virtual void RemoveEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="0b16a-268">Źródło zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-268">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="0b16a-269">Delegat do skojarzona z zdarzenia wygenerowane przez obiekt docelowy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-269">The delegate to be disassociated from the events raised by target.</span></span></param>
        <summary><span data-ttu-id="0b16a-270">Usuwa program obsługi zdarzeń z źródła zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-270">Removes an event handler from an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-271">Ta metoda próbuje usunąć delegata, który może synchronizować tego zdarzenia na obiekcie docelowym.</span><span class="sxs-lookup"><span data-stu-id="0b16a-271">This method attempts to remove the delegate that may synchronize this event on the target object.</span></span>  
  
 <span data-ttu-id="0b16a-272">Gdy zdarzenie jest wywoływane przez docelowej, metody lub metody zamknięte przez `handler` nie zostanie wywołany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-272">When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b16a-273">Zdarzenie nie ma publicznego <see langword="remove" /> metody dostępu.</span><span class="sxs-lookup"><span data-stu-id="0b16a-273">The event does not have a public <see langword="remove" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0b16a-274">Nie można użyć programu obsługi, która została przekazana.</span><span class="sxs-lookup"><span data-stu-id="0b16a-274">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="0b16a-275">W [.NET dla Sklepu Windows apps](http://go.microsoft.com/fwlink/?LinkID=247912) lub [przenośnej biblioteki klas](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-275">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="0b16a-276"><paramref name="target" /> Parametr jest <see langword="null" /> i zdarzenie nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="0b16a-276">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
 <span data-ttu-id="0b16a-277">—lub—</span><span class="sxs-lookup"><span data-stu-id="0b16a-277">-or-</span></span>  
  
 <span data-ttu-id="0b16a-278"><see cref="T:System.Reflection.EventInfo" /> Nie jest zadeklarowany w elemencie docelowym.</span><span class="sxs-lookup"><span data-stu-id="0b16a-278">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="0b16a-279">W [.NET dla Sklepu Windows apps](http://go.microsoft.com/fwlink/?LinkID=247912) lub [przenośnej biblioteki klas](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch wyjątku klasy podstawowej <see cref="T:System.MemberAccessException" />, zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-279">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="0b16a-280">Obiekt wywołujący nie ma uprawnień dostępu do elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-280">The caller does not have access permission to the member.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="0b16a-281">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-281">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="0b16a-282">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="0b16a-282">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RemoveMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RemoveMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoveMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RemoveMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b16a-283">Pobiera <see langword="MethodInfo" /> obiektu do usunięcia metoda zdarzenia, w tym metody niepublicznej.</span><span class="sxs-lookup"><span data-stu-id="0b16a-283">Gets the <see langword="MethodInfo" /> object for removing a method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="0b16a-284"><see langword="MethodInfo" /> Obiektu do usunięcia metody zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="0b16a-284">The <see langword="MethodInfo" /> object for removing a method of the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-285">Ta właściwość jest odpowiednikiem wywołania metody <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> o wartości `true`.</span><span class="sxs-lookup"><span data-stu-id="0b16a-285">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _EventInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_EventInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="0b16a-286">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="0b16a-286">Reserved for future use.</span></span> <span data-ttu-id="0b16a-287">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="0b16a-287">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="0b16a-288">Przekazana tablica nazw ma być mapowana.</span><span class="sxs-lookup"><span data-stu-id="0b16a-288">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="0b16a-289">Liczba nazw, które mają być mapowane.</span><span class="sxs-lookup"><span data-stu-id="0b16a-289">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="0b16a-290">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</span><span class="sxs-lookup"><span data-stu-id="0b16a-290">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="0b16a-291">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</span><span class="sxs-lookup"><span data-stu-id="0b16a-291">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="0b16a-292">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</span><span class="sxs-lookup"><span data-stu-id="0b16a-292">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-293">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-293">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="0b16a-294">Aby uzyskać więcej informacji na temat `IDispatch::GetIDsOfNames`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="0b16a-294">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0b16a-295">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-295">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetType">
      <MemberSignature Language="C#" Value="Type _EventInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._EventInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _EventInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._EventInfo.GetType() = System::Runtime::InteropServices::_EventInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b16a-296">Zwraca <c>T:System.Type</c> reprezentujący obiekt <see cref="T:System.Reflection.EventInfo" /> typu.</span><span class="sxs-lookup"><span data-stu-id="0b16a-296">Returns a <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="0b16a-297">A <c>T:System.Type</c> reprezentujący obiekt <see cref="T:System.Reflection.EventInfo" /> typu.</span><span class="sxs-lookup"><span data-stu-id="0b16a-297">A <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _EventInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="0b16a-298">Informacje o typie, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-298">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="0b16a-299">Identyfikator regionalny dla informacji o typie.</span><span class="sxs-lookup"><span data-stu-id="0b16a-299">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="0b16a-300">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</span><span class="sxs-lookup"><span data-stu-id="0b16a-300">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="0b16a-301">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</span><span class="sxs-lookup"><span data-stu-id="0b16a-301">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-302">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="0b16a-303">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfo`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="0b16a-303">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0b16a-304">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-304">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _EventInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="0b16a-305">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="0b16a-305">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="0b16a-306">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</span><span class="sxs-lookup"><span data-stu-id="0b16a-306">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-307">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-307">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="0b16a-308">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfoCount`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="0b16a-308">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0b16a-309">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-309">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.Invoke">
      <MemberSignature Language="C#" Value="void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _EventInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_EventInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="0b16a-310">Określa element członkowski.</span><span class="sxs-lookup"><span data-stu-id="0b16a-310">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="0b16a-311">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="0b16a-311">Reserved for future use.</span></span> <span data-ttu-id="0b16a-312">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="0b16a-312">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="0b16a-313">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</span><span class="sxs-lookup"><span data-stu-id="0b16a-313">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="0b16a-314">Flagi opisujące kontekst wywołania.</span><span class="sxs-lookup"><span data-stu-id="0b16a-314">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="0b16a-315">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</span><span class="sxs-lookup"><span data-stu-id="0b16a-315">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="0b16a-316">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</span><span class="sxs-lookup"><span data-stu-id="0b16a-316">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="0b16a-317">Wskaźnik do struktury, która zawiera informacje o wyjątku.</span><span class="sxs-lookup"><span data-stu-id="0b16a-317">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="0b16a-318">Indeks pierwszego argumentu, który zawiera błąd.</span><span class="sxs-lookup"><span data-stu-id="0b16a-318">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="0b16a-319">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="0b16a-319">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b16a-320">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="0b16a-320">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="0b16a-321">Aby uzyskać więcej informacji na temat `IDispatch::Invoke`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="0b16a-321">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0b16a-322">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="0b16a-322">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>