<Type Name="MethodBody" FullName="System.Reflection.MethodBody">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eafdd1e1de343cc976cc4fbe7592223d27d1cb00" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51881925" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MethodBody" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit MethodBody extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBody" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodBody" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBody" />
  <TypeSignature Language="F#" Value="type MethodBody = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6ab27-101">Zapewnia dostęp do MSIL i metadanych dla treści metody.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6ab27-101">Provides access to the metadata and MSIL for the body of a method.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab27-102"><xref:System.Reflection.MethodBody> Klasy zapewnia dostęp do informacji na temat zmiennych lokalnych i klauzule obsługi wyjątków w treści metody i języka Microsoft intermediate language (MSIL) tworzącą treści metody.</span><span class="sxs-lookup"><span data-stu-id="6ab27-102">The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.</span></span>  
  
 <span data-ttu-id="6ab27-103">Można użyć metody rozpoznawania token klasy modułu, takie jak <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, i <xref:System.Reflection.Module.ResolveType%2A>, aby rozwiązać tokenów w treści metody, aby <xref:System.Type> obiektów <xref:System.Reflection.MethodInfo> obiekty, i <xref:System.Reflection.FieldInfo> obiekty, które zapewniają szczegółowe informacje na temat typów, metod i uzyskiwał dostęp do MSIL w treści metody pól.</span><span class="sxs-lookup"><span data-stu-id="6ab27-103">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ab27-104">Podczas analizowania treści metod wymaga dokładnej znajomości metadanych i formatów instrukcji MSIL.</span><span class="sxs-lookup"><span data-stu-id="6ab27-104">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="6ab27-105">Informacje można znaleźć w dokumentacji Common Language Infrastructure (CLI), szczególnie "Partycja II: metadane definicji i semantyka" oraz "Partition III: CIL instrukcji Set".</span><span class="sxs-lookup"><span data-stu-id="6ab27-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="6ab27-106">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w witrynie Ecma International w sieci Web.</span><span class="sxs-lookup"><span data-stu-id="6ab27-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="6ab27-107">Uzyskanie <xref:System.Reflection.MethodBody> obiekt do danej metody, najpierw uzyskać <xref:System.Reflection.MethodInfo> obiektu dla metody, następnie wywołać <xref:System.Reflection.MethodInfo> obiektu <xref:System.Reflection.MethodBase.GetMethodBody%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6ab27-107">To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ab27-108">Poniższy przykład kodu przedstawia metodę testu o nazwie `MethodBodyExample` i wyświetla jego informacji zmiennych lokalnych i klauzule obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="6ab27-108">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="6ab27-109"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Metoda jest używana do uzyskania <xref:System.Reflection.MethodBody> obiektu dla metody testowej.</span><span class="sxs-lookup"><span data-stu-id="6ab27-109">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span>  
  
 <span data-ttu-id="6ab27-110">W przykładzie użyto <xref:System.Reflection.MethodBody.LocalVariables%2A> właściwość, aby uzyskać listę <xref:System.Reflection.LocalVariableInfo> obiektów, a następnie wyświetla ich typy i kolejność indeksu.</span><span class="sxs-lookup"><span data-stu-id="6ab27-110">The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order.</span></span> <span data-ttu-id="6ab27-111"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Właściwość jest używana do uzyskiwania listy klauzule obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="6ab27-111">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ab27-112">Nie wszystkie języki komputer może generować <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> klauzul.</span><span class="sxs-lookup"><span data-stu-id="6ab27-112">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="6ab27-113">W przykładzie w języku Visual Basic zawiera klauzulę filtru przy użyciu języka Visual Basic `When` wyrażenie, które zostanie pominięty z przykładów dla innych języków.</span><span class="sxs-lookup"><span data-stu-id="6ab27-113">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBody();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ab27-114">Inicjuje nowe wystąpienie klasy <see cref="T:System.Reflection.MethodBody" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-114">Initializes a new instance of the <see cref="T:System.Reflection.MethodBody" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab27-115">Ten konstruktor jest wywoływany przez klasy pochodne podczas konstruowania <xref:System.Reflection.MethodBody> obiektów.</span><span class="sxs-lookup"><span data-stu-id="6ab27-115">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandlingClauses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExceptionHandlingClauses As IList(Of ExceptionHandlingClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ ExceptionHandlingClauses { System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandlingClauses : System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;" Usage="System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ab27-116">Pobiera listę, która dołącza wszystkie klauzule obsługi wyjątków w treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-116">Gets a list that includes all the exception-handling clauses in the method body.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ab27-117">
            <see cref="T:System.Collections.Generic.IList`1" /> z <see cref="T:System.Reflection.ExceptionHandlingClause" /> obiekty reprezentujące klauzule obsługi wyjątków w treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-117">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.ExceptionHandlingClause" /> objects representing the exception-handling clauses in the body of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab27-118">Lista zawiera wszystkie klauzule z wszystkich bloków try w treści metody.</span><span class="sxs-lookup"><span data-stu-id="6ab27-118">The list includes all clauses from all try blocks in the method body.</span></span> <span data-ttu-id="6ab27-119">Każdy <xref:System.Reflection.ExceptionHandlingClause> obiekt zawiera informacje umożliwiające identyfikację bloku try, z którą jest skojarzony.</span><span class="sxs-lookup"><span data-stu-id="6ab27-119">Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ab27-120">Praca z klauzule obsługi wyjątków wymaga dokładnej znajomości metadanych i formatów instrukcji MSIL.</span><span class="sxs-lookup"><span data-stu-id="6ab27-120">Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="6ab27-121">Informacje można znaleźć w dokumentacji Common Language Infrastructure (CLI), szczególnie "Partycja II: metadane definicji i semantyka" oraz "Partition III: CIL instrukcji Set".</span><span class="sxs-lookup"><span data-stu-id="6ab27-121">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="6ab27-122">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w witrynie Ecma International w sieci Web.</span><span class="sxs-lookup"><span data-stu-id="6ab27-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ab27-123">Poniższy przykład kodu przedstawia metodę testu o nazwie `MethodBodyExample` i wyświetla informacje o jego klauzule obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="6ab27-123">The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses.</span></span> <span data-ttu-id="6ab27-124"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Metoda jest używana do uzyskania <xref:System.Reflection.MethodBody> obiektu dla metody testowej.</span><span class="sxs-lookup"><span data-stu-id="6ab27-124">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="6ab27-125"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Właściwość jest używana do uzyskiwania listy <xref:System.Reflection.ExceptionHandlingClause> obiektów.</span><span class="sxs-lookup"><span data-stu-id="6ab27-125">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ab27-126">Nie wszystkie języki komputer może generować <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> klauzul.</span><span class="sxs-lookup"><span data-stu-id="6ab27-126">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="6ab27-127">W przykładzie w języku Visual Basic zawiera klauzulę filtru przy użyciu języka Visual Basic `When` wyrażenie, które zostanie pominięty z przykładów dla innych języków.</span><span class="sxs-lookup"><span data-stu-id="6ab27-127">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="6ab27-128">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.MethodBody> klasy.</span><span class="sxs-lookup"><span data-stu-id="6ab27-128">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetILAsByteArray">
      <MemberSignature Language="C#" Value="public virtual byte[] GetILAsByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetILAsByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.GetILAsByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetILAsByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetILAsByteArray();" />
      <MemberSignature Language="F#" Value="abstract member GetILAsByteArray : unit -&gt; byte[]&#xA;override this.GetILAsByteArray : unit -&gt; byte[]" Usage="methodBody.GetILAsByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ab27-129">Zwraca język MSIL dla treści metody w postaci tablicy bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-129">Returns the MSIL for the method body, as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ab27-130">Tablica typu <see cref="T:System.Byte" /> zawierający MSIL dla treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-130">An array of type <see cref="T:System.Byte" /> that contains the MSIL for the method body.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab27-131">Można użyć metody rozpoznawania token klasy modułu, takie jak <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, i <xref:System.Reflection.Module.ResolveMember%2A>, aby rozwiązać tokenów w treści metody, aby <xref:System.Type> obiektów <xref:System.Reflection.MethodInfo> obiekty, i <xref:System.Reflection.FieldInfo> obiekty, które zapewniają szczegółowe informacje na temat typów, metod i uzyskiwał dostęp do MSIL w treści metody pól.</span><span class="sxs-lookup"><span data-stu-id="6ab27-131">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ab27-132">Podczas analizowania treści metod wymaga dokładnej znajomości metadanych i formatów instrukcji MSIL.</span><span class="sxs-lookup"><span data-stu-id="6ab27-132">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="6ab27-133">Informacje można znaleźć w dokumentacji Common Language Infrastructure (CLI), szczególnie "Partycja II: metadane definicji i semantyka" oraz "Partition III: CIL instrukcji Set".</span><span class="sxs-lookup"><span data-stu-id="6ab27-133">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="6ab27-134">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w witrynie Ecma International w sieci Web.</span><span class="sxs-lookup"><span data-stu-id="6ab27-134">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])" />
        <altmember cref="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public virtual bool InitLocals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool InitLocals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool" Usage="System.Reflection.MethodBody.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ab27-135">Pobiera wartość wskazującą, czy zmiennych lokalnych w treści metody są inicjowane na wartości domyślne dla ich typy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-135">Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ab27-136">
            <see langword="true" /> Jeśli treści metody zawiera kod, aby zainicjować zmienne lokalne, aby <see langword="null" /> dla typów odwołań lub inicjowany z wartością zerową wartość dla typów wartości; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-136">
              <see langword="true" /> if the method body contains code to initialize local variables to <see langword="null" /> for reference types, or to the zero-initialized value for value types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab27-137"><xref:System.Reflection.MethodBody.InitLocals%2A> Właściwość odwołuje się do zmiennych, które nie są jawnie zainicjowana; czyli, zmienne, które są zadeklarowane przy użyciu składni, takich jak `int x;` w języku C# lub `Dim x As Integer` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6ab27-137">The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6ab27-138">Zmienne odwołania są inicjowane na `null` domyślnie.</span><span class="sxs-lookup"><span data-stu-id="6ab27-138">Reference variables are initialized to `null` by default.</span></span> <span data-ttu-id="6ab27-139">Zmienne liczbowe są inicjowane od zera.</span><span class="sxs-lookup"><span data-stu-id="6ab27-139">Numeric variables are initialized to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ab27-140">Poniższy przykład kodu przedstawia metodę testu o nazwie `MethodBodyExample` i wyświetla jego informacji zmiennych lokalnych i klauzule obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="6ab27-140">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="6ab27-141"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Metoda jest używana do uzyskania <xref:System.Reflection.MethodBody> obiektu dla metody testowej.</span><span class="sxs-lookup"><span data-stu-id="6ab27-141">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="6ab27-142"><xref:System.Reflection.MethodBody.MaxStackSize%2A> i <xref:System.Reflection.MethodBody.InitLocals%2A> właściwości są wyświetlane.</span><span class="sxs-lookup"><span data-stu-id="6ab27-142">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="6ab27-143">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.MethodBody> klasy.</span><span class="sxs-lookup"><span data-stu-id="6ab27-143">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalSignatureMetadataToken">
      <MemberSignature Language="C#" Value="public virtual int LocalSignatureMetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalSignatureMetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalSignatureMetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LocalSignatureMetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalSignatureMetadataToken : int" Usage="System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ab27-144">Pobiera token metadanych dla podpisie, który opisuje zmiennych lokalnych w metodzie w metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-144">Gets a metadata token for the signature that describes the local variables for the method in metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ab27-145">Liczba całkowita, która reprezentuje token metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-145">An integer that represents the metadata token.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab27-146">Użyj <xref:System.Reflection.MethodBody.LocalVariables%2A> właściwość, aby uzyskać informacje na temat metody zmiennych lokalnych.</span><span class="sxs-lookup"><span data-stu-id="6ab27-146">Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ab27-147">Informacje o lokalnej zmiennej sygnatur można znaleźć w dokumentacji Common Language Infrastructure (CLI), szczególnie "partycja II: metadane definicji i semantyka".</span><span class="sxs-lookup"><span data-stu-id="6ab27-147">Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="6ab27-148">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w witrynie Ecma International w sieci Web.</span><span class="sxs-lookup"><span data-stu-id="6ab27-148">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalVariables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.LocalVariableInfo&gt; LocalVariables" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalVariables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalVariables As IList(Of LocalVariableInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ LocalVariables { System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalVariables : System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;" Usage="System.Reflection.MethodBody.LocalVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ab27-149">Pobiera listę zmiennych lokalnych zadeklarowanych w treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-149">Gets the list of local variables declared in the method body.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ab27-150">
            <see cref="T:System.Collections.Generic.IList`1" /> z <see cref="T:System.Reflection.LocalVariableInfo" /> obiekty, które opisują zmienne lokalne są deklarowane w treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-150">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.LocalVariableInfo" /> objects that describe the local variables declared in the method body.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab27-151">Nie trzeba token metadanych dla zmiennej sygnatura lokalna, dostarczone przez <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6ab27-151">You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ab27-152">Poniższy przykład kodu przedstawia metodę testu o nazwie `MethodBodyExample` i wyświetlenie informacji o zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="6ab27-152">The following code example defines a test method named `MethodBodyExample` and displays its local variable information.</span></span> <span data-ttu-id="6ab27-153"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Metoda jest używana do uzyskania <xref:System.Reflection.MethodBody> obiektu dla metody testowej.</span><span class="sxs-lookup"><span data-stu-id="6ab27-153">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="6ab27-154"><xref:System.Reflection.MethodBody.LocalVariables%2A> Właściwość jest używana do uzyskiwania listy <xref:System.Reflection.LocalVariableInfo> obiektów.</span><span class="sxs-lookup"><span data-stu-id="6ab27-154">The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.</span></span>  
  
 <span data-ttu-id="6ab27-155">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.MethodBody> klasy.</span><span class="sxs-lookup"><span data-stu-id="6ab27-155">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#3)]
[!code-csharp[MethodBody#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#3)]
[!code-vb[MethodBody#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#3)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#6](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#6)]
[!code-csharp[MethodBody#6](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#6)]
[!code-vb[MethodBody#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.LocalVariableInfo" />
      </Docs>
    </Member>
    <Member MemberName="MaxStackSize">
      <MemberSignature Language="C#" Value="public virtual int MaxStackSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxStackSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.MaxStackSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaxStackSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxStackSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxStackSize : int" Usage="System.Reflection.MethodBody.MaxStackSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ab27-156">Pobiera maksymalną liczbę elementów na stosie operand, gdy metoda jest wykonywaay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-156">Gets the maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ab27-157">Maksymalna liczba elementów na stosie operand, gdy metoda jest wykonywaay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab27-157">The maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab27-158">Aby uzyskać więcej informacji zobacz dokumentację Common Language Infrastructure (CLI), szczególnie "Partycja II: metadane definicji i semantyka" oraz "Partition III: CIL instrukcji Set".</span><span class="sxs-lookup"><span data-stu-id="6ab27-158">For more information, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="6ab27-159">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w witrynie Ecma International w sieci Web.</span><span class="sxs-lookup"><span data-stu-id="6ab27-159">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ab27-160">Poniższy przykład kodu przedstawia metodę testu o nazwie `MethodBodyExample` i wyświetla jego informacji zmiennych lokalnych i klauzule obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="6ab27-160">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="6ab27-161"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Metoda jest używana do uzyskania <xref:System.Reflection.MethodBody> obiektu dla metody testowej.</span><span class="sxs-lookup"><span data-stu-id="6ab27-161">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="6ab27-162"><xref:System.Reflection.MethodBody.MaxStackSize%2A> i <xref:System.Reflection.MethodBody.InitLocals%2A> właściwości są wyświetlane.</span><span class="sxs-lookup"><span data-stu-id="6ab27-162">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="6ab27-163">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.MethodBody> klasy.</span><span class="sxs-lookup"><span data-stu-id="6ab27-163">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>