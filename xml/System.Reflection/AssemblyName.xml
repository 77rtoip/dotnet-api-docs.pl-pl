<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AssemblyName.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e8d575c8f6baf9dd58560db2cd8c587433f5908.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e8d575c8f6baf9dd58560db2cd8c587433f5908</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Describes an assembly's unique identity in full.</source>
          <target state="translated">W tym artykule opisano unikatową tożsamość zestawu w całości.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object contains information about an assembly, which you can use to bind to that assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Obiekt zawiera informacje o zestawie, który umożliwia powiązanie do tego zestawu.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly's identity consists of the following:</source>
          <target state="translated">Tożsamość zestawu składa się z następujących czynności:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Simple name.</source>
          <target state="translated">Prosta nazwa.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Version number.</source>
          <target state="translated">Numer wersji.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Cryptographic key pair.</source>
          <target state="translated">Pary kluczy kryptograficznych.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Supported culture.</source>
          <target state="translated">Obsługiwaną kulturą.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The simple name is typically the file name for the manifest file without its extension.</source>
          <target state="translated">Prosta nazwa jest zwykle nazwę pliku dla pliku manifestu bez jego rozszerzenia.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The key pair includes a public and private key, used to create strong-name signatures for assemblies.</source>
          <target state="translated">Pary kluczy zawiera klucz publiczny i prywatny używany do tworzenia podpisów silnej nazwy zestawów.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</source>
          <target state="translated">Wszystkie kompilatory, które obsługują aparat plików wykonywalnych języka wspólnego, w trakcie wykonania wyemitują prostą nazwę klasy zagnieżdżonej, a odbicie podczas kwerendy stworzy zniekształcone nazwy zgodnie z następującymi konwencjami.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Delimiter</source>
          <target state="translated">Ogranicznik</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Meaning</source>
          <target state="translated">Znaczenie</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Backslash (<ph id="ph1">\\</ph>)</source>
          <target state="translated">Ukośnik odwrotny (<ph id="ph1">\\</ph>)</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Escape character.</source>
          <target state="translated">Znak ucieczki.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Comma (,)</source>
          <target state="translated">Przecinek (,)</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes the assembly name.</source>
          <target state="translated">Poprzedza nazwy zestawu.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Plus sign (+)</source>
          <target state="translated">Znak plus (+)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes a nested class.</source>
          <target state="translated">Poprzedza klasę zagnieżdżoną.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For example, the fully qualified name for a class might look like this:</source>
          <target state="translated">Na przykład w pełni kwalifikowana nazwa klasy może wyglądać następująco:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>ContainingClass+NestedClass,MyAssembly</source>
          <target state="translated">ContainingClass + NestedClass, MyAssembly</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A "++" becomes "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", and a "<ph id="ph4">\\</ph>" becomes "<ph id="ph5">\\</ph><ph id="ph6">\\</ph>".</source>
          <target state="translated">A "++" staje się "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", a "<ph id="ph4">\\</ph>"staje się"<ph id="ph5">\\</ph><ph id="ph6">\\</ph>".</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This qualified name can be persisted and later used to load the <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Utrwalenia i później użyć do załadowania tego kwalifikowana nazwa <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To search for and load a <ph id="ph1">&lt;xref:System.Type&gt;</ph>, use <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> either with the type name only or with the assembly qualified type name.</source>
          <target state="translated">Aby wyszukać i załadować <ph id="ph1">&lt;xref:System.Type&gt;</ph>, użyj <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> albo z typem nazwy lub tylko o nazwie typu kwalifikowanej zestawu.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the type name only will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in the caller's assembly and then in the System assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> z typem nazwę tylko będzie szukać <ph id="ph2">&lt;xref:System.Type&gt;</ph> w zestawie wywołującego, a następnie w zestawu systemowego.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the assembly qualified type name will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in any assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> z zestawu będzie szukać kwalifikowana nazwa typu <ph id="ph2">&lt;xref:System.Type&gt;</ph> w dowolnym zestawie.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A fully specified <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> must have the name, culture, public key or public key token, major version, minor version, build number, and revision number parameters.</source>
          <target state="translated">Pełni określonego <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> musi mieć nazwę, kultury, klucz publiczny lub token klucza publicznego, główne wersji, wersja pomocnicza numer kompilacji i poprawki liczba parametrów.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The last four are packaged in the <ph id="ph1">&lt;xref:System.Version&gt;</ph> type.</source>
          <target state="translated">Cztery ostatnie są popakowane w <ph id="ph1">&lt;xref:System.Version&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a simple name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</source>
          <target state="translated">Aby utworzyć prostą nazwą, Utwórz <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> przy użyciu konstruktora domyślnego i ustaw <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">Inne właściwości są opcjonalne.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a full strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</source>
          <target state="translated">Aby utworzyć pełny silnej nazwy, utworzyć <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> przy użyciu konstruktora domyślnego i ustaw <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> i <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">Inne właściwości są opcjonalne.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> to set the public key and the strong name.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> można ustawić klucz publiczny i silnej nazwy.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The strong name signing always uses the <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.</source>
          <target state="translated">Silna nazwa podpisywanie zawsze używa <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> algorytmu wyznaczania wartości skrótu.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To ensure that the names are constructed correctly, use the following properties:</source>
          <target state="translated">Aby upewnić się, że nazwy są prawidłowo wykonane, należy użyć następujących właściwości:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>You can also get the name by using the <ph id="ph1">`/l`</ph> option with the <bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache Tool)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></source>
          <target state="translated">Nazwę można również uzyskać za pomocą <ph id="ph1">`/l`</ph> opcję z <bpt id="p1">[</bpt>Gacutil.exe (narzędzie globalnej pamięci podręcznej zestawów)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For a partially specified strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the name and public key.</source>
          <target state="translated">Częściowo określoną nazwą silną, można utworzyć <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> przy użyciu konstruktora domyślnego i ustaw nazwę i klucz publiczny.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly created using such an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> can be signed later using the Assembly Linker (Al.exe).</source>
          <target state="translated">Zestaw utworzone za pomocą takich <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> można podpisać później za pomocą Assembly Linker (Al.exe).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>It is possible to specify a public key and a <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> with inconsistent values.</source>
          <target state="translated">Można określać klucz publiczny i <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> z niespójne wartości.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This can be useful in developer scenarios.</source>
          <target state="translated">Może to być przydatne w scenariuszach developer.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>In this case, the public key retrieved with <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> specifies the correct public key, while the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> specifies the public and private keys used during development.</source>
          <target state="translated">W takim przypadku pobrać klucza publicznego z <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> określa poprawny publicznego klucza, podczas <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> Określa klucze publiczne i prywatne używane podczas tworzenia.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When the runtime detects a mismatch between the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> and the public key, it looks up in the registry the correct key that matches the public key.</source>
          <target state="translated">Jeśli środowisko uruchomieniowe wykryje niezgodność między <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> i klucz publiczny, pobiera ona w rejestrze poprawny klucz, który pasuje do klucza publicznego.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The format of the display name of an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is a comma-delimited Unicode string that begins with the name, as follows:</source>
          <target state="translated">Format nazwy wyświetlanej <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> jest ciągiem Unicode rozdzielanego przecinkami zaczyna się od nazwy w następujący sposób:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Name`</ph> is the textual name of the assembly.</source>
          <target state="translated"><ph id="ph1">`Name`</ph> jest tekstowy nazwę zestawu.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`CultureInfo`</ph> is the RFC1766-format-defined culture.</source>
          <target state="translated"><ph id="ph1">`CultureInfo`</ph> jest zdefiniowany format RFC1766 kultury.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, and <ph id="ph4">`Revision`</ph> are the major version, minor version, build number, and revision number of the assembly.</source>
          <target state="translated"><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, i <ph id="ph4">`Revision`</ph> wersji głównej, wersja pomocnicza, numer kompilacji i numer wersji zestawu.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`StrongName`</ph> is the hexadecimal-encoded low-order 64 bits of the hash value of the public key generated using the SHA-1 hashing algorithm and the public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`StrongName`</ph> zakodowane w formacie szesnastkowym znaczącymi bitami 64 bity wartość skrótu klucza publicznego wygenerowanych przy użyciu algorytmu wyznaczania wartości skrótu SHA-1 i klucz publiczny, określony przez <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`PublicKeyToken`</ph> is the hexadecimal-encoded public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`PublicKeyToken`</ph> jest kodowany w formacie szesnastkowym określony klucz publiczny przez <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Hexadecimal encoding is defined as the conversion of each byte of a binary object to two hexadecimal characters, progressing from least to most significant byte.</source>
          <target state="translated">Kodowanie szesnastkowe jest zdefiniowany jako konwersja każdego bajtu obiektu binarnego dwóch znaków szesnastkowych postępu od najmniejszej do najbardziej znaczący bajt.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additional display values will be added as deemed necessary.</source>
          <target state="translated">Wartości wyświetlane dodatkowe zostaną dodane uznane za niezbędne.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>If the full public key is known, then PublicKey may be substituted for StrongName.</source>
          <target state="translated">Jeśli znane jest klucz publiczny pełnej, PublicKey mogą być zastępowane dla StrongName.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Also note that except for <ph id="ph1">`Name`</ph>, which must come first, the lexical order of parameters is unimportant.</source>
          <target state="translated">Należy również zauważyć, że z wyjątkiem <ph id="ph1">`Name`</ph>, który musi występować najpierw, leksykalne kolejność parametrów jest bez znaczenia.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>However, any parameter (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> or <ph id="ph4">`PublicKey`</ph>) not specifically set is considered to be omitted, and the <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is then considered partial.</source>
          <target state="translated">Jednak żadnego parametru (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> lub <ph id="ph4">`PublicKey`</ph>) nie zostały zestaw jest uważany za pominięcie i <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> następnie jest traktowane jako częściowy.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When specifying partial information, Name parameters must be specified in the order described above.</source>
          <target state="translated">Podczas określania częściowe informacje, należy określić nazwy parametrów w kolejności opisane powyżej.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When supplying a display name, the convention <ph id="ph1">`StrongName =null`</ph> or <ph id="ph2">`PublicKey= null`</ph> indicates that binding and matching against a simply named assembly is required.</source>
          <target state="translated">Gdy podanie nazwy wyświetlanej, Konwencji <ph id="ph1">`StrongName =null`</ph> lub <ph id="ph2">`PublicKey= null`</ph> wskazuje, że powiązanie i zgodne po prostu nazwane zestawu jest wymagana.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additionally, the convention <ph id="ph1">`Culture= ""`</ph> (double quote representing an empty string) indicates matching against the default culture.</source>
          <target state="translated">Ponadto Konwencji <ph id="ph1">`Culture= ""`</ph> (reprezentujący pusty ciąg znaków podwójnego cudzysłowu) wskazuje porównanie z domyślną kulturę.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a simply named assembly with default culture.</source>
          <target state="translated">W poniższym przykładzie przedstawiono <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> po prostu nazwane zestawu z domyślną kulturę.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows a fully specified reference for a strongly named assembly with culture "en".</source>
          <target state="translated">W poniższym przykładzie przedstawiono pełni podane odwołanie do zestawu o silnej nazwie z kulturą "en".</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">W tym przykładzie pokazano, jak używać różnych klas odbicia do analizowania metadanych zawarty w zestawie.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>The following example creates a dynamic assembly named <ph id="ph1">`MyAssembly.exe`</ph> and saves it to your hard disk.</source>
          <target state="translated">Poniższy przykład tworzy zestawie dynamicznym o nazwie <ph id="ph1">`MyAssembly.exe`</ph> i zapisze go na dysku twardym.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>After running the example, you can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the assembly metadata.</source>
          <target state="translated">Po uruchomieniu w przykładzie, można użyć <bpt id="p1">[</bpt>Ildasm.exe (dezasembler IL)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> zbadać metadanych zestawu.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The display name of the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph> property.</source>
          <target state="translated">Nazwa wyświetlana zestawu zwrócony przez <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class with the specified display name.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> klasy o nazwie wyświetlanej określony.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The supplied <ph id="ph1">`assemblyName`</ph> is parsed, and the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> are initialized with values from the display name.</source>
          <target state="translated">Podana <ph id="ph1">`assemblyName`</ph> przeanalizować oraz odpowiednich pól nowej <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> są inicjowane z wartościami z nazwę wyświetlaną.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>This is the recommended way of parsing display names.</source>
          <target state="translated">Jest to zalecany sposób analizowania nazw wyświetlanych.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">Pisanie kodu można przeanalizować nazwy wyświetlane nie jest zalecane.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The following example creates an instance of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> from a display name.</source>
          <target state="translated">Poniższy przykład tworzy wystąpienie <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> z nazwę wyświetlaną.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The individual elements of the display name are output to the console as properties of the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object.</source>
          <target state="translated">Poszczególne elementy nazwy wyświetlanej są dane wyjściowe do konsoli jako właściwości <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is a zero length string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> jest ciągiem o zerowej długości.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>, instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch wyjątku klasy podstawowej <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>, zamiast tego.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The referenced assembly could not be found, or could not be loaded.</source>
          <target state="translated">Zestaw z odwołania nie można odnaleźć lub nie można go załadować.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>Makes a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">Tworzy kopię to <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>An object that is a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">Obiekt, który jest kopią tego <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.Clone">
          <source>A new object is created, identical to the original.</source>
          <target state="translated">Nowy obiekt utworzono takie same jak oryginalne.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Gets or sets the location of the assembly as a URL.</source>
          <target state="translated">Pobiera lub Ustawia lokalizację zestawu jako adres URL.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>A string that is the URL location of the assembly.</source>
          <target state="translated">Ciąg, który jest adres URL lokalizacji zestawu.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Gdy zestaw jest ładowany, wartość ta również można uzyskać za pomocą <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>If the assembly was loaded as a byte array, this property returns the location of the caller of the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> method overload, not the location of the loaded assembly.</source>
          <target state="translated">Jeśli zestaw został załadowany jako tablicę bajtów, ta właściwość zwraca lokalizację funkcji wywołującej <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> przeciążenie metody, a nie lokalizacji załadowanego zestawu.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Do not use an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> with only the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property set.</source>
          <target state="translated">Nie używaj <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> tylko z <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> zestawu właściwości.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> Właściwości nie dostarcza żadnych elementów tożsamości zestawu (np. nazwę lub wersję), dlatego podczas ładowania nie występuje zgodnie z regułami obciążenia przez tożsamości, zgodnie z oczekiwaniami z <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Instead, the assembly is loaded using load-from rules.</source>
          <target state="translated">Zamiast tego zestaw został załadowany przy użyciu reguł obciążenia z.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>For information about the disadvantages of using the load-from context, see the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method overload or <bpt id="p1">[</bpt>Best Practices for Assembly Loading<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</source>
          <target state="translated">Aby uzyskać informacje o wad przy użyciu kontekst load-from, zobacz <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> przeciążenie metody lub <bpt id="p1">[</bpt>najlepsze rozwiązania dotyczące ładowania zestawu<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property is used to specify the directory where the assembly is saved.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> właściwość służy do określania katalogu, którym jest zapisany zestaw.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>Gets or sets a value that indicates what type of content the assembly contains.</source>
          <target state="translated">Pobiera lub ustawia wartość wskazującą, zawiera zestaw typu zawartości.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>A value that indicates what type of content the assembly contains.</source>
          <target state="translated">Zawiera wartość, która wskazuje, jaki typ zawartości zestawu.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>Gets or sets the culture supported by the assembly.</source>
          <target state="translated">Pobiera lub ustawia kulturę, obsługiwane przez zestaw.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>An object that represents the culture supported by the assembly.</source>
          <target state="translated">Obiekt, który reprezentuje kultury obsługiwane przez zestaw.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> property is used to specify the culture, which is part of the assembly's display name.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> właściwość jest używana do określenia kultury, która jest częścią nazwy wyświetlanej zestawu.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>Gets or sets the name of the culture associated with the assembly.</source>
          <target state="translated">Pobiera lub ustawia nazwę kultury skojarzone z zestawu.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>The culture name.</source>
          <target state="translated">Nazwa kultury.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>Gets the URI, including escape characters, that represents the codebase.</source>
          <target state="translated">Pobiera identyfikator URI, znaki specjalne w tym reprezentujący bazowej kodu.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>A URI with escape characters.</source>
          <target state="translated">Identyfikator URI z znaki specjalne.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Flags">
          <source>Gets or sets the attributes of the assembly.</source>
          <target state="translated">Pobiera lub ustawia atrybuty zestawu.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>A value that represents the attributes of the assembly.</source>
          <target state="translated">Wartość, która reprezentuje atrybuty zestawu.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> property is used to specify that the assembly has a public key.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> właściwość jest używana do określenia, czy zestaw ma klucz prywatny.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Gets the full name of the assembly, also known as the display name.</source>
          <target state="translated">Pobiera pełną nazwę zestawu, znanej także jako nazwa wyświetlana.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>A string that is the full name of the assembly, also known as the display name.</source>
          <target state="translated">Ciąg, który jest pełną nazwą zestawu, znanej także jako nazwa wyświetlana.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The display name typically consists of the simple name, version number, supported culture, and public key.</source>
          <target state="translated">Nazwa wyświetlana zwykle składa się z prosta nazwa, numer wersji, kultury obsługiwane i klucz publiczny.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>For example:</source>
          <target state="translated">Na przykład:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">Pisanie kodu można przeanalizować nazwy wyświetlane nie jest zalecane.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Instead, pass the display name to the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> constructor, which parses it and populates the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</source>
          <target state="translated">Zamiast tego należy przekazać nazwę wyświetlaną na <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> konstruktora, który go analizuje i wypełnienie odpowiednich pól nowej <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Gdy zestaw jest ładowany, wartość ta również można uzyskać za pomocą <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When the assembly is created, the code example sets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> properties, which together comprise an assembly's full name, or display name.</source>
          <target state="translated">Po utworzeniu zestawu przykładów kodu ustawia <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, i <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> właściwości, które razem w skład zestawu pełną nazwę lub nazwę wyświetlaną.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> property is then used to retrieve the display name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> Właściwości jest następnie używany do pobierania nazwę wyświetlaną.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The path for the assembly whose <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> is to be returned.</source>
          <target state="translated">Ścieżka do zestawu którego <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> jest zwracana.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> for a given file.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> dla danego pliku.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An object that represents the given assembly file.</source>
          <target state="translated">Obiekt, który reprezentuje plik danego zestawu.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This will only work if the file contains an assembly manifest.</source>
          <target state="translated">To działa tylko, jeśli plik zawiera manifest zestawu.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This method causes the file to be opened and closed, but the assembly is not added to this domain.</source>
          <target state="translated">Ta metoda powoduje, że plik do otwierania i zamykania, ale zestaw nie został dodany do tej domeny.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The following example gets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for an assembly on disk.</source>
          <target state="translated">Poniższy przykład pobiera <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> dla zestawu na dysku.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>It will not run unless you replace the string "MyAssembly.exe" with the file name of an assembly (including the path, if necessary) on your hard disk.</source>
          <target state="translated">Nie będzie działał, chyba że Zastąp ciąg "MyAssembly.exe" z nazwą pliku zestawu (łącznie ze ścieżką, jeśli to konieczne) na dysku twardym.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Alternatively, you can compile this example as "MyAssembly.exe".</source>
          <target state="translated">Alternatywnie można kompilować w tym przykładzie, jako "MyAssembly.exe".</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is invalid, such as an assembly with an invalid culture.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> jest nieprawidłowy, takich jak zestaw z nieprawidłową kulturę.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> Nie znaleziono.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The caller does not have path discovery permission.</source>
          <target state="translated">Obiekt wywołujący nie ma uprawnień odnajdywania ścieżki.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> nie jest prawidłowym zestawem.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An assembly or module was loaded twice with two different sets of evidence.</source>
          <target state="translated">Dwa razy z dwóch różnych zestawów dowód załadowania zestawu lub modułu.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>for access to information in the path.</source>
          <target state="translated">Aby uzyskać dostęp do informacji w ścieżce.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Wyliczenie skojarzone: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object to be populated with serialization information.</source>
          <target state="translated">Obiekt wypełniana informacje o serializacji.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination context of the serialization.</source>
          <target state="translated">Kontekst docelowy serializacji.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Gets serialization information with all the data needed to recreate an instance of this <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>.</source>
          <target state="translated">Pobiera informacje o serializacji z wszystkie dane potrzebne do odtworzenia wystąpienie tego elementu <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>Gets the public key of the assembly.</source>
          <target state="translated">Pobiera klucz publiczny zestawu.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A byte array that contains the public key of the assembly.</source>
          <target state="translated">Tablica bajtów, który zawiera klucz publiczny zestawu.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> metoda jest używana do podać klucz publiczny zestawu.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> Metody jest następnie używany do pobierania klucza publicznego, która jest wyświetlana w konsoli.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A public key was provided (for example, by using the <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph> method), but no public key token was provided.</source>
          <target state="translated">Podany klucz publiczny (na przykład za pomocą <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph> — metoda), ale nie został podany tokenu klucza publicznego.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">Pobiera token klucza publicznego, który jest ostatnim 8 bajtów skrótu SHA-1 klucza publicznego, pod którą jest podpisany aplikacji lub zestawu.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>A byte array that contains the public key token.</source>
          <target state="translated">Tablica bajtów, który zawiera token klucza publicznego.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> metoda jest używana do ustawiania token klucza publicznego zestawu.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> Metody jest następnie używany do pobierania tokenu klucza publicznego, która jest wyświetlana w konsoli.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Gets or sets the hash algorithm used by the assembly manifest.</source>
          <target state="translated">Pobiera lub ustawia siła algorytmu wyznaczania wartości skrótu używanego przez manifest zestawu.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The hash algorithm used by the assembly manifest.</source>
          <target state="translated">Algorytm wyznaczania wartości skrótu używanego przez manifest zestawu.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property of an <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object that is returned by the <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> method is <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> właściwość <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> obiektu, który jest zwracany przez <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> jest metoda <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> przypadku nie algorytmu wyznaczania wartości skrótu dla przywoływanego zestawu lub jeśli algorytmu wyznaczania wartości skrótu, z którym związane są odwołania Zestaw nie jest określony w <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> wyliczenia.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>In previous versions of the .NET Framework, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property returned <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> in this situation.</source>
          <target state="translated">W poprzednich wersjach programu .NET Framework <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> właściwości zwróconej <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> w takiej sytuacji.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property is used to set the hash algorithm for the assembly manifest.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> właściwość jest używana do ustawiania algorytmu wyznaczania wartości skrótu dla manifest zestawu.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly.</source>
          <target state="translated">Pobiera lub ustawia publicznego i prywatnego klucza kryptograficznego używanego do tworzenia podpisu silnej nazwy zestawu.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The public and private cryptographic key pair to be used to create a strong name for the assembly.</source>
          <target state="translated">Publicznego i prywatnego klucza kryptograficznego używanego do utworzenia silnej nazwy zestawu.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the runtime loads an assembly, it does not set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property.</source>
          <target state="translated">Podczas ładowania zestawu środowiska wykonawczego nie ustawia <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The getter for the property is only useful if the user set the property before using the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object to create a dynamic assembly, and subsequently wants to retrieve the key pair.</source>
          <target state="translated">Metoda pobierająca właściwości jest przydatne, jeśli użytkownik ustawić właściwość przed użyciem tylko <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> obiektów można utworzyć zestawu dynamicznego, a następnie chce pobierać pary kluczy.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property is used to set the assembly's public and private cryptographic keys.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> właściwość jest używana do ustawiania zestawu publiczne i prywatne klucze kryptograficzne.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>Gets or sets the simple name of the assembly.</source>
          <target state="translated">Pobiera lub ustawia prostą nazwę zestawu.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</source>
          <target state="translated">To zwykle, ale nie musi być nazwą pliku manifestu zestawu minus jego rozszerzenie.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The simple name of the assembly.</source>
          <target state="translated">Prosta nazwa zestawu.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The manifest file is the file that contains the assembly manifest.</source>
          <target state="translated">Plik manifestu to plik, który zawiera manifest zestawu.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>For example, the simple name of a single-file assembly named "MyAssembly.dll" is "MyAssembly".</source>
          <target state="translated">Na przykład prosta nazwa zestawu jednego pliku o nazwie "MyAssembly.dll" jest "MyAssembly".</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> property is used to set the simple name of the dynamic assembly.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> właściwość jest używana do ustawiania prostą nazwę zestawu dynamicznego.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>The source of the deserialization event.</source>
          <target state="translated">Źródło zdarzenia deserializacji.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and is called back by the deserialization event when deserialization is complete.</source>
          <target state="translated">Implementuje <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interfejsu i zostanie wywołane przez zdarzenie deserializacji po zakończeniu wykonywania deserializacji.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">Pobiera lub ustawia wartość, która identyfikuje procesora i usługi bits na word platformy docelowej przez plik wykonywalny.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">Jedna z wartości wyliczenia, które identyfikuje procesora i usługi bits na word platformy docelowej przez plik wykonywalny.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, this property always returns <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> for reference assemblies.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, ta właściwość zawsze zwraca <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> dla zestawów odwołań.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The reference assembly name.</source>
          <target state="translated">Nazwa zestawu odwołania.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The assembly name that is compared to the reference assembly.</source>
          <target state="translated">Nazwa zestawu, który jest porównywany zestaw odwołania.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>Returns a value indicating whether two assembly names are the same.</source>
          <target state="translated">Zwraca wartość wskazującą, czy dwie nazwy zestawu są takie same.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison is based on the simple assembly names.</source>
          <target state="translated">Porównanie jest oparta na nazwy zestawu proste.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the simple assembly names are the same; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli nazwy zestawu prostych są takie same; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison depends only on the simple assembly name.</source>
          <target state="translated">Porównanie zależy od tylko nazwę zestawu proste.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>It ignores version, culture, and public key token.</source>
          <target state="translated">Ignoruje wersję, kulturę i token klucza publicznego.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>A byte array containing the public key of the assembly.</source>
          <target state="translated">Tablica bajtów zawierająca klucz publiczny zestawu.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Sets the public key identifying the assembly.</source>
          <target state="translated">Ustawia publiczny klucz, który identyfikuje zestaw.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>You must also use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">Należy również użyć <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> metodę w celu zapewnienia token klucza publicznego.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">W przeciwnym razie <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> jest generowany, gdy <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> metoda jest używana do podać klucz publiczny zestawu.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> Metody jest następnie używany do pobierania klucza publicznego, która jest wyświetlana w konsoli.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>A byte array containing the public key token of the assembly.</source>
          <target state="translated">Tablica bajtów zawierająca token klucza publicznego zestawu.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">Ustawia token klucza publicznego, który jest ostatnim 8 bajtów skrótu SHA-1 klucza publicznego, pod którą jest podpisany aplikacji lub zestawu.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When you set the public key by calling the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method, you must also use the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">Po klucz publiczny jest ustawiony przez wywołanie <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> metody, należy również użyć <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> metodę w celu zapewnienia token klucza publicznego.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">W przeciwnym razie <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> jest generowany, gdy <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> metoda jest używana do ustawiania token klucza publicznego zestawu.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> Metody jest następnie używany do pobierania tokenu klucza publicznego, która jest wyświetlana w konsoli.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Musi być wartością IID_NULL.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Przekazana tablica nazw ma być mapowana.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Liczba nazw, które mają być mapowane.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">Tablica przydzielone przez obiekt wywołujący, która odbiera identyfikatory, odpowiadających nazwy.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informacje o typie, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identyfikator regionalny dla informacji o typie.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Określa element członkowski.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Musi być wartością IID_NULL.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flagi opisujące kontekst wywołania.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Wskaźnik do struktury zawierający tablicę argumentów tablicy argumentu identyfikator DISPID dla argumentów nazwanych i liczbie liczba elementów w tablicach.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Wskaźnik do struktury, która zawiera informacje o wyjątku.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indeks pierwszego argumentu, który zawiera błąd.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::Invoke`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>Returns the full name of the assembly, also known as the display name.</source>
          <target state="translated">Zwraca pełną nazwę zestawu, znanej także jako nazwa wyświetlana.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The full name of the assembly, or the class name if the full name cannot be determined.</source>
          <target state="translated">Pełna nazwa zestawu lub nazwę klasy, jeśli nie można określić pełną nazwę.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>See the description of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of the returned string.</source>
          <target state="translated">Zobacz opis <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> z formatem zwracany ciąg.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The following example gets an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object for a hypothetical <ph id="ph2">`MyAssembly.exe`</ph> assembly, and then uses the <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> method to retrieve the full assembly name, or display name.</source>
          <target state="translated">Poniższy przykład pobiera <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> obiektu dla hipotetycznego <ph id="ph2">`MyAssembly.exe`</ph> zestawu, a następnie używa <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> metodę, aby pobrać pełną nazwą zestawu lub nazwę wyświetlaną.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Version">
          <source>Gets or sets the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">Pobiera lub ustawia głównych i pomocniczych, kompilacji i numeru wydania zestawu.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>An object that represents the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">Obiekt, który reprezentuje głównych i pomocniczych, kompilacji i numeru wydania zestawu.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>All components of the version must be integers greater than or equal to zero.</source>
          <target state="translated">Wszystkie składniki wersji musi być liczbami całkowitymi większa lub równa zero.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</source>
          <target state="translated">Metadane ogranicza głównych i pomocniczych, kompilacji i poprawki składników zestawu do maksymalnej wartości <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>If a component exceeds this value, no error is thrown; however, in a dynamic assembly, that component is zero.</source>
          <target state="translated">Jeśli składnik przekracza tę wartość, zostanie zgłoszony błąd braku; Ten składnik, jednak w zestawie dynamicznym wynosi zero.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>This section contains two examples.</source>
          <target state="translated">Ta sekcja zawiera dwa przykłady.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The first example shows how to retrieve the version of the currently executing assembly.</source>
          <target state="translated">Pierwszym przykładzie pokazano, jak można pobrać wersji obecnie wykonywany zestaw.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The second example shows how to use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property to specify the assembly version when you emit a dynamic assembly.</source>
          <target state="translated">Drugi przykład przedstawia sposób użycia <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> właściwości w celu określenia wersji zestawu podczas emisji dynamicznego zestawu.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Przykład 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example retrieves and displays the version numbers of the currently executing assembly and the assembly that contains the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">W poniższym przykładzie pobiera i Wyświetla obecnie wykonywany zestaw i zestawu, który zawiera numery wersji <ph id="ph1">&lt;xref:System.String&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Przykład 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">Poniższy przykład emituje zestawu dynamicznego i zapisuje go w bieżącym katalogu.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property is used to specify version information for the assembly.</source>
          <target state="translated">Po utworzeniu zestawu <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> właściwość jest używana do określania informacji o wersji dla zestawu.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Gets or sets the information related to the assembly's compatibility with other assemblies.</source>
          <target state="translated">Pobiera lub ustawia informacje dotyczące zgodności zestawu z innych zestawów.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>A value that represents information about the assembly's compatibility with other assemblies.</source>
          <target state="translated">Wartość, która reprezentuje informacje o zgodności zestawu z innych zestawów.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> information indicates, for example, that the assembly cannot execute side-by-side with other versions due to conflicts over a device driver.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> informacje o wskazuje, na przykład zestawu nie można wykonać side-by-side z innymi wersjami z powodu konfliktów za pośrednictwem sterownika urządzenia.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Currently, <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>, and is not used by the loader.</source>
          <target state="translated">Obecnie <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> zawsze zwraca <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>i nie jest używana przez moduł ładujący.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>This property is reserved for a future feature.</source>
          <target state="translated">Ta właściwość jest zarezerwowana dla funkcji w przyszłych wersjach.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>