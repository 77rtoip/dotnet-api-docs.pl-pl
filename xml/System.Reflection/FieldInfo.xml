<Type Name="FieldInfo" FullName="System.Reflection.FieldInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ccc465bda75447c56ca25e390ec1cc2c96dd5ff6" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69353193" /></Metadata><TypeSignature Language="C#" Value="public abstract class FieldInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._FieldInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit FieldInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._FieldInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.FieldInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FieldInfo&#xA;Inherits MemberInfo&#xA;Implements _FieldInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class FieldInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_FieldInfo" />
  <TypeSignature Language="F#" Value="type FieldInfo = class&#xA;    inherit MemberInfo&#xA;    interface _FieldInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._FieldInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._FieldInfo))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2dd66-101">Odnajduje atrybuty pola i zapewnia dostęp do metadanych pól.</span><span class="sxs-lookup"><span data-stu-id="2dd66-101">Discovers the attributes of a field and provides access to field metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-102">Informacje o polu są uzyskiwane z metadanych.</span><span class="sxs-lookup"><span data-stu-id="2dd66-102">The field information is obtained from metadata.</span></span> <span data-ttu-id="2dd66-103"><xref:System.Reflection.FieldInfo> Klasa nie ma konstruktora publicznego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-103">The <xref:System.Reflection.FieldInfo> class does not have a public constructor.</span></span> <span data-ttu-id="2dd66-104"><xref:System.Reflection.FieldInfo>obiekty są uzyskiwane przez wywołanie <xref:System.Type.GetFields%2A> metody `Type` lub <xref:System.Type.GetField%2A> obiektu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-104"><xref:System.Reflection.FieldInfo> objects are obtained by calling either the <xref:System.Type.GetFields%2A> or <xref:System.Type.GetField%2A> method of a `Type` object.</span></span>  
  
 <span data-ttu-id="2dd66-105">Pola są zmiennymi zdefiniowanymi w klasie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-105">Fields are variables defined in the class.</span></span> <span data-ttu-id="2dd66-106"><xref:System.Reflection.FieldInfo>zapewnia dostęp do metadanych dla pola w klasie i udostępnia zestaw dynamiczny i pobiera funkcję dla tego pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-106"><xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field.</span></span> <span data-ttu-id="2dd66-107">Klasa nie jest załadowana do pamięci do momentu wywołania metody Invoke lub Get dla obiektu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-107">The class is not loaded into memory until invoke or get is called on the object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-108">Poniższy przykład używa <xref:System.Type.GetFields%2A?displayProperty=nameWithType> metody, aby uzyskać informacje dotyczące pól <xref:System.Reflection.FieldInfo> z klasy, a następnie wyświetla atrybuty pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-108">The following example uses the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get the field-related information from the <xref:System.Reflection.FieldInfo> class, and then displays field attributes.</span></span>  
  
 [!code-cpp[FieldInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo/CPP/fieldinfo.cpp#1)]
 [!code-csharp[FieldInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo/CS/fieldinfo.cs#1)]
 [!code-vb[FieldInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo/VB/fieldinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="2dd66-109">aby uzyskać pełne zaufanie dla obiektów dziedziczących.</span><span class="sxs-lookup"><span data-stu-id="2dd66-109">for full trust for inheritors.</span></span> <span data-ttu-id="2dd66-110">Klasa ta nie może być dziedziczona przez kod częściowo zaufany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-110">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="2dd66-111">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="2dd66-111">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="2dd66-112">W przypadku dziedziczenia <see cref="T:System.Reflection.FieldInfo" />z należy zastąpić następujące elementy członkowskie: <see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /> i <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-112">When you inherit from <see cref="T:System.Reflection.FieldInfo" />, you must override the following members: <see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /> and <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />.</span></span></para></block>
    <altmember cref="T:System.Type" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FieldInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FieldInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2dd66-113">Inicjuje nowe wystąpienie klasy <see langword="FieldInfo" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="2dd66-113">Initializes a new instance of the <see langword="FieldInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="2dd66-114">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="2dd66-114">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="2dd66-115">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-115">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.FieldAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As FieldAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::FieldAttributes Attributes { System::Reflection::FieldAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.FieldAttributes" Usage="System.Reflection.FieldInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-116">Pobiera atrybuty skojarzone z tym polem.</span><span class="sxs-lookup"><span data-stu-id="2dd66-116">Gets the attributes associated with this field.</span></span></summary>
        <value><span data-ttu-id="2dd66-117"><see langword="FieldAttributes" /> Dla tego pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-117">The <see langword="FieldAttributes" /> for this field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-118">Wszystkie składowe mają zestaw atrybutów, które są zdefiniowane w odniesieniu do określonego typu elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-118">All members have a set of attributes, which are defined in relation to the specific type of member.</span></span> <span data-ttu-id="2dd66-119">`FieldAttributes`informuje użytkownika, czy to pole jest polem prywatnym, polem statycznym i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="2dd66-119">`FieldAttributes` informs the user whether this field is the private field, a static field, and so on.</span></span>  
  
 <span data-ttu-id="2dd66-120">Aby uzyskać `Attributes` właściwość, najpierw Pobierz klasę `Type`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-120">To get the `Attributes` property, first get the class `Type`.</span></span> <span data-ttu-id="2dd66-121">`Type`Pobierz .`FieldInfo`</span><span class="sxs-lookup"><span data-stu-id="2dd66-121">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="2dd66-122">`FieldInfo`Pobierz .`Attributes`</span><span class="sxs-lookup"><span data-stu-id="2dd66-122">From the `FieldInfo`, get the `Attributes`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-123">Poniższy przykład kodu kompiluje trzy pola i wyświetla ich atrybuty pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-123">The following code example builds three fields and displays their field attributes.</span></span> <span data-ttu-id="2dd66-124">Wartość może zawierać więcej niż jeden atrybut, taki jak oba `Public` i `Literal`, jak pokazano w trzecim polu. `FieldAttributes`</span><span class="sxs-lookup"><span data-stu-id="2dd66-124">A `FieldAttributes` value can contain more than one attribute, such as both `Public` and `Literal`, as shown in the third field.</span></span>  
  
 [!code-cpp[Classic FieldAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic FieldAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="fieldInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2dd66-125">Obiekt, <see langword="null" />który ma zostać porównany z tym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="2dd66-125">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="2dd66-126">Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</span><span class="sxs-lookup"><span data-stu-id="2dd66-126">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="2dd66-127"><see langword="true" />Jeśli <paramref name="obj" /> jest równa typu i wartości tego wystąpienia; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="2dd66-127"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldHandle">
      <MemberSignature Language="C#" Value="public abstract RuntimeFieldHandle FieldHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeFieldHandle FieldHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.FieldHandle" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FieldHandle As RuntimeFieldHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property RuntimeFieldHandle FieldHandle { RuntimeFieldHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.FieldHandle : RuntimeFieldHandle" Usage="System.Reflection.FieldInfo.FieldHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.FieldHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeFieldHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-128">Pobiera obiekt <see langword="RuntimeFieldHandle" />, który jest dojściem do wewnętrznej reprezentacji metadanych pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-128">Gets a <see langword="RuntimeFieldHandle" />, which is a handle to the internal metadata representation of a field.</span></span></summary>
        <value><span data-ttu-id="2dd66-129">Uchwyt do wewnętrznej reprezentacji metadanych pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-129">A handle to the internal metadata representation of a field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-130">Dojścia są prawidłowe tylko w domenie aplikacji, w której zostały uzyskane.</span><span class="sxs-lookup"><span data-stu-id="2dd66-130">The handles are valid only in the appdomain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-131">Poniższy przykład pobiera informacje MyClass. pole pola i wyświetla pole skojarzone z uchwytem pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-131">The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.</span></span>  
  
 [!code-cpp[FieldInfo_FieldHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_FieldHandle/CPP/fieldinfo_fieldhandle.cpp#1)]
 [!code-csharp[FieldInfo_FieldHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_FieldHandle/CS/fieldinfo_fieldhandle.cs#1)]
 [!code-vb[FieldInfo_FieldHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_FieldHandle/VB/fieldinfo_fieldhandle.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldType">
      <MemberSignature Language="C#" Value="public abstract Type FieldType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type FieldType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.FieldType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FieldType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ FieldType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FieldType : Type" Usage="System.Reflection.FieldInfo.FieldType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.FieldType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-132">Pobiera typ tego obiektu pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-132">Gets the type of this field object.</span></span></summary>
        <value><span data-ttu-id="2dd66-133">Typ tego obiektu pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-133">The type of this field object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-134">Typ jest typem danych pierwotnych, `String`na przykład, `Boolean`lub `GUID`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-134">The type is some primitive data type, such as `String`, `Boolean`, or `GUID`.</span></span>  
  
 <span data-ttu-id="2dd66-135">Aby uzyskać `FieldType` właściwość, najpierw Pobierz klasę `Type`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-135">To get the `FieldType` property, first get the class `Type`.</span></span> <span data-ttu-id="2dd66-136">`Type`Pobierz .`FieldInfo`</span><span class="sxs-lookup"><span data-stu-id="2dd66-136">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="2dd66-137">`FieldInfo`W programie`FieldType` Pobierz wartość.</span><span class="sxs-lookup"><span data-stu-id="2dd66-137">From the `FieldInfo`, get the `FieldType` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-138">Poniższy przykład tworzy pole, pobiera jego typ i <xref:System.Reflection.FieldInfo>i wyświetla jego <xref:System.Reflection.FieldInfo.FieldType%2A>wartość.</span><span class="sxs-lookup"><span data-stu-id="2dd66-138">The following example creates a field, gets its type and <xref:System.Reflection.FieldInfo>, and displays its <xref:System.Reflection.FieldInfo.FieldType%2A>.</span></span>  
  
 [!code-cpp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.FieldType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFieldFromHandle">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2dd66-139"><see cref="T:System.Reflection.FieldInfo" /> Pobiera dla pola reprezentowanego przez dojście.</span><span class="sxs-lookup"><span data-stu-id="2dd66-139">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by a handle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFieldFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetFieldFromHandle(valuetype System.RuntimeFieldHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFieldFromHandle (handle As RuntimeFieldHandle) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetFieldFromHandle(RuntimeFieldHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetFieldFromHandle : RuntimeFieldHandle -&gt; System.Reflection.FieldInfo" Usage="System.Reflection.FieldInfo.GetFieldFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="2dd66-140"><see cref="T:System.RuntimeFieldHandle" /> Struktura, która zawiera uchwyt do wewnętrznej reprezentacji metadanych pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-140">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</span></span></param>
        <summary><span data-ttu-id="2dd66-141"><see cref="T:System.Reflection.FieldInfo" /> Pobiera dla pola reprezentowanego przez określone dojście.</span><span class="sxs-lookup"><span data-stu-id="2dd66-141">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle.</span></span></summary>
        <returns><span data-ttu-id="2dd66-142">Obiekt reprezentujący pole określone przez <paramref name="handle" />. <see cref="T:System.Reflection.FieldInfo" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-142">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-143">Uchwyty są prawidłowe tylko w domenie aplikacji, w której zostały uzyskane.</span><span class="sxs-lookup"><span data-stu-id="2dd66-143">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-144"><xref:System.Type.GetFields%2A?displayProperty=nameWithType> Poniższy przykład kodu używa metody do pobierania <xref:System.Reflection.FieldInfo> obiektów dla pól typu, pobiera <xref:System.RuntimeFieldHandle> strukturę <xref:System.Reflection.FieldInfo> dla każdego pola, a następnie pobiera obiekty z dojść przy użyciu tego przeciążenia <xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A>Metoda.</span><span class="sxs-lookup"><span data-stu-id="2dd66-144">The following code example uses the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get <xref:System.Reflection.FieldInfo> objects for the fields of a type, gets a <xref:System.RuntimeFieldHandle> structure for each field, and then retrieves the <xref:System.Reflection.FieldInfo> objects from the handles using this overload of the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A> method.</span></span>  
  
 [!code-cpp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CPP/fieldinfo_getfieldfromhandle.cpp#1)]
 [!code-csharp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CS/fieldinfo_getfieldfromhandle.cs#1)]
 [!code-vb[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/VB/fieldinfo_getfieldfromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2dd66-145"><paramref name="handle" /> jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="2dd66-145"><paramref name="handle" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="2dd66-146">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="2dd66-146">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="2dd66-147">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-147">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFieldFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetFieldFromHandle(valuetype System.RuntimeFieldHandle handle, valuetype System.RuntimeTypeHandle declaringType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFieldFromHandle (handle As RuntimeFieldHandle, declaringType As RuntimeTypeHandle) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberSignature Language="F#" Value="static member GetFieldFromHandle : RuntimeFieldHandle * RuntimeTypeHandle -&gt; System.Reflection.FieldInfo" Usage="System.Reflection.FieldInfo.GetFieldFromHandle (handle, declaringType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeFieldHandle" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="declaringType" Type="System.RuntimeTypeHandle" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="2dd66-148"><see cref="T:System.RuntimeFieldHandle" /> Struktura, która zawiera uchwyt do wewnętrznej reprezentacji metadanych pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-148">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</span></span></param>
        <param name="declaringType"><span data-ttu-id="2dd66-149"><see cref="T:System.RuntimeTypeHandle" /> Struktura, która zawiera dojście do typu ogólnego, który definiuje pole.</span><span class="sxs-lookup"><span data-stu-id="2dd66-149">A <see cref="T:System.RuntimeTypeHandle" /> structure that contains the handle to the generic type that defines the field.</span></span></param>
        <summary><span data-ttu-id="2dd66-150"><see cref="T:System.Reflection.FieldInfo" /> Pobiera dla pola reprezentowanego przez określone dojście dla określonego typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-150">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle, for the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="2dd66-151">Obiekt reprezentujący pole określone przez <paramref name="handle" />, w typie ogólnym określonym przez <paramref name="declaringType" />. <see cref="T:System.Reflection.FieldInfo" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-151">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-152">Uchwyty są prawidłowe tylko w domenie aplikacji, w której zostały uzyskane.</span><span class="sxs-lookup"><span data-stu-id="2dd66-152">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
 <span data-ttu-id="2dd66-153">Zalecane jest, `declaringType` aby zawsze były dojściem do typu środowiska uruchomieniowego typu złożonego `handle` , który należy do.</span><span class="sxs-lookup"><span data-stu-id="2dd66-153">The recommended practice is that `declaringType` should always be the runtime type handle of the constructed type that `handle` belongs to.</span></span> <span data-ttu-id="2dd66-154">Oznacza to, że `handle` jeśli jest dojściem pola środowiska uruchomieniowego dla pola `MyType<int>` ,`MyType(Of Integer)` które należy do ( `declaringType` w Visual Basic), jest dojściem do typu środowiska uruchomieniowego dla `MyType<int>`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-154">That is, if `handle` is a runtime field handle for a field that belongs to `MyType<int>` (`MyType(Of Integer)` in Visual Basic), `declaringType` is the runtime type handle for `MyType<int>`.</span></span> <span data-ttu-id="2dd66-155">Nie należy używać dojścia typu środowiska uruchomieniowego definicji typu ogólnego, chyba że uchwyt pola środowiska uruchomieniowego reprezentuje pole w definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-155">Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</span></span>  
  
 <span data-ttu-id="2dd66-156">Implementacje są zgodne w niektórych przypadkach.</span><span class="sxs-lookup"><span data-stu-id="2dd66-156">Implementations are compatible in some cases.</span></span> <span data-ttu-id="2dd66-157">Na przykład pojedyncza implementacja jest współdzielona przez wszystkie typy, które są zbudowane z określonej definicji typu ogólnego przy użyciu typów referencyjnych dla argumentów typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-157">For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments.</span></span> <span data-ttu-id="2dd66-158">Na przykład `MyType<string>` `MyType<object>`,, i `MyType<ArrayList>` wszystkie mają tę samą implementację.</span><span class="sxs-lookup"><span data-stu-id="2dd66-158">For example, `MyType<string>`, `MyType<object>`, and `MyType<ArrayList>` all share the same implementation.</span></span> <span data-ttu-id="2dd66-159">W takiej sytuacji <xref:System.Reflection.FieldInfo> zwracany obiekt reprezentuje pole w typie, który `declaringType` określa, niezależnie `handle`od oryginalnego źródła.</span><span class="sxs-lookup"><span data-stu-id="2dd66-159">In this situation, the <xref:System.Reflection.FieldInfo> object that is returned represents a field on the type that `declaringType` specifies, regardless of the original source of `handle`.</span></span> <span data-ttu-id="2dd66-160">Ta metoda nie jest zalecana, ponieważ działa tylko wtedy, gdy argumenty typu ogólnego złożonego typu są typami odwołań.</span><span class="sxs-lookup"><span data-stu-id="2dd66-160">This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</span></span>  
  
 <span data-ttu-id="2dd66-161">Jeśli argument generyczny jest typem wartości, dojście typu środowiska uruchomieniowego typu złożonego nie jest zgodne z dojściami pól środowiska uruchomieniowego z konstrukcji, które mają typ referencyjny w tej samej pozycji parametru generycznego lub który ma inny typ wartości w tej pozycji. .</span><span class="sxs-lookup"><span data-stu-id="2dd66-161">If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position.</span></span> <span data-ttu-id="2dd66-162">W takim przypadku jedynym sposobem na użycie <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType> przeciążenia jest zapewnienie, że `declaringType` jest to uchwyt typu środowiska uruchomieniowego dla konstruowanego typu, który `handle` należy do.</span><span class="sxs-lookup"><span data-stu-id="2dd66-162">In that case, the only way to use the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType> overload is to ensure that `declaringType` is the runtime type handle for the constructed type that `handle` belongs to.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-163">Poniższy przykład pokazuje, jak pobrać <xref:System.Reflection.FieldInfo> obiekty dla pól w skonstruowanych klasach ogólnych.</span><span class="sxs-lookup"><span data-stu-id="2dd66-163">The following example shows how to retrieve <xref:System.Reflection.FieldInfo> objects for fields on constructed generic classes.</span></span> <span data-ttu-id="2dd66-164">W `Test<T>` przykładzie zdefiniowano typ ogólny (`Test(Of T)` w Visual Basic) z pojedynczym polem o nazwie `TestField`typu `T`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-164">The example defines the generic type `Test<T>` (`Test(Of T)` in Visual Basic) with a single field named `TestField`, of type `T`.</span></span> <span data-ttu-id="2dd66-165">Przykład pobiera <xref:System.RuntimeFieldHandle> i <xref:System.RuntimeTypeHandle> w przypadku, gdy `T` jest <xref:System.String>i ilustruje następujące kwestie:</span><span class="sxs-lookup"><span data-stu-id="2dd66-165">The example gets the <xref:System.RuntimeFieldHandle> and <xref:System.RuntimeTypeHandle> for the case where `T` is <xref:System.String>, and demonstrates the following:</span></span>  
  
-   <span data-ttu-id="2dd66-166">Wyjątek jest generowany, <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29> jeśli jest używane Przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="2dd66-166">An exception is thrown if the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29> method overload is used.</span></span> <span data-ttu-id="2dd66-167">Jest to prawdziwe, nawet jeśli pole nie jest typu `T`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-167">This is true even if the field is not of type `T`.</span></span>  
  
-   <span data-ttu-id="2dd66-168">A <xref:System.Reflection.FieldInfo> zostanie pobrany pomyślnie, jeśli dojście do typu środowiska uruchomieniowego jest z tej samej konstrukcji co dojście pola środowiska `Test<string>`uruchomieniowego, w tym przypadku.</span><span class="sxs-lookup"><span data-stu-id="2dd66-168">A <xref:System.Reflection.FieldInfo> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case `Test<string>`.</span></span>  
  
-   <span data-ttu-id="2dd66-169">Jeśli dojście typu środowiska uruchomieniowego pochodzi z zgodnej konstrukcji, w `Test<object>`tym przypadku <xref:System.Reflection.FieldInfo> jest pobierane pole dla zgodnej konstrukcji.</span><span class="sxs-lookup"><span data-stu-id="2dd66-169">If the runtime type handle is from a compatible construction, in this case `Test<object>`, a <xref:System.Reflection.FieldInfo> for the field on the compatible construction is retrieved.</span></span>  
  
-   <span data-ttu-id="2dd66-170">Jeśli uchwyt typu środowiska uruchomieniowego nie pochodzi z zgodnej konstrukcji, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="2dd66-170">If the runtime type handle is not from a compatible construction, an exception is thrown.</span></span> <span data-ttu-id="2dd66-171">W tym przypadku określony jest typ wartości dla `T`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-171">In this case, a value type is specified for `T`.</span></span>  
  
 [!code-csharp[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/cs/source.cs#1)]
 [!code-vb[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2dd66-172"><paramref name="handle" /> jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="2dd66-172"><paramref name="handle" /> is invalid.</span></span>  
  
<span data-ttu-id="2dd66-173">—lub—</span><span class="sxs-lookup"><span data-stu-id="2dd66-173">-or-</span></span> 
 <span data-ttu-id="2dd66-174"><paramref name="declaringType" />nie jest zgodne z <paramref name="handle" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-174"><paramref name="declaringType" /> is not compatible with <paramref name="handle" />.</span></span> <span data-ttu-id="2dd66-175">Na przykład <paramref name="declaringType" /> jest dojściem typu środowiska uruchomieniowego definicji typu ogólnego i <paramref name="handle" /> pochodzi z typu złożonego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-175">For example, <paramref name="declaringType" /> is the runtime type handle of the generic type definition, and <paramref name="handle" /> comes from a constructed type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="2dd66-176">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="2dd66-176">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="2dd66-177">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-177">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="fieldInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2dd66-178">Zwraca kod skrótu dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2dd66-178">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="2dd66-179">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="2dd66-179">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetOptionalCustomModifiers : unit -&gt; Type[]&#xA;override this.GetOptionalCustomModifiers : unit -&gt; Type[]" Usage="fieldInfo.GetOptionalCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2dd66-180">Pobiera tablicę typów, które identyfikują opcjonalne Modyfikatory niestandardowe pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-180">Gets an array of types that identify the optional custom modifiers of the field.</span></span></summary>
        <returns><span data-ttu-id="2dd66-181">Tablica <see cref="T:System.Type" /> obiektów, które identyfikują opcjonalne Modyfikatory niestandardowe bieżącego pola, na przykład <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-181">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current field, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-182">Metody <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> i<xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> są udostępniane projektantom zarządzanych kompilatorów.</span><span class="sxs-lookup"><span data-stu-id="2dd66-182">The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="2dd66-183">Aby uzyskać więcej informacji na temat modyfikatorów niestandardowych <xref:System.Runtime.CompilerServices.IsBoxed> , zobacz i powiązane klasy <xref:System.Runtime.CompilerServices> w przestrzeni nazw oraz specyfikację metadanych w dokumentacji ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="2dd66-183">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="2dd66-184">Dokumentacja jest dostępna w trybie online; Zobacz [standardy C# ECMA i Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) w MSDN i [Standard ECMA-335-Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w międzynarodowej witrynie sieci Web ECMA.</span><span class="sxs-lookup"><span data-stu-id="2dd66-184">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetRawConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRawConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetRawConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRawConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRawConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetRawConstantValue : unit -&gt; obj&#xA;override this.GetRawConstantValue : unit -&gt; obj" Usage="fieldInfo.GetRawConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2dd66-185">Zwraca wartość literału skojarzoną z polem przez kompilator.</span><span class="sxs-lookup"><span data-stu-id="2dd66-185">Returns a literal value associated with the field by a compiler.</span></span></summary>
        <returns><span data-ttu-id="2dd66-186"><see cref="T:System.Object" /> Zawiera wartość literału skojarzoną z polem.</span><span class="sxs-lookup"><span data-stu-id="2dd66-186">An <see cref="T:System.Object" /> that contains the literal value associated with the field.</span></span> <span data-ttu-id="2dd66-187">Jeśli wartość literału jest typem klasy z wartością zero, zwracana wartość to <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-187">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-188">Ta metoda jest dostępna dla projektantów zarządzanych kompilatorów i analizatorów kodu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-188">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
 <span data-ttu-id="2dd66-189">Ta metoda może być używana zarówno w kontekście wykonywania, jak i w kontekście tylko odbicia.</span><span class="sxs-lookup"><span data-stu-id="2dd66-189">This method can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="2dd66-190">W niezarządzanych metadanych tabela stałych jest używana do przechowywania wartości stałych dla pól, parametrów i właściwości.</span><span class="sxs-lookup"><span data-stu-id="2dd66-190">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="2dd66-191">Stałe informacje nie wpływają bezpośrednio na zachowanie środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-191">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="2dd66-192">Kompilatory badają te informacje w czasie kompilacji podczas importowania metadanych.</span><span class="sxs-lookup"><span data-stu-id="2dd66-192">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="2dd66-193">Jeśli jest używana, wartość stałej jest osadzona w strumieniu języka pośredniego firmy Microsoft (MSIL) emitowanym przez kompilator.</span><span class="sxs-lookup"><span data-stu-id="2dd66-193">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="2dd66-194">Brak instrukcji MSIL, których można użyć w celu uzyskania dostępu do tabeli stałych w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="2dd66-194">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-195">Aby uzyskać więcej informacji na temat wartości stałych i tabeli stałej, zobacz dokumentację ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="2dd66-195">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="2dd66-196">Dokumentacja jest dostępna w trybie online; Zobacz [standardy C# ECMA i Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) w MSDN i [Standard ECMA-335-Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w międzynarodowej witrynie sieci Web ECMA.</span><span class="sxs-lookup"><span data-stu-id="2dd66-196">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2dd66-197">Tabela stałych w niezarządzanych metadanych nie zawiera stałej wartości dla bieżącego pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-197">The Constant table in unmanaged metadata does not contain a constant value for the current field.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="2dd66-198">Typ wartości nie jest jednym z typów dozwolonych przez Common Language Specification (CLS).</span><span class="sxs-lookup"><span data-stu-id="2dd66-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span></span> <span data-ttu-id="2dd66-199">Zobacz Format logiczny metadanych specyfikacji ECMA Partition II: Inne struktury, typy elementów używane w sygnaturach.</span><span class="sxs-lookup"><span data-stu-id="2dd66-199">See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2dd66-200">Nie ustawiono stałej wartości pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-200">The constant value for the field is not set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetRequiredCustomModifiers : unit -&gt; Type[]&#xA;override this.GetRequiredCustomModifiers : unit -&gt; Type[]" Usage="fieldInfo.GetRequiredCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2dd66-201">Pobiera tablicę typów, które identyfikują wymagane Modyfikatory niestandardowe właściwości.</span><span class="sxs-lookup"><span data-stu-id="2dd66-201">Gets an array of types that identify the required custom modifiers of the property.</span></span></summary>
        <returns><span data-ttu-id="2dd66-202">Tablica <see cref="T:System.Type" /> obiektów, które identyfikują wymagane niestandardowe Modyfikatory bieżącej właściwości, takie jak <see cref="T:System.Runtime.CompilerServices.IsConst" /> lub <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-202">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-203">Metody <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> i<xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> są udostępniane projektantom zarządzanych kompilatorów.</span><span class="sxs-lookup"><span data-stu-id="2dd66-203">The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="2dd66-204">Aby uzyskać więcej informacji na temat modyfikatorów niestandardowych <xref:System.Runtime.CompilerServices.IsBoxed> , zobacz i powiązane klasy <xref:System.Runtime.CompilerServices> w przestrzeni nazw oraz specyfikację metadanych w dokumentacji ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="2dd66-204">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="2dd66-205">Dokumentacja jest dostępna w trybie online; Zobacz [standardy C# ECMA i Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) w MSDN i [Standard ECMA-335-Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w międzynarodowej witrynie sieci Web ECMA.</span><span class="sxs-lookup"><span data-stu-id="2dd66-205">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="fieldInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetValue (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj -&gt; obj" Usage="fieldInfo.GetValue obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetValue(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2dd66-206">Obiekt, którego wartość pola zostanie zwrócona.</span><span class="sxs-lookup"><span data-stu-id="2dd66-206">The object whose field value will be returned.</span></span></param>
        <summary><span data-ttu-id="2dd66-207">Gdy jest zastępowany w klasie pochodnej, zwraca wartość pola obsługiwanego przez dany obiekt.</span><span class="sxs-lookup"><span data-stu-id="2dd66-207">When overridden in a derived class, returns the value of a field supported by a given object.</span></span></summary>
        <returns><span data-ttu-id="2dd66-208">Obiekt zawierający wartość pola odzwierciedlonego przez to wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-208">An object containing the value of the field reflected by this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-209">Jeśli pole jest statyczne, `obj` jest ignorowane.</span><span class="sxs-lookup"><span data-stu-id="2dd66-209">If the field is static, `obj` is ignored.</span></span> <span data-ttu-id="2dd66-210">W przypadku pól `obj` niestatycznych powinna być wystąpieniem klasy, która dziedziczy lub deklaruje pole.</span><span class="sxs-lookup"><span data-stu-id="2dd66-210">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="2dd66-211">Zwróć uwagę, że zwracanym `GetValue` typem `Object`jest.</span><span class="sxs-lookup"><span data-stu-id="2dd66-211">Note that the return type of `GetValue` is `Object`.</span></span> <span data-ttu-id="2dd66-212">Na przykład, jeśli pole zawiera wartość logiczną Boolean, zwracane jest wystąpienie `Object` z odpowiednią wartością logiczną.</span><span class="sxs-lookup"><span data-stu-id="2dd66-212">For example, if the field holds a Boolean primitive value, an instance of `Object` with the appropriate Boolean value is returned.</span></span> <span data-ttu-id="2dd66-213">Przed zwróceniem wartości Sprawdź `GetValue` , czy użytkownik ma uprawnienie dostępu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-213">Before returning the value, `GetValue` checks to see if the user has access permission.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-214">Ograniczenia dostępu są ignorowane dla w pełni zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-214">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="2dd66-215">Oznacza to, że prywatne konstruktory, metody, pola i właściwości są dostępne i wywoływane przez odbicie za każdym razem, gdy kod jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-215">That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-216">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> , ta metoda może być używana w celu uzyskania dostępu do niepublicznych elementów członkowskich, jeśli obiekt wywołujący został udzielony z flagą i jeśli zestaw uprawnień niepublicznych składowych jest ograniczony do zestawu uprawnień obiektu wywołującego lub podzestawu [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] Komisję.</span><span class="sxs-lookup"><span data-stu-id="2dd66-216">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="2dd66-217">(Zobacz [zagadnienia dotyczące zabezpieczeń w przypadku odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)).</span><span class="sxs-lookup"><span data-stu-id="2dd66-217">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="2dd66-218">Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="2dd66-218">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-219">W poniższym przykładzie zastosowano <xref:System.Reflection.FieldInfo.GetValue%2A> metodę, aby pobrać wartość pola statycznego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-219">The following example uses the <xref:System.Reflection.FieldInfo.GetValue%2A> method to retrieve the value of a static field.</span></span> <span data-ttu-id="2dd66-220">Zwróć uwagę, że wartość `obj` argumentu to. `null`</span><span class="sxs-lookup"><span data-stu-id="2dd66-220">Note that the value of the `obj` argument is `null`.</span></span>  
  
 [!code-cpp[getfldval#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetFldVal/CPP/getfldval.cpp#1)]
 [!code-csharp[getfldval#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetFldVal/CS/getfldval.cs#1)]
 [!code-vb[getfldval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetFldVal/VB/getfldval.vb#1)]  
  
 <span data-ttu-id="2dd66-221"><xref:System.Reflection.FieldInfo> Poniższy przykład pobiera tablicę obiektów, która reprezentuje pola `FieldsClass` typu <xref:System.Reflection.FieldInfo.GetValue%2A> , a następnie wywołuje, aby `fieldsInst` wyświetlić wartość każdego pola dla obiektu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-221">The following example retrieves an array of <xref:System.Reflection.FieldInfo> objects that represents the fields of the `FieldsClass` type, and then calls the <xref:System.Reflection.FieldInfo.GetValue%2A> to display the value of each field for the `fieldsInst` object.</span></span>  
  
 [!code-cpp[FieldInfo_GetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetValue/CPP/fieldinfo_getvalue.cpp#1)]
 [!code-csharp[FieldInfo_GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetValue/CS/fieldinfo_getvalue.cs#1)]
 [!code-vb[FieldInfo_GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetValue/VB/fieldinfo_getvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="2dd66-222">W <see href="https://go.microsoft.com/fwlink/?LinkID=247912">środowisku .NET dla aplikacji do sklepu Windows</see> lub <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">przenośnej biblioteki klas</see>Przechwyć <see cref="T:System.Exception" /> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-222">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="2dd66-223">Pole jest niestatyczne i <paramref name="obj" /> ma wartość. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-223">The field is non-static and <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2dd66-224">Pole jest oznaczone jako literał, ale pole nie ma jednego z zaakceptowanych typów literału.</span><span class="sxs-lookup"><span data-stu-id="2dd66-224">A field is marked literal, but the field does not have one of the accepted literal types.</span></span></exception>
        <exception cref="T:System.FieldAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="2dd66-225">W programie <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET dla aplikacji ze sklepu Windows</see> lub <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">przenośnej biblioteki klas</see>Przechwyć wyjątek <see cref="T:System.MemberAccessException" />klasy bazowej, zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-225">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="2dd66-226">Obiekt wywołujący nie ma uprawnień dostępu do tego pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-226">The caller does not have permission to access this field.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2dd66-227">Metoda nie jest zadeklarowana ani dziedziczona przez klasę <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-227">The method is neither declared nor inherited by the class of <paramref name="obj" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="2dd66-228">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="2dd66-228">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="2dd66-229">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-229">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetValueDirect">
      <MemberSignature Language="C#" Value="public virtual object GetValueDirect (TypedReference obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValueDirect(valuetype System.TypedReference obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueDirect (obj As TypedReference) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValueDirect(TypedReference obj);" />
      <MemberSignature Language="F#" Value="abstract member GetValueDirect : TypedReference -&gt; obj&#xA;override this.GetValueDirect : TypedReference -&gt; obj" Usage="fieldInfo.GetValueDirect obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetValueDirect(System.TypedReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TypedReference" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2dd66-230"><see cref="T:System.TypedReference" /> Struktura, która hermetyzuje zarządzany wskaźnik do lokalizacji i reprezentację typu, który może być przechowywany w tej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="2dd66-230">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</span></span></param>
        <summary><span data-ttu-id="2dd66-231">Zwraca wartość pola obsługiwanego przez dany obiekt.</span><span class="sxs-lookup"><span data-stu-id="2dd66-231">Returns the value of a field supported by a given object.</span></span></summary>
        <returns><span data-ttu-id="2dd66-232"><see langword="Object" /> Zawierający wartość pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-232">An <see langword="Object" /> containing a field value.</span></span></returns>
        <remarks>To be added.</remarks>
        <altCompliant cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" />
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2dd66-233">Obiekt wywołujący wymaga alternatywnej Common Language Specification (CLS), ale zamiast tego wywoływana metoda.</span><span class="sxs-lookup"><span data-stu-id="2dd66-233">The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="2dd66-234">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="2dd66-234">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="2dd66-235">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-235">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsAssembly">
      <MemberSignature Language="C#" Value="public bool IsAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAssembly : bool" Usage="System.Reflection.FieldInfo.IsAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-236">Pobiera wartość wskazującą, czy potencjalna widoczność tego pola jest opisana przez <see cref="F:System.Reflection.FieldAttributes.Assembly" />; to oznacza, że pole jest widoczne najwyżej dla innych typów w tym samym zestawie i nie jest widoczne dla typów pochodnych poza zestawem.</span><span class="sxs-lookup"><span data-stu-id="2dd66-236">Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</span></span></summary>
        <value><span data-ttu-id="2dd66-237"><see langword="true" />Jeśli widoczność tego pola jest dokładnie opisana przez <see cref="F:System.Reflection.FieldAttributes.Assembly" />; w przeciwnym razie,. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-237"><see langword="true" /> if the visibility of this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-238">Rzeczywista widoczność pola jest ograniczona przez widoczność jego typu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-238">The actual visibility of a field is limited by the visibility of its type.</span></span> <span data-ttu-id="2dd66-239">Właściwość może być `true` dla pola, ale jeśli jest polem typu zagnieżdżonego Private, pole nie jest widoczne poza typem zawierającym. <xref:System.Reflection.FieldInfo.IsAssembly%2A></span><span class="sxs-lookup"><span data-stu-id="2dd66-239">The <xref:System.Reflection.FieldInfo.IsAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="2dd66-240">Widoczność pola jest dokładnie opisana przez <xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType> , jeśli jedynym modyfikatorem widoczności jest `internal` (`Friend` w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2dd66-240">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType> if the only visibility modifier is `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="2dd66-241">Ta właściwość jest `false` dla pól, które `protected internal` znajdują`Protected Friend` się `protected public` w C# (w C++Visual Basic w). <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> Użyj właściwości, aby zidentyfikować takie pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-241">This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-242">Poniższy przykład kodu definiuje pola z <xref:System.Reflection.FieldInfo.IsAssembly%2A>różnymi poziomami widoczności i wyświetla wartości ich właściwości, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, i <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> .</span><span class="sxs-lookup"><span data-stu-id="2dd66-242">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-243">Visual Basic i C# Języki nie mogą definiować pól z <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> widocznością; ten poziom dostępu jest wyświetlany tylko C++ w przykładzie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-243">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFamily">
      <MemberSignature Language="C#" Value="public bool IsFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamily" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamily : bool" Usage="System.Reflection.FieldInfo.IsFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-244">Pobiera wartość wskazującą, czy widoczność tego pola jest opisana przez <see cref="F:System.Reflection.FieldAttributes.Family" />; to oznacza, że pole jest widoczne tylko w obrębie klasy i klas pochodnych.</span><span class="sxs-lookup"><span data-stu-id="2dd66-244">Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Family" />; that is, the field is visible only within its class and derived classes.</span></span></summary>
        <value><span data-ttu-id="2dd66-245"><see langword="true" />Jeśli dostęp do tego pola jest dokładnie opisany przez <see cref="F:System.Reflection.FieldAttributes.Family" />; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="2dd66-245"><see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Family" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-246">Widoczność pola jest dokładnie opisana przez <xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType> , jeśli jedynym modyfikatorem widoczności jest. `protected`</span><span class="sxs-lookup"><span data-stu-id="2dd66-246">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType> if the only visibility modifier is `protected`.</span></span> <span data-ttu-id="2dd66-247">Ta właściwość jest `false` dla pól, które `protected internal` znajdują`Protected Friend` się `protected public` w C# (w C++Visual Basic w). <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> Użyj właściwości, aby zidentyfikować takie pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-247">This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-248">Poniższy przykład kodu definiuje pola z <xref:System.Reflection.FieldInfo.IsAssembly%2A>różnymi poziomami widoczności i wyświetla wartości ich właściwości, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, i <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> .</span><span class="sxs-lookup"><span data-stu-id="2dd66-248">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-249">Visual Basic i C# Języki nie mogą definiować pól z <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> widocznością; ten poziom dostępu jest wyświetlany tylko C++ w przykładzie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-249">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyAndAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyAndAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyAndAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyAndAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyAndAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamilyAndAssembly : bool" Usage="System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamilyAndAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-250">Pobiera wartość wskazującą, czy widoczność tego pola jest opisana przez <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; oznacza to, że można uzyskać dostęp do pola z klas pochodnych, ale tylko wtedy, gdy znajdują się one w tym samym zestawie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-250">Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</span></span></summary>
        <value><span data-ttu-id="2dd66-251"><see langword="true" />Jeśli dostęp do tego pola jest dokładnie opisany przez <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="2dd66-251"><see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-252">Jeśli pole ma <xref:System.Reflection.FieldAttributes.FamANDAssem> widoczność poziomu, może być wywoływane z dowolnego elementu członkowskiego w klasie pochodnej, która jest również w tym samym zestawie, ale nie z dowolnego innego typu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-252">If a field has <xref:System.Reflection.FieldAttributes.FamANDAssem> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</span></span>  
  
 <span data-ttu-id="2dd66-253">Widoczność pola jest dokładnie opisana przez <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> , jeśli modyfikator widoczności znajduje się `protected private` w. C++</span><span class="sxs-lookup"><span data-stu-id="2dd66-253">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> if the visibility modifier is `protected private` in C++.</span></span> <span data-ttu-id="2dd66-254">Pól o tej widoczności nie można definiować w Visual Basic lub C#.</span><span class="sxs-lookup"><span data-stu-id="2dd66-254">Fields with this visibility cannot be defined in Visual Basic or C#.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-255">Poniższy przykład kodu definiuje pola z <xref:System.Reflection.FieldInfo.IsAssembly%2A>różnymi poziomami widoczności i wyświetla wartości ich właściwości, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, i <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> .</span><span class="sxs-lookup"><span data-stu-id="2dd66-255">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-256">Visual Basic i C# Języki nie mogą definiować pól z <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> widocznością; ten poziom dostępu jest wyświetlany tylko C++ w przykładzie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-256">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyOrAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyOrAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyOrAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyOrAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyOrAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamilyOrAssembly : bool" Usage="System.Reflection.FieldInfo.IsFamilyOrAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamilyOrAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-257">Pobiera wartość wskazującą, czy potencjalna widoczność tego pola jest opisana przez <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; oznacza to, że można uzyskać dostęp do pola za pomocą klas pochodnych wszędzie tam, gdzie się znajdują, i według klas w tym samym zestawie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-257">Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</span></span></summary>
        <value><span data-ttu-id="2dd66-258"><see langword="true" />Jeśli dostęp do tego pola jest dokładnie opisany przez <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="2dd66-258"><see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-259">Jeśli pole ma <xref:System.Reflection.FieldAttributes.FamORAssem> widoczność poziomu, może być wywoływane z dowolnego elementu członkowskiego klasy pochodnej lub dowolnego elementu członkowskiego w tym samym zestawie, ale nie z dowolnego innego typu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-259">If a field has <xref:System.Reflection.FieldAttributes.FamORAssem> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</span></span>  
  
 <span data-ttu-id="2dd66-260">Rzeczywista widoczność pola jest ograniczona przez widoczność jego typu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-260">The actual visibility of a field is limited by the visibility of its type.</span></span> <span data-ttu-id="2dd66-261">Właściwość może być `true` dla pola, ale jeśli jest polem typu zagnieżdżonego Private, pole nie jest widoczne poza typem zawierającym. <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A></span><span class="sxs-lookup"><span data-stu-id="2dd66-261">The <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="2dd66-262">Widoczność pola <xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType> jest dokładnie opisana przez, jeśli modyfikator widoczności jest `protected internal` w C# (`Protected Friend` w Visual Basic, `protected public` w C++).</span><span class="sxs-lookup"><span data-stu-id="2dd66-262">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-263">Poniższy przykład kodu definiuje pola z <xref:System.Reflection.FieldInfo.IsAssembly%2A>różnymi poziomami widoczności i wyświetla wartości ich właściwości, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, i <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> .</span><span class="sxs-lookup"><span data-stu-id="2dd66-263">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-264">Visual Basic i C# Języki nie mogą definiować pól z <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> widocznością; ten poziom dostępu jest wyświetlany tylko C++ w przykładzie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-264">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
      </Docs>
    </Member>
    <Member MemberName="IsInitOnly">
      <MemberSignature Language="C#" Value="public bool IsInitOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsInitOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitOnly : bool" Usage="System.Reflection.FieldInfo.IsInitOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsInitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-265">Pobiera wartość wskazującą, czy pole można ustawić tylko w treści konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2dd66-265">Gets a value indicating whether the field can only be set in the body of the constructor.</span></span></summary>
        <value><span data-ttu-id="2dd66-266"><see langword="true" />Jeśli pole ma <see langword="InitOnly" /> ustawiony atrybut; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-266"><see langword="true" /> if the field has the <see langword="InitOnly" /> attribute set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-267">Jeśli zwrócona wartość to `true`, pole może być inicjowane tylko do odczytu i jest po raz ten, które będzie miało tylko odczyt.</span><span class="sxs-lookup"><span data-stu-id="2dd66-267">If the returned value is `true`, the field can only be initialized, and is read-only thereafter.</span></span>  
  
 <span data-ttu-id="2dd66-268">Aby uzyskać `IsInitOnly` właściwość, najpierw Pobierz klasę `Type`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-268">To get the `IsInitOnly` property, first get the class `Type`.</span></span> <span data-ttu-id="2dd66-269">`Type`Pobierz .`FieldInfo`</span><span class="sxs-lookup"><span data-stu-id="2dd66-269">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="2dd66-270">`FieldInfo`W programie`IsInitOnly` Pobierz właściwość.</span><span class="sxs-lookup"><span data-stu-id="2dd66-270">From the `FieldInfo`, get the `IsInitOnly` property.</span></span> <span data-ttu-id="2dd66-271">Aby uzyskać dostęp do niepublicznego pola, Połącz <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> z jedną lub <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> obie i <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> w `GetField` metodzie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-271">To access a non-public field, combine <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> with either or both of <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in the `GetField` method.</span></span>  
  
 <span data-ttu-id="2dd66-272">Właściwość jest ustawiana, <xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType> gdy atrybut jest ustawiony. `IsInitOnly`</span><span class="sxs-lookup"><span data-stu-id="2dd66-272">The `IsInitOnly` property is set when the <xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType> attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-273">W poniższym przykładzie tworzone są dwa pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-273">In the following example, two fields are created.</span></span> <span data-ttu-id="2dd66-274">Drugie pole jest tylko do odczytu, nie ma metody dostępu set i `IsInitOnly` jest ustawione na. `true`</span><span class="sxs-lookup"><span data-stu-id="2dd66-274">The second field is read-only, having no set accessor, and `IsInitOnly` is set to `true`.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/VB/source.vb#1)]  
  
 <span data-ttu-id="2dd66-275">Ten kod generuje następujące dane wyjściowe:</span><span class="sxs-lookup"><span data-stu-id="2dd66-275">This code produces the following output:</span></span>  
  
 <span data-ttu-id="2dd66-276">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="2dd66-276">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="2dd66-277">Moje pole A-Modified, IsInitOnly = false</span><span class="sxs-lookup"><span data-stu-id="2dd66-277">Myfielda - A- modified, IsInitOnly = False</span></span>  
  
 <span data-ttu-id="2dd66-278">Myfieldb-B tylko do odczytu pola, IsInitOnly = true</span><span class="sxs-lookup"><span data-stu-id="2dd66-278">Myfieldb - B readonly field, IsInitOnly = True</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="IsLiteral">
      <MemberSignature Language="C#" Value="public bool IsLiteral { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiteral" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsLiteral" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLiteral As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLiteral { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLiteral : bool" Usage="System.Reflection.FieldInfo.IsLiteral" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsLiteral</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-279">Pobiera wartość wskazującą, czy wartość jest zapisywana w czasie kompilacji i nie można jej zmienić.</span><span class="sxs-lookup"><span data-stu-id="2dd66-279">Gets a value indicating whether the value is written at compile time and cannot be changed.</span></span></summary>
        <value><span data-ttu-id="2dd66-280"><see langword="true" />Jeśli pole ma <see langword="Literal" /> ustawiony atrybut; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-280"><see langword="true" /> if the field has the <see langword="Literal" /> attribute set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-281">Właściwość jest ustawiana, `FieldAttributes.Literal` gdy atrybut jest ustawiony. `IsLiteral`</span><span class="sxs-lookup"><span data-stu-id="2dd66-281">The `IsLiteral` property is set when the `FieldAttributes.Literal` attribute is set.</span></span> <span data-ttu-id="2dd66-282">Jeśli ten atrybut jest ustawiony, nie można zmienić pola i jest stałą.</span><span class="sxs-lookup"><span data-stu-id="2dd66-282">If this attribute is set, the field cannot be changed and is constant.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotSerialized">
      <MemberSignature Language="C#" Value="public bool IsNotSerialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotSerialized" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsNotSerialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotSerialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotSerialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotSerialized : bool" Usage="System.Reflection.FieldInfo.IsNotSerialized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsNotSerialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-283">Pobiera wartość wskazującą, <see langword="NotSerialized" /> czy to pole ma atrybut.</span><span class="sxs-lookup"><span data-stu-id="2dd66-283">Gets a value indicating whether this field has the <see langword="NotSerialized" /> attribute.</span></span></summary>
        <value><span data-ttu-id="2dd66-284"><see langword="true" />Jeśli pole ma <see langword="NotSerialized" /> ustawiony atrybut; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-284"><see langword="true" /> if the field has the <see langword="NotSerialized" /> attribute set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-285">Właściwość zwraca `true` , gdy`FieldAttributes.NotSerialized` pole jest oznaczone flagą. `IsNotSerialized`</span><span class="sxs-lookup"><span data-stu-id="2dd66-285">The `IsNotSerialized` property returns `true` when the field is marked with the `FieldAttributes.NotSerialized` flag.</span></span> <span data-ttu-id="2dd66-286">Gdy ta flaga jest ustawiona dla pola, wskazuje, że pole nie musi być serializowane, gdy typ jest zdalny.</span><span class="sxs-lookup"><span data-stu-id="2dd66-286">When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-287">Poniższy przykład pobiera informacje o polach pól MyClass, określa, czy pola mogą być serializowane i wyświetla wyniki.</span><span class="sxs-lookup"><span data-stu-id="2dd66-287">The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.</span></span>  
  
 [!code-cpp[FieldInfo_IsNotSerialized#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CPP/fieldinfo_isnotserialized.cpp#1)]
 [!code-csharp[FieldInfo_IsNotSerialized#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CS/fieldinfo_isnotserialized.cs#1)]
 [!code-vb[FieldInfo_IsNotSerialized#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsNotSerialized/VB/fieldinfo_isnotserialized.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPinvokeImpl">
      <MemberSignature Language="C#" Value="public bool IsPinvokeImpl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPinvokeImpl" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPinvokeImpl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPinvokeImpl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPinvokeImpl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPinvokeImpl : bool" Usage="System.Reflection.FieldInfo.IsPinvokeImpl" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPinvokeImpl</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-288">Pobiera wartość wskazującą, czy odpowiedni <see langword="PinvokeImpl" /> atrybut jest ustawiony w. <see cref="T:System.Reflection.FieldAttributes" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-288">Gets a value indicating whether the corresponding <see langword="PinvokeImpl" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />.</span></span></summary>
        <value><span data-ttu-id="2dd66-289"><see langword="true" />Jeśli atrybut jest ustawiony w <see cref="T:System.Reflection.FieldAttributes" />; w przeciwnym razie <see langword="false" />,. <see langword="PinvokeImpl" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-289"><see langword="true" /> if the <see langword="PinvokeImpl" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2dd66-290">Poniższy przykład tworzy klasę i wyświetla nazwę, pole i <xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A> wartość właściwości pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-290">The following example creates a class and displays the name, field and <xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A> property value of the field.</span></span>  
  
 [!code-cpp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CPP/fieldinfo_ispinvokeimpl.cpp#1)]
 [!code-csharp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CS/fieldinfo_ispinvokeimpl.cs#1)]
 [!code-vb[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/VB/fieldinfo_ispinvokeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPrivate">
      <MemberSignature Language="C#" Value="public bool IsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrivate : bool" Usage="System.Reflection.FieldInfo.IsPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-291">Pobiera wartość wskazującą, czy pole jest prywatne.</span><span class="sxs-lookup"><span data-stu-id="2dd66-291">Gets a value indicating whether the field is private.</span></span></summary>
        <value><span data-ttu-id="2dd66-292"><see langword="true" />Jeśli pole jest prywatne; przypadku <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-292"><see langword="true" /> if the field is private; otherwise; <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-293">Pola prywatne są dostępne tylko z funkcji składowych.</span><span class="sxs-lookup"><span data-stu-id="2dd66-293">Private fields are accessible only from member functions.</span></span>  
  
 <span data-ttu-id="2dd66-294">Właściwość jest ustawiana, `FieldAttributes.Private` gdy atrybut jest ustawiony. `IsPrivate`</span><span class="sxs-lookup"><span data-stu-id="2dd66-294">The `IsPrivate` property is set when the `FieldAttributes.Private` attribute is set.</span></span>  
  
 <span data-ttu-id="2dd66-295">Aby uzyskać `IsPrivate` właściwość, najpierw Pobierz klasę `Type`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-295">To get the `IsPrivate` property, first get the class `Type`.</span></span> <span data-ttu-id="2dd66-296">`Type`Pobierz .`FieldInfo`</span><span class="sxs-lookup"><span data-stu-id="2dd66-296">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="2dd66-297">`FieldInfo`W programie`IsPrivate` Pobierz właściwość.</span><span class="sxs-lookup"><span data-stu-id="2dd66-297">From the `FieldInfo`, get the `IsPrivate` property.</span></span> <span data-ttu-id="2dd66-298">Aby uzyskać dostęp do `BindingFlags` niepublicznego pola, ustaw wartość na `NonPublic`, `GetField` a `Static` lub `Instance` w metodzie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-298">To access a non-public field, set the `BindingFlags` to `NonPublic`, and either `Static` or `Instance` in the `GetField` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-299">Poniższy przykład zwraca wartość wskazującą, czy pole klasy jest prywatne.</span><span class="sxs-lookup"><span data-stu-id="2dd66-299">The following example returns a value indicating whether or not the field of the class is private.</span></span>  
  
 [!code-cpp[FieldInfo_IsPrivate#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPrivate/CPP/fieldinfo_isprivate.cpp#1)]
 [!code-csharp[FieldInfo_IsPrivate#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPrivate/CS/fieldinfo_isprivate.cs#1)]
 [!code-vb[FieldInfo_IsPrivate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPrivate/VB/fieldinfo_isprivate.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Reflection.FieldInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-300">Pobiera wartość wskazującą, czy pole jest publiczne.</span><span class="sxs-lookup"><span data-stu-id="2dd66-300">Gets a value indicating whether the field is public.</span></span></summary>
        <value><span data-ttu-id="2dd66-301"><see langword="true" />Jeśli to pole jest publiczne; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-301"><see langword="true" /> if this field is public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-302">Pola publiczne są dostępne wszędzie tam, gdzie odpowiadające im klasy są widoczne.</span><span class="sxs-lookup"><span data-stu-id="2dd66-302">Public fields are accessible everywhere their corresponding classes are visible.</span></span>  
  
 <span data-ttu-id="2dd66-303">Właściwość jest ustawiana, `FieldAttributes.Public` gdy atrybut jest ustawiony. `IsPublic`</span><span class="sxs-lookup"><span data-stu-id="2dd66-303">The `IsPublic` property is set when the `FieldAttributes.Public` attribute is set.</span></span>  
  
 <span data-ttu-id="2dd66-304">Aby uzyskać `IsPublic` właściwość, najpierw Pobierz klasę `Type`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-304">To get the `IsPublic` property, first get the class `Type`.</span></span> <span data-ttu-id="2dd66-305">`Type`Pobierz .`FieldInfo`</span><span class="sxs-lookup"><span data-stu-id="2dd66-305">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="2dd66-306">`FieldInfo`W programie`IsPublic` Pobierz właściwość.</span><span class="sxs-lookup"><span data-stu-id="2dd66-306">From the `FieldInfo`, get the `IsPublic` property.</span></span> <span data-ttu-id="2dd66-307">Jeśli pole jest inne niż publiczne, jest chronione i nie można uzyskać do niego dostępu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-307">If the field is other than public, it is protected and cannot be readily accessed.</span></span> <span data-ttu-id="2dd66-308">Aby uzyskać dostęp do niepublicznego pola, należy `BindingFlags` ustawić `NonPublic`na, określić `BindingFlags.Instance` lub `BindingFlags.Static`, i użyć go dla `GetField` metody.</span><span class="sxs-lookup"><span data-stu-id="2dd66-308">To access a nonpublic field, set the `BindingFlags` to `NonPublic`, specify either `BindingFlags.Instance` or `BindingFlags.Static`, and use this for the `GetField` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-309">Poniższy przykład zwraca wartość wskazującą, czy pole klasy jest publiczne, czy prywatne.</span><span class="sxs-lookup"><span data-stu-id="2dd66-309">The following example returns a value indicating whether or not the field of the class is public or private.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Reflection.BindingFlags" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.FieldInfo.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-310">Pobiera wartość wskazującą, czy bieżące pole ma krytyczne zabezpieczenia lub zabezpieczenia-krytycznie na bieżącym poziomie zaufania.</span><span class="sxs-lookup"><span data-stu-id="2dd66-310">Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</span></span></summary>
        <value><span data-ttu-id="2dd66-311"><see langword="true" />Jeśli bieżące pole ma zabezpieczenia krytyczne lub bezpieczeństwa-zabezpieczenia krytyczne na bieżącym poziomie zaufania; <see langword="false" /> jeśli jest przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="2dd66-311"><see langword="true" /> if the current field is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-312">Właściwości <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A> i<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> raportują poziom przezroczystości pola na bieżącym poziomie zaufania, zgodnie z opisem w środowisku uruchomieniowym języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="2dd66-312">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="2dd66-313">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="2dd66-313">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="2dd66-314">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="2dd66-314">Security level</span></span>|<span data-ttu-id="2dd66-315">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="2dd66-315">IsSecurityCritical</span></span>|<span data-ttu-id="2dd66-316">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="2dd66-316">IsSecuritySafeCritical</span></span>|<span data-ttu-id="2dd66-317">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="2dd66-317">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="2dd66-318">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="2dd66-318">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="2dd66-319">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="2dd66-319">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="2dd66-320">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="2dd66-320">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="2dd66-321">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacji zabezpieczeń zestawu i jego typów i członków, sprawdzanie bieżącego poziomu zaufania i próba duplikowania reguł środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-321">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2dd66-322">Dla zestawów częściowego zaufania wartość tej właściwości zależy od bieżącego poziomu zaufania dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-322">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="2dd66-323">Jeżeli zestaw jest ładowany do domeny aplikacji częściowo zaufanej (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-323">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="2dd66-324">Zestaw i wszystkie jego typy są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="2dd66-324">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="2dd66-325">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń zestawu częściowego zaufania tylko wtedy, gdy zestaw ten jest ładowany do w pełni zaufanej domeny aplikacji (na przykład, do domyślnej domeny aplikacji z aplikacji pulpitu).</span><span class="sxs-lookup"><span data-stu-id="2dd66-325">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="2dd66-326">Z drugiej strony zaufany zestaw (czyli zestaw z silną nazwą zainstalowaną w globalnej pamięci podręcznej zestawów) zawsze jest ładowany z pełnym zaufaniem, bez względu na poziom zaufania domeny aplikacji, więc jego bieżący poziom zaufania zawsze jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-326">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="2dd66-327">Bieżące poziomy zaufania zestawów i domen aplikacji można określić przy użyciu <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> właściwości i. <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2dd66-327">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="2dd66-328">Aby uzyskać więcej informacji o odbiciu i przezroczystości, zobacz Zagadnienia dotyczące [zabezpieczeń dotyczące odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="2dd66-328">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="2dd66-329">Aby uzyskać informacje na temat przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="2dd66-329">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.FieldInfo.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-330">Pobiera wartość wskazującą, czy bieżące pole jest bezpieczne — zabezpieczenia krytyczne na bieżącym poziomie zaufania.</span><span class="sxs-lookup"><span data-stu-id="2dd66-330">Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</span></span></summary>
        <value><span data-ttu-id="2dd66-331"><see langword="true" />Jeśli bieżące pole ma zabezpieczenia bezpieczne-krytyczne na bieżącym poziomie zaufania; <see langword="false" /> jeśli jest to zabezpieczenia krytyczne lub przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="2dd66-331"><see langword="true" /> if the current field is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-332">Właściwości <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A> i<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> raportują poziom przezroczystości pola na bieżącym poziomie zaufania, zgodnie z opisem w środowisku uruchomieniowym języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="2dd66-332">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="2dd66-333">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="2dd66-333">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="2dd66-334">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="2dd66-334">Security level</span></span>|<span data-ttu-id="2dd66-335">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="2dd66-335">IsSecurityCritical</span></span>|<span data-ttu-id="2dd66-336">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="2dd66-336">IsSecuritySafeCritical</span></span>|<span data-ttu-id="2dd66-337">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="2dd66-337">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="2dd66-338">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="2dd66-338">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="2dd66-339">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="2dd66-339">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="2dd66-340">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="2dd66-340">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="2dd66-341">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacji zabezpieczeń zestawu i jego typów i członków, sprawdzanie bieżącego poziomu zaufania i próba duplikowania reguł środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-341">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2dd66-342">Dla zestawów częściowego zaufania wartość tej właściwości zależy od bieżącego poziomu zaufania dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-342">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="2dd66-343">Jeżeli zestaw jest ładowany do domeny aplikacji częściowo zaufanej (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-343">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="2dd66-344">Zestaw i wszystkie jego typy są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="2dd66-344">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="2dd66-345">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń zestawu częściowego zaufania tylko wtedy, gdy zestaw ten jest ładowany do w pełni zaufanej domeny aplikacji (na przykład, do domyślnej domeny aplikacji z aplikacji pulpitu).</span><span class="sxs-lookup"><span data-stu-id="2dd66-345">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="2dd66-346">Z drugiej strony zaufany zestaw (czyli zestaw z silną nazwą zainstalowaną w globalnej pamięci podręcznej zestawów) zawsze jest ładowany z pełnym zaufaniem, bez względu na poziom zaufania domeny aplikacji, więc jego bieżący poziom zaufania zawsze jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-346">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="2dd66-347">Bieżące poziomy zaufania zestawów i domen aplikacji można określić przy użyciu <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> właściwości i. <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2dd66-347">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="2dd66-348">Aby uzyskać więcej informacji o odbiciu i przezroczystości, zobacz Zagadnienia dotyczące [zabezpieczeń dotyczące odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="2dd66-348">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="2dd66-349">Aby uzyskać informacje na temat przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="2dd66-349">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.FieldInfo.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-350">Pobiera wartość wskazującą, czy bieżące pole jest widoczne na bieżącym poziomie zaufania.</span><span class="sxs-lookup"><span data-stu-id="2dd66-350">Gets a value that indicates whether the current field is transparent at the current trust level.</span></span></summary>
        <value><span data-ttu-id="2dd66-351"><see langword="true" />Jeśli pole ma zabezpieczenia niewidoczne na bieżącym poziomie zaufania; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-351"><see langword="true" /> if the field is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-352">Właściwości <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A> i<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> raportują poziom przezroczystości pola na bieżącym poziomie zaufania, zgodnie z opisem w środowisku uruchomieniowym języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="2dd66-352">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="2dd66-353">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="2dd66-353">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="2dd66-354">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="2dd66-354">Security level</span></span>|<span data-ttu-id="2dd66-355">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="2dd66-355">IsSecurityCritical</span></span>|<span data-ttu-id="2dd66-356">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="2dd66-356">IsSecuritySafeCritical</span></span>|<span data-ttu-id="2dd66-357">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="2dd66-357">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="2dd66-358">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="2dd66-358">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="2dd66-359">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="2dd66-359">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="2dd66-360">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="2dd66-360">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="2dd66-361">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacji zabezpieczeń zestawu i jego typów i członków, sprawdzanie bieżącego poziomu zaufania i próba duplikowania reguł środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-361">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2dd66-362">Dla zestawów częściowego zaufania wartość tej właściwości zależy od bieżącego poziomu zaufania dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-362">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="2dd66-363">Jeżeli zestaw jest ładowany do domeny aplikacji częściowo zaufanej (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-363">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="2dd66-364">Zestaw i wszystkie jego typy są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="2dd66-364">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="2dd66-365">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń zestawu częściowego zaufania tylko wtedy, gdy zestaw ten jest ładowany do w pełni zaufanej domeny aplikacji (na przykład, do domyślnej domeny aplikacji z aplikacji pulpitu).</span><span class="sxs-lookup"><span data-stu-id="2dd66-365">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="2dd66-366">Z drugiej strony zaufany zestaw (czyli zestaw z silną nazwą zainstalowaną w globalnej pamięci podręcznej zestawów) zawsze jest ładowany z pełnym zaufaniem, bez względu na poziom zaufania domeny aplikacji, więc jego bieżący poziom zaufania zawsze jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-366">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="2dd66-367">Bieżące poziomy zaufania zestawów i domen aplikacji można określić przy użyciu <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> właściwości i. <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2dd66-367">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="2dd66-368">Aby uzyskać więcej informacji o odbiciu i przezroczystości, zobacz Zagadnienia dotyczące [zabezpieczeń dotyczące odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="2dd66-368">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="2dd66-369">Aby uzyskać informacje na temat przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="2dd66-369">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.FieldInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-370">Pobiera wartość wskazującą, czy odpowiedni <see langword="SpecialName" /> atrybut jest ustawiony <see cref="T:System.Reflection.FieldAttributes" /> w module wyliczającym.</span><span class="sxs-lookup"><span data-stu-id="2dd66-370">Gets a value indicating whether the corresponding <see langword="SpecialName" /> attribute is set in the <see cref="T:System.Reflection.FieldAttributes" /> enumerator.</span></span></summary>
        <value><span data-ttu-id="2dd66-371"><see langword="true" />Jeśli atrybut jest ustawiony w <see cref="T:System.Reflection.FieldAttributes" />; w przeciwnym razie <see langword="false" />,. <see langword="SpecialName" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-371"><see langword="true" /> if the <see langword="SpecialName" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-372">Nazwy rozpoczynające się od znaku podkreślenia (_), metody dostępu do właściwości i metod przeciążania operatora są przykładami nazw, które mogą wymagać specjalnego traktowania przez niektóre kompilatory.</span><span class="sxs-lookup"><span data-stu-id="2dd66-372">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-373">Poniższy przykład zwraca wartość wskazującą, czy pola w klasie zawierają atrybut SpecialName.</span><span class="sxs-lookup"><span data-stu-id="2dd66-373">The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Reflection.FieldInfo.IsStatic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsStatic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-374">Pobiera wartość wskazującą, czy pole jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="2dd66-374">Gets a value indicating whether the field is static.</span></span></summary>
        <value><span data-ttu-id="2dd66-375"><see langword="true" />Jeśli to pole jest statyczne; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-375"><see langword="true" /> if this field is static; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-376">Gdy pole jest statyczne, jedna kopia pola jest współdzielona przez wszystkie wystąpienia tego typu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-376">When a field is static, one copy of the field is shared by all instances of the type.</span></span>  
  
 <span data-ttu-id="2dd66-377">Właściwość jest ustawiana, `FieldAttributes.Static` gdy atrybut jest ustawiony. `IsStatic`</span><span class="sxs-lookup"><span data-stu-id="2dd66-377">The `IsStatic` property is set when the `FieldAttributes.Static` attribute is set.</span></span>  
  
 <span data-ttu-id="2dd66-378">Aby uzyskać `IsStatic` właściwość, najpierw Pobierz klasę `Type`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-378">To get the `IsStatic` property, first get the class `Type`.</span></span> <span data-ttu-id="2dd66-379">`Type`Pobierz .`FieldInfo`</span><span class="sxs-lookup"><span data-stu-id="2dd66-379">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="2dd66-380">`FieldInfo`W programie`IsStatic` Pobierz właściwość.</span><span class="sxs-lookup"><span data-stu-id="2dd66-380">From the `FieldInfo`, get the `IsStatic` property.</span></span> <span data-ttu-id="2dd66-381">Aby uzyskać dostęp do niepublicznego pola, należy ustawić `BindingFlags` na `NonPublic` wartość w `GetField` metodzie i ustawić dostępność na `Instance` lub `Static`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-381">To access a non-public field, set the `BindingFlags` to `NonPublic` in the `GetField` method and set the accessibility to `Instance` or `Static`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-382">Poniższy przykład określa, czy określone pole jest statyczne i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="2dd66-382">The following example determines whether the specified field is static and displays the result.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="2dd66-383">Ten kod generuje następujące dane wyjściowe:</span><span class="sxs-lookup"><span data-stu-id="2dd66-383">This code produces the following output:</span></span>  
  
 <span data-ttu-id="2dd66-384">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="2dd66-384">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="2dd66-385">Moje pole A — pole prywatne; IsStatic-false</span><span class="sxs-lookup"><span data-stu-id="2dd66-385">Myfielda - A private field; IsStatic - False</span></span>  
  
 <span data-ttu-id="2dd66-386">Pole statyczne Myfieldb-B; IsStatic — true</span><span class="sxs-lookup"><span data-stu-id="2dd66-386">Myfieldb - B static field; IsStatic - True</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.FieldInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd66-387"><see cref="T:System.Reflection.MemberTypes" /> Pobiera wartość wskazującą, że ten element członkowski jest polem.</span><span class="sxs-lookup"><span data-stu-id="2dd66-387">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</span></span></summary>
        <value><span data-ttu-id="2dd66-388"><see cref="T:System.Reflection.MemberTypes" /> Wartość wskazująca, że ten element członkowski jest polem.</span><span class="sxs-lookup"><span data-stu-id="2dd66-388">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-389">Ta właściwość przesłania <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2dd66-389">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="2dd66-390">W związku z tym podczas badania <xref:System.Reflection.MemberInfo> zestawu obiektów — na przykład tablica zwracana przez <xref:System.Type.GetMembers%2A> - <xref:System.Reflection.MemberInfo.MemberType%2A> Właściwość zwraca <xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType> tylko wtedy, gdy dany element członkowski jest polem.</span><span class="sxs-lookup"><span data-stu-id="2dd66-390">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType> only when a given member is a field.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-391">Poniższy przykład określa, czy określony element członkowski jest polem i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="2dd66-391">The following example determines whether the specified member is a field and displays the result.</span></span>  
  
 [!code-cpp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/VB/source.vb#1)]  
  
 <span data-ttu-id="2dd66-392">Ten kod generuje następujące dane wyjściowe:</span><span class="sxs-lookup"><span data-stu-id="2dd66-392">This code produces the following output:</span></span>  
  
 <span data-ttu-id="2dd66-393">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="2dd66-393">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="2dd66-394">Pole. Field-a Private; Element MemberType jest polem</span><span class="sxs-lookup"><span data-stu-id="2dd66-394">Myfield.field - a private field; MemberType is a Field</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.FieldInfo left, class System.Reflection.FieldInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As FieldInfo, right As FieldInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::FieldInfo ^ left, System::Reflection::FieldInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.FieldInfo * System.Reflection.FieldInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.FieldInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2dd66-395">Pierwszy obiekt, który ma zostać porównany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-395">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="2dd66-396">Drugi obiekt, który będzie porównywany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-396">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="2dd66-397">Wskazuje, czy <see cref="T:System.Reflection.FieldInfo" /> dwa obiekty są równe.</span><span class="sxs-lookup"><span data-stu-id="2dd66-397">Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="2dd66-398"><see langword="true" />Jeśli <paramref name="left" /> jest <see langword="false" />równa; w przeciwnym razie,. <paramref name="right" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-398"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.FieldInfo left, class System.Reflection.FieldInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As FieldInfo, right As FieldInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::FieldInfo ^ left, System::Reflection::FieldInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.FieldInfo * System.Reflection.FieldInfo -&gt; bool" Usage="System.Reflection.FieldInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.FieldInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2dd66-399">Pierwszy obiekt, który ma zostać porównany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-399">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="2dd66-400">Drugi obiekt, który będzie porównywany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-400">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="2dd66-401">Wskazuje, czy <see cref="T:System.Reflection.FieldInfo" /> dwa obiekty nie są równe.</span><span class="sxs-lookup"><span data-stu-id="2dd66-401">Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="2dd66-402"><see langword="true" />Jeśli <paramref name="left" /> nie jest <paramref name="right" />równe; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-402"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2dd66-403">Ustawia wartość pola dla danego obiektu na daną wartość.</span><span class="sxs-lookup"><span data-stu-id="2dd66-403">Sets the value of the field for the given object to the given value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ obj, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj -&gt; unit&#xA;override this.SetValue : obj * obj -&gt; unit" Usage="fieldInfo.SetValue (obj, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2dd66-404">Obiekt, którego wartość pola zostanie ustawiona.</span><span class="sxs-lookup"><span data-stu-id="2dd66-404">The object whose field value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="2dd66-405">Wartość, która ma zostać przypisana do pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-405">The value to assign to the field.</span></span></param>
        <summary><span data-ttu-id="2dd66-406">Ustawia wartość pola obsługiwanego przez dany obiekt.</span><span class="sxs-lookup"><span data-stu-id="2dd66-406">Sets the value of the field supported by the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-407">Ta metoda zostanie przypisana `value` do pola odzwierciedlonego przez to wystąpienie w obiekcie. `obj`</span><span class="sxs-lookup"><span data-stu-id="2dd66-407">This method will assign `value` to the field reflected by this instance on object `obj`.</span></span> <span data-ttu-id="2dd66-408">Jeśli pole jest statyczne, `obj` zostanie zignorowane.</span><span class="sxs-lookup"><span data-stu-id="2dd66-408">If the field is static, `obj` will be ignored.</span></span> <span data-ttu-id="2dd66-409">W przypadku pól `obj` niestatycznych powinna być wystąpieniem klasy, która dziedziczy lub deklaruje pole.</span><span class="sxs-lookup"><span data-stu-id="2dd66-409">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="2dd66-410">Nowa wartość jest przenoszona jako `Object`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-410">The new value is passed as an `Object`.</span></span> <span data-ttu-id="2dd66-411">Na przykład, jeśli typ pola jest wartością logiczną, zostanie przesłane wystąpienie `Object` z odpowiednią wartością logiczną.</span><span class="sxs-lookup"><span data-stu-id="2dd66-411">For example, if the field's type is Boolean, an instance of `Object` with the appropriate Boolean value is passed.</span></span> <span data-ttu-id="2dd66-412">Przed ustawieniem wartości Sprawdź `SetValue` , czy użytkownik ma uprawnienie dostępu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-412">Before setting the value, `SetValue` checks to see if the user has access permission.</span></span> <span data-ttu-id="2dd66-413">Ta Ostatnia metoda to wygodna metoda wywoływania następującej `SetValue` metody.</span><span class="sxs-lookup"><span data-stu-id="2dd66-413">This final method is a convenience method for calling the following `SetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-414">W pełni zaufany kod ma uprawnienia, które są konieczne, aby uzyskiwać dostęp do prywatnych konstruktorów, metod, pól i właściwości przy użyciu odbicia i wywoływać je.</span><span class="sxs-lookup"><span data-stu-id="2dd66-414">Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-415">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> , ta metoda może być używana w celu uzyskania dostępu do niepublicznych elementów członkowskich, jeśli obiekt wywołujący został udzielony z flagą i jeśli zestaw uprawnień niepublicznych składowych jest ograniczony do zestawu uprawnień obiektu wywołującego lub podzestawu [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] Komisję.</span><span class="sxs-lookup"><span data-stu-id="2dd66-415">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="2dd66-416">(Zobacz [zagadnienia dotyczące zabezpieczeń w przypadku odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)).</span><span class="sxs-lookup"><span data-stu-id="2dd66-416">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="2dd66-417">Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="2dd66-417">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2dd66-418">Poniższy przykład ustawia wartość pola, pobiera i wyświetla wartość, modyfikuje pole i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="2dd66-418">The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.</span></span>  
  
 [!code-cpp[FieldInfo_SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_SetValue/CPP/fieldinfo_setvalue.cpp#1)]
 [!code-csharp[FieldInfo_SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_SetValue/CS/fieldinfo_setvalue.cs#1)]
 [!code-vb[FieldInfo_SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_SetValue/VB/fieldinfo_setvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FieldAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="2dd66-419">W programie <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET dla aplikacji ze sklepu Windows</see> lub <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">przenośnej biblioteki klas</see>Przechwyć wyjątek <see cref="T:System.MemberAccessException" />klasy bazowej, zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-419">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="2dd66-420">Obiekt wywołujący nie ma uprawnień dostępu do tego pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-420">The caller does not have permission to access this field.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="2dd66-421">W <see href="https://go.microsoft.com/fwlink/?LinkID=247912">środowisku .NET dla aplikacji do sklepu Windows</see> lub <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">przenośnej biblioteki klas</see>Przechwyć <see cref="T:System.Exception" /> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-421">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="2dd66-422"><paramref name="obj" /> Parametr jest<see langword="null" /> i pole jest polem wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2dd66-422">The <paramref name="obj" /> parameter is <see langword="null" /> and the field is an instance field.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2dd66-423">Pole nie istnieje w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-423">The field does not exist on the object.</span></span>  
  
<span data-ttu-id="2dd66-424">—lub—</span><span class="sxs-lookup"><span data-stu-id="2dd66-424">-or-</span></span> 
<span data-ttu-id="2dd66-425">Nie można przekonwertować parametru i zapisać go w tym polu. <paramref name="value" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-425">The <paramref name="value" /> parameter cannot be converted and stored in the field.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="2dd66-426">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="2dd66-426">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="2dd66-427">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-427">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="2dd66-428">do aktualizowania pól tylko do inicjacji.</span><span class="sxs-lookup"><span data-stu-id="2dd66-428">for updating init-only fields.</span></span> <span data-ttu-id="2dd66-429">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-429">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * System.Reflection.BindingFlags * System.Reflection.Binder * System.Globalization.CultureInfo -&gt; unit" Usage="fieldInfo.SetValue (obj, value, invokeAttr, binder, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2dd66-430">Obiekt, którego wartość pola zostanie ustawiona.</span><span class="sxs-lookup"><span data-stu-id="2dd66-430">The object whose field value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="2dd66-431">Wartość, która ma zostać przypisana do pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-431">The value to assign to the field.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="2dd66-432">Pole <see langword="Binder" /> określające żądany typ powiązania (na <see langword="Binder.CreateInstance" /> przykład lub <see langword="Binder.ExactBinding" />).</span><span class="sxs-lookup"><span data-stu-id="2dd66-432">A field of <see langword="Binder" /> that specifies the type of binding that is desired (for example, <see langword="Binder.CreateInstance" /> or <see langword="Binder.ExactBinding" />).</span></span></param>
        <param name="binder"><span data-ttu-id="2dd66-433">Zestaw właściwości, które umożliwiają powiązanie, przekształcenie typów argumentów i wywoływanie elementów członkowskich za pomocą odbicia.</span><span class="sxs-lookup"><span data-stu-id="2dd66-433">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</span></span> <span data-ttu-id="2dd66-434">Jeśli <paramref name="binder" /> jest <see langword="null" /> ,<see langword="Binder.DefaultBinding" /> jest używany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-434">If <paramref name="binder" /> is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used.</span></span></param>
        <param name="culture"><span data-ttu-id="2dd66-435">Preferencje oprogramowania określonej kultury.</span><span class="sxs-lookup"><span data-stu-id="2dd66-435">The software preferences of a particular culture.</span></span></param>
        <summary><span data-ttu-id="2dd66-436">Gdy jest zastępowany w klasie pochodnej, ustawia wartość pola obsługiwanego przez dany obiekt.</span><span class="sxs-lookup"><span data-stu-id="2dd66-436">When overridden in a derived class, sets the value of the field supported by the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-437">Ta metoda zostanie przypisana `value` do pola odzwierciedlonego przez to wystąpienie w. `obj`</span><span class="sxs-lookup"><span data-stu-id="2dd66-437">This method will assign `value` to the field reflected by this instance on `obj`.</span></span> <span data-ttu-id="2dd66-438">Jeśli pole jest statyczne, `obj` zostanie zignorowane.</span><span class="sxs-lookup"><span data-stu-id="2dd66-438">If the field is static, `obj` will be ignored.</span></span> <span data-ttu-id="2dd66-439">W przypadku pól `obj` niestatycznych powinna być wystąpieniem klasy, która dziedziczy lub deklaruje pole.</span><span class="sxs-lookup"><span data-stu-id="2dd66-439">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="2dd66-440">Nowa wartość jest przenoszona jako `Object`.</span><span class="sxs-lookup"><span data-stu-id="2dd66-440">The new value is passed as an `Object`.</span></span> <span data-ttu-id="2dd66-441">Na przykład, jeśli typ pola to `Boolean`, zostanie przesłane `Object` wystąpienie z odpowiednią wartością logiczną.</span><span class="sxs-lookup"><span data-stu-id="2dd66-441">For example, if the field's type is `Boolean`, an instance of `Object` with the appropriate Boolean value is passed.</span></span> <span data-ttu-id="2dd66-442">Przed ustawieniem wartości Sprawdź `SetValue` , czy użytkownik ma uprawnienie dostępu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-442">Before setting the value, `SetValue` checks to see if the user has access permission.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-443">W pełni zaufany kod ma uprawnienia, które są konieczne, aby uzyskiwać dostęp do prywatnych konstruktorów, metod, pól i właściwości przy użyciu odbicia i wywoływać je.</span><span class="sxs-lookup"><span data-stu-id="2dd66-443">Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-444">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> , ta metoda może być używana w celu uzyskania dostępu do niepublicznych elementów członkowskich, jeśli obiekt wywołujący został udzielony z flagą i jeśli zestaw uprawnień niepublicznych składowych jest ograniczony do zestawu uprawnień obiektu wywołującego lub podzestawu [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] Komisję.</span><span class="sxs-lookup"><span data-stu-id="2dd66-444">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="2dd66-445">(Zobacz [zagadnienia dotyczące zabezpieczeń w przypadku odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)).</span><span class="sxs-lookup"><span data-stu-id="2dd66-445">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="2dd66-446">Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="2dd66-446">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FieldAccessException"><span data-ttu-id="2dd66-447">Obiekt wywołujący nie ma uprawnień dostępu do tego pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-447">The caller does not have permission to access this field.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="2dd66-448"><paramref name="obj" /> Parametr jest<see langword="null" /> i pole jest polem wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2dd66-448">The <paramref name="obj" /> parameter is <see langword="null" /> and the field is an instance field.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2dd66-449">Pole nie istnieje w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-449">The field does not exist on the object.</span></span>  
  
<span data-ttu-id="2dd66-450">—lub—</span><span class="sxs-lookup"><span data-stu-id="2dd66-450">-or-</span></span> 
<span data-ttu-id="2dd66-451">Nie można przekonwertować parametru i zapisać go w tym polu. <paramref name="value" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-451">The <paramref name="value" /> parameter cannot be converted and stored in the field.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="2dd66-452">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="2dd66-452">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="2dd66-453">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-453">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="2dd66-454">do aktualizowania pól tylko do inicjacji.</span><span class="sxs-lookup"><span data-stu-id="2dd66-454">for updating init-only fields.</span></span> <span data-ttu-id="2dd66-455">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-455">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValueDirect">
      <MemberSignature Language="C#" Value="public virtual void SetValueDirect (TypedReference obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValueDirect(valuetype System.TypedReference obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValueDirect (obj As TypedReference, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValueDirect(TypedReference obj, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValueDirect : TypedReference * obj -&gt; unit&#xA;override this.SetValueDirect : TypedReference * obj -&gt; unit" Usage="fieldInfo.SetValueDirect (obj, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValueDirect(System.TypedReference,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TypedReference" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2dd66-456"><see cref="T:System.TypedReference" /> Struktura, która hermetyzuje zarządzany wskaźnik do lokalizacji i reprezentację typu, który może być przechowywany w tej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="2dd66-456">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</span></span></param>
        <param name="value"><span data-ttu-id="2dd66-457">Wartość, która ma zostać przypisana do pola.</span><span class="sxs-lookup"><span data-stu-id="2dd66-457">The value to assign to the field.</span></span></param>
        <summary><span data-ttu-id="2dd66-458">Ustawia wartość pola obsługiwanego przez dany obiekt.</span><span class="sxs-lookup"><span data-stu-id="2dd66-458">Sets the value of the field supported by the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="2dd66-459">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> , ta metoda może być używana w celu uzyskania dostępu do niepublicznych elementów członkowskich, jeśli obiekt wywołujący został udzielony z flagą i jeśli zestaw uprawnień niepublicznych składowych jest ograniczony do zestawu uprawnień obiektu wywołującego lub podzestawu [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] Komisję.</span><span class="sxs-lookup"><span data-stu-id="2dd66-459">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="2dd66-460">(Zobacz [zagadnienia dotyczące zabezpieczeń w przypadku odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)).</span><span class="sxs-lookup"><span data-stu-id="2dd66-460">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="2dd66-461">Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="2dd66-461">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2dd66-462">Obiekt wywołujący wymaga alternatywnej Common Language Specification (CLS), ale zamiast tego wywoływana metoda.</span><span class="sxs-lookup"><span data-stu-id="2dd66-462">The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="2dd66-463">wywoływany z późnym wiązaniem przez mechanizmy <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />takie jak.</span><span class="sxs-lookup"><span data-stu-id="2dd66-463">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="2dd66-464">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="2dd66-464">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _FieldInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_FieldInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="2dd66-465">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="2dd66-465">Reserved for future use.</span></span> <span data-ttu-id="2dd66-466">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="2dd66-466">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="2dd66-467">Przekazana tablica nazw ma być mapowana.</span><span class="sxs-lookup"><span data-stu-id="2dd66-467">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="2dd66-468">Liczba nazw, które mają być mapowane.</span><span class="sxs-lookup"><span data-stu-id="2dd66-468">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="2dd66-469">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</span><span class="sxs-lookup"><span data-stu-id="2dd66-469">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="2dd66-470">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</span><span class="sxs-lookup"><span data-stu-id="2dd66-470">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="2dd66-471">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</span><span class="sxs-lookup"><span data-stu-id="2dd66-471">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-472">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-472">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2dd66-473">Więcej informacji o `IDispatch::GetIDsOfNames`programie znajduje się w bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="2dd66-473">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="2dd66-474">Dostęp z późnym wiązaniem przy użyciu interfejsu COM <c>IDispatch</c> nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-474">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetType">
      <MemberSignature Language="C#" Value="Type _FieldInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._FieldInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _FieldInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._FieldInfo.GetType() = System::Runtime::InteropServices::_FieldInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2dd66-475"><see cref="T:System.Type" /> Pobiera obiekt <see cref="T:System.Reflection.FieldInfo" /> reprezentujący typ.</span><span class="sxs-lookup"><span data-stu-id="2dd66-475">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.FieldInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="2dd66-476"><see cref="T:System.Type" /> Obiekt reprezentujący typ. <see cref="T:System.Reflection.FieldInfo" /></span><span class="sxs-lookup"><span data-stu-id="2dd66-476">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.FieldInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _FieldInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_FieldInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="2dd66-477">Informacje o typie, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-477">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="2dd66-478">Identyfikator regionalny dla informacji o typie.</span><span class="sxs-lookup"><span data-stu-id="2dd66-478">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="2dd66-479">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-479">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="2dd66-480">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2dd66-480">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-481">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-481">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2dd66-482">Więcej informacji o `IDispatch::GetTypeInfo`programie znajduje się w bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="2dd66-482">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="2dd66-483">Dostęp z późnym wiązaniem przy użyciu interfejsu COM <c>IDispatch</c> nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-483">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _FieldInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_FieldInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="2dd66-484">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="2dd66-484">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="2dd66-485">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</span><span class="sxs-lookup"><span data-stu-id="2dd66-485">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-486">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-486">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2dd66-487">Więcej informacji o `IDispatch::GetTypeInfoCount`programie znajduje się w bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="2dd66-487">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="2dd66-488">Dostęp z późnym wiązaniem przy użyciu interfejsu COM <c>IDispatch</c> nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-488">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.Invoke">
      <MemberSignature Language="C#" Value="void _FieldInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _FieldInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_FieldInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="2dd66-489">Określa element członkowski.</span><span class="sxs-lookup"><span data-stu-id="2dd66-489">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="2dd66-490">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="2dd66-490">Reserved for future use.</span></span> <span data-ttu-id="2dd66-491">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="2dd66-491">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="2dd66-492">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</span><span class="sxs-lookup"><span data-stu-id="2dd66-492">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="2dd66-493">Flagi opisujące kontekst wywołania.</span><span class="sxs-lookup"><span data-stu-id="2dd66-493">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="2dd66-494">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</span><span class="sxs-lookup"><span data-stu-id="2dd66-494">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="2dd66-495">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</span><span class="sxs-lookup"><span data-stu-id="2dd66-495">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="2dd66-496">Wskaźnik do struktury, która zawiera informacje o wyjątku.</span><span class="sxs-lookup"><span data-stu-id="2dd66-496">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="2dd66-497">Indeks pierwszego argumentu, który zawiera błąd.</span><span class="sxs-lookup"><span data-stu-id="2dd66-497">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="2dd66-498">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="2dd66-498">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd66-499">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2dd66-499">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2dd66-500">Więcej informacji o `IDispatch::Invoke`programie znajduje się w bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="2dd66-500">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="2dd66-501">Dostęp z późnym wiązaniem przy użyciu interfejsu COM <c>IDispatch</c> nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="2dd66-501">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
