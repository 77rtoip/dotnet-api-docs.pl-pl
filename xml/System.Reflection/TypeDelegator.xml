<Type Name="TypeDelegator" FullName="System.Reflection.TypeDelegator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3f1922063931e1db44dfd00544b163b8a8fb3913" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TypeDelegator : System.Reflection.TypeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TypeDelegator extends System.Reflection.TypeInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.TypeDelegator" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeDelegator&#xA;Inherits TypeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeDelegator : System::Reflection::TypeInfo" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="09d47-101">Opakowuje <see cref="T:System.Type" /> metody obiektu i delegatów w tym <see langword="Type" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="09d47-101">Wraps a <see cref="T:System.Type" /> object and delegates methods to that <see langword="Type" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-102">Pochodzić z tego typu i Przesłoń tylko tych członków, należy podać dostosowania w plus żadnych elementów członkowskich, które są wymagane przez program i nie jest już zaimplementowany przez <xref:System.Reflection.TypeDelegator>.</span><span class="sxs-lookup"><span data-stu-id="09d47-102">Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <xref:System.Reflection.TypeDelegator>.</span></span>  
  
 <span data-ttu-id="09d47-103"><xref:System.Reflection.TypeDelegator> pochodną <xref:System.Type?displayProperty=nameWithType> i implementuje większość właściwości i metod <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="09d47-103"><xref:System.Reflection.TypeDelegator> derives from <xref:System.Type?displayProperty=nameWithType> and implements most of the properties and methods of <xref:System.Type>.</span></span> <span data-ttu-id="09d47-104">Dla każdego elementu członkowskiego ją implementuje <xref:System.Reflection.TypeDelegator> automatycznie deleguje do odpowiedniego elementu członkowskiego wewnętrznego <xref:System.Type> obiektu, który jest ona podawana jako argument konstruktora.</span><span class="sxs-lookup"><span data-stu-id="09d47-104">For each member it implements, <xref:System.Reflection.TypeDelegator> automatically delegates to the corresponding member of an internal <xref:System.Type> object, which is supplied as an argument to the constructor.</span></span> <span data-ttu-id="09d47-105">Tym wewnętrzny <xref:System.Type> obiektu jest narażony na wyprowadzanie klas przez `protected` <xref:System.Reflection.TypeDelegator.typeImpl> pola.</span><span class="sxs-lookup"><span data-stu-id="09d47-105">This internal <xref:System.Type> object is exposed to deriving classes by the `protected`<xref:System.Reflection.TypeDelegator.typeImpl> field.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09d47-106">Niektórzy członkowie <xref:System.Reflection.TypeDelegator> mieć implementacji, nawet jeśli samych członków po prostu są dziedziczone z <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="09d47-106">Some members of <xref:System.Reflection.TypeDelegator> have implementations even though the members themselves are simply inherited from <xref:System.Type>.</span></span> <span data-ttu-id="09d47-107">W takich przypadkach podano wykonania przez przesłoniętych `protected` metodę, która ma nazwę, która kończy się na "Impl".</span><span class="sxs-lookup"><span data-stu-id="09d47-107">In these cases, the implementation is provided by an overridden `protected` method that has a name that ends in "Impl".</span></span> <span data-ttu-id="09d47-108">Na przykład wdrożenia dla wszystkich przeciążeń <xref:System.Reflection.TypeDelegator.GetMethods%2A> metody jest dostarczany przez przesłoniętych <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> — metoda.</span><span class="sxs-lookup"><span data-stu-id="09d47-108">For example, the implementation for all overloads of the <xref:System.Reflection.TypeDelegator.GetMethods%2A> method is supplied by the overridden <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> method.</span></span> <span data-ttu-id="09d47-109">Implementację dla dziedziczone właściwości, takie jak <xref:System.Type.IsPublic%2A> i <xref:System.Type.IsNestedAssembly%2A> podano przez zastąpiona <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="09d47-109">The implementation for inherited properties such as <xref:System.Type.IsPublic%2A> and <xref:System.Type.IsNestedAssembly%2A> is provided by the overridden <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> method.</span></span>  
  
 <span data-ttu-id="09d47-110">Wyprowadzanie klas może zapewnić konstruktora publicznego, który przyjmuje <xref:System.Type> obiektu jako jego parametr i po prostu przekazuje, które do obiektu <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> konstruktora, lub można ustawić wewnętrznej <xref:System.Type> obiektu w inny sposób.</span><span class="sxs-lookup"><span data-stu-id="09d47-110">Deriving classes can provide a public constructor that takes a <xref:System.Type> object as its parameter and simply passes that object to the <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> constructor, or can set the internal <xref:System.Type> object in some other way.</span></span>  
  
 <span data-ttu-id="09d47-111">Jeśli klasa pochodna używa elementu członkowskiego, który nie jest implementowana przez <xref:System.Reflection.TypeDelegator>, Zastąp ten element członkowski i musi zapewniać implementację.</span><span class="sxs-lookup"><span data-stu-id="09d47-111">If a deriving class uses a member that is not implemented by <xref:System.Reflection.TypeDelegator>, it must override that member and provide an implementation.</span></span> <span data-ttu-id="09d47-112">Najprostsza implementacja jest wywoływanie odpowiadającego mu członka w wewnętrznej <xref:System.Type> obiekt udostępniany przez <xref:System.Reflection.TypeDelegator.typeImpl> pola, ale może zapewnić implementacji wymaganych przez aplikację.</span><span class="sxs-lookup"><span data-stu-id="09d47-112">The simplest implementation is to call the corresponding member on the internal <xref:System.Type> object exposed by the <xref:System.Reflection.TypeDelegator.typeImpl> field, but you can provide any implementation your application requires.</span></span> <span data-ttu-id="09d47-113">Nie jest konieczne do zastąpienia tych elementów członkowskich, jeśli nie są używane przez aplikację lub przez bibliotekę funkcji wywołania aplikacji (na przykład przez <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType> konstruktora).</span><span class="sxs-lookup"><span data-stu-id="09d47-113">It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType> constructor).</span></span>  
  
 <span data-ttu-id="09d47-114">Następujące metody wirtualne (`Overridable` metod w języku Visual Basic) z <xref:System.Type> nie zostały zaimplementowane przez <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A> , <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>.</span><span class="sxs-lookup"><span data-stu-id="09d47-114">The following virtual methods (`Overridable` methods in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A>, <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>.</span></span>  
  
 <span data-ttu-id="09d47-115">Następujące właściwości wirtualnych (`Overridable` właściwości w języku Visual Basic) z <xref:System.Type> nie zostały zaimplementowane przez <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A> , <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.</span><span class="sxs-lookup"><span data-stu-id="09d47-115">The following virtual properties (`Overridable` properties in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A>, <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-116">Inicjuje nowe wystąpienie klasy <see cref="T:System.Reflection.TypeDelegator" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-116">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDelegator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDelegator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-117">Inicjuje nowe wystąpienie klasy <see cref="T:System.Reflection.TypeDelegator" /> klasy przy użyciu domyślnej właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-117">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeDelegator (Type delegatingType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type delegatingType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (delegatingType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeDelegator(Type ^ delegatingType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="delegatingType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegatingType">
          <span data-ttu-id="09d47-118">Wystąpienie klasy <see cref="T:System.Type" /> która hermetyzuje wywołanie do metody obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-118">The instance of the class <see cref="T:System.Type" /> that encapsulates the call to the method of an object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-119">Inicjuje nowe wystąpienie klasy <see cref="T:System.Reflection.TypeDelegator" /> określenie hermetyzowany wystąpienia klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-119">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class specifying the encapsulating instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-120">Ten konstruktor jest wywoływany z klasy do wygenerowania na podstawie delegata `Type` obiekt definiujący metody klasy.</span><span class="sxs-lookup"><span data-stu-id="09d47-120">This constructor is called from a class to generate a delegate based upon the `Type` object for the class defining the method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09d47-121">
            <paramref name="delegatingType" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-121">
              <paramref name="delegatingType" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-122">Pobiera zestaw implementowany typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-122">Gets the assembly of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-123">
            <see cref="T:System.Reflection.Assembly" /> Reprezentujący zestaw implementowany typ obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-123">An <see cref="T:System.Reflection.Assembly" /> object representing the assembly of the implemented type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-124">Zestawy są jednostki wdrożenia w środowisku uruchomieniowym języka.</span><span class="sxs-lookup"><span data-stu-id="09d47-124">Assemblies are the deployment units in the common language runtime.</span></span> <span data-ttu-id="09d47-125">Zestawy Ustanów przestrzeń nazw dla przetwarzanie żądań i określić, które zasoby są widoczne zewnętrznie i który jest dostępny w obrębie zestawu.</span><span class="sxs-lookup"><span data-stu-id="09d47-125">Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.</span></span> <span data-ttu-id="09d47-126">Środowisko uruchomieniowe języka wspólnego można określić i zlokalizować zestawu dla każdego uruchomionego obiektu.</span><span class="sxs-lookup"><span data-stu-id="09d47-126">The common language runtime can determine and locate the assembly for any running object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-127">Pobiera pełną nazwę zestawu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-127">Gets the assembly's fully qualified name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-128">A <see langword="String" /> zawierający w pełni kwalifikowana nazwa zestawu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-128">A <see langword="String" /> containing the assembly's fully qualified name.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-129">Pobiera typ bazowy dla bieżącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-129">Gets the base type for the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-130">Typ podstawowy dla typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-130">The base type for a type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-131">Typ podstawowy jest typem, po którym dziedziczy bezpośrednio tego typu.</span><span class="sxs-lookup"><span data-stu-id="09d47-131">The base type is the type from which this type directly inherits.</span></span> <span data-ttu-id="09d47-132">Ponieważ <xref:System.Object> typu klasy jest ostatecznym klasą podstawową innych typów, jest tylko typ, który nie ma typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="09d47-132">Since the <xref:System.Object> class type is the ultimate base class of all the other types, it is the only type that does not have a base type.</span></span> <span data-ttu-id="09d47-133">W takim przypadku `null` jest zwracana jako typ bazowy `Object` typu.</span><span class="sxs-lookup"><span data-stu-id="09d47-133">In this case, `null` is returned as the base type of the `Object` type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-134">Pobiera pełną nazwę typu zaimplementowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-134">Gets the fully qualified name of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-135">A <see langword="String" /> zawierający w pełni kwalifikowana nazwa typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-135">A <see langword="String" /> containing the type's fully qualified name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-136">Ciąg zawierający w pełni kwalifikowana nazwa bieżącego `TypeDelegator`.</span><span class="sxs-lookup"><span data-stu-id="09d47-136">A string containing the fully qualified name of the current `TypeDelegator`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-137">Pobiera atrybuty przypisane do <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-137">Gets the attributes assigned to the <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-138">A <see langword="TypeAttributes" /> obiekt reprezentujący flagi atrybutu implementacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-138">A <see langword="TypeAttributes" /> object representing the implementation attribute flags.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-139">Ta metoda służy do określenia, czy `TypeDelegator` jest abstrakcyjna, publiczny i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="09d47-139">This method can be used to determine if the `TypeDelegator` is abstract, public, and so on.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-140">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-140">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-141">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-141">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="09d47-142">Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <see langword="MemberInfo" /> obiektów za pomocą odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-142">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="09d47-143">Jeśli <c>integratora</c> jest <see langword="null" />, używany jest domyślny integrator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-143">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="09d47-144">Konwencje wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-144">The calling conventions.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="09d47-145">Tablica typu <see langword="Type" /> zawierającego listę liczba parametrów, kolejność i typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-145">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types.</span>
          </span>
          <span data-ttu-id="09d47-146">Typy nie mogą być <see langword="null" />; Użyj odpowiedniego <see langword="GetMethod" /> metody lub pusta tablica, aby wyszukać metody bez parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-146">Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="09d47-147">Tablica typu <see langword="ParameterModifier" /> mających taką samą długość jak <c>typy</c> tablicy, której elementy reprezentuje atrybuty skojarzone z parametrami metody get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-147">An array of type <see langword="ParameterModifier" /> having the same length as the <c>types</c> array, whose elements represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-148">Pobiera konstruktora, który zaimplementowana <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-148">Gets the constructor that implemented the <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-149">A <see langword="ConstructorInfo" /> obiektu metodę, która odpowiada określonym kryteriom lub <see langword="null" /> Jeśli nie można odnaleźć dopasowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-149">A <see langword="ConstructorInfo" /> object for the method that matches the specified criteria, or <see langword="null" /> if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-150">`callConvention` Parametr wskazuje Konwencja wywoływania dla punktu wejścia.</span><span class="sxs-lookup"><span data-stu-id="09d47-150">The `callConvention` parameter indicates the calling convention for the entry point.</span></span> <span data-ttu-id="09d47-151">Jeśli nie Konwencja wywoływania jest określony, domyślnie <xref:System.Reflection.CallingConventions> wartość `Standard` jest używany.</span><span class="sxs-lookup"><span data-stu-id="09d47-151">If no calling convention is specified, a default <xref:System.Reflection.CallingConventions> value of `Standard` is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-152">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-152">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-153">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-153">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-154">Zwraca tablicę <see cref="T:System.Reflection.ConstructorInfo" /> obiekty reprezentujące konstruktorów zdefiniowanych dla typu opakowane przez bieżący <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-154">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing constructors defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-155">Tablica typu <see langword="ConstructorInfo" /> zawierających określony konstruktorów zdefiniowanych dla tej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-155">An array of type <see langword="ConstructorInfo" /> containing the specified constructors defined for this class.</span>
          </span>
          <span data-ttu-id="09d47-156">Jeśli zdefiniowano ma konstruktorów, zwracana jest pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-156">If no constructors are defined, an empty array is returned.</span>
          </span>
          <span data-ttu-id="09d47-157">W zależności od wartości podanego parametru tylko konstruktorów publicznych lub konstruktorów publicznych i niepublicznych zostaną zwrócone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-157">Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-158">Klasa inicjatory są dostępne tylko za pośrednictwem `GetMember`, `GetMembers`, `FindMembers`, i `GetConstructors`.</span><span class="sxs-lookup"><span data-stu-id="09d47-158">Class initializers are available only through `GetMember`, `GetMembers`, `FindMembers`, and `GetConstructors`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-159">Zwraca wszystkie atrybuty niestandardowe zdefiniowane dla tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-159">Returns all the custom attributes defined for this type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="09d47-160">Określa, czy przeszukać łańcuch dziedziczenia tego typu w celu znalezienia atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-160">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-161">Zwraca wszystkie atrybuty niestandardowe zdefiniowane dla tego typu, określająca, czy przeszukać łańcuch dziedziczenia tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-161">Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-162">Tablica zawierająca wszystkie atrybuty niestandardowe zdefiniowane dla tego typu obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-162">An array of objects containing all the custom attributes defined for this type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="09d47-163">Nie można załadować typu niestandardowego atrybutu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-163">A custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="09d47-164">Tablicę identyfikowanych według typu atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-164">An array of custom attributes identified by type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="09d47-165">Określa, czy przeszukać łańcuch dziedziczenia tego typu w celu znalezienia atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-165">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-166">Zwraca tablicę identyfikowanych według typu atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-166">Returns an array of custom attributes identified by type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-167">Tablica obiektów zawierających atrybuty niestandardowe zdefiniowane w tym typie zgodne <paramref name="attributeType" /> parametru określająca, czy przeszukać łańcuch dziedziczenia tego typu, lub <see langword="null" /> Jeśli żadne atrybuty niestandardowe są zdefiniowane w tym typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-167">An array of objects containing the custom attributes defined in this type that match the <paramref name="attributeType" /> parameter, specifying whether to search the type's inheritance chain, or <see langword="null" /> if no custom attributes are defined on this type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09d47-168">
            <paramref name="attributeType" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-168">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="09d47-169">Nie można załadować typu niestandardowego atrybutu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-169">A custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-170">Zwraca <see cref="T:System.Type" /> obiektu ujęty lub odwołuje się do bieżącego tablicy, wskaźnika lub ByRef.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-170">Returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or ByRef.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-171">
            <see cref="T:System.Type" /> Obiektu ujęty lub odwołuje się do bieżącego tablicy wskaźnika lub <see langword="ByRef" />, lub <see langword="null" /> Jeśli bieżące <see cref="T:System.Type" /> nie jest tablicą, wskaźnika lub a <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-171">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or <see langword="ByRef" />, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array, a pointer or a <see langword="ByRef" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09d47-172">Nazwa zdarzenia do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-172">The name of the event to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-173">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-173">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-174">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-174">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-175">Zwraca określonego zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-175">Returns the specified event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-176">
            <see cref="T:System.Reflection.EventInfo" /> Obiekt reprezentujący zdarzenie zadeklarowane lub dziedziczone przez ten typ o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-176">An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name.</span>
          </span>
          <span data-ttu-id="09d47-177">Ta metoda zwraca <see langword="null" /> przypadku nieznalezienia Brak takiego zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-177">This method returns <see langword="null" /> if no such event is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-178">Jeśli `bindingAttr` jest <xref:System.Reflection.BindingFlags>.`IgnoreCase`, w przypadku `name` parametru jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="09d47-178">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.`IgnoreCase`, the case of the `name` parameter is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09d47-179">
            <paramref name="name" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-179">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-180">Zwraca tablicę <see cref="T:System.Reflection.EventInfo" /> obiektów reprezentującą wszystkie zdarzenia publiczne zadeklarowany lub dziedziczone przez bieżący <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-180">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-181">Zwraca tablicę <see cref="T:System.Reflection.EventInfo" /> obiektów reprezentującą wszystkie zdarzenia publiczne zadeklarowany lub dziedziczone przez bieżący <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-181">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-182">Zwraca tablicę typu <see langword="EventInfo" /> zawierający wszystkie zdarzenia zadeklarowane lub dziedziczone przez bieżący typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-182">Returns an array of type <see langword="EventInfo" /> containing all the events declared or inherited by the current type.</span>
          </span>
          <span data-ttu-id="09d47-183">Jeśli nie ma żadnych zdarzeń, zwracana jest pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-183">If there are no events, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-184">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-184">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-185">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-185">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-186">Zwraca zdarzenia określone w <paramref name="bindingAttr" /> zadeklarowany lub dziedziczone przez bieżący <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-186">Returns the events specified in <paramref name="bindingAttr" /> that are declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-187">Tablica typu <see langword="EventInfo" /> zawierający zdarzenia określone w <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-187">An array of type <see langword="EventInfo" /> containing the events specified in <paramref name="bindingAttr" />.</span>
          </span>
          <span data-ttu-id="09d47-188">Jeśli nie ma żadnych zdarzeń, zwracana jest pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-188">If there are no events, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09d47-189">Nazwa pola można znaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-189">The name of the field to find.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-190">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-190">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-191">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-191">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-192">Zwraca <see cref="T:System.Reflection.FieldInfo" /> obiekt reprezentujący pole o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-192">Returns a <see cref="T:System.Reflection.FieldInfo" /> object representing the field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-193">A <see langword="FieldInfo" /> obiekt reprezentujący pole zadeklarowane lub dziedziczone przez to <see langword="TypeDelegator" /> o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-193">A <see langword="FieldInfo" /> object representing the field declared or inherited by this <see langword="TypeDelegator" /> with the specified name.</span>
          </span>
          <span data-ttu-id="09d47-194">Zwraca <see langword="null" /> przypadku nieznalezienia żadne z tych pól.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-194">Returns <see langword="null" /> if no such field is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-195">Użyj `bindingAttr` z <xref:System.Reflection.BindingFlags>. NonPublic do zwrócenia wszystkich publicznych i niepublicznych pól.</span><span class="sxs-lookup"><span data-stu-id="09d47-195">Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields.</span></span> <span data-ttu-id="09d47-196">Użyj `BindingFlags.IgnoreCase` być ignorowana w przypadku pól, ponieważ wyszukiwanie jest domyślnie rozróżnia wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="09d47-196">Use `BindingFlags.IgnoreCase` to ignore the case of the fields, as the search is case-sensitive by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09d47-197">
            <paramref name="name" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-197">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-198">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-198">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-199">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-199">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-200">Zwraca tablicę <see cref="T:System.Reflection.FieldInfo" /> obiektów reprezentujących pola danych zdefiniowana dla typu opakowane przez bieżący <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-200">Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the data fields defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-201">Tablica typu <see langword="FieldInfo" /> zawierające pola zadeklarowane lub dziedziczone przez bieżący <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-201">An array of type <see langword="FieldInfo" /> containing the fields declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
          <span data-ttu-id="09d47-202">Jeśli nie ma żadnych pól dopasowane, zwracana jest pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-202">An empty array is returned if there are no matched fields.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-203"><xref:System.Reflection.TypeDelegator.GetFields%2A> Metoda nie zwraca pola w określonej kolejności, takich jak alfabetycznej lub deklaracji kolejności.</span><span class="sxs-lookup"><span data-stu-id="09d47-203">The <xref:System.Reflection.TypeDelegator.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="09d47-204">Kodu nie zależy od kolejności, w którym pola są zwracane, że kolejność może się różnić.</span><span class="sxs-lookup"><span data-stu-id="09d47-204">Your code must not depend on the order in which fields are returned, because that order can vary.</span></span>  
  
 <span data-ttu-id="09d47-205">Użyj `bindingAttr` z <xref:System.Reflection.BindingFlags>. NonPublic do zwrócenia wszystkich publicznych i niepublicznych pól.</span><span class="sxs-lookup"><span data-stu-id="09d47-205">Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09d47-206">Pełna nazwa interfejsu implementowanego przez bieżącą klasę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-206">The fully qualified name of the interface implemented by the current class.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="09d47-207">
            <see langword="true" /> Jeśli wielkość liter jest ignorowane. w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-207">
              <see langword="true" /> if the case is to be ignored; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-208">Zwraca określony interfejs zaimplementowany przez typ opakowany przez bieżące <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-208">Returns the specified interface implemented by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-209">A <see langword="Type" /> obiekt reprezentujący interfejs implementowany (bezpośrednio lub pośrednio) przez bieżącą klasę z w pełni kwalifikowana nazwa o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-209">A <see langword="Type" /> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.</span>
          </span>
          <span data-ttu-id="09d47-210">Jeśli żaden interfejs, który odpowiada nazwie znaleziony, wartość null jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-210">If no interface that matches name is found, null is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09d47-211">
            <paramref name="name" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-211">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="09d47-212">
            <see cref="T:System.Type" /> Interfejsu do pobrania mapowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-212">The <see cref="T:System.Type" /> of the interface to retrieve a mapping of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-213">Zwraca interfejs mapowania dla typu określonego interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-213">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-214">
            <see cref="T:System.Reflection.InterfaceMapping" /> Obiekt reprezentujący mapowania interfejsu <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-214">An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-215">Mapa interfejs oznacza odwzorowania interfejs do rzeczywistego metod w klasie, który implementuje ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="09d47-215">The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-216">Zwraca wszystkie interfejsy zaimplementowane dla bieżącej klasy i jej klas podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-216">Returns all the interfaces implemented on the current class and its base classes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-217">Tablica typu <see langword="Type" /> zawierający wszystkie interfejsy zaimplementowane dla bieżącej klasy i jej klas podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-217">An array of type <see langword="Type" /> containing all the interfaces implemented on the current class and its base classes.</span>
          </span>
          <span data-ttu-id="09d47-218">Jeśli nie są zdefiniowane, zwracana jest pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-218">If none are defined, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09d47-219">Nazwa elementu członkowskiego do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-219">The name of the member to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="09d47-220">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-220">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-221">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-221">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-222">Typ elementów członkowskich do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-222">The type of members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-223">Zwraca elementy członkowskie (właściwości, metody konstruktorów, pola, zdarzeń i zagnieżdżone typy) określone przez dany <paramref name="name" />, <paramref name="type" />, i <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-223">Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <paramref name="name" />, <paramref name="type" />, and <paramref name="bindingAttr" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-224">Tablica typu <see langword="MemberInfo" /> zawierający wszystkie elementy członkowskie klasy i jej klasa podstawowa spełniające określone kryteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-224">An array of type <see langword="MemberInfo" /> containing all the members of the current class and its base class meeting the specified criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-225">Jeśli `bindingAttr` jest <xref:System.Reflection.BindingFlags>. NonPublic, wszystkie elementy członkowskie będą uznawane za.</span><span class="sxs-lookup"><span data-stu-id="09d47-225">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered.</span></span> <span data-ttu-id="09d47-226">Jeśli nie ma zgodnych wyników, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="09d47-226">If there are no matches, an empty array is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09d47-227">
            <paramref name="name" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-227">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-228">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-228">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-229">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-229">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-230">Zwraca określony przez elementy członkowskie <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-230">Returns members specified by <paramref name="bindingAttr" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-231">Tablica typu <see langword="MemberInfo" /> zawierający wszystkie elementy członkowskie klasy i jej klas podstawowych, które spełniają <paramref name="bindingAttr" /> filtru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-231">An array of type <see langword="MemberInfo" /> containing all the members of the current class and its base classes that meet the <paramref name="bindingAttr" /> filter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-232">Jeśli `bindingAttr` jest <xref:System.Reflection.BindingFlags>. NonPublic, wszystkie elementy członkowskie będą uznawane za.</span><span class="sxs-lookup"><span data-stu-id="09d47-232">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered.</span></span> <span data-ttu-id="09d47-233">Jeśli nie ma zgodnych wyników, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="09d47-233">If there are no matches, an empty array is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09d47-234">Nazwa metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-234">The method name.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-235">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-235">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-236">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-236">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="09d47-237">Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <see langword="MemberInfo" /> obiektów za pomocą odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-237">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="09d47-238">Jeśli <c>integratora</c> jest <see langword="null" />, używany jest domyślny integrator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-238">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="09d47-239">Konwencje wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-239">The calling conventions.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="09d47-240">Tablica typu <see langword="Type" /> zawierającego listę liczba parametrów, kolejność i typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-240">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types.</span>
          </span>
          <span data-ttu-id="09d47-241">Typy nie mogą być <see langword="null" />; Użyj odpowiedniego <see langword="GetMethod" /> metody lub pusta tablica, aby wyszukać metody bez parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-241">Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="09d47-242">Tablica typu <see langword="ParameterModifier" /> mających taką samą długość jak <c>typy</c> tablicy, której elementy reprezentuje atrybuty skojarzone z parametrami metody get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-242">An array of type <see langword="ParameterModifier" /> having the same length as the <c>types</c> array, whose elements represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-243">Wyszukuje określonej metody, której parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania i określonej konwencji wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-243">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-244">A <see langword="MethodInfoInfo" /> obiektu dla metody implementacji odpowiadającego określonym kryteriom lub <see langword="null" /> Jeśli nie można odnaleźć dopasowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-244">A <see langword="MethodInfoInfo" /> object for the implementation method that matches the specified criteria, or <see langword="null" /> if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-245">`callConvention` Parametr wskazuje Konwencja wywoływania dla punktu wejścia.</span><span class="sxs-lookup"><span data-stu-id="09d47-245">The `callConvention` parameter indicates the calling convention for the entry point.</span></span> <span data-ttu-id="09d47-246">Jeśli nie <xref:System.Reflection.CallingConventions> jest określony, domyślnie `CallingConventions` wartość `Standard` jest używany.</span><span class="sxs-lookup"><span data-stu-id="09d47-246">If no <xref:System.Reflection.CallingConventions> is specified, a default `CallingConventions` value of `Standard` is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-247">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-247">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-248">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-248">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-249">Zwraca tablicę <see cref="T:System.Reflection.MethodInfo" /> obiekty reprezentujące określonych metod typu opakowane przez bieżący <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-249">Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing specified methods of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-250">Tablica <see langword="MethodInfo" /> obiekty reprezentujące metody zdefiniowane w tym <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-250">An array of <see langword="MethodInfo" /> objects representing the methods defined on this <see langword="TypeDelegator" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09d47-251">Nazwa typu zagnieżdżonego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-251">The nested type's name.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-252">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-252">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-253">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-253">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-254">Zwraca zagnieżdżony typ określony przez <paramref name="name" /> i <paramref name="bindingAttr" /> zadeklarowany lub dziedziczone przez ten typ reprezentowany przez bieżący <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-254">Returns a nested type specified by <paramref name="name" /> and in <paramref name="bindingAttr" /> that are declared or inherited by the type represented by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-255">A <see langword="Type" /> obiekt reprezentujący typu zagnieżdżonego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-255">A <see langword="Type" /> object representing the nested type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09d47-256">
            <paramref name="name" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-256">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-257">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-257">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-258">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-258">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-259">Zwraca zagnieżdżone typy określone w <paramref name="bindingAttr" /> zadeklarowany lub dziedziczone przez ten typ opakowany przez bieżące <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-259">Returns the nested types specified in <paramref name="bindingAttr" /> that are declared or inherited by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-260">Tablica typu <see langword="Type" /> zawierający typy zagnieżdżone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-260">An array of type <see langword="Type" /> containing the nested types.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-261">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-261">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-262">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-262">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-263">Zwraca tablicę <see cref="T:System.Reflection.PropertyInfo" /> obiekty reprezentujące właściwości typu opakowane przez bieżący <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-263">Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing properties of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-264">Tablica <see langword="PropertyInfo" /> obiekty reprezentujące właściwości zdefiniowane w tym <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-264">An array of <see langword="PropertyInfo" /> objects representing properties defined on this <see langword="TypeDelegator" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09d47-265">Właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-265">The property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="09d47-266">Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-266">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="09d47-267">Wartość jest kombinacją flag bitowych zero lub więcej z <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-267">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="09d47-268">Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <see langword="MemberInfo" /> obiektów za pomocą odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-268">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span>
          </span>
          <span data-ttu-id="09d47-269">Jeśli <c>integratora</c> jest <see langword="null" />, używany jest domyślny integrator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-269">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="09d47-270">Zobacz <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-270">See <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09d47-271">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-271">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="09d47-272">Lista typów parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-272">A list of parameter types.</span>
          </span>
          <span data-ttu-id="09d47-273">Lista reprezentuje numer zamówienia i typy parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-273">The list represents the number, order, and types of the parameters.</span>
          </span>
          <span data-ttu-id="09d47-274">Typów nie może mieć wartości null; użyć odpowiednich <see langword="GetMethod" /> metody lub pusta tablica, aby wyszukać metody bez parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-274">Types cannot be null; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="09d47-275">Tablica taką samą długość jak typy z elementami, które reprezentuje atrybuty skojarzone z parametrami metody get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-275">An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-276">W przypadku przesłonięcia w klasie pochodnej, wyszukuje dla określonej właściwości, którego parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-276">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-277">A <see cref="T:System.Reflection.PropertyInfo" /> obiektu dla właściwości, który jest zgodny z określonymi kryteriami, lub wartość null, jeśli nie można odnaleźć dopasowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-277">A <see cref="T:System.Reflection.PropertyInfo" /> object for the property that matches the specified criteria, or null if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-278">Pobiera identyfikator GUID (unikatowy identyfikator globalny) zaimplementowanym typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-278">Gets the GUID (globally unique identifier) of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-279">IDENTYFIKATOR GUID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-279">A GUID.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-280">Globalnie unikatowy identyfikator (GUID) jest ciągiem 128-bitowego Unikatowy identyfikator używany do identyfikowania klasą lub interfejsem.</span><span class="sxs-lookup"><span data-stu-id="09d47-280">The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.</span></span> <span data-ttu-id="09d47-281">Jest szczególnie przydatne w przypadku współdziałanie Microsoft .NET Framework i modelu COM.</span><span class="sxs-lookup"><span data-stu-id="09d47-281">It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-282">Pobiera wartość wskazującą czy bieżące <see cref="T:System.Type" /> obejmuje lub odwołuje się do innego typu; czy bieżący <see cref="T:System.Type" /> jest tablicą, wskaźnika lub ByRef.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-282">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer or a ByRef.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-283">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest tablicą, wskaźnika lub ByRef; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-283">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer or a ByRef; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09d47-284">Nazwa elementu członkowskiego do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-284">The name of the member to invoke.</span>
          </span>
          <span data-ttu-id="09d47-285">Może to być Konstruktor, metody, właściwości lub pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-285">This may be a constructor, method, property, or field.</span>
          </span>
          <span data-ttu-id="09d47-286">Jeśli ciąg pusty ("") jest przekazywana domyślny element członkowski jest wywoływany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-286">If an empty string ("") is passed, the default member is invoked.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="09d47-287">Atrybut wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-287">The invocation attribute.</span>
          </span>
          <span data-ttu-id="09d47-288">Musi to być jeden z następujących <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-288">This must be one of the following <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="09d47-289">Należy określić atrybut odpowiedniego wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-289">A suitable invocation attribute must be specified.</span>
          </span>
          <span data-ttu-id="09d47-290">Jeśli statyczny element członkowski ma zostać wywołana, <see langword="Static" /> musi zostać ustawiona flaga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-290">If a static member is to be invoked, the <see langword="Static" /> flag must be set.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="09d47-291">Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <see langword="MemberInfo" /> obiektów za pomocą odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-291">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span>
          </span>
          <span data-ttu-id="09d47-292">Jeśli <c>integratora</c> jest <see langword="null" />, używany jest domyślny integrator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-292">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="09d47-293">Zobacz <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-293">See <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="09d47-294">Obiekt do wywołania określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-294">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="09d47-295">Tablica typu <see langword="Object" /> zawiera liczby, kolejność i typy parametrów elementu członkowskiego, do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-295">An array of type <see langword="Object" /> that contains the number, order, and type of the parameters of the member to be invoked.</span>
          </span>
          <span data-ttu-id="09d47-296">Jeśli <c>argumentów</c> zawiera niezainicjowaną <see langword="Object" />, będzie traktowane jako puste, które z domyślnego integratora można poszerzyć 0, 0,0 lub ciąg.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-296">If <c>args</c> contains an uninitialized <see langword="Object" />, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="09d47-297">Tablica typu <see langword="ParameterModifer" /> czyli taką samą długość jak <c>argumentów</c>, z elementami, które reprezentuje atrybuty skojarzone z argumentów elementu członkowskiego do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-297">An array of type <see langword="ParameterModifer" /> that is the same length as <c>args</c>, with elements that represent the attributes associated with the arguments of the member to be invoked.</span>
          </span>
          <span data-ttu-id="09d47-298">Parametr ma atrybuty skojarzone z nim w podpisie elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-298">A parameter has attributes associated with it in the member's signature.</span>
          </span>
          <span data-ttu-id="09d47-299">Dla elementu ByRef, użyj <see langword="ParameterModifer.ByRef" />i none, użyj <see langword="ParameterModifer.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-299">For ByRef, use <see langword="ParameterModifer.ByRef" />, and for none, use <see langword="ParameterModifer.None" />.</span>
          </span>
          <span data-ttu-id="09d47-300">Domyślny integrator dokładne dopasowywanie na te.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-300">The default binder does exact matching on these.</span>
          </span>
          <span data-ttu-id="09d47-301">Atrybuty, takie jak <see langword="In" /> i <see langword="InOut" /> nie są używane w powiązaniu i można je wyświetlać za pomocą <see langword="ParameterInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-301">Attributes such as <see langword="In" /> and <see langword="InOut" /> are not used in binding, and can be viewed using <see langword="ParameterInfo" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="09d47-302">Wystąpienie <see langword="CultureInfo" /> używane do sterowania koercja typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-302">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="09d47-303">Jest to konieczne, na przykład można przekonwertować na ciąg przedstawiający 1000 do <see langword="Double" /> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-303">This is necessary, for example, to convert a string that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</span>
          </span>
          <span data-ttu-id="09d47-304">Jeśli <c>kultury</c> jest <see langword="null" />, <see langword="CultureInfo" /> dla bieżącego wątku <see langword="CultureInfo" /> jest używany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-304">If <c>culture</c> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread's <see langword="CultureInfo" /> is used.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="09d47-305">Tablica typu <see langword="String" /> zawierający nazwy parametrów, które są zgodne, począwszy od elementu zero, <c>argumentów</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-305">An array of type <see langword="String" /> containing parameter names that match up, starting at element zero, with the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="09d47-306">W tablicy musi być nie luk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-306">There must be no holes in the array.</span>
          </span>
          <span data-ttu-id="09d47-307">Jeśli <c>argumentów</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-307">If <c>args</c>.</span>
          </span>
          <span data-ttu-id="09d47-308">
            <see langword="Length" /> jest większa niż <c>namedParameters</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-308">
              <see langword="Length" /> is greater than <c>namedParameters</c>.</span>
          </span>
          <span data-ttu-id="09d47-309">
            <see langword="Length" />, pozostałe parametry są wypełnione w kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-309">
              <see langword="Length" />, the remaining parameters are filled in order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-310">Wywołuje określony element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-310">Invokes the specified member.</span>
          </span>
          <span data-ttu-id="09d47-311">Metodę, która ma zostać wywołana musi być dostępna i udostępnia specyficzny dopasowania z określona lista argumentów, w obszarze ograniczenia określonych atrybutów integratora i wywołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-311">The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-312">
            <see langword="Object" /> Reprezentujący wartość zwracaną wywołany element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-312">An <see langword="Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-313">Metoda zostanie wywołany, jeśli są spełnione oba poniższe warunki:</span><span class="sxs-lookup"><span data-stu-id="09d47-313">A method will be invoked if both the following conditions are true:</span></span>  
  
-   <span data-ttu-id="09d47-314">Liczba parametrów w deklaracji metody jest równa liczbie argumentów określona lista argumentów (chyba że argumenty domyślne są zdefiniowane w elemencie członkowskim).</span><span class="sxs-lookup"><span data-stu-id="09d47-314">The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).</span></span>  
  
-   <span data-ttu-id="09d47-315">Typy argumentów każdy może zostać przekonwertowany przez obiekt wiążący z typem parametru.</span><span class="sxs-lookup"><span data-stu-id="09d47-315">The type of each arguments can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="09d47-316">Obiekt wiążący znajdzie zgodnego metody.</span><span class="sxs-lookup"><span data-stu-id="09d47-316">The binder will find all the matching methods.</span></span> <span data-ttu-id="09d47-317">Tych metod znajdują się oparte na typie powiązania żądanie (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`i tak dalej).</span><span class="sxs-lookup"><span data-stu-id="09d47-317">These methods are found based upon the type of binding requested (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, and so on).</span></span> <span data-ttu-id="09d47-318">Zbiór metod są filtrowane według nazwy, liczba argumentów i zestaw Modyfikatory wyszukiwania zdefiniowane w obiekt wiążący.</span><span class="sxs-lookup"><span data-stu-id="09d47-318">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="09d47-319">Po wybraniu metody, zostanie wywołany.</span><span class="sxs-lookup"><span data-stu-id="09d47-319">After the method is selected, it will be invoked.</span></span> <span data-ttu-id="09d47-320">Ułatwienia dostępu, zostanie sprawdzony w tym momencie.</span><span class="sxs-lookup"><span data-stu-id="09d47-320">Accessibility is checked at that point.</span></span> <span data-ttu-id="09d47-321">Wyszukiwanie może kontrolować, które zestaw metod są przeszukiwane zależności atrybutu dostępności skojarzonego z metodą.</span><span class="sxs-lookup"><span data-stu-id="09d47-321">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="09d47-322"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Metoda jest odpowiedzialna za wybranie wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="09d47-322">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="09d47-323">Domyślnego integratora wybierze najbardziej zgodne.</span><span class="sxs-lookup"><span data-stu-id="09d47-323">The default binder selects the most specific match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09d47-324">Ograniczenia dostępu są ignorowane w przypadku całkowicie zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="09d47-324">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="09d47-325">Oznacza to konstruktory prywatne, pola, metody i właściwości są dostępne i wywoływane przy użyciu odbicia, jeśli kod jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="09d47-325">That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="09d47-326">Obecnie `InvokeMember` wykonuje semantyki odbicia Microsoft .NET Framework dla każdego typu obiektu.</span><span class="sxs-lookup"><span data-stu-id="09d47-326">Currently, `InvokeMember` performs the Microsoft .NET Framework reflection semantics for every type of object.</span></span>  
  
 <span data-ttu-id="09d47-327">Jeśli element określony przez nazwę jest tablicą i `BindingFlags.GetField` flaga jest ustawiona na `invokeAttr`, `args` tablicy określa elementy, których wartości, które mają zostać zwrócone.</span><span class="sxs-lookup"><span data-stu-id="09d47-327">If the member specified by name is an array and the `BindingFlags.GetField` flag is set on `invokeAttr`, the `args` array specifies the elements whose values are to be returned.</span></span> <span data-ttu-id="09d47-328">Na przykład następujące wywołanie za pośrednictwem `Type` obiektu `t` zwraca wartość pierwszego elementu tablicy ciągów MyArray, który jest elementem członkowskim obiektu wywołującego:</span><span class="sxs-lookup"><span data-stu-id="09d47-328">For example, the following call through `Type` object `t` returns the value of the first element of the string array MyArray, which is a member of the calling object:</span></span>  
  
 `String ret = (String) t.InvokeMember ("MyArray", BindingFlags.GetField, null, this, new Variant[]{0});`  
  
 <span data-ttu-id="09d47-329">Można użyć `InvokeMember` można ustawić co najmniej jeden element w tablicy elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="09d47-329">You can use `InvokeMember` to set one or more elements of a member array.</span></span> <span data-ttu-id="09d47-330">Wszystkie elementy są ustawiane na tę samą wartość.</span><span class="sxs-lookup"><span data-stu-id="09d47-330">All elements are set to the same value.</span></span> <span data-ttu-id="09d47-331">`args` Tablicy musi być sformatowany w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="09d47-331">The `args` array must be formatted as follows:</span></span>  
  
```  
{index1,  
    index2,, value}  
```  
  
 <span data-ttu-id="09d47-332">Na przykład aby ustawić pierwszy członek MyArray z poprzedniego przykładu, ma następującą składnię:</span><span class="sxs-lookup"><span data-stu-id="09d47-332">For example, to set the first member of MyArray from the previous example, the syntax is as follows:</span></span>  
  
```  
t.InvokeMember ("MyArray", BindingFlags.SetField, null, this, new  
    Variant[]{0,"Updated"});  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-333">Zwraca wartość wskazującą, czy <see cref="T:System.Type" /> jest tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-333">Returns a value that indicates whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-334">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest tablicą; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-334">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo">
          <span data-ttu-id="09d47-335">Typ do sprawdzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-335">The type to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-336">Zwraca wartość wskazującą, czy określony typ można przypisać do tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-336">Returns a value that indicates whether the specified type can be assigned to this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-337">
            <see langword="true" /> Jeśli określony typ można przypisać do tego typu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-337">
              <see langword="true" /> if the specified type can be assigned to this type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-338">Zwraca wartość wskazującą, czy <see cref="T:System.Type" /> jest przekazywana przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-338">Returns a value that indicates whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-339">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest przekazywana przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-339">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-340">Zwraca wartość wskazującą, czy <see cref="T:System.Type" /> jest obiektem COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-340">Returns a value that indicates whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-341">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> obiektu modelu COM; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-341">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-342">Pobiera wartość wskazującą, czy ten obiekt reprezentuje skonstruowanego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-342">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-343">
            <see langword="true" /> Jeśli ten obiekt reprezentuje skonstruowanego typu ogólnego; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-343">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="09d47-344">Określa, czy przeszukać łańcuch dziedziczenia tego typu w celu znalezienia atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-344">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="09d47-345">Tablicę identyfikowanych według typu atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-345">An array of custom attributes identified by type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09d47-346">Wskazuje, czy oznaczona atrybutem niestandardowym <paramref name="attributeType" /> jest zdefiniowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-346">Indicates whether a custom attribute identified by <paramref name="attributeType" /> is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-347">
            <see langword="true" /> Jeśli zidentyfikowane przez atrybut niestandardowy <paramref name="attributeType" /> jest zdefiniowana; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-347">
              <see langword="true" /> if a custom attribute identified by <paramref name="attributeType" /> is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09d47-348">
            <paramref name="attributeType" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-348">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException">
          <span data-ttu-id="09d47-349">Nie można załadować typu atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-349">The custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-350">Zwraca wartość wskazującą, czy <see cref="T:System.Type" /> wskaźnik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-350">Returns a value that indicates whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-351">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> wskaźnik; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-351">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-352">Zwraca wartość wskazującą, czy <see cref="T:System.Type" /> jest jednym z typów pierwotnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-352">Returns a value that indicates whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-353">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest jednym z typów pierwotnych; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-353">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09d47-354">Zwraca wartość wskazującą, czy typ jest typem wartości; oznacza to, że nie klasą lub interfejsem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-354">Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09d47-355">
            <see langword="true" /> Jeśli typem jest typ wartości; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-355">
              <see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataToken">
      <MemberSignature Language="C#" Value="public override int MetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.MetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MetadataToken { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-356">Pobiera wartość, która identyfikuje tej jednostki w metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-356">Gets a value that identifies this entity in metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-357">Wartość, która w połączeniu z modułem, unikatowo identyfikuje tej jednostki w metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-357">A value which, in combination with the module, uniquely identifies this entity in metadata.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-358">Tokeny przy użyciu tej właściwości mogą być przekazywane do niezarządzanego odbicia interfejsu API.</span><span class="sxs-lookup"><span data-stu-id="09d47-358">The tokens obtained using this property can be passed to the unmanaged reflection API.</span></span> <span data-ttu-id="09d47-359">Aby uzyskać więcej informacji, zobacz [niezarządzanego API odbicia](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span><span class="sxs-lookup"><span data-stu-id="09d47-359">For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-360">Pobiera moduł, który zawiera typ implementowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-360">Gets the module that contains the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-361">A <see cref="T:System.Reflection.Module" /> reprezentujący modułu implementowany typ obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-361">A <see cref="T:System.Reflection.Module" /> object representing the module of the implemented type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-362">Moduł jest obciążana jednostki, która może zawierać deklaracje typu i implementacji.</span><span class="sxs-lookup"><span data-stu-id="09d47-362">A module is a loadable unit that can contain type declarations and implementations.</span></span> <span data-ttu-id="09d47-363">Moduły zawiera wystarczających informacji do włączenia środowiska CLR zlokalizować wszystkie bity implementacji, gdy ładowany jest moduł.</span><span class="sxs-lookup"><span data-stu-id="09d47-363">Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-364">Pobiera nazwę typu zaimplementowanym ze ścieżką usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-364">Gets the name of the implemented type, with the path removed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-365">A <see langword="String" /> zawierający typ innych niż nazwa kwalifikowana na poziomie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-365">A <see langword="String" /> containing the type's non-qualified name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-366">Ciąg zawierający nazwę bieżącego `TypeDelegator`.</span><span class="sxs-lookup"><span data-stu-id="09d47-366">A string containing the name of the current `TypeDelegator`.</span></span> <span data-ttu-id="09d47-367">Zwracany jest tylko nazwę proste, a nie nazwę FQDN.</span><span class="sxs-lookup"><span data-stu-id="09d47-367">Only the simple name, not the fully qualified name, is returned.</span></span> <span data-ttu-id="09d47-368">Aby uzyskać nazwę i ścieżkę, należy użyć <xref:System.Reflection.TypeDelegator.FullName%2A>.</span><span class="sxs-lookup"><span data-stu-id="09d47-368">To get the name and the path, use <xref:System.Reflection.TypeDelegator.FullName%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-369">Pobiera obszar nazw typu zaimplementowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-369">Gets the namespace of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-370">A <see langword="String" /> zawierający typ przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-370">A <see langword="String" /> containing the type's namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-371">Ta właściwość pobiera ciąg zawierający przestrzeń nazw bieżącego `TypeDelegator`.</span><span class="sxs-lookup"><span data-stu-id="09d47-371">This property gets a string containing the namespace of the current `TypeDelegator`.</span></span> <span data-ttu-id="09d47-372">Na przykład jeśli `TypeDelegator` jest <xref:System.Reflection.TypeFilter>, zwracane przestrzeń nazw jest <xref:System.Reflection>.</span><span class="sxs-lookup"><span data-stu-id="09d47-372">For example, if the `TypeDelegator` is <xref:System.Reflection.TypeFilter>, the returned namespace is <xref:System.Reflection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-373">Pobiera dojścia do reprezentacji wewnętrznej metadanych implementowany typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-373">Gets a handle to the internal metadata representation of an implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-374">A <see langword="RuntimeTypeHandle" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-374">A <see langword="RuntimeTypeHandle" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09d47-375">Dojście typu jest unikatowa wartość skojarzona z każdego typu.</span><span class="sxs-lookup"><span data-stu-id="09d47-375">A type handle is a unique integer value associated with each type.</span></span> <span data-ttu-id="09d47-376">Dojście jest unikatowa w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="09d47-376">The handle is unique during the runtime.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.RuntimeTypeHandle" />
      </Docs>
    </Member>
    <Member MemberName="typeImpl">
      <MemberSignature Language="C#" Value="protected Type typeImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Type typeImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.TypeDelegator.typeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected typeImpl As Type " />
      <MemberSignature Language="C++ CLI" Value="protected: Type ^ typeImpl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-377">Wartość określającą typu informacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-377">A value indicating type information.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09d47-378">Pobiera odpowiadającego <see cref="T:System.Type" /> reprezentujący typ implementowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-378">Gets the underlying <see cref="T:System.Type" /> that represents the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09d47-379">Typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="09d47-379">The underlying type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>