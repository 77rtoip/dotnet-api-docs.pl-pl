<Type Name="Binder" FullName="System.Reflection.Binder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="11240fb9c050851d65c9500083ac17afd2802967" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69067782" /></Metadata><TypeSignature Language="C#" Value="public abstract class Binder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Binder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Binder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Binder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binder abstract" />
  <TypeSignature Language="F#" Value="type Binder = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wybiera element członkowski z listy kandydatów i wykonuje konwersję typu z rzeczywistego typu argumentu na typ argumentu formalnego.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>klasy są używane przez metody takie jak, które wybierają z zestawu możliwych członków do wykonania, na podstawie zestawu typów parametrów i wartości argumentów; <xref:System.Reflection.Binder> <xref:System.Type.GetMethod%2A?displayProperty=nameWithType>, który wybiera metodę opartą na typach parametrów, i tak dalej.  
  
 Domyślna implementacja <xref:System.Reflection.Binder> klasy jest dostarczana <xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType> przez właściwość.  
  
   
  
## Examples  
 Poniższy przykład implementuje i demonstruje wszystkie elementy członkowskie `Binder` klasy. Metoda `CanConvertFrom` prywatna znajduje zgodne typy dla danego typu.  
  
 [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]
 [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]
 [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>W przypadku dziedziczenia <see cref="T:System.Reflection.Binder" />z, należy zastąpić następujące elementy członkowskie: <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, <see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" /> <see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> <see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />,,, i <see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />.</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Binder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Binder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Reflection.Binder" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest wywoływany przez konstruktory klas pochodnych w celu zainicjowania stanu w tym typie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindToField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo BindToField(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.FieldInfo[] match, object value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToField (bindingAttr As BindingFlags, match As FieldInfo(), value As Object, culture As CultureInfo) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ BindToField(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ match, System::Object ^ value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member BindToField : System.Reflection.BindingFlags * System.Reflection.FieldInfo[] * obj * System.Globalization.CultureInfo -&gt; System.Reflection.FieldInfo" Usage="binder.BindToField (bindingAttr, match, value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.FieldInfo[]" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</param>
        <param name="match">Zestaw pól, które są kandydatami do dopasowania. Na przykład, gdy <see cref="T:System.Reflection.Binder" /> obiekt jest używany przez, ten parametr określa zestaw pól, które zostały określone przez <see cref="Overload:System.Type.InvokeMember" />odbicie jako możliwe dopasowania, zwykle ponieważ mają poprawną nazwę elementu członkowskiego. Domyślna implementacja podana przez <see cref="P:System.Type.DefaultBinder" /> zmiany kolejności tej tablicy.</param>
        <param name="value">Wartość pola używana do lokalizowania pasującego pola.</param>
        <param name="culture">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> , które jest używane do kontrolowania przymusu typów danych, w implementacjach spinacza, które obsługują typy. Jeśli <paramref name="culture" /> ma <see langword="null" />wartość ,<see cref="T:System.Globalization.CultureInfo" /> jest używany dla bieżącego wątku.  
  
Zwróć uwagę na przykład, jeśli implementacja spinacza pozwala przekształcić wartości ciągu na typy liczbowe, ten parametr jest niezbędny do konwersji <see langword="String" /> a, która reprezentuje 1000 <see langword="Double" /> do wartości, ponieważ 1000 jest reprezentowane inaczej przez różne kultury. Domyślny spinacz nie wykonuje takich zarzutów ciągu.</param>
        <summary>Wybiera pole z danego zestawu pól na podstawie określonych kryteriów.</summary>
        <returns>Pasujące pole.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `bindingAttr` nie obejmuje <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>, domyślna implementacja spinacza zapewniana przez <xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType> program po prostu zwraca pierwszy element `match`z. Nie wybrano żadnych operacji.  
  
 Ta metoda kontroluje powiązanie dostarczone przez <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Dla domyślnego spinacza <paramref name="bindingAttr" /> zawiera <see cref="F:System.Reflection.BindingFlags.SetField" />i <paramref name="match" /> zawiera <paramref name="value" />wiele pól, które są równie dobre. Na przykład <paramref name="value" /> zawiera obiekt <c>MyClass</c> , który implementuje interfejs <c>IMyClass</c> <paramref name="match" /> i zawiera pole typu <c>MyClass</c> i pole typu <c>IMyClass</c>.</exception>
        <exception cref="T:System.MissingFieldException">Dla domyślnego spinacza <paramref name="bindingAttr" /> zawiera <see cref="F:System.Reflection.BindingFlags.SetField" />i <paramref name="match" /> nie zawiera pól, które mogą być akceptowane <paramref name="value" />.</exception>
        <exception cref="T:System.NullReferenceException">Dla domyślnego spinacza <paramref name="bindingAttr" /> zawiera <see cref="F:System.Reflection.BindingFlags.SetField" />, i <paramref name="match" /> jest <see langword="null" /> lub pustą tablicę.  
  
—lub— 
 <paramref name="bindingAttr" />obejmuje <see cref="F:System.Reflection.BindingFlags.SetField" />, i <paramref name="value" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
      </Docs>
    </Member>
    <Member MemberName="BindToMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase BindToMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, object[]&amp; args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] names, [out] object&amp; state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToMethod (bindingAttr As BindingFlags, match As MethodBase(), ByRef args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, names As String(), ByRef state As Object) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ BindToMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;System::Object ^&gt; ^ % args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ names, [Runtime::InteropServices::Out] System::Object ^ % state);" />
      <MemberSignature Language="F#" Value="abstract member BindToMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] *  * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] *  -&gt; System.Reflection.MethodBase" Usage="binder.BindToMethod (bindingAttr, match, args, modifiers, culture, names, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="state" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</param>
        <param name="match">Zestaw metod, które są kandydatami do dopasowania. Na przykład, gdy <see cref="T:System.Reflection.Binder" /> obiekt jest używany przez <see cref="Overload:System.Type.InvokeMember" />, ten parametr określa zestaw metod, które odbicie ustalił, że jest to możliwe dopasowanie, zwykle ponieważ ma poprawną nazwę elementu członkowskiego. Domyślna implementacja podana przez <see cref="P:System.Type.DefaultBinder" /> zmiany kolejności tej tablicy.</param>
        <param name="args">Przekazane argumenty. Spinacz może zmienić kolejność argumentów w tej tablicy; na przykład domyślny spinacz zmienia kolejność argumentów, jeśli <paramref name="names" /> parametr jest używany do określenia zamówienia innego niż kolejność pozycyjny. Jeśli zaimplementowano typy argumentów implementacji spinacza, również typy i wartości argumentów można zmienić.</param>
        <param name="modifiers">Tablica modyfikatorów parametrów, które umożliwiają powiązanie do pracy z sygnaturami parametrów, w których typy zostały zmodyfikowane. Domyślna implementacja spinacza nie używa tego parametru.</param>
        <param name="culture">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> , które jest używane do kontrolowania przymusu typów danych, w implementacjach spinacza, które obsługują typy. Jeśli <paramref name="culture" /> ma <see langword="null" />wartość ,<see cref="T:System.Globalization.CultureInfo" /> jest używany dla bieżącego wątku.  
  
Zwróć uwagę na przykład, jeśli implementacja spinacza pozwala przekształcić wartości ciągu na typy liczbowe, ten parametr jest niezbędny do konwersji <see langword="String" /> a, która reprezentuje 1000 <see langword="Double" /> do wartości, ponieważ 1000 jest reprezentowane inaczej przez różne kultury. Domyślny spinacz nie wykonuje takich zarzutów ciągu.</param>
        <param name="names">Nazwy parametrów, jeśli nazwy parametrów mają być brane pod uwagę podczas dopasowywania lub <see langword="null" /> Jeśli argumenty mają być traktowane jako czysto pozycyjne. Na przykład nazwy parametrów muszą być używane, jeśli argumenty nie są dostarczane w kolejności pozycjonowania.</param>
        <param name="state">Po powrocie <paramref name="state" /> metody zawiera obiekt dostarczony przez spinacz, który śledzi zmianę kolejności argumentów. Spinacz tworzy ten obiekt, a spinacz jest jedynym konsumentem tego obiektu. Jeśli <paramref name="state" /> <paramref name="state" /> <see langword="ref" /> <paramref name="args" /> nie jest<see langword="null" /> <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> zwracana, należy przekazać do metody, jeśli chcesz przywrócić pierwotną kolejność, na przykład, aby można było pobrać wartości <see langword="BindToMethod" /> parametry (<see langword="ByRef" /> parametry w Visual Basic).</param>
        <summary>Wybiera metodę do wywołania z danego zestawu metod na podstawie podanych argumentów.</summary>
        <returns>Metoda dopasowywania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny spinacz uwzględnia oba parametry, które mają wartości i `params` tablice (`ParamArray` tablice w Visual Basic). W ten sposób można znaleźć dopasowanie w przypadkach, gdy `args` i `match` nie zawierają tej samej liczby elementów.  
  
 Spinacz umożliwia klientowi mapowanie tablicy argumentów z powrotem do oryginalnej postaci, jeśli tablica argumentów była manipulowana przez <xref:System.Reflection.Binder.BindToMethod%2A>. Ta możliwość ponownego mapowania umożliwia uzyskanie argumentów odwołań, gdy takie argumenty są obecne. Gdy przekazujesz argumenty według nazwy, spinacz zmienia kolejność tablicy argumentów. Parametr śledzi zmianę kolejności argumentów, dzięki czemu <xref:System.Reflection.Binder.ReorderArgumentArray%2A> Metoda spinacza może zmienić kolejność tablicy argumentów na jej pierwotny formularz. `state`  
  
 Metoda jest używana <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> przez metodę. <xref:System.Reflection.Binder.BindToMethod%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Dla domyślnego spinacza, <paramref name="match" /> zawiera wiele metod, które są równie dobre dopasowania <paramref name="args" />dla. Na przykład <paramref name="args" /> zawiera obiekt <c>MyClass</c> , który implementuje interfejs <c>IMyClass</c> <paramref name="match" /> i zawiera metodę, która pobiera <c>MyClass</c> i metodę, która pobiera <c>IMyClass</c>.</exception>
        <exception cref="T:System.MissingMethodException">Dla domyślnego spinacza <paramref name="match" /> nie zawiera metod, które mogą akceptować argumenty dostarczone w <paramref name="args" />.</exception>
        <exception cref="T:System.ArgumentException">Dla domyślnego spinacza <paramref name="match" /> jest <see langword="null" /> lub pusta tablica.</exception>
        <altmember cref="T:System.Reflection.MethodBase" />
      </Docs>
    </Member>
    <Member MemberName="CanChangeType">
      <MemberSignature Language="C#" Value="public virtual bool CanChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool&#xA;override this.CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool" Usage="binder.CanChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="xamarinios-10.8" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="xamarinios-10.8" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="type">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member ChangeType : obj * Type * System.Globalization.CultureInfo -&gt; obj" Usage="binder.ChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który ma zostać zmieniony na <see langword="Type" />nowy.</param>
        <param name="type">Nowy <see langword="Type" /> .<paramref name="value" /></param>
        <param name="culture">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> , które służy do kontrolowania przekształcenia typów danych. Jeśli <paramref name="culture" /> ma <see langword="null" />wartość ,<see cref="T:System.Globalization.CultureInfo" /> jest używany dla bieżącego wątku.  
  
Uwaga na przykład ten parametr jest niezbędny do konwersji <see langword="String" /> a, która reprezentuje 1000 <see langword="Double" /> do wartości, ponieważ 1000 jest reprezentowana inaczej przez różne kultury.</param>
        <summary>Zmienia typ danego <see langword="Object" /> <see langword="Type" />elementu.</summary>
        <returns>Obiekt, który zawiera daną wartość jako nowy typ.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Model odbicia reguł ułatwień dostępu dla wspólnego systemu typu. Na przykład jeśli obiekt wywołujący znajduje się w tym samym zestawie, obiekt wywołujący nie potrzebuje specjalnych uprawnień dla wewnętrznych elementów członkowskich. W przeciwnym razie obiekt wywołujący musi być wymagany <xref:System.Security.Permissions.ReflectionPermission>. Jest to zgodne z wyszukiwaniem elementów członkowskich chronionych, prywatnych i tak dalej.  
  
 Ogólna zasada polega na tym `ChangeType` , że należy wykonać tylko rozszerzanie przymusów, które nigdy nie tracą danych. Przykładem podwyższenia poziomu jest przekształcenie wartości z 32-bitowej ze znakiem liczby całkowitej na wartość będącą liczbą całkowitą ze znakiem 64-bitową. Różni się to od wąskiego przekształcenia, które może spowodować utratę danych. Przykładem wąskiego przekształcenia jest przekształcenie 64-bitowej podpisanej liczby całkowitej na 32-bitową liczbę całkowitą ze znakiem.  
  
 W poniższej tabeli wymieniono przekształcenia wykonywane `ChangeType`domyślnie.  
  
|Typ źródła|Typ docelowy|  
|-----------------|-----------------|  
|Dowolny typ|Jego typ podstawowy.|  
|Dowolny typ|Interfejs, który implementuje.|  
|Char|UInt16, UInt32, Int32, UInt64, Int64, Single, Double|  
|Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|  
|SByte|Int16, Int32, Int64, Single, Double|  
|UInt16|UInt32, Int32, UInt64, Int64, Single, Double|  
|Int16|Int32, Int64, Single, Double|  
|UInt32|UInt64, Int64, Single, Double|  
|Int32|Int64, pojedyncze, podwójne|  
|UInt64|Pojedyncza, Podwójna|  
|Int64|Pojedyncza, Podwójna|  
|Single|Double|  
|Brak odwołania|Przez odwołanie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderArgumentArray">
      <MemberSignature Language="C#" Value="public abstract void ReorderArgumentArray (ref object[] args, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderArgumentArray(object[]&amp; args, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ReorderArgumentArray (ByRef args As Object(), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ReorderArgumentArray(cli::array &lt;System::Object ^&gt; ^ % args, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member ReorderArgumentArray :  * obj -&gt; unit" Usage="binder.ReorderArgumentArray (args, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="args">Rzeczywiste argumenty, które są przekazane. Zarówno typy, jak i wartości argumentów można zmienić.</param>
        <param name="state">Obiekt dostarczony przez spinacz, który śledzi zmianę kolejności argumentów.</param>
        <summary>Po powrocie <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />z programu Program <paramref name="args" /> przywraca argument do wartości, z której był on <see langword="BindToMethod" />, z którego pochodzi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Środowisko uruchomieniowe języka wspólnego wywołuje tę metodę `state` , jeśli `null` nie jest po Return `BindToMethod`z.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase SelectMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectMethod (bindingAttr As BindingFlags, match As MethodBase(), types As Type(), modifiers As ParameterModifier()) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ SelectMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodBase" Usage="binder.SelectMethod (bindingAttr, match, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</param>
        <param name="match">Zestaw metod, które są kandydatami do dopasowania. Na przykład, gdy <see cref="T:System.Reflection.Binder" /> obiekt jest używany przez <see cref="Overload:System.Type.InvokeMember" />, ten parametr określa zestaw metod, które odbicie ustalił, że jest to możliwe dopasowanie, zwykle ponieważ ma poprawną nazwę elementu członkowskiego. Domyślna implementacja podana przez <see cref="P:System.Type.DefaultBinder" /> zmiany kolejności tej tablicy.</param>
        <param name="types">Typy parametrów używane do lokalizowania zgodnej metody.</param>
        <param name="modifiers">Tablica modyfikatorów parametrów, które umożliwiają powiązanie do pracy z sygnaturami parametrów, w których typy zostały zmodyfikowane.</param>
        <summary>Wybiera metodę z danego zestawu metod w oparciu o typ argumentu.</summary>
        <returns>Metoda dopasowywania, jeśli została znaleziona; w przeciwnym razie. <see langword="null" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna zostać `null` zwrócona, jeśli żadna metoda nie pasuje do kryteriów. Ta metoda kontroluje wybór dostarczony przez `GetConstructor` metody i `GetMethod` w `Type`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Dla domyślnego spinacza, <paramref name="match" /> zawiera wiele metod, które są równie dobre dopasowania dla typów parametrów opisanych przez <paramref name="types" />. Na <paramref name="types" /> przykład tablica w <see cref="T:System.Type" /> zawiera obiekt dla <c>MyClass</c> i tablica <paramref name="match" /> w zawiera metodę, która przyjmuje klasę bazową <c>MyClass</c> i metodę, która pobiera interfejs, który jest implementowany przez <c>MyClass</c> .</exception>
        <exception cref="T:System.ArgumentException">Dla domyślnego spinacza <paramref name="match" /> jest <see langword="null" /> lub pusta tablica.  
  
—lub— 
Element <paramref name="types" /> pochodzący z <see cref="T:System.Type" />, ale nie jest typu <see langword="RuntimeType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectProperty">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo SelectProperty(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.PropertyInfo[] match, class System.Type returnType, class System.Type[] indexes, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectProperty (bindingAttr As BindingFlags, match As PropertyInfo(), returnType As Type, indexes As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::PropertyInfo ^ SelectProperty(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ match, Type ^ returnType, cli::array &lt;Type ^&gt; ^ indexes, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectProperty : System.Reflection.BindingFlags * System.Reflection.PropertyInfo[] * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="binder.SelectProperty (bindingAttr, match, returnType, indexes, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.PropertyInfo[]" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="indexes" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</param>
        <param name="match">Zestaw właściwości, które są kandydatami do dopasowania. Na przykład, gdy <see cref="T:System.Reflection.Binder" /> obiekt jest używany przez, ten parametr określa zestaw właściwości, które zostały określone przez <see cref="Overload:System.Type.InvokeMember" />odbicie jako możliwe dopasowania, zwykle ponieważ mają poprawną nazwę elementu członkowskiego. Domyślna implementacja podana przez <see cref="P:System.Type.DefaultBinder" /> zmiany kolejności tej tablicy.</param>
        <param name="returnType">Wartość zwracana, która musi być zgodna z właściwością.</param>
        <param name="indexes">Typy indeksów właściwości, które mają być wyszukiwane. Używany do właściwości indeksu, takich jak indeksator dla klasy.</param>
        <param name="modifiers">Tablica modyfikatorów parametrów, które umożliwiają powiązanie do pracy z sygnaturami parametrów, w których typy zostały zmodyfikowane.</param>
        <summary>Wybiera właściwość z danego zestawu właściwości na podstawie określonych kryteriów.</summary>
        <returns>Pasująca właściwość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kontroluje wybór dostarczony przez `GetProperty` metodę w. `Type`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Dla domyślnego spinacza, <paramref name="match" /> zawiera wiele właściwości, które są równie dobre dopasowania <paramref name="returnType" /> dla <paramref name="indexes" />i.</exception>
        <exception cref="T:System.ArgumentException">Dla domyślnego spinacza <paramref name="match" /> jest <see langword="null" /> lub pusta tablica.</exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
