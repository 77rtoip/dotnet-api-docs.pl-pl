<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Binder.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f869abb652c1fe266ac609209e86d2fa7f433b6b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f869abb652c1fe266ac609209e86d2fa7f433b6b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Binder">
          <source>Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.</source>
          <target state="translated">Wybrany element członkowski z listy kandydatów i wykonuje konwersji typu z typu rzeczywisty argument do formalnego argumentu typu.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>Implementations of the <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> class are used by methods such as <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <ph id="ph3">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph>, which selects a method based on parameter types; and so on.</source>
          <target state="translated">Implementacje <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> klasy są używane przez metody, takie jak <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph>, który wybiera zestaw elementów członkowskich możliwe do wykonania, na podstawie zestawu typy parametrów i wartości argumentów; <ph id="ph3">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph>, który wybiera metody, w zależności od typów parametrów; i tak dalej.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>A default implementation of the <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> class is provided by the <ph id="ph2">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Domyślna implementacja elementu <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> klasy są dostarczane przez <ph id="ph2">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>The following example implements and demonstrates all members of the <ph id="ph1">`Binder`</ph> class.</source>
          <target state="translated">W poniższym przykładzie implementuje i pokazuje wszystkie elementy członkowskie <ph id="ph1">`Binder`</ph> klasy.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>The private method <ph id="ph1">`CanConvertFrom`</ph> finds compatible types for a given type.</source>
          <target state="translated">Metoda prywatna <ph id="ph1">`CanConvertFrom`</ph> znajduje niezgodne typy dla danego typu.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Binder">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph>, and <ph id="ph7">&lt;see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" /&gt;</ph>.</source>
          <target state="translated">Przy dziedziczeniu z <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>, konieczne jest przesłonięcie następujących członków: <ph id="ph2">&lt;see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph>, i <ph id="ph7">&lt;see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.#ctor">
          <source>This constructor is called by the constructors of derived classes, to initialize state in this type.</source>
          <target state="translated">Ten konstruktor jest wywoływany przez konstruktory klas pochodnych zainicjować stanu, w tym typie.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Bitowe połączenie <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> wartości.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The set of fields that are candidates for matching.</source>
          <target state="translated">Zestaw pól, które nadają się do dopasowania.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For example, when a <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object is used by <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name.</source>
          <target state="translated">Na przykład, jeśli <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> obiekt jest używany przez <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, ten parametr określa zestaw pól, które stwierdził, że odbicia możliwe jest zgodny, zwykle ponieważ mają poprawny element członkowski.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The default implementation provided by <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> changes the order of this array.</source>
          <target state="translated">Domyślna implementacja podał <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> zmienia kolejność tej tablicy.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The field value used to locate a matching field.</source>
          <target state="translated">Wartość pola używana do lokalizowania zgodnego pola.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> that is used to control the coercion of data types, in binder implementations that coerce types.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> umożliwiające sterowanie koercja typów danych w implementacjach integratora, które typy wymuszone.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Jeśli <bpt id="p1">&lt;c&gt;</bpt>kultury<ept id="p1">&lt;/c&gt;</ept> jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> służy bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <ph id="ph1">&lt;see langword="String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see langword="Double" /&gt;</ph> value, because 1000 is represented differently by different cultures.</source>
          <target state="translated">Uwaga na przykład jeśli implementację integratora umożliwia koercja wartości ciągu na typy liczbowe, ten parametr jest niezbędne przekonwertować <ph id="ph1">&lt;see langword="String" /&gt;</ph> reprezentujący 1000 do <ph id="ph2">&lt;see langword="Double" /&gt;</ph> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The default binder does not do such string coercions.</source>
          <target state="translated">Domyślny integrator nie takie wymuszeniami ciągu.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>Selects a field from the given set of fields, based on the specified criteria.</source>
          <target state="translated">Wybiera pola z danego zestawu pól, w oparciu o określone kryteria.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>The matching field.</source>
          <target state="translated">Pole zgodne.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>If <ph id="ph1">`bindingAttr`</ph> does not include <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType&gt;</ph>, the default binder implementation provided by <ph id="ph3">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType&gt;</ph> simply returns the first element of <ph id="ph4">`match`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`bindingAttr`</ph> nie obejmuje <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType&gt;</ph>, domyślną implementację integratora dostarczonych przez <ph id="ph3">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType&gt;</ph> po prostu zwraca pierwszy element <ph id="ph4">`match`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>No selection is done.</source>
          <target state="translated">Brak zaznaczenia to zrobić.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>This method controls the binding provided by <ph id="ph1">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Ta metoda Określa wiązanie podał <ph id="ph1">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> includes <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="match" /&gt;</ph> contains multiple fields that are equally good matches for <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> obejmuje <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, i <ph id="ph3">&lt;paramref name="match" /&gt;</ph> zawiera kilka pól, które są równie dobrej dopasowań dla <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For example, <ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> object that implements the <bpt id="p2">&lt;c&gt;</bpt>IMyClass<ept id="p2">&lt;/c&gt;</ept> interface, and <ph id="ph2">&lt;paramref name="match" /&gt;</ph> contains a field of type <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> and a field of type <bpt id="p4">&lt;c&gt;</bpt>IMyClass<ept id="p4">&lt;/c&gt;</ept>.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;paramref name="value" /&gt;</ph> zawiera <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> obiekt, który implementuje <bpt id="p2">&lt;c&gt;</bpt>IMyClass<ept id="p2">&lt;/c&gt;</ept> interfejsu i <ph id="ph2">&lt;paramref name="match" /&gt;</ph> zawiera pola typu <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> i pole typu <bpt id="p4">&lt;c&gt;</bpt>IMyClass<ept id="p4">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> includes <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="match" /&gt;</ph> contains no fields that can accept <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> obejmuje <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, i <ph id="ph3">&lt;paramref name="match" /&gt;</ph> nie zawiera żadnych pól może akceptować <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> includes <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="match" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> obejmuje <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, i <ph id="ph3">&lt;paramref name="match" /&gt;</ph> jest <ph id="ph4">&lt;see langword="null" /&gt;</ph> albo być pustą tablicą.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> includes <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> obejmuje <ph id="ph2">&lt;see cref="F:System.Reflection.BindingFlags.SetField" /&gt;</ph>, i <ph id="ph3">&lt;paramref name="value" /&gt;</ph> jest <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Bitowe połączenie <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> wartości.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The set of methods that are candidates for matching.</source>
          <target state="translated">Zbiór metod, które są kandydatami do dopasowania.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For example, when a <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object is used by <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.</source>
          <target state="translated">Na przykład, jeśli <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> obiekt jest używany przez <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, ten parametr określa zestaw metod, które stwierdził, że odbicia możliwe jest zgodny, zwykle ponieważ mają poprawny element członkowski.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The default implementation provided by <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> changes the order of this array.</source>
          <target state="translated">Domyślna implementacja podał <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> zmienia kolejność tej tablicy.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The arguments that are passed in.</source>
          <target state="translated">Argumenty, które są przekazywane w.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <bpt id="p1">&lt;c&gt;</bpt>names<ept id="p1">&lt;/c&gt;</ept> parameter is used to specify an order other than positional order.</source>
          <target state="translated">Obiekt wiążący można zmienić kolejność argumentów w tej macierzy; na przykład domyślny integrator zmienia kolejność argumentów Jeśli <bpt id="p1">&lt;c&gt;</bpt>nazwy<ept id="p1">&lt;/c&gt;</ept> parametr służy do określania porządku niż pozycyjnych kolejności.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.</source>
          <target state="translated">Jeśli implementację integratora przekształca wynik dane typy argumentów, typy i wartości argumentów można także zmienić.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
          <target state="translated">Tablica modyfikatorów parametrów, umożliwiające powiązanie do pracy z podpisów parametru, w których typy zostały zmodyfikowane.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The default binder implementation does not use this parameter.</source>
          <target state="translated">Domyślna implementacja integrator nie korzysta z tego parametru.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> that is used to control the coercion of data types, in binder implementations that coerce types.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> umożliwiające sterowanie koercja typów danych w implementacjach integratora, które typy wymuszone.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Jeśli <bpt id="p1">&lt;c&gt;</bpt>kultury<ept id="p1">&lt;/c&gt;</ept> jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> służy bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <ph id="ph1">&lt;see langword="String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see langword="Double" /&gt;</ph> value, because 1000 is represented differently by different cultures.</source>
          <target state="translated">Uwaga na przykład jeśli implementację integratora umożliwia koercja wartości ciągu na typy liczbowe, ten parametr jest niezbędne przekonwertować <ph id="ph1">&lt;see langword="String" /&gt;</ph> reprezentujący 1000 do <ph id="ph2">&lt;see langword="Double" /&gt;</ph> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The default binder does not do such string coercions.</source>
          <target state="translated">Domyślny integrator nie takie wymuszeniami ciągu.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The parameter names, if parameter names are to be considered when matching, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if arguments are to be treated as purely positional.</source>
          <target state="translated">Nazwy parametrów, należy wziąć pod uwagę podczas dopasowywania, jeśli parametr nazwy lub <ph id="ph1">&lt;see langword="null" /&gt;</ph> Jeśli argumenty są traktowane jako całkowicie pozycyjnych.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For example, parameter names must be used if arguments are not supplied in positional order.</source>
          <target state="translated">Na przykład nazwy parametru należy użyć, jeśli nie podano argumentów w kolejności pozycyjnych.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>After the method returns, <bpt id="p1">&lt;c&gt;</bpt>state<ept id="p1">&lt;/c&gt;</ept> contains a binder-provided object that keeps track of argument reordering.</source>
          <target state="translated">Po powrocie z metody <bpt id="p1">&lt;c&gt;</bpt>stanu<ept id="p1">&lt;/c&gt;</ept> zawiera obiekt dostarczane przez obiekt wiążący, który śledzi zmiany kolejności argumentu.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The binder creates this object, and the binder is the sole consumer of this object.</source>
          <target state="translated">Obiekt wiążący tworzy tego obiektu, a obiekt wiążący jest jedynym konsumenta tego obiektu.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>state<ept id="p1">&lt;/c&gt;</ept> is not <ph id="ph1">&lt;see langword="null" /&gt;</ph> when <ph id="ph2">&lt;see langword="BindToMethod" /&gt;</ph> returns, you must pass <bpt id="p2">&lt;c&gt;</bpt>state<ept id="p2">&lt;/c&gt;</ept> to the <ph id="ph3">&lt;see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /&gt;</ph> method if you want to restore <bpt id="p3">&lt;c&gt;</bpt>args<ept id="p3">&lt;/c&gt;</ept> to its original order, for example, so that you can retrieve the values of <ph id="ph4">&lt;see langword="ref" /&gt;</ph> parameters (<ph id="ph5">&lt;see langword="ByRef" /&gt;</ph> parameters in Visual Basic).</source>
          <target state="translated">Jeśli <bpt id="p1">&lt;c&gt;</bpt>stanu<ept id="p1">&lt;/c&gt;</ept> nie jest <ph id="ph1">&lt;see langword="null" /&gt;</ph> podczas <ph id="ph2">&lt;see langword="BindToMethod" /&gt;</ph> zwraca, trzeba przekazać <bpt id="p2">&lt;c&gt;</bpt>stanu<ept id="p2">&lt;/c&gt;</ept> do <ph id="ph3">&lt;see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /&gt;</ph> metodę, jeśli chcesz przywrócić <bpt id="p3">&lt;c&gt;</bpt>argumentów<ept id="p3">&lt;/c&gt;</ept> do jego oryginalnej kolejność, na przykład, dzięki czemu można pobrać wartości <ph id="ph4">&lt;see langword="ref" /&gt;</ph> parametrów (<ph id="ph5">&lt;see langword="ByRef" /&gt;</ph> parametrów w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>Selects a method to invoke from the given set of methods, based on the supplied arguments.</source>
          <target state="translated">Wybrana metoda do wywołania z danego zestawu metod, w oparciu o podanych argumentów.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The matching method.</source>
          <target state="translated">Zgodną metodę.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The default binder takes into account both parameters that have values and <ph id="ph1">`params`</ph> arrays (<ph id="ph2">`ParamArray`</ph> arrays in Visual Basic).</source>
          <target state="translated">Domyślny integrator uwzględnia oba parametry z wartościami i <ph id="ph1">`params`</ph> tablic (<ph id="ph2">`ParamArray`</ph> tablic w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>Thus, it is possible to find a match in cases where <ph id="ph1">`args`</ph> and <ph id="ph2">`match`</ph> do not contain the same number of elements.</source>
          <target state="translated">W związku z tym jest możliwość znalezienia dopasowania w przypadkach, gdy <ph id="ph1">`args`</ph> i <ph id="ph2">`match`</ph> nie zawierają tę samą liczbę elementów.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph>.</source>
          <target state="translated">Obiekt wiążący umożliwia klientowi mapy tablica argumentów do postaci oryginalnej, jeśli tablica argumentów ma zostać modyfikowany w zakresie przez <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>Use this remap capability to get back by-reference arguments when such arguments are present.</source>
          <target state="translated">Ta możliwość ponownego mapowania umożliwia odzyskanie argumentów przez odwołanie, gdy istnieją takie argumentów.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>When you pass arguments by name, the binder reorders the argument array.</source>
          <target state="translated">Gdy argument jest przekazywany przez nazwę obiektu wiążącego zmienia kolejność tablica argumentów.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The <ph id="ph1">`state`</ph> parameter keeps track of argument reordering, thus enabling the binder's <ph id="ph2">&lt;xref:System.Reflection.Binder.ReorderArgumentArray%2A&gt;</ph> method to reorder the argument array to its original form.</source>
          <target state="translated"><ph id="ph1">`state`</ph> Parametru przechowuje informacje o argument zmianę kolejności, umożliwiając w ten sposób obiektu wiążącego <ph id="ph2">&lt;xref:System.Reflection.Binder.ReorderArgumentArray%2A&gt;</ph> metodę, aby zmienić kolejność tablica argumentów do postaci oryginalnej.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph> method is used by the <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph> Metoda jest używana przez <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contains multiple methods that are equally good matches for <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="match" /&gt;</ph> zawiera wiele metod, które są równie dobrej dopasowań dla <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For example, <ph id="ph1">&lt;paramref name="args" /&gt;</ph> contains a <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> object that implements the <bpt id="p2">&lt;c&gt;</bpt>IMyClass<ept id="p2">&lt;/c&gt;</ept> interface, and <ph id="ph2">&lt;paramref name="match" /&gt;</ph> contains a method that takes <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> and a method that takes <bpt id="p4">&lt;c&gt;</bpt>IMyClass<ept id="p4">&lt;/c&gt;</ept>.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;paramref name="args" /&gt;</ph> zawiera <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> obiekt, który implementuje <bpt id="p2">&lt;c&gt;</bpt>IMyClass<ept id="p2">&lt;/c&gt;</ept> interfejsu i <ph id="ph2">&lt;paramref name="match" /&gt;</ph> zawiera metodę, która przyjmuje <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> i metody, która przyjmuje <bpt id="p4">&lt;c&gt;</bpt>IMyClass<ept id="p4">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contains no methods that can accept the arguments supplied in <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="match" /&gt;</ph> zawiera żadnych metod, które mogą akceptować argumenty podane w <ph id="ph2">&lt;paramref name="args" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="match" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> albo być pustą tablicą.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The object to change into a new <ph id="ph1">&lt;see langword="Type" /&gt;</ph>.</source>
          <target state="translated">Obiekt, aby zmienić w nowym <ph id="ph1">&lt;see langword="Type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The new <ph id="ph1">&lt;see langword="Type" /&gt;</ph> that <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> will become.</source>
          <target state="translated">Nowy <ph id="ph1">&lt;see langword="Type" /&gt;</ph> który <bpt id="p1">&lt;c&gt;</bpt>wartość<ept id="p1">&lt;/c&gt;</ept> staną się.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> that is used to control the coercion of data types.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> umożliwiające sterowanie koercja typów danych.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Jeśli <bpt id="p1">&lt;c&gt;</bpt>kultury<ept id="p1">&lt;/c&gt;</ept> jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> służy bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Note   For example, this parameter is necessary to convert a <ph id="ph1">&lt;see langword="String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see langword="Double" /&gt;</ph> value, because 1000 is represented differently by different cultures.</source>
          <target state="translated">Uwaga na przykład ten parametr jest niezbędne przekonwertować <ph id="ph1">&lt;see langword="String" /&gt;</ph> reprezentujący 1000 do <ph id="ph2">&lt;see langword="Double" /&gt;</ph> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Changes the type of the given <ph id="ph1">&lt;see langword="Object" /&gt;</ph> to the given <ph id="ph2">&lt;see langword="Type" /&gt;</ph>.</source>
          <target state="translated">Zmienia typ danej <ph id="ph1">&lt;see langword="Object" /&gt;</ph> do danego <ph id="ph2">&lt;see langword="Type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>An object that contains the given value as the new type.</source>
          <target state="translated">Obiekt, który zawiera podanej wartości jako nowego typu.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Reflection models the accessibility rules of the common type system.</source>
          <target state="translated">Odbicie modele wspólny system typów reguł ułatwień dostępu.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</source>
          <target state="translated">Na przykład jeśli element wywołujący jest w tym samym zestawie, obiekt wywołujący nie potrzebuje specjalne uprawnienia dla wewnętrzne elementy członkowskie.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Otherwise, the caller needs <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.</source>
          <target state="translated">W przeciwnym razie wywołujący musi <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>This is consistent with lookup of members that are protected, private, and so on.</source>
          <target state="translated">Jest to zgodne z wyszukiwania elementów członkowskich, które są chronione, prywatne i tak dalej.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The general principle is that <ph id="ph1">`ChangeType`</ph> should perform only widening coercions, which never lose data.</source>
          <target state="translated">Ogólną zasadą jest to, że <ph id="ph1">`ChangeType`</ph> należy wykonywać tylko rozszerzanie wymuszeniami, które nigdy nie spowodować utratę danych.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</source>
          <target state="translated">Przykład rozszerzającą koercja jest coercing wartość całkowita 32-bitowa wartość całkowita 64-bitowych jest.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>This is distinguished from a narrowing coercion, which may lose data.</source>
          <target state="translated">Jest to różnią się od zawężającej koercja, która może spowodować utratę danych.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.</source>
          <target state="translated">Przykład zawężającej koercja jest coercing całkowita 64-bitowego do 32-bitowej podpisanej liczby całkowitej.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The following table lists the coercions performed by the default <ph id="ph1">`ChangeType`</ph>.</source>
          <target state="translated">W poniższej tabeli wymieniono wymuszeniami wykonywany domyślnie <ph id="ph1">`ChangeType`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Source type</source>
          <target state="translated">Typ źródła</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Target type</source>
          <target state="translated">Typ docelowy</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Any type</source>
          <target state="translated">Dowolnego typu</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Its base type.</source>
          <target state="translated">Jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Any type</source>
          <target state="translated">Dowolnego typu</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>The interface it implements.</source>
          <target state="translated">Interfejs, który implementuje.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Char</source>
          <target state="translated">Char</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt16, UInt32, Int32, UInt64, Int64, Single, Double</source>
          <target state="translated">UInt16, UInt32, Int32, UInt64, Int64, Single, Double</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Byte</source>
          <target state="translated">Byte</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</source>
          <target state="translated">Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int16, Int32, Int64, Single, Double</source>
          <target state="translated">Int16, Int32, Int64, Single, Double</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt16</source>
          <target state="translated">UInt16</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt32, Int32, UInt64, Int64, Single, Double</source>
          <target state="translated">UInt32, Int32, UInt64, Int64, Single, Double</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int16</source>
          <target state="translated">Int16</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int32, Int64, Single, Double</source>
          <target state="translated">Int32, Int64, Single, Double</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt32</source>
          <target state="translated">UInt32</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt64, Int64, Single, Double</source>
          <target state="translated">UInt64, Int64, Single, Double</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int32</source>
          <target state="translated">Int32</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int64, Single, Double</source>
          <target state="translated">Int64, jeden dwukrotnie</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>UInt64</source>
          <target state="translated">UInt64</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Single, Double</source>
          <target state="translated">Single, Double</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Int64</source>
          <target state="translated">Int64</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Single, Double</source>
          <target state="translated">Single, Double</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Single</source>
          <target state="translated">Single</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>Non-reference</source>
          <target state="translated">Non-reference</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
          <source>By-reference.</source>
          <target state="translated">Przez odwołanie.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>The actual arguments that are passed in.</source>
          <target state="translated">Argumenty rzeczywiste, które są przekazywane w.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>Both the types and values of the arguments can be changed.</source>
          <target state="translated">Typy i wartości argumentów można zmienić.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>A binder-provided object that keeps track of argument reordering.</source>
          <target state="translated">Obiekt dostarczony do integratora, który śledzi zmiany kolejności argumentu.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>Upon returning from <ph id="ph1">&lt;see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /&gt;</ph>, restores the <ph id="ph2">&lt;paramref name="args" /&gt;</ph> argument to what it was when it came from <ph id="ph3">&lt;see langword="BindToMethod" /&gt;</ph>.</source>
          <target state="translated">Na zwracanie z <ph id="ph1">&lt;see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /&gt;</ph>, przywraca <ph id="ph2">&lt;paramref name="args" /&gt;</ph> argument do chwili pochodzi z <ph id="ph3">&lt;see langword="BindToMethod" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
          <source>The common language runtime calls this method if <ph id="ph1">`state`</ph> is not <ph id="ph2">`null`</ph> after a return from <ph id="ph3">`BindToMethod`</ph>.</source>
          <target state="translated">Środowisko uruchomieniowe języka wspólnego wywołuje tę metodę, jeśli <ph id="ph1">`state`</ph> nie jest <ph id="ph2">`null`</ph> po powrocie z <ph id="ph3">`BindToMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Bitowe połączenie <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> wartości.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>The set of methods that are candidates for matching.</source>
          <target state="translated">Zbiór metod, które są kandydatami do dopasowania.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>For example, when a <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object is used by <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.</source>
          <target state="translated">Na przykład, jeśli <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> obiekt jest używany przez <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, ten parametr określa zestaw metod, które stwierdził, że odbicia możliwe jest zgodny, zwykle ponieważ mają poprawny element członkowski.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>The default implementation provided by <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> changes the order of this array.</source>
          <target state="translated">Domyślna implementacja podał <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> zmienia kolejność tej tablicy.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>The parameter types used to locate a matching method.</source>
          <target state="translated">Typy parametrów używana do lokalizowania odpowiadającej metody.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
          <target state="translated">Tablica modyfikatorów parametrów, umożliwiające powiązanie do pracy z podpisów parametru, w których typy zostały zmodyfikowane.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>Selects a method from the given set of methods, based on the argument type.</source>
          <target state="translated">Wybiera metodę z danego zestawu metod, w zależności od typu argumentu.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>The matching method, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Metody, dopasowania, jeśli znaleziono; w przeciwnym razie <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>This method should return <ph id="ph1">`null`</ph> if no method matches the criteria.</source>
          <target state="translated">Ta metoda powinna zwrócić <ph id="ph1">`null`</ph> Jeśli żadna metoda spełnia kryteria.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>This method controls the selection provided by the <ph id="ph1">`GetConstructor`</ph> and <ph id="ph2">`GetMethod`</ph> methods on <ph id="ph3">`Type`</ph>.</source>
          <target state="translated">Ta metoda określa udostępniane przez zaznaczenie <ph id="ph1">`GetConstructor`</ph> i <ph id="ph2">`GetMethod`</ph> metody <ph id="ph3">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contains multiple methods that are equally good matches for the parameter types described by <ph id="ph2">&lt;paramref name="types" /&gt;</ph>.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="match" /&gt;</ph> zawiera wiele metod, które są równie dobrej dopasowań dla typów parametrów opisanego przez <ph id="ph2">&lt;paramref name="types" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>For example, the array in <ph id="ph1">&lt;paramref name="types" /&gt;</ph> contains a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object for <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> and the array in <ph id="ph3">&lt;paramref name="match" /&gt;</ph> contains a method that takes a base class of <bpt id="p2">&lt;c&gt;</bpt>MyClass<ept id="p2">&lt;/c&gt;</ept> and a method that takes an interface that <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> implements.</source>
          <target state="translated">Na przykład tablicy w <ph id="ph1">&lt;paramref name="types" /&gt;</ph> zawiera <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> obiekt do <bpt id="p1">&lt;c&gt;</bpt>MyClass<ept id="p1">&lt;/c&gt;</ept> i array w <ph id="ph3">&lt;paramref name="match" /&gt;</ph> zawiera metodę, która przyjmuje jest klasą podstawową <bpt id="p2">&lt;c&gt;</bpt>MyClass<ept id="p2">&lt;/c&gt;</ept> i metody, która przyjmuje interfejs, który <bpt id="p3">&lt;c&gt;</bpt>MyClass<ept id="p3">&lt;/c&gt;</ept> implementuje.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="match" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> albo być pustą tablicą.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
          <source>An element of <ph id="ph1">&lt;paramref name="types" /&gt;</ph> derives from <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>, but is not of type <ph id="ph3">&lt;see langword="RuntimeType" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="types" /&gt;</ph> pochodną <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>, ale nie jest typu <ph id="ph3">&lt;see langword="RuntimeType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Bitowe połączenie <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> wartości.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The set of properties that are candidates for matching.</source>
          <target state="translated">Zbiór właściwości, które są kandydatami do dopasowania.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>For example, when a <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object is used by <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name.</source>
          <target state="translated">Na przykład, jeśli <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> obiekt jest używany przez <ph id="ph2">&lt;see cref="Overload:System.Type.InvokeMember" /&gt;</ph>, ten parametr określa zbiór właściwości, które stwierdził, że odbicia możliwe jest zgodny, zwykle ponieważ mają poprawny element członkowski.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The default implementation provided by <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> changes the order of this array.</source>
          <target state="translated">Domyślna implementacja podał <ph id="ph1">&lt;see cref="P:System.Type.DefaultBinder" /&gt;</ph> zmienia kolejność tej tablicy.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The return value the matching property must have.</source>
          <target state="translated">Musi mieć wartość zwracaną dopasowania właściwości.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The index types of the property being searched for.</source>
          <target state="translated">Typy indeksu właściwość.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Used for index properties such as the indexer for a class.</source>
          <target state="translated">Używany dla właściwości indeksu, takie jak indeksatora dla klasy.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
          <target state="translated">Tablica modyfikatorów parametrów, umożliwiające powiązanie do pracy z podpisów parametru, w których typy zostały zmodyfikowane.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Selects a property from the given set of properties, based on the specified criteria.</source>
          <target state="translated">Wybiera właściwość z danego zestawu właściwości, w oparciu o określone kryteria.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The matching property.</source>
          <target state="translated">Dopasowania właściwości.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>This method controls the selection provided by the <ph id="ph1">`GetProperty`</ph> method on <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Ta metoda określa udostępniane przez zaznaczenie <ph id="ph1">`GetProperty`</ph> metoda <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> contains multiple properties that are equally good matches for <ph id="ph2">&lt;paramref name="returnType" /&gt;</ph> and <ph id="ph3">&lt;paramref name="indexes" /&gt;</ph>.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="match" /&gt;</ph> zawiera wiele właściwości, które są równie dobrej dopasowań dla <ph id="ph2">&lt;paramref name="returnType" /&gt;</ph> i <ph id="ph3">&lt;paramref name="indexes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>For the default binder, <ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty array.</source>
          <target state="translated">Dla domyślnego integratora <ph id="ph1">&lt;paramref name="match" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> albo być pustą tablicą.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>