<Type Name="Binder" FullName="System.Reflection.Binder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c65b775d8d93f9560a6f12c367f947ef0a99bf6e" />
    <Meta Name="ms.sourcegitcommit" Value="84c54c0c7d64827a5637d1f05e74e1f0598606a1" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/27/2018" />
    <Meta Name="ms.locfileid" Value="42960139" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Binder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Binder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Binder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Binder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binder abstract" />
  <TypeSignature Language="F#" Value="type Binder = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wybrany element członkowski z listy kandydatów, a wykonanie konwersji typu z rzeczywisty typ argumentu do typu argumentu formalnego.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje <xref:System.Reflection.Binder> klasy są używane przez metody takie jak <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>, która wybiera zestaw elementów członkowskich możliwych do wykonania, na podstawie zestawu typy parametrów i wartości argumentu. <xref:System.Type.GetMethod%2A?displayProperty=nameWithType>, co spowoduje wybranie metody, w zależności od typów parametrów; i tak dalej.  
  
 Domyślna implementacja klasy <xref:System.Reflection.Binder> klasy są dostarczane przez <xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie implementuje i pokazuje wszystkie elementy członkowskie `Binder` klasy. Metoda prywatna `CanConvertFrom` znajdzie zgodne typy dla danego typu.  
  
 [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]
 [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]
 [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Przy dziedziczeniu z <see cref="T:System.Reflection.Binder" />, konieczne jest przesłonięcie następujących składowych: <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, <see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />, <see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />, <see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />, i <see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Binder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Binder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Reflection.Binder" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest wywoływany przez konstruktory klas pochodnych, zainicjować stanu, w tym typie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindToField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo BindToField(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.FieldInfo[] match, object value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToField (bindingAttr As BindingFlags, match As FieldInfo(), value As Object, culture As CultureInfo) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ BindToField(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ match, System::Object ^ value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member BindToField : System.Reflection.BindingFlags * System.Reflection.FieldInfo[] * obj * System.Globalization.CultureInfo -&gt; System.Reflection.FieldInfo" Usage="binder.BindToField (bindingAttr, match, value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.FieldInfo[]" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</param>
        <param name="match">Zestaw pól, które są kandydatami do dopasowania. Na przykład, gdy <see cref="T:System.Reflection.Binder" /> obiekt jest używany przez <see cref="Overload:System.Type.InvokeMember" />, ten parametr określa zestaw pól, które stwierdził, że odbicie jest możliwe jest zgodny, zwykle ponieważ mają one nazwy poprawne elementu członkowskiego. Domyślna implementacja dostarczone przez <see cref="P:System.Type.DefaultBinder" /> zmienia kolejność tej tablicy.</param>
        <param name="value">Wartość pola używane do lokalizowania pasujące pola.</param>
        <param name="culture">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> , jest używane do kontrolowania wymuszanie typów danych w implementacji integratorów modeli, które wymuszone typów. Jeśli <c>kultury</c> jest <see langword="null" />, <see cref="T:System.Globalization.CultureInfo" /> dla bieżącego wątku jest używana.  
  
Uwaga na przykład jeśli implementację integratora umożliwia przekształcenie wartości ciągu na typy liczbowe, ten parametr jest niezbędne przekonwertować <see langword="String" /> reprezentujący 1000- <see langword="Double" /> wartości, ponieważ 1000 jest reprezentowana w inny sposób przez różnych kultur. Domyślny integrator nie są takie coercions ciągu.</param>
        <summary>Wybiera pola z danego zestawu pól, w oparciu o określone kryteria.</summary>
        <returns>Pasujące pola.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `bindingAttr` nie obejmuje <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>, domyślną implementację integratora dostarczone przez <xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType> po prostu zwraca pierwszy element `match`. Brak zaznaczenia to zrobić.  
  
 Ta metoda określa powiązania dostarczane przez <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Dla domyślnego integratora <paramref name="bindingAttr" /> obejmuje <see cref="F:System.Reflection.BindingFlags.SetField" />, i <paramref name="match" /> zawiera kilka pól, które są równie dobre dopasowań dla <paramref name="value" />. Na przykład <paramref name="value" /> zawiera <c>MyClass</c> obiekt, który implementuje <c>IMyClass</c> interfejsu, a <paramref name="match" /> zawiera pole o typie <c>MyClass</c> i pole typu <c>IMyClass</c>.</exception>
        <exception cref="T:System.MissingFieldException">Dla domyślnego integratora <paramref name="bindingAttr" /> obejmuje <see cref="F:System.Reflection.BindingFlags.SetField" />, i <paramref name="match" /> nie zawiera żadnych pól może akceptować <paramref name="value" />.</exception>
        <exception cref="T:System.NullReferenceException">Dla domyślnego integratora <paramref name="bindingAttr" /> obejmuje <see cref="F:System.Reflection.BindingFlags.SetField" />, i <paramref name="match" /> jest <see langword="null" /> lub pusta tablica.  
  
—lub— 
 <paramref name="bindingAttr" /> obejmuje <see cref="F:System.Reflection.BindingFlags.SetField" />, i <paramref name="value" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
      </Docs>
    </Member>
    <Member MemberName="BindToMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase BindToMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, object[]&amp; args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] names, [out] object&amp; state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToMethod (bindingAttr As BindingFlags, match As MethodBase(), ByRef args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, names As String(), ByRef state As Object) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ BindToMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;System::Object ^&gt; ^ % args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ names, [Runtime::InteropServices::Out] System::Object ^ % state);" />
      <MemberSignature Language="F#" Value="abstract member BindToMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] *  * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] *  -&gt; System.Reflection.MethodBase" Usage="binder.BindToMethod (bindingAttr, match, args, modifiers, culture, names, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="state" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</param>
        <param name="match">Zestaw metod, które są kandydatami do dopasowania. Na przykład, gdy <see cref="T:System.Reflection.Binder" /> obiekt jest używany przez <see cref="Overload:System.Type.InvokeMember" />, ten parametr określa zestaw metod, które stwierdził, że odbicie jest możliwe jest zgodny, zwykle ponieważ mają one nazwy poprawne elementu członkowskiego. Domyślna implementacja dostarczone przez <see cref="P:System.Type.DefaultBinder" /> zmienia kolejność tej tablicy.</param>
        <param name="args">Argumenty, które są przekazywane w. Obiekt wiążący można zmienić kolejność argumentów w tej tablicy; na przykład domyślny integrator zmienia kolejność argumentów, jeśli <c>nazwy</c> parametr jest używany do określenia kolejności niż kolejność pozycyjnych. Jeśli implementację integratora przekształca wynik dane typy argumentów, typy i wartości argumentów można także zmienić.</param>
        <param name="modifiers">Tablica parametrów modyfikatory, umożliwiające powiązanie działało z podpisami parametru, w których typy zostały zmodyfikowane. Domyślna implementacja integrator nie używać tego parametru.</param>
        <param name="culture">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> , jest używane do kontrolowania wymuszanie typów danych w implementacji integratorów modeli, które wymuszone typów. Jeśli <c>kultury</c> jest <see langword="null" />, <see cref="T:System.Globalization.CultureInfo" /> dla bieżącego wątku jest używana.  
  
Uwaga na przykład jeśli implementację integratora umożliwia przekształcenie wartości ciągu na typy liczbowe, ten parametr jest niezbędne przekonwertować <see langword="String" /> reprezentujący 1000- <see langword="Double" /> wartości, ponieważ 1000 jest reprezentowana w inny sposób przez różnych kultur. Domyślny integrator nie są takie coercions ciągu.</param>
        <param name="names">Nazwy parametrów, należy wziąć pod uwagę podczas dopasowywania, jeśli nazwy parametrów lub <see langword="null" /> Jeśli argumenty mają być traktowane jako czysto pozycyjnych. Na przykład nazwy parametrów należy użyć, jeśli nie podano argumentów w porządku pozycyjnych.</param>
        <param name="state">Po powrocie z metody <c>stanu</c> zawiera obiekt dostarczane przez obiekt wiążący, który śledzi zmiany kolejności argumentu. Obiekt wiążący tworzy tego obiektu i obiekt wiążący jest jedynym konsumenta tego obiektu. Jeśli <c>stanu</c> nie jest <see langword="null" /> podczas <see langword="BindToMethod" /> zwróci wartość, należy przekazać <c>stanu</c> do <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> metody, jeśli chcesz przywrócić <c>args</c> z jej oryginalną kolejność, na przykład, tak że można pobrać wartości <see langword="ref" /> parametrów (<see langword="ByRef" /> w języku Visual Basic).</param>
        <summary>Wybiera metody do wywołania z danego zestawu metod, w oparciu o podanych argumentów.</summary>
        <returns>Metody dopasowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny integrator uwzględnia oba parametry, które mają wartości i `params` tablic (`ParamArray` tablic w języku Visual Basic). Dlatego jest możliwe znalezienie dopasowania w przypadkach, gdzie `args` i `match` nie zawierać taką samą liczbę elementów.  
  
 Obiekt wiążący umożliwia klientowi mapy tablica argumentów do ich oryginalnej formie, jeśli tablica argumentów ma zostać manipulowane przez <xref:System.Reflection.Binder.BindToMethod%2A>. Aby wrócić argumentów przez odwołanie, gdy taki argumentów jest obecne, należy używać tej możliwości ponownego mapowania. Gdy argument jest przekazywany przez nazwę obiektu wiążącego zmienia kolejność tablica argumentów. `state` Parametru śledzi informacje o argument zmiany kolejności, umożliwiając w ten sposób integratora <xref:System.Reflection.Binder.ReorderArgumentArray%2A> metodę, aby zmienić kolejność tablica argumentów do ich oryginalnej postaci.  
  
 <xref:System.Reflection.Binder.BindToMethod%2A> Metoda jest używana przez <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Dla domyślnego integratora <paramref name="match" /> zawiera wiele metod, które są równie dobre dopasowań dla <paramref name="args" />. Na przykład <paramref name="args" /> zawiera <c>MyClass</c> obiekt, który implementuje <c>IMyClass</c> interfejsu, a <paramref name="match" /> zawiera metody, która przyjmuje <c>MyClass</c> i metody, która przyjmuje <c>IMyClass</c>.</exception>
        <exception cref="T:System.MissingMethodException">Dla domyślnego integratora <paramref name="match" /> zawiera nie metod, których można zaakceptować argumenty dostarczone w <paramref name="args" />.</exception>
        <exception cref="T:System.ArgumentException">Dla domyślnego integratora <paramref name="match" /> jest <see langword="null" /> lub pusta tablica.</exception>
        <altmember cref="T:System.Reflection.MethodBase" />
      </Docs>
    </Member>
    <Member MemberName="CanChangeType">
      <MemberSignature Language="C#" Value="public virtual bool CanChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool&#xA;override this.CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool" Usage="binder.CanChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="type">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member ChangeType : obj * Type * System.Globalization.CultureInfo -&gt; obj" Usage="binder.ChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, aby zmienić do nowego <see langword="Type" />.</param>
        <param name="type">Nowy <see langword="Type" /> , <c>wartość</c> staną się.</param>
        <param name="culture">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> , jest używane do kontrolowania wymuszanie typów danych. Jeśli <c>kultury</c> jest <see langword="null" />, <see cref="T:System.Globalization.CultureInfo" /> dla bieżącego wątku jest używana.  
  
Uwaga na przykład, ten parametr jest niezbędne przekonwertować <see langword="String" /> reprezentujący 1000- <see langword="Double" /> wartości, ponieważ 1000 jest reprezentowana w inny sposób przez różnych kultur.</param>
        <summary>Zmienia typ danego <see langword="Object" /> do danego <see langword="Type" />.</summary>
        <returns>Obiekt, który zawiera podanej wartości jako nowego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Odbicie modeli reguły ułatwień dostępu wspólny system typów. Na przykład jeśli obiekt wywołujący znajduje się w tym samym zestawie, obiekt wywołujący nie potrzebne żadne specjalne uprawnienia dla wewnętrznych składowych. W przeciwnym razie wywołujący musi mieć <xref:System.Security.Permissions.ReflectionPermission>. Jest to zgodne z wyszukiwania elementów członkowskich, które są chronione, prywatne i tak dalej.  
  
 Ogólną zasadą jest fakt, że `ChangeType` należy wykonać tylko rozszerzanie coercions, które nigdy nie utracą danych. Przykładem rozszerzającą wymuszenia jest coercing wartość całkowita 32-bitowa wartość całkowita 64-bitowych. Jest to odróżnić od zawężające wymuszenia, która może spowodować utratę danych. Przykładem zawężające wymuszenia jest coercing całkowita 64-bitowego do 32-bitowych całkowita.  
  
 W poniższej tabeli wymieniono coercions domyślnie przeprowadzane `ChangeType`.  
  
|Typ źródła|Typ docelowy|  
|-----------------|-----------------|  
|Dowolnego typu|Jego typ podstawowy.|  
|Dowolnego typu|Interfejs, który implementuje.|  
|Char|UInt16, UInt32, Int32, UInt64, Int64, pojedynczy Double|  
|Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, pojedynczy Double|  
|SByte|Int16, Int32, Int64, pojedynczy Double|  
|UInt16|UInt32, Int32, UInt64, Int64, pojedynczy Double|  
|Int16|Int32, Int64, pojedynczy Double|  
|UInt32|UInt64, Int64, pojedynczy Double|  
|Int32|Int64, jeden dwukrotnie|  
|UInt64|Pojedynczy Double|  
|Int64|Pojedynczy Double|  
|Single|Double|  
|Non-reference|Przez odwołanie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderArgumentArray">
      <MemberSignature Language="C#" Value="public abstract void ReorderArgumentArray (ref object[] args, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderArgumentArray(object[]&amp; args, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ReorderArgumentArray (ByRef args As Object(), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ReorderArgumentArray(cli::array &lt;System::Object ^&gt; ^ % args, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member ReorderArgumentArray :  * obj -&gt; unit" Usage="binder.ReorderArgumentArray (args, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="args">Rzeczywiste argumenty, które są przekazywane w. Można zmienić typy i wartości argumentów.</param>
        <param name="state">Obiekt integratora — pod warunkiem, która śledzi zmiany kolejności argumentu.</param>
        <summary>Po powrocie z <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, przywraca <paramref name="args" /> argument do chwili, z którego pochodzi <see langword="BindToMethod" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Środowisko uruchomieniowe języka wspólnego wywołuje tę metodę, jeśli `state` nie `null` po powrocie z `BindToMethod`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase SelectMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectMethod (bindingAttr As BindingFlags, match As MethodBase(), types As Type(), modifiers As ParameterModifier()) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ SelectMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodBase" Usage="binder.SelectMethod (bindingAttr, match, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</param>
        <param name="match">Zestaw metod, które są kandydatami do dopasowania. Na przykład, gdy <see cref="T:System.Reflection.Binder" /> obiekt jest używany przez <see cref="Overload:System.Type.InvokeMember" />, ten parametr określa zestaw metod, które stwierdził, że odbicie jest możliwe jest zgodny, zwykle ponieważ mają one nazwy poprawne elementu członkowskiego. Domyślna implementacja dostarczone przez <see cref="P:System.Type.DefaultBinder" /> zmienia kolejność tej tablicy.</param>
        <param name="types">Typy parametrów, używana do lokalizowania metody dopasowania.</param>
        <param name="modifiers">Tablica parametrów modyfikatory, umożliwiające powiązanie działało z podpisami parametru, w których typy zostały zmodyfikowane.</param>
        <summary>Wybiera metodę z danego zestawu metod, w oparciu o typ argumentu.</summary>
        <returns>Metody, dopasowania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna zwracać `null` Jeśli żadna metoda spełnia kryteria. Ta metoda określa wyboru dokonanego przez `GetConstructor` i `GetMethod` metod `Type`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Dla domyślnego integratora <paramref name="match" /> zawiera wiele metod, które są równie dobre dopasowań dla typów parametrów opisanego przez <paramref name="types" />. Na przykład tablicy <paramref name="types" /> zawiera <see cref="T:System.Type" /> dla obiektu <c>MyClass</c> i tablicy <paramref name="match" /> zawiera metody, która przyjmuje jako klasa bazowa <c>MyClass</c> i metody, która przyjmuje interfejs, <c>MyClass</c> implementuje.</exception>
        <exception cref="T:System.ArgumentException">Dla domyślnego integratora <paramref name="match" /> jest <see langword="null" /> lub pusta tablica.  
  
—lub— 
Element <paramref name="types" /> pochodzi od klasy <see cref="T:System.Type" />, ale nie jest typu <see langword="RuntimeType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectProperty">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo SelectProperty(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.PropertyInfo[] match, class System.Type returnType, class System.Type[] indexes, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectProperty (bindingAttr As BindingFlags, match As PropertyInfo(), returnType As Type, indexes As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::PropertyInfo ^ SelectProperty(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ match, Type ^ returnType, cli::array &lt;Type ^&gt; ^ indexes, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectProperty : System.Reflection.BindingFlags * System.Reflection.PropertyInfo[] * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="binder.SelectProperty (bindingAttr, match, returnType, indexes, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.PropertyInfo[]" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="indexes" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</param>
        <param name="match">Zbiór właściwości, które są kandydatami do dopasowania. Na przykład, gdy <see cref="T:System.Reflection.Binder" /> obiekt jest używany przez <see cref="Overload:System.Type.InvokeMember" />, ten parametr określa zestaw właściwości, które stwierdził, że odbicie jest możliwe jest zgodny, zwykle ponieważ mają one nazwy poprawne elementu członkowskiego. Domyślna implementacja dostarczone przez <see cref="P:System.Type.DefaultBinder" /> zmienia kolejność tej tablicy.</param>
        <param name="returnType">Musi mieć wartość zwracaną dopasowania właściwości.</param>
        <param name="indexes">Typy indeks właściwości wyszukane. Używane dla właściwości indeksu, takie jak indeksatora dla klasy.</param>
        <param name="modifiers">Tablica parametrów modyfikatory, umożliwiające powiązanie działało z podpisami parametru, w których typy zostały zmodyfikowane.</param>
        <summary>Wybiera właściwości z danego zestawu właściwości, w oparciu o określone kryteria.</summary>
        <returns>Właściwość dopasowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda określa wyboru dokonanego przez `GetProperty` metody `Type`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Dla domyślnego integratora <paramref name="match" /> zawiera wiele właściwości, które są równie dobre dopasowań dla <paramref name="returnType" /> i <paramref name="indexes" />.</exception>
        <exception cref="T:System.ArgumentException">Dla domyślnego integratora <paramref name="match" /> jest <see langword="null" /> lub pusta tablica.</exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
      </Docs>
    </Member>
  </Members>
</Type>