<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemberInfo.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58db62a3ed31bdc693e0000017df74ab65286b3e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8db62a3ed31bdc693e0000017df74ab65286b3e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.MemberInfo">
          <source>Obtains information about the attributes of a member and provides access to member metadata.</source>
          <target state="translated">Pobiera informacje o atrybutach elementu członkowskiego i zapewnia dostęp do metadanych elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> Klasa jest abstrakcyjna klasa podstawowa dla klasy używane do uzyskiwania informacji na temat wszystkie elementy członkowskie klasy (konstruktorów, zdarzenia, pola, metody i właściwości).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This class introduces the basic functionality that all members provide.</source>
          <target state="translated">Ta klasa przedstawia podstawowe funkcje, które zapewniają wszystkie elementy członkowskie.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">W tym przykładzie pokazano, jak używać różnych klas odbicia do analizowania metadanych zawarty w zestawie.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">aby uzyskać pełne zaufanie dla obiektów dziedziczących.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Klasa ta nie może być dziedziczona przez kod częściowo zaufany.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Ten typ jest bezpieczny wątkowo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Przy dziedziczeniu z <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> musi zastępować następujących członków: <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph> i <ph id="ph3">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.#ctor">
          <source>Only a derived class can create this <ph id="ph1">`MemberInfo`</ph> class.</source>
          <target state="translated">Tylko klasy pochodne mogą tworzyć to <ph id="ph1">`MemberInfo`</ph> klasy.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.CustomAttributes">
          <source>Gets a collection that contains this member's custom attributes.</source>
          <target state="translated">Pobiera kolekcję zawierającą ten element członkowski atrybutów niestandardowych.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.CustomAttributes">
          <source>A collection that contains this member's custom attributes.</source>
          <target state="translated">Kolekcja, która zawiera ten element członkowski atrybutów niestandardowych.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>Gets the class that declares this member.</source>
          <target state="translated">Pobiera klasę, która deklaruje tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object for the class that declares this member.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Type" /&gt;</ph> Obiektu klasy, która deklaruje tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property retrieves a reference to the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object for the type that declares this member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> Właściwość pobiera odwołanie do <ph id="ph2">&lt;xref:System.Type&gt;</ph> obiektu dla typu, który deklaruje tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>A member of a type is either declared by the type or inherited from a base type, so the <ph id="ph1">`Type`</ph> object returned by the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property might not be the same as the <ph id="ph3">`Type`</ph> object used to obtain the current <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object.</source>
          <target state="translated">Element członkowski typu jest deklarowana przez typ lub dziedziczone z typu podstawowego tak <ph id="ph1">`Type`</ph> obiektu zwróconego przez <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> właściwości nie może być taka sama jak <ph id="ph3">`Type`</ph> obiekt używany do uzyskania bieżącego <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>If the <ph id="ph1">`Type`</ph> object from which this <ph id="ph2">`MemberInfo`</ph> object was obtained did not declare this member, the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property will represent one of its base types.</source>
          <target state="translated">Jeśli <ph id="ph1">`Type`</ph> obiektu, z której ta <ph id="ph2">`MemberInfo`</ph> uzyskano obiektu nie zadeklarował tego elementu członkowskiego, <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> właściwość reprezentuje jeden z jego typów podstawowych.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>If the <ph id="ph1">`MemberInfo`</ph> object is a global member (that is, if it was obtained from the <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method, which returns global methods on a module), the returned <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> will be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`MemberInfo`</ph> obiektu jest elementem członkowskim globalnego (to znaczy, jeśli został on uzyskany <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> metody, która zwraca globalne metody w module), zwracana <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> będzie <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The following example defines an interface, <ph id="ph1">`IValue`</ph>, with a single member, <ph id="ph2">`GetValue`</ph>.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano interfejsu <ph id="ph1">`IValue`</ph>, z jednym elementem członkowskim, <ph id="ph2">`GetValue`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>It also defines four classes: <ph id="ph1">`A`</ph>, a base class that implements the <ph id="ph2">`IValue`</ph> interface; <ph id="ph3">`B`</ph>, which inherits from <ph id="ph4">`A`</ph> and hides its implementation of <ph id="ph5">`GetValue`</ph> from the base class implementation; <ph id="ph6">`C`</ph>, which simply inherits from <ph id="ph7">`A`</ph>; and <ph id="ph8">`D`</ph>, which inherits from <ph id="ph9">`A`</ph> and overrides its <ph id="ph10">`GetValue`</ph> method.</source>
          <target state="translated">Definiuje również cztery klasy: <ph id="ph1">`A`</ph>, klasę podstawową, która implementuje <ph id="ph2">`IValue`</ph> interfejsu; <ph id="ph3">`B`</ph>, który dziedziczy z <ph id="ph4">`A`</ph> i ukrywa jej implementacja <ph id="ph5">`GetValue`</ph> z implementacji klasy podstawowej; <ph id="ph6">`C`</ph>, która po prostu dziedziczy <ph id="ph7">`A`</ph>; i <ph id="ph8">`D`</ph>, który dziedziczy z <ph id="ph9">`A`</ph> i zastępuje jego <ph id="ph10">`GetValue`</ph> metody.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The example then retrieves a <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object for each member of the type (including members inherited from <ph id="ph2">&lt;xref:System.Object&gt;</ph>) and displays the value of its <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property.</source>
          <target state="translated">Przykład następnie pobiera <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obiekt dla każdego elementu członkowskiego typu (w tym elementów członkowskich dziedziczone z <ph id="ph2">&lt;xref:System.Object&gt;</ph>) i wyświetla wartość jego <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>Note that the declaring type of <ph id="ph1">`A.GetValue`</ph> is <ph id="ph2">`A`</ph>, that <ph id="ph3">`B`</ph> includes two <ph id="ph4">`GetValue`</ph> methods, one declared by <ph id="ph5">`A`</ph> and one by <ph id="ph6">`B`</ph>, and that the declaring type of <ph id="ph7">`D.GetValue`</ph> is <ph id="ph8">`D`</ph>.</source>
          <target state="translated">Należy pamiętać, że typ deklarujący <ph id="ph1">`A.GetValue`</ph> jest <ph id="ph2">`A`</ph>, że <ph id="ph3">`B`</ph> zawiera dwie <ph id="ph4">`GetValue`</ph> metod, co deklarowana przez <ph id="ph5">`A`</ph> i jedną przez <ph id="ph6">`B`</ph>, i typ deklarujący czy <ph id="ph7">`D.GetValue`</ph> jest <ph id="ph8">`D`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source><ph id="ph1">`DeclaringType`</ph> returns only the member names and the names of their declaring types.</source>
          <target state="translated"><ph id="ph1">`DeclaringType`</ph> Zwraca tylko nazwy elementów członkowskich i nazwy ich typ deklarujący.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>To return the member names with their prototypes, call <ph id="ph1">`MemberInfo.ToString`</ph>.</source>
          <target state="translated">Aby przywrócić nazwy z ich prototypy element członkowski, należy wywołać <ph id="ph1">`MemberInfo.ToString`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt do porównania z tym wystąpieniem lub <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals, typ i wartość tego wystąpienia; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Reflection.MemberInfo">
          <source>When overridden in a derived class, returns custom attributes applied to this member.</source>
          <target state="translated">Po przesłonięciu w klasie pochodnej zwraca atrybutów niestandardowych zastosowanych do tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">Ten parametr jest ignorowany dla właściwości i zdarzeń.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>When overridden in a derived class, returns an array of all custom attributes applied to this member.</source>
          <target state="translated">Po przesłonięciu w klasie pochodnej zwraca tablicę wszystkich atrybutów niestandardowych zastosowanych do tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</source>
          <target state="translated">Tablica zawierająca wszystkie atrybuty niestandardowe zastosowane do tego elementu członkowskiego lub tablica nie zawierająca żadnego elementu, jeśli zostały zdefiniowane żadne atrybuty.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">Ta metoda powoduje ignorowanie <ph id="ph1">`inherit`</ph> parametr dla właściwości i zdarzeń.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Aby przeszukać łańcuch dziedziczenia dla atrybutów dla właściwości i zdarzenia, użyj odpowiedniej przeciążeń <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format.</source>
          <target state="translated">W programie .NET Framework w wersji 2.0 ta metoda zwraca atrybutów zabezpieczeń na typy, konstruktory i metody, jeśli są one przechowywane w nowym formacie metadanych.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">Zestawy skompilowane z wersji 2.0, użyj tego formatu.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">Dynamiczne zestawy i zestawy skompilowane z wcześniejszych wersji programu .NET Framework używają stary format XML.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>emitowanie deklaratywne atrybuty zabezpieczeń<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example defines a custom attribute and associates the attribute with <ph id="ph1">`MyClass.MyMethod`</ph>, retrieves the attribute at run time, and displays the result.</source>
          <target state="translated">W poniższym przykładzie definiuje atrybut niestandardowy i kojarzy atrybut o <ph id="ph1">`MyClass.MyMethod`</ph>, pobiera atrybut w czasie wykonywania i wyświetla wyniki.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">Ten element członkowski należy do typu, który jest ładowany do kontekstu reflection-only.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>porady: ładowanie zestawów do kontekstu Reflection-Only<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">Nie można załadować typu atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type of attribute to search for.</source>
          <target state="translated">Typ atrybutu do wyszukiwania.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Only attributes that are assignable to this type are returned.</source>
          <target state="translated">Zwracane są tylko atrybuty, które są przypisane do tego typu.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">Ten parametr jest ignorowany dla właściwości i zdarzeń.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej zwraca tablicę atrybutów niestandardowych zastosowane do tego elementu członkowskiego i oznaczona <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> have been applied.</source>
          <target state="translated">Tablica atrybutów niestandardowych zastosowanych do tego elementu członkowskiego lub tablica nie zawierająca żadnego elementu, jeśli nie można przypisać do atrybutów <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> zostały zastosowane.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">Ta metoda powoduje ignorowanie <ph id="ph1">`inherit`</ph> parametr dla właściwości i zdarzeń.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Aby przeszukać łańcuch dziedziczenia dla atrybutów dla właściwości i zdarzenia, użyj odpowiedniej przeciążeń <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format.</source>
          <target state="translated">W programie .NET Framework w wersji 2.0 ta metoda zwraca atrybutów zabezpieczeń na typy, konstruktory i metody, jeśli atrybuty są przechowywane w nowym formacie metadanych.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">Zestawy skompilowane z wersji 2.0, użyj tego formatu.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">Dynamiczne zestawy i zestawy skompilowane z wcześniejszych wersji programu .NET Framework używają stary format XML.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>emitowanie deklaratywne atrybuty zabezpieczeń<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The following example defines a class named <ph id="ph1">`BaseClass`</ph> that has two non-inherited members: a thread static field named <ph id="ph2">`total`</ph> and a non-CLS-compliant method named <ph id="ph3">`MethodA`</ph>.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano klasę o nazwie <ph id="ph1">`BaseClass`</ph> która ma dwa-dziedziczone elementy członkowskie: wątek statycznym polem o nazwie <ph id="ph2">`total`</ph> i specyfikacją CLS metodę o nazwie <ph id="ph3">`MethodA`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A class named <ph id="ph1">`DerivedClass`</ph> inherits from <ph id="ph2">`BaseClass`</ph> and overrides its <ph id="ph3">`MethodA`</ph> method.</source>
          <target state="translated">Klasa o nazwie <ph id="ph1">`DerivedClass`</ph> dziedziczy <ph id="ph2">`BaseClass`</ph> i zastępuje jego <ph id="ph3">`MethodA`</ph> metody.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Note that no attributes are applied to the members of <ph id="ph1">`DerivedClass`</ph>.</source>
          <target state="translated">Należy pamiętać, że atrybuty nie są stosowane do elementów członkowskich <ph id="ph1">`DerivedClass`</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The example iterates the members of <ph id="ph1">`DerivedClass`</ph> to determine whether the <ph id="ph2">&lt;xref:System.CLSCompliantAttribute&gt;</ph> or <ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute as been applied to them.</source>
          <target state="translated">Przykład wykonuje iterację członków <ph id="ph1">`DerivedClass`</ph> ustalenie, czy <ph id="ph2">&lt;xref:System.CLSCompliantAttribute&gt;</ph> lub <ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph> jak zostały zastosowane do nich.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Because <ph id="ph1">`inherit`</ph> is <ph id="ph2">`true`</ph>, the method searches the inheritance hierarchy of <ph id="ph3">`DerivedClass`</ph> for the specified attribute.</source>
          <target state="translated">Ponieważ <ph id="ph1">`inherit`</ph> jest <ph id="ph2">`true`</ph>, metoda szuka hierarchii dziedziczenia <ph id="ph3">`DerivedClass`</ph> dla określonego atrybutu.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>As the output from the example shows, the <ph id="ph1">`total`</ph> field is decorated with the <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, and the <ph id="ph3">`MethodA`</ph> method is decorated with the <ph id="ph4">&lt;xref:System.CLSCompliantAttribute&gt;</ph> attribute.</source>
          <target state="translated">Jako dane wyjściowe w przykładzie pokazano <ph id="ph1">`total`</ph> pole jest oznaczone <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> atrybutu i <ph id="ph3">`MethodA`</ph> zostanie nadany metody <ph id="ph4">&lt;xref:System.CLSCompliantAttribute&gt;</ph> atrybutu.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">Nie można załadować typu niestandardowego atrybutu.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">Ten element członkowski należy do typu, który jest ładowany do kontekstu reflection-only.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>porady: ładowanie zestawów do kontekstu Reflection-Only<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated">Zwraca listę <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> obiekty reprezentujące dane dotyczące atrybutów, które zostały zastosowane do elementu docelowego.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated">Ogólny listę <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> obiekty reprezentujące dane dotyczące atrybutów, które zostały zastosowane do elementu docelowego.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">Użyj tej metody do sprawdzenia kod w kontekście tylko odbicie w przypadkach, gdzie same atrybuty niestandardowe są zdefiniowane w kodzie, który jest ładowany do kontekstu reflection-only atrybutów niestandardowych.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">Metod, takich jak <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> i <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> nie można użyć w takich przypadkach, ponieważ tworzenia wystąpień atrybutów.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">Nie można wykonać kodu w kontekstu reflection-only.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>For more information and for example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">Aby uzyskać więcej informacji i na przykład kod, zobacz <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>This method gets custom attribute data for types, nested types, and type members, because the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and the classes in the <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> namespace that represent type members all derive from <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
          <target state="translated">Ta metoda pobiera dane atrybutów niestandardowych dla typów, zagnieżdżone typy i elementy członkowskie typu, ponieważ <ph id="ph1">&lt;xref:System.Type&gt;</ph> klasa i klasy w <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> przestrzeni nazw, która reprezentuje dziedziczyć wszystkie elementy członkowskie typu <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Zwraca kod skrótu dla tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The type of custom attribute to search for.</source>
          <target state="translated">Typ atrybutu niestandardowego do wyszukania.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The search includes derived types.</source>
          <target state="translated">Wyszukiwanie uwzględnia typów pochodnych.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">Ten parametr jest ignorowany dla właściwości i zdarzeń.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, wskazuje, czy jeden lub więcej atrybutów określonego typu lub jego typów pochodnych jest stosowane do tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or any of its derived types is applied to this member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli jeden lub więcej wystąpień <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> lub dowolny z jego typów pochodnych jest stosowane do tego elementu członkowskiego; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">Ta metoda powoduje ignorowanie <ph id="ph1">`inherit`</ph> parametr dla właściwości i zdarzeń.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Aby przeszukać łańcuch dziedziczenia dla atrybutów dla właściwości i zdarzenia, użyj odpowiedniej przeciążeń <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns <ph id="ph1">`true`</ph> if a type, method, or constructor has security attributes stored in the new metadata format.</source>
          <target state="translated">W programie .NET Framework w wersji 2.0, ta metoda zwraca <ph id="ph1">`true`</ph> typu, metody lub konstruktora czy atrybutów zabezpieczeń przechowywanych w nowym formacie metadanych.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">Zestawy skompilowane z wersji 2.0, użyj tego formatu.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">Dynamiczne zestawy i zestawy skompilowane z wcześniejszych wersji programu .NET Framework używają stary format XML.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>emitowanie deklaratywne atrybuty zabezpieczeń<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example determines whether the specified attribute is applied to the specified member.</source>
          <target state="translated">Poniższy przykład określa, czy określony atrybut jest stosowany do określonego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>When overridden in a derived class, gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating the type of the member — method, constructor, event, and so on.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> wartość wskazujący typ elementu członkowskiego — metoda, konstruktora, zdarzeń i tak dalej.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating the type of member.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> wskazujące typ elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>This property is overridden in derived classes, and the override returns the appropriate member type.</source>
          <target state="translated">Ta właściwość jest przesłonięte w klasach pochodnych, a zastąpienie zwraca typ właściwego członka.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property can be used to determine the member type of any given member.</source>
          <target state="translated">W związku z tym podczas badania zestawu <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obiektów — na przykład tablicy zwracanej przez <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> właściwości może służyć do określenia członka danego typu.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, get the class <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">`MemberType`</ph> właściwości, uzyskać klasy <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> array.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> tablicy.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>From the <ph id="ph1">`MethodInfo`</ph> array, get the <ph id="ph2">`MemberTypes`</ph>.</source>
          <target state="translated">Z <ph id="ph1">`MethodInfo`</ph> tablicy, Pobierz <ph id="ph2">`MemberTypes`</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>The following example displays the member name and type of a specified class.</source>
          <target state="translated">W poniższym przykładzie przedstawiono nazwę elementu członkowskiego i typ określonej klasy.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>Gets a value that identifies a metadata element.</source>
          <target state="translated">Pobiera wartość, która identyfikuje element metadanych.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>A value which, in combination with <ph id="ph1">&lt;see cref="P:System.Reflection.MemberInfo.Module" /&gt;</ph>, uniquely identifies a metadata element.</source>
          <target state="translated">A wartość, która w połączeniu z <ph id="ph1">&lt;see cref="P:System.Reflection.MemberInfo.Module" /&gt;</ph>, unikatowo identyfikuje element metadanych.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
          <target state="translated">Tokeny przy użyciu tej właściwości mogą być przekazywane do niezarządzanego odbicia interfejsu API.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>niezarządzanego API odbicia<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">Przy użyciu interfejsu API odbicia niezarządzane wymaga znajomości dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "Partycji II: metadane definicji i semantyki" i "Partycji III: CIL instrukcji Set".</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Dokumentacja jest dostępna w trybie online; zobacz <bpt id="p1">[</bpt>ECMA C# i wspólne normy infrastruktury języka<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> w witrynie MSDN i <bpt id="p2">[</bpt>standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> w witrynie sieci Web międzynarodowej Ecma.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> represents an array method, such as <ph id="ph2">&lt;see langword="Address" /&gt;</ph>, on an array type whose element type is a dynamic type that has not been completed.</source>
          <target state="translated">Bieżący <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> reprezentuje metodę tablicy, takich jak <ph id="ph2">&lt;see langword="Address" /&gt;</ph>, na typ tablicy o typie elementu jest typu dynamicznego, która nie została ukończona.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>To get a metadata token in this case, pass the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> object to the <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /&gt;</ph> method; or use the <ph id="ph3">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> method to get the token directly, instead of using the <ph id="ph4">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> method to get a <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> first.</source>
          <target state="translated">Aby uzyskać token metadanych w takim przypadku, należy przekazać <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> do obiektu <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /&gt;</ph> metody, lub użyj <ph id="ph3">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> metodę, aby pobrać token bezpośrednio, zamiast używać <ph id="ph4">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> metodę, aby pobrać <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> pierwszy.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Module">
          <source>Gets the module in which the type that declares the member represented by the current <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is defined.</source>
          <target state="translated">Pobiera moduł, w którym typ, który deklaruje element członkowski reprezentowany przez bieżący <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> jest zdefiniowany.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> in which the type that declares the member represented by the current <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is defined.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> , W której typem, który deklaruje element członkowski reprezentowany przez bieżący <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> jest zdefiniowany.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>This property is provided as a convenience.</source>
          <target state="translated">Ta właściwość jest udostępniana jako udogodnienie.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>It is equivalent to using the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property to get the type in which the method is declared, and then calling the <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object.</source>
          <target state="translated">Jest to równoważne przy użyciu <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> właściwości można pobrać typu, w którym zadeklarowany jest metoda, a następnie wywołania <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> właściwość powstałe w ten sposób <ph id="ph3">&lt;xref:System.Type&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The following code example declares a class that inherits <ph id="ph1">&lt;xref:System.Object&gt;</ph> and overrides <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Poniższy przykładowy kod deklaruje klasy, która dziedziczy <ph id="ph1">&lt;xref:System.Object&gt;</ph> i zastępuje <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The example obtains <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> objects for the class's <ph id="ph2">`ToString`</ph> method and for the inherited <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> method, and displays the names of the modules in which the two methods are declared.</source>
          <target state="translated">Przykład uzyskuje <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> obiektów dla określonej klasy <ph id="ph2">`ToString`</ph> — metoda i dziedziczonego <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> metody i wyświetla nazwy moduły, w których dwie metody są deklarowane jako.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Module">
          <source>This method is not implemented.</source>
          <target state="translated">Ta metoda nie jest zaimplementowana.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Name">
          <source>Gets the name of the current member.</source>
          <target state="translated">Pobiera nazwę bieżącego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name of this member.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> zawierającego nazwę tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>Only the simple name of the member is returned, not the fully qualified name.</source>
          <target state="translated">Prosta nazwa elementu członkowskiego jest zwracany, nie w pełni kwalifikowanej nazwy.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> property, get the class <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> właściwości, uzyskać klasy <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> array.</source>
          <target state="translated">Z <ph id="ph1">`Type`</ph>, Pobierz <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> tablicy.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>From a <ph id="ph1">`MemberInfo`</ph> element of the array, obtain the <ph id="ph2">`Name`</ph> property.</source>
          <target state="translated">Z <ph id="ph1">`MemberInfo`</ph> uzyskać elementu tablicy, <ph id="ph2">`Name`</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>This example lists the <ph id="ph1">`Name`</ph> and <ph id="ph2">`DeclaringType`</ph> property of each member of the specified class.</source>
          <target state="translated">W tym przykładzie przedstawiono <ph id="ph1">`Name`</ph> i <ph id="ph2">`DeclaringType`</ph> właściwości dla każdego elementu członkowskiego w określonej klasy.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> Do porównania <bpt id="p1">&lt;c&gt;</bpt>prawo<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> Do porównania <bpt id="p1">&lt;c&gt;</bpt>po lewej stronie<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Wskazuje, czy dwa <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> obiekty są takie same.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="left" /&gt;</ph> jest równa <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; w przeciwnym razie <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> Do porównania <bpt id="p1">&lt;c&gt;</bpt>prawo<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> Do porównania <bpt id="p1">&lt;c&gt;</bpt>po lewej stronie<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Wskazuje, czy dwa <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> obiekty nie są takie same.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="left" /&gt;</ph> nie jest równa <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; w przeciwnym razie <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>Gets the class object that was used to obtain this instance of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>.</source>
          <target state="translated">Pobiera obiekt klasy, które zostało użyte do uzyskania tego wystąpienia <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object through which this <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> object was obtained.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Type" /&gt;</ph> Obiektu, do której ta <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> obiekt został uzyskany.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The <ph id="ph1">`ReflectedType`</ph> property retrieves the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that was used to obtain this instance of <ph id="ph3">`MemberInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`ReflectedType`</ph> Pobiera właściwość <ph id="ph2">&lt;xref:System.Type&gt;</ph> obiekt, który został użyty do uzyskania tego wystąpienia <ph id="ph3">`MemberInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>This may differ from the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property if this <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object represents a member that is inherited from a base class.</source>
          <target state="translated">To może różnić się od wartości <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> właściwość, o ile to <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obiekt reprezentuje element członkowski, który jest dziedziczona z klasy podstawowej.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>If the <ph id="ph1">`MemberInfo`</ph> object is a global member (that is, if it was obtained from the <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method, which returns global methods on a module), the returned <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> will be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`MemberInfo`</ph> obiektu jest elementem członkowskim globalnego (to znaczy, jeśli został on uzyskany <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> metody, która zwraca globalne metody w module), zwracana <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> będzie <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph> changes when the member <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> is viewed from a <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obtained from type <ph id="ph4">&lt;xref:System.Object&gt;</ph> and from a <ph id="ph5">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obtained from the <ph id="ph6">&lt;xref:System.Reflection.MemberInfo&gt;</ph> class itself, which inherits <ph id="ph7">&lt;xref:System.Object&gt;</ph> but does not override <ph id="ph8">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Poniższy kod przedstawia przykład sposób <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph> zmiany, gdy element członkowski <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> są wyświetlane z <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> uzyskane z typu <ph id="ph4">&lt;xref:System.Object&gt;</ph> i z <ph id="ph5">&lt;xref:System.Reflection.MemberInfo&gt;</ph> uzyskane z <ph id="ph6">&lt;xref:System.Reflection.MemberInfo&gt;</ph> siebie, która dziedziczy klasy<ph id="ph7">&lt;xref:System.Object&gt;</ph> , ale nie przesłania <ph id="ph8">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Musi być wartością IID_NULL.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Przekazana tablica nazw ma być mapowana.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Liczba nazw, które mają być mapowane.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Metoda jest wywoływana z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejsu.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący obiekt <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący obiekt <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informacje o typie, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identyfikator regionalny dla informacji o typie.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Metoda jest wywoływana z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejsu.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Metoda jest wywoływana z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejsu.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Określa element członkowski.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Musi być wartością IID_NULL.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flagi opisujące kontekst wywołania.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Wskaźnik do struktury, która zawiera informacje o wyjątku.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indeks pierwszego argumentu, który zawiera błąd.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::Invoke`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Metoda jest wywoływana z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejsu.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>