<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c1987bffe3d2cba01471534c9b3fac3e0c152c07" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36555651" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Interfejs wewnętrzny do uzyskiwania dostępu do argumentów wiele węzłów drzewa (DynamicExpression ElementInit, MethodCallExpression, InvocationExpression, NewExpression i InexExpression).  Nie należy używać tego interfejsu API.  Jest tylko publiczny z powodu refaktoryzacji biblioteki DLL i istnieje tylko w przypadku optymalizacji wydajności wewnętrznego.  
  
Dzięki temu dwie optymalizacje, które zmniejszają rozmiar drzewa wyrażeń.  Pierwszy umożliwia węzły drzewa, które mają być przechowywane IList&lt;T&gt; zamiast ReadOnlyCollection.  IList&lt;T&gt; zapisuje koszt przydzielanie ReadOnlyCollection dla każdego węzła.  Drugi umożliwia tworzenie podklas specjalistyczne, zawierających na określonej liczbie argumentów (na przykład Block2, Block3 Block4).  W związku z tym te węzły unikać ReadOnlyCollection i Tablica do przechowywania swoich elementów, zapisywanie 32 bajtów w każdym węźle.  
  
Węzły drzewa wyrażeń w dalszym ciągu udostępnianie oryginalne właściwości LINQ ReadOnlyCollections.  Węzły w tym dzięki ponownemu wykorzystaniu pole do przechowywania zarówno tablicy lub element, który normalnie powinny być przechowywane w tablicy.  
  
W przypadku tablicy kolekcji jest wpisany IList&lt;T&gt; zamiast ReadOnlyCollection&lt;T&gt;.  Gdy węzeł jest początkowo tworzona jest tablicą.  Gdy kompilator uzyskuje dostęp do elementów członkowskich używa tego interfejsu.  Uzyskiwanie dostępu do elementów tablicy promuje macierzy ReadOnlyCollection.  
  
W przypadku obiektu przechowujemy pierwszy argument w polu z kontrolą typów do obiektu.  Gdy węzeł początkowo jest konstruowany, pole zawiera wyrażenie.  Kompilator uzyskuje dostęp do argumentów za pomocą tego interfejsu, a metody dostępu dla pierwszego argumentu użyto Expression.ReturnObject, która zwraca obiekt, który obsługuje przypadek, wyrażenie lub ReadOnlyCollection.  Gdy użytkownik uzyskuje dostęp do ReadOnlyCollection, pole Obiekt jest aktualizowany do przechowywania bezpośrednio na ReadOnlyCollection.  
  
Należy pamiętać, że wyrażenia stale zwracają ReadOnlyCollection ten sam.  W przeciwnym razie ponownego zapisywania walker drzewa spowoduje awarię.  Jest istotną zmianę z LINQ w wersji 1 do zwrócenia innego ReadOnlyCollections tworzą tego samego węzła wyrażenia.  Obecnie użytkownicy polegać na tożsamość obiektu, aby sprawdzić, czy węzeł został zmieniony.  Przechowywanie ReadOnlyCollection pola jest przeciążona i zmniejsza użycie pamięci zachowuje zgodność z publicznego interfejsu API.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca liczbę argumentów do węzła drzewa wyrażeń.  Nie należy używać tego typu.  Nie jest tylko publiczny z powodu zestawu refaktoryzacji i jest używana wewnętrznie do optymalizacji wydajności.</summary>
        <value>Liczba argumentów dla węzła drzewa wyrażeń jako <see cref="T:System.Int32" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks argumentu.</param>
        <summary>Zwraca argument w indeksie, zostanie zgłoszony, jeśli indeks jest poza zakresem.  Nie należy używać tego typu.  Nie jest tylko publiczny z powodu zestawu refaktoryzacji i jest używana wewnętrznie do optymalizacji wydajności.</summary>
        <returns>Argument w indeksie, zostanie zgłoszony, jeśli indeks jest poza granicami jako <see cref="T:System.Linq.Expressions.Expression" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>