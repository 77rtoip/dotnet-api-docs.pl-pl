<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18b622ce78fe8295b4aac908d2b2687c5ed1f01f" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715514" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="06496-101">Interfejs wewnętrzny do uzyskiwania dostępu do argumentów wiele węzłów drzewa (DynamicExpression ElementInit, MethodCallExpression, InvocationExpression, NewExpression i IndexExpression).</span><span class="sxs-lookup"><span data-stu-id="06496-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).</span></span>  <span data-ttu-id="06496-102">Nie należy używać tego interfejsu API.</span><span class="sxs-lookup"><span data-stu-id="06496-102">You should not use this API.</span></span>  <span data-ttu-id="06496-103">Jest tylko publiczny z powodu refaktoryzacji biblioteki DLL i istnieje tylko w przypadku optymalizacji wydajności wewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="06496-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span></span>  
  
<span data-ttu-id="06496-104">Dzięki temu dwie optymalizacje, które zmniejszają rozmiar drzewa wyrażeń.</span><span class="sxs-lookup"><span data-stu-id="06496-104">This enables two optimizations which reduce the size of expression trees.</span></span>  <span data-ttu-id="06496-105">Pierwszy umożliwia węzły drzewa, które mają być przechowywane IList&lt;T&gt; zamiast ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="06496-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span></span>  <span data-ttu-id="06496-106">IList&lt;T&gt; zapisuje koszt przydzielanie ReadOnlyCollection dla każdego węzła.</span><span class="sxs-lookup"><span data-stu-id="06496-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span></span>  <span data-ttu-id="06496-107">Drugi umożliwia tworzenie podklas specjalistyczne, zawierających na określonej liczbie argumentów (na przykład Block2, Block3 Block4).</span><span class="sxs-lookup"><span data-stu-id="06496-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span></span>  <span data-ttu-id="06496-108">W związku z tym te węzły unikać ReadOnlyCollection i Tablica do przechowywania swoich elementów, zapisywanie 32 bajtów w każdym węźle.</span><span class="sxs-lookup"><span data-stu-id="06496-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span></span>  
  
<span data-ttu-id="06496-109">Węzły drzewa wyrażeń w dalszym ciągu udostępnianie oryginalne właściwości LINQ ReadOnlyCollections.</span><span class="sxs-lookup"><span data-stu-id="06496-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span></span>  <span data-ttu-id="06496-110">Węzły w tym dzięki ponownemu wykorzystaniu pole do przechowywania zarówno tablicy lub element, który normalnie powinny być przechowywane w tablicy.</span><span class="sxs-lookup"><span data-stu-id="06496-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span></span>  
  
<span data-ttu-id="06496-111">W przypadku tablicy kolekcji jest wpisany IList&lt;T&gt; zamiast ReadOnlyCollection&lt;T&gt;.</span><span class="sxs-lookup"><span data-stu-id="06496-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span></span>  <span data-ttu-id="06496-112">Gdy węzeł jest początkowo tworzona jest tablicą.</span><span class="sxs-lookup"><span data-stu-id="06496-112">When the node is initially constructed it is an array.</span></span>  <span data-ttu-id="06496-113">Gdy kompilator uzyskuje dostęp do elementów członkowskich używa tego interfejsu.</span><span class="sxs-lookup"><span data-stu-id="06496-113">When the compiler accesses the members it uses this interface.</span></span>  <span data-ttu-id="06496-114">Uzyskiwanie dostępu do elementów tablicy promuje macierzy ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="06496-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="06496-115">W przypadku obiektu przechowujemy pierwszy argument w polu z kontrolą typów do obiektu.</span><span class="sxs-lookup"><span data-stu-id="06496-115">For the object case we store the first argument in a field typed to object.</span></span>  <span data-ttu-id="06496-116">Gdy węzeł początkowo jest konstruowany, pole zawiera wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="06496-116">When the node is initially constructed, the field holds the Expression.</span></span>  <span data-ttu-id="06496-117">Kompilator uzyskuje dostęp do argumentów za pomocą tego interfejsu, a metody dostępu dla pierwszego argumentu użyto Expression.ReturnObject, która zwraca obiekt, który obsługuje przypadek, wyrażenie lub ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="06496-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span></span>  <span data-ttu-id="06496-118">Gdy użytkownik uzyskuje dostęp do ReadOnlyCollection, pole Obiekt jest aktualizowany do przechowywania bezpośrednio na ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="06496-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="06496-119">Należy pamiętać, że wyrażenia stale zwracają ReadOnlyCollection ten sam.</span><span class="sxs-lookup"><span data-stu-id="06496-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span></span>  <span data-ttu-id="06496-120">W przeciwnym razie ponownego zapisywania walker drzewa spowoduje awarię.</span><span class="sxs-lookup"><span data-stu-id="06496-120">Otherwise, the re-writer tree walker will break.</span></span>  <span data-ttu-id="06496-121">Jest istotną zmianę z LINQ w wersji 1 do zwrócenia innego ReadOnlyCollections tworzą tego samego węzła wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="06496-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span></span>  <span data-ttu-id="06496-122">Obecnie użytkownicy polegać na tożsamość obiektu, aby sprawdzić, czy węzeł został zmieniony.</span><span class="sxs-lookup"><span data-stu-id="06496-122">Currently users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="06496-123">Przechowywanie ReadOnlyCollection pola jest przeciążona i zmniejsza użycie pamięci zachowuje zgodność z publicznego interfejsu API.</span><span class="sxs-lookup"><span data-stu-id="06496-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06496-124">Zwraca liczbę argumentów do węzła drzewa wyrażeń.</span><span class="sxs-lookup"><span data-stu-id="06496-124">Returns the number of arguments to the expression tree node.</span></span>  <span data-ttu-id="06496-125">Nie należy używać tego typu.</span><span class="sxs-lookup"><span data-stu-id="06496-125">You should not use this type.</span></span>  <span data-ttu-id="06496-126">Nie jest tylko publiczny z powodu zestawu refaktoryzacji i jest używana wewnętrznie do optymalizacji wydajności.</span><span class="sxs-lookup"><span data-stu-id="06496-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <value><span data-ttu-id="06496-127">Liczba argumentów dla węzła drzewa wyrażeń jako <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="06496-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="06496-128">Indeks argumentu.</span><span class="sxs-lookup"><span data-stu-id="06496-128">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="06496-129">Zwraca argument w indeksie, zostanie zgłoszony, jeśli indeks jest poza zakresem.</span><span class="sxs-lookup"><span data-stu-id="06496-129">Returns the argument at index, throwing if index is out of bounds.</span></span>  <span data-ttu-id="06496-130">Nie należy używać tego typu.</span><span class="sxs-lookup"><span data-stu-id="06496-130">You should not use this type.</span></span>  <span data-ttu-id="06496-131">Nie jest tylko publiczny z powodu zestawu refaktoryzacji i jest używana wewnętrznie do optymalizacji wydajności.</span><span class="sxs-lookup"><span data-stu-id="06496-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <returns><span data-ttu-id="06496-132">Argument w indeksie, zostanie zgłoszony, jeśli indeks jest poza granicami jako <see cref="T:System.Linq.Expressions.Expression" />.</span><span class="sxs-lookup"><span data-stu-id="06496-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>