<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bb1b0a12225c49cd06302a4822210d08cda2957f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30457053" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="05a16-101">Interfejs wewnętrzny do uzyskiwania dostępu do argumentów wiele węzłów drzewa (DynamicExpression, ElementInit MethodCallExpression, InvocationExpression, NewExpression i InexExpression).</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</span>
      </span>
      <span data-ttu-id="05a16-102">Nie należy używać tego interfejsu API.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-102">You should not use this API.</span>
      </span>
      <span data-ttu-id="05a16-103">Tylko publiczne z powodu refaktoryzacji biblioteki DLL i jest istnieje tylko w przypadku optymalizacji wydajności wewnętrznego.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span>
      </span>
      <span data-ttu-id="05a16-104">Dzięki temu dwie funkcje optymalizacji, które zmniejszyć rozmiar drzewa wyrażeń.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-104">This enables two optimizations which reduce the size of expression trees.</span>
      </span>
      <span data-ttu-id="05a16-105">Pierwszy umożliwia węzły drzewa do przechowywania na interfejsie IList&lt;T&gt; zamiast ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="05a16-106">IList&lt;T&gt; zapisuje koszt przydziału ReadOnlyCollection dla każdego węzła.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span>
      </span>
      <span data-ttu-id="05a16-107">Drugi umożliwia tworzenie podklasy specjalne, których są przechowywane na określoną liczbę argumentów (na przykład Block2, Block3, Block4).</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span>
      </span>
      <span data-ttu-id="05a16-108">W związku z tym te węzły unikać zarówno ReadOnlyCollection, jak i tablicy do przechowywania swoich elementów, zapisywanie 32 bajtów w każdym węźle.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span>
      </span>
      <span data-ttu-id="05a16-109">Węzły drzewa wyrażenia w dalszym ciągu udostępnić oryginalne właściwości ReadOnlyCollections LINQ.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span>
      </span>
      <span data-ttu-id="05a16-110">Węzły w tym celu ponownie za pomocą pola do przechowywania zarówno tablicy lub element, który normalnie powinny być przechowywane w tablicy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span>
      </span>
      <span data-ttu-id="05a16-111">W przypadku tablicy kolekcji jest wpisana do IList&lt;T&gt; zamiast ReadOnlyCollection&lt;T&gt;.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span>
      </span>
      <span data-ttu-id="05a16-112">Gdy węzeł jest początkowo utworzony jest tablicą.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-112">When the node is initially constructed it is an array.</span>
      </span>
      <span data-ttu-id="05a16-113">Gdy kompilator uzyskuje dostęp do elementów członkowskich używa tego interfejsu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-113">When the compiler accesses the members it uses this interface.</span>
      </span>
      <span data-ttu-id="05a16-114">Uzyskiwanie dostępu do elementów tablicy zamienia tablicy, tak aby ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="05a16-115">W przypadku obiektu pierwszy argument są przechowywane w polu wpisany do obiektu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-115">For the object case we store the first argument in a field typed to object.</span>
      </span>
      <span data-ttu-id="05a16-116">Gdy węzeł jest początkowo utworzony, pole zawiera wyrażenie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-116">When the node is initially constructed, the field holds the Expression.</span>
      </span>
      <span data-ttu-id="05a16-117">Kompilator uzyskuje dostęp do argumentów za pośrednictwem tego interfejsu i dostępu dla pierwszego argumentu za pomocą Expression.ReturnObject obiekt, który obsługuje przypadek wyrażenie lub wartość ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span>
      </span>
      <span data-ttu-id="05a16-118">Gdy użytkownik uzyskuje dostęp do ReadOnlyCollection, pole obiektu jest aktualizowana do przechowywania bezpośrednio na wartość ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="05a16-119">Należy pamiętać, że wyrażeń stale zwracają tego samego ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="05a16-120">W przeciwnym razie przerwie walkera drzewa modułu ponownego zapisywania.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-120">Otherwise, the re-writer tree walker will break.</span>
      </span>
      <span data-ttu-id="05a16-121">Jest istotne zmiany od v1 LINQ do zwrócenia innego ReadOnlyCollections tworzą tego samego węzła wyrażenia.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span>
      </span>
      <span data-ttu-id="05a16-122">Obecnie użytkownicy mogą polegać na tożsamość obiektu stwierdzić, czy węzeł został zmieniony.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-122">Currently users can rely on object identity to tell if the node has changed.</span>
      </span>
      <span data-ttu-id="05a16-123">Przechowywanie ReadOnlyCollection przeciążone pola zarówno zmniejsza zużycie pamięci i obsługuje zgodności dla publiczny interfejs API.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05a16-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="05a16-124">Zwraca liczbę argumentów do węzła drzewa wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-124">Returns the number of arguments to the expression tree node.</span>
          </span>
          <span data-ttu-id="05a16-125">Nie należy używać tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-125">You should not use this type.</span>
          </span>
          <span data-ttu-id="05a16-126">Jest on tylko publiczne z powodu zestawu refaktoryzacji i jest używana wewnętrznie do optymalizacji wydajności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="05a16-127">Liczba argumentów dla węzła drzewa wyrażenia jako <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="05a16-128">Indeks argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-128">The index of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="05a16-129">Zwraca argument w indeksie, wyrzucanie Jeśli indeks jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-129">Returns the argument at index, throwing if index is out of bounds.</span>
          </span>
          <span data-ttu-id="05a16-130">Nie należy używać tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-130">You should not use this type.</span>
          </span>
          <span data-ttu-id="05a16-131">Jest on tylko publiczne z powodu zestawu refaktoryzacji i jest używana wewnętrznie do optymalizacji wydajności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="05a16-132">Argument w indeksie, wyrzucanie Jeśli indeks jest poza zakresem jako <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05a16-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>