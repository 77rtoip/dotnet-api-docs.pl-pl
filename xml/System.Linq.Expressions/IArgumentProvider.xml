<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="978f18032b1aec687a3f90531a776cb2a47a2705" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67244478" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Interfejs wewnętrzny do uzyskiwania dostępu do argumentów wiele węzłów drzewa (DynamicExpression ElementInit, MethodCallExpression, InvocationExpression, NewExpression i IndexExpression).  Ten interfejs API jest tylko do użytku wewnętrznego.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

Nie należy używać tego interfejsu API.  Nie jest publiczny wyłącznie z powodu zestawu refaktoryzacji, a istnieje tylko w przypadku optymalizacji wydajności wewnętrznego. Umożliwia ona dwóch optymalizacje, które zmniejszają rozmiar drzewa:
  
1. Umożliwia ona węzły, które mają być przechowywane <xref:System.Collections.Generic.IList%601> zamiast <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  Spowoduje to zapisanie koszt przydzielanie kolekcji tylko do odczytu dla każdego węzła.
  
2. Umożliwia ona wyspecjalizowane podklasy ma zostać utworzony na blokady do określonej liczby argumentów (na przykład `Block2`, `Block2`, `Block4`).  Dlatego te węzły unikać zarówno <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> i Tablica do przechowywania elementów w związku z tym zapisywanie 32 bajtów w każdym węźle.  Ta technika jest używana przez różnych węzłów, w tym <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, i <xref:System.Linq.Expressions.MethodCallExpression>.
            
Węzły drzewa wyrażeń w dalszym ciągu udostępnianie oryginalne właściwości LINQ <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> obiektów. Mogą to zrobić dzięki ponownemu wykorzystaniu pole do przechowywania zarówno tablicy lub element, który normalnie powinny być przechowywane w tablicy.
            
W przypadku tablicy jest wpisany kolekcji <xref:System.Collections.Generic.IList%601> zamiast <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. Gdy węzeł początkowo jest konstruowany, jest tablicą.  Kompilator lub narzędzi w tej bibliotece uzyskać dostęp do elementów za pomocą tego interfejsu. Uzyskiwanie dostępu do elementów tablicy promuje macierzy <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
W przypadku obiektu pierwszy argument jest przechowywany w wpisane w polu <xref:System.Object>. Gdy węzeł początkowo jest konstruowany, to pole zawiera <xref:System.Linq.Expressions.Expression> pierwszego argumentu.  Kompilator i narzędzia w tej bibliotece dostęp do argumentów, ponownie użyć tego interfejsu, gdy metody dostępu dla pierwszego argumentu używa wewnętrznego `Expression.ReturnObject<T>(System.Object)` metody pomocnika, aby zwrócić obiekt, który obsługuje <xref:System.Linq.Expressions.Expression> lub <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> przypadek. Gdy użytkownik uzyskuje dostęp do <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, pole Obiekt jest aktualizowany do przechowywania bezpośrednio na <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
Ważne jest, że <xref:System.Linq.Expressions.Expression> właściwości stale zwracają takie same <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. W przeciwnym razie walker drzewa dysków, które są używane przez osoby odwiedzające wyrażenia spowoduje awarię. Jest istotną zmianę z LINQ w wersji 1, aby zwracać różne <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> z tej samej <xref:System.Linq.Expressions.Expression> węzła. Obecnie użytkownicy polegać na tożsamość obiektu, aby sprawdzić, czy węzeł został zmieniony.  Przechowywanie <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> pola jest przeciążona zarówno zmniejsza użycie pamięci i zachowuje zgodność z publicznego interfejsu API.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca liczbę argumentów do węzła drzewa wyrażeń. Ten interfejs API jest tylko do użytku wewnętrznego.</summary>
        <value>Liczba argumentów dla węzła drzewa wyrażeń jako <see cref="T:System.Int32" />.</value>
        <remarks>Nie należy używać tego interfejsu API. Nie jest publiczny wyłącznie z powodu zestawu refaktoryzacji i jest używana wewnętrznie do optymalizacji wydajności.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks argumentu.</param>
        <summary>Zwraca wartość argumentu w <paramref name="index" />, zgłaszanie przypadku <paramref name="index" /> jest poza zakresem. Ten interfejs API jest tylko do użytku wewnętrznego.</summary>
        <returns>Argument w indeksie.</returns>
        <remarks>Nie należy używać tego interfejsu API.  Nie jest tylko publiczny z powodu zestawu refaktoryzacji i jest używana wewnętrznie do optymalizacji wydajności.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>