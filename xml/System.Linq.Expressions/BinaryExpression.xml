<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BinaryExpression.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d50c9ad7ef1c5cafd5dc63627fc713caea78b17c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d50c9ad7ef1c5cafd5dc63627fc713caea78b17c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Represents an expression that has a binary operator.</source>
          <target state="translated">Reprezentuje wyrażenie zawiera operator binarny.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>The following tables summarize the factory methods that can be used to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> that has a specific node type, represented by the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property.</source>
          <target state="translated">W poniższej tabeli podsumowano metodami factory, które mogą służyć do tworzenia <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> mający typ określonego węzła, reprezentowany przez <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Each table contains information for a specific class of operations such as arithmetic or bitwise.</source>
          <target state="translated">Każda tabela zawiera informacje dotyczące określonej klasy operacje, takie jak arytmetycznego lub operator.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Binary Arithmetic Operations</source>
          <target state="translated">Operacje arytmetyczne binarne</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Node Type</source>
          <target state="translated">Typ węzła</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Factory Method</source>
          <target state="translated">Metoda fabryki</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Bitwise Operations</source>
          <target state="translated">Operacje bitowe</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Node Type</source>
          <target state="translated">Typ węzła</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Factory Method</source>
          <target state="translated">Metoda fabryki</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Shift Operations</source>
          <target state="translated">SHIFT operacji</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Node Type</source>
          <target state="translated">Typ węzła</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Factory Method</source>
          <target state="translated">Metoda fabryki</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Conditional Boolean Operations</source>
          <target state="translated">Warunkowe operacje logiczne</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Node Type</source>
          <target state="translated">Typ węzła</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Factory Method</source>
          <target state="translated">Metoda fabryki</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Comparison Operations</source>
          <target state="translated">Operacje porównania</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Node Type</source>
          <target state="translated">Typ węzła</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Factory Method</source>
          <target state="translated">Metoda fabryki</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Coalescing Operations</source>
          <target state="translated">Operacje łączącego</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Node Type</source>
          <target state="translated">Typ węzła</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Factory Method</source>
          <target state="translated">Metoda fabryki</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Array Indexing Operations</source>
          <target state="translated">Operacje indeksowania tablicy</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Node Type</source>
          <target state="translated">Typ węzła</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>Factory Method</source>
          <target state="translated">Metoda fabryki</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeBinary%2A&gt;</ph> methods can also be used to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph>.</source>
          <target state="translated">Ponadto <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeBinary%2A&gt;</ph> metody może również służyć do tworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>These factory methods can be used to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> of any node type that represents a binary operation.</source>
          <target state="translated">Te metody fabryki może służyć do tworzenia <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> dowolnego typu węzła, który reprezentuje operację binarną.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>The parameter of these methods that is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> specifies the desired node type.</source>
          <target state="translated">Parametr z tych metod, który jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> Określa typ żądanego węzła.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BinaryExpression">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> object that represents the subtraction of one number from another.</source>
          <target state="translated">Poniższy przykład tworzy <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> obiekt, który reprezentuje odejmowania jeden numer z innej.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The visitor to visit this node with.</source>
          <target state="translated">Obiekt odwiedzający odwiedź ten węzeł z.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Dispatches to the specific visit method for this node type.</source>
          <target state="translated">Wysyła do konkretnych można znaleźć metody dla tego typu węzła.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> calls the <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> wywołania <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The result of visiting this node.</source>
          <target state="translated">Wynik tego węzła na stronę.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>This default implementation for <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Ta domyślna implementacja dla <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> wywołania węzłów <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to call into a more specific method on a derived visitor class of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.</source>
          <target state="translated">Przesłonić tę metodę do wywołania do bardziej szczegółowych metody w klasie pochodnej odwiedzający z <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>However, it should still support unknown visitors by calling <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Obsługuje on jednak powinien nadal nieznany odwiedzających przez wywołanie metody <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BinaryExpression.CanReduce">
          <source>Gets a value that indicates whether the expression tree node can be reduced.</source>
          <target state="translated">Pobiera wartość wskazującą, czy można zmniejszyć węzła drzewa wyrażenia.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.CanReduce">
          <source>True if the expression tree node can be reduced, otherwise false.</source>
          <target state="translated">Wartość true, jeśli węzeł drzewa wyrażenia może być obniżona, w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BinaryExpression.Conversion">
          <source>Gets the type conversion function that is used by a coalescing or compound assignment operation.</source>
          <target state="translated">Pobiera funkcji konwersji typu, która jest używana przez operację przypisania łączącego lub złożonych.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.Conversion">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that represents a type conversion function.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> reprezentujący funkcji konwersji typu.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.Conversion">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph> for any <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> whose <ph id="ph4">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property is not <ph id="ph5">&lt;xref:System.Linq.Expressions.ExpressionType.Coalesce&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Właściwość jest <ph id="ph2">`null`</ph> jakichkolwiek <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> których <ph id="ph4">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> właściwość nie jest <ph id="ph5">&lt;xref:System.Linq.Expressions.ExpressionType.Coalesce&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BinaryExpression.IsLifted">
          <source>Gets a value that indicates whether the expression tree node represents a <bpt id="p1">*</bpt>lifted<ept id="p1">*</ept> call to an operator.</source>
          <target state="translated">Pobiera wartość wskazującą, czy węzeł drzewa wyrażenia reprezentuje <bpt id="p1">*</bpt>unosiło<ept id="p1">*</ept> wywołanie operatora.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.IsLifted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the node represents a lifted call; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli węzeł reprezentuje wywołanie podniesionym; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.IsLifted">
          <source>An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</source>
          <target state="translated">Operator wywołania została wyjęta, jeśli operator oczekuje argumentów wartości null, ale argumenty null są przekazywane do niego.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
          <source>Gets a value that indicates whether the expression tree node represents a <bpt id="p1">*</bpt>lifted<ept id="p1">*</ept> call to an operator whose return type is lifted to a nullable type.</source>
          <target state="translated">Pobiera wartość wskazującą, czy węzeł drzewa wyrażenia reprezentuje <bpt id="p1">*</bpt>unosiło<ept id="p1">*</ept> wywołanie operatora, którego typ zwracany jest unosiło do typu dopuszczającego wartość null.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operator's return type is lifted to a nullable type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli operator zwracany typ jest unosiło do typu dopuszczającego wartość null; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
          <source>An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</source>
          <target state="translated">Operator wywołania została wyjęta, jeśli operator oczekuje argumentów wartości null, ale argumenty null są przekazywane do niego.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
          <source>If the value of <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the operator returns a nullable type, and if a nullable operand evaluates to <ph id="ph3">`null`</ph>, the operator returns <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Jeśli wartość <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> jest <ph id="ph2">`true`</ph>, operator zwraca typ dopuszczający wartość null, a jeśli nullable argument operacji daje w wyniku <ph id="ph3">`null`</ph>, operator zwraca <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BinaryExpression.Left">
          <source>Gets the left operand of the binary operation.</source>
          <target state="translated">Pobiera lewy operand operację binarną.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.Left">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the left operand of the binary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący lewy operand operację binarną.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BinaryExpression.Method">
          <source>Gets the implementing method for the binary operation.</source>
          <target state="translated">Pobiera implementującej metody operację binarną.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.Method">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.Method">
          <source>If a <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> represents an operation that uses a predefined operator, the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> reprezentuje operację, która używa wstępnie zdefiniowanego operatora, <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> jest właściwość <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Reduce">
          <source>Reduces the binary expression node to a simpler expression.</source>
          <target state="translated">Ogranicza węzła wyrażenie binarne do wyrażenia prostsze.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Reduce">
          <source>The reduced expression.</source>
          <target state="translated">Zmniejszenie wyrażenie.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.BinaryExpression.Reduce">
          <source>If CanReduce returns true, this should return a valid expression.</source>
          <target state="translated">Jeśli CanReduce zwraca wartość true, powinny zostać zwrócone prawidłowe wyrażenie.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.BinaryExpression.Reduce">
          <source>This method can return another node which itself must be reduced.</source>
          <target state="translated">Ta metoda może zwracać innego węzła, które muszą zostać zmniejszona.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BinaryExpression.Right">
          <source>Gets the right operand of the binary operation.</source>
          <target state="translated">Pobiera prawy operand operację binarną.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BinaryExpression.Right">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the right operand of the binary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący prawy operand operację binarną.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property of the result.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> Właściwości wyniku.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property of the result.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> Właściwości wyniku.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property of the result.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> Właściwości wyniku.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">Tworzy nowe wyrażenie jak ta, ale przy użyciu dostarczonego elementów podrzędnych.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">Jeśli wszystkie elementy podrzędne są takie same, zwróci tego wyrażenia.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">To wyrażenie zmiana bez żadnych elementów podrzędnych lub wyrażenie z zaktualizowanych elementów podrzędnych.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>