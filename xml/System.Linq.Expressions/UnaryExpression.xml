<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnaryExpression.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac578b490019eb46301374b660e227475d3f73a0716.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78b490019eb46301374b660e227475d3f73a0716</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>Represents an expression that has a unary operator.</source>
          <target state="translated">Reprezentuje wyrażenie zawiera operatora jednoargumentowego.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>The following table summarizes the factory methods that can be used to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> that has a specific node type.</source>
          <target state="translated">Poniższa tabela zawiera podsumowanie metodami factory, które mogą służyć do tworzenia <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> mający typ określonego węzła.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>Factory Method</source>
          <target state="translated">Metoda fabryki</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeUnary%2A&gt;</ph> methods can also be used to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph>.</source>
          <target state="translated">Ponadto <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeUnary%2A&gt;</ph> metody może również służyć do tworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>These factory methods can be used to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> of any node type that represents a unary operation.</source>
          <target state="translated">Te metody fabryki może służyć do tworzenia <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> dowolnego typu węzła, który reprezentuje operację jednoargumentową.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>The parameter of these methods that is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> specifies the desired node type.</source>
          <target state="translated">Parametr z tych metod, który jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> Określa typ żądanego węzła.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> object that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</source>
          <target state="translated">Poniższy przykład tworzy <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> obiekt, który reprezentuje konwersji odwołania wyrażenia liczby całkowitej wartości null na typ integer wartości null.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.CanReduce">
          <source>Gets a value that indicates whether the expression tree node can be reduced.</source>
          <target state="translated">Pobiera wartość wskazującą, czy można zmniejszyć węzła drzewa wyrażenia.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.CanReduce">
          <source>True if a node can be reduced, otherwise false.</source>
          <target state="translated">Wartość true, jeśli węzeł może być obniżona, w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.IsLifted">
          <source>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</source>
          <target state="translated">Pobiera wartość wskazującą, czy węzeł drzewa wyrażenia reprezentuje wywołanie podniesionym operatora.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLifted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the node represents a lifted call; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli węzeł reprezentuje wywołanie podniesionym; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLifted">
          <source>An operator call is <bpt id="p1">*</bpt>lifted<ept id="p1">*</ept> if the operator expects a non-nullable operand but a nullable operand is passed to it.</source>
          <target state="translated">Operator wywołania jest <bpt id="p1">*</bpt>unosiło<ept id="p1">*</ept> Jeśli operator oczekuje argumentu wartości null, ale argument NULL została przekazana do niej.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
          <source>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</source>
          <target state="translated">Pobiera wartość wskazującą, czy węzeł drzewa wyrażenia reprezentuje wywołanie podniesionym operatora, którego typ zwracany jest unosiło do typu dopuszczającego wartość null.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operator's return type is lifted to a nullable type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli operator zwracany typ jest unosiło do typu dopuszczającego wartość null; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
          <source>An operator call is <bpt id="p1">*</bpt>lifted<ept id="p1">*</ept> if the operator expects a non-nullable operand but a nullable operand is passed to it.</source>
          <target state="translated">Operator wywołania jest <bpt id="p1">*</bpt>unosiło<ept id="p1">*</ept> Jeśli operator oczekuje argumentu wartości null, ale argument NULL została przekazana do niej.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
          <source>If the value of <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the operator returns a nullable type and if the nullable operand evaluates to <ph id="ph3">`null`</ph>, the operator returns <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Jeśli wartość <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> jest <ph id="ph2">`true`</ph>, operator zwraca typ dopuszczający wartość null, a jeśli argument null jest <ph id="ph3">`null`</ph>, operator zwraca <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.Method">
          <source>Gets the implementing method for the unary operation.</source>
          <target state="translated">Pobiera wykonawczym metodę operację jednoargumentową.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.Method">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.NodeType">
          <source>Returns the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Zwraca typ węzła <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that represents this expression.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> Reprezentujący tego wyrażenia.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.Operand">
          <source>Gets the operand of the unary operation.</source>
          <target state="translated">Pobiera argument operację jednoargumentową.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.Operand">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the operand of the unary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący argument operację jednoargumentową.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Reduce">
          <source>Reduces the expression node to a simpler expression.</source>
          <target state="translated">Ogranicza węzła wyrażenia do wyrażenia prostsze.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Reduce">
          <source>The reduced expression.</source>
          <target state="translated">Zmniejszenie wyrażenie.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.UnaryExpression.Reduce">
          <source>If the <ph id="ph1">`CanReduce`</ph> method returns true, this should return a valid expression.</source>
          <target state="translated">Jeśli <ph id="ph1">`CanReduce`</ph> metoda zwraca wartość true, powinny zostać zwrócone prawidłowe wyrażenie.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.UnaryExpression.Reduce">
          <source>This method can return another node which itself must be reduced.</source>
          <target state="translated">Ta metoda może zwracać innego węzła, które muszą zostać zmniejszona.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">Pobiera typ statyczny wyrażenia, który to <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Type" /&gt;</ph> Reprezentujący typ statyczny wyrażenia.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property of the result.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> Właściwości wyniku.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">Tworzy nowe wyrażenie jak ta, ale przy użyciu dostarczonego elementów podrzędnych.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">Jeśli wszystkie elementy podrzędne są takie same, zwróci tego wyrażenia.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">To wyrażenie zmiana bez żadnych elementów podrzędnych lub wyrażenie z zaktualizowanych elementów podrzędnych.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>