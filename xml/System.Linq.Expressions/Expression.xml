<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Expression.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7f4e9615e4182e6b650a9cbb9024f593836bd0e0ca.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e9615e4182e6b650a9cbb9024f593836bd0e0ca</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Provides the base class from which the classes that represent expression tree nodes are derived.</source>
          <target state="translated">Udostępnia klasę podstawową, od których pochodzą klasy, które reprezentują węzły drzewa wyrażenia.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>It also contains <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) factory methods to create the various node types.</source>
          <target state="translated">Zawiera także <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) metodami factory, aby utworzyć różne typy węzłów.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>This is an <ph id="ph1">&lt;see langword="abstract" /&gt;</ph> class.</source>
          <target state="translated">Jest to <ph id="ph1">&lt;see langword="abstract" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression">
          <source>The following code example shows how to create a block expression.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia bloku.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression">
          <source>The block expression consists of two <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> objects and one <ph id="ph2">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> object.</source>
          <target state="translated">Wyrażenie bloku składa się z dwóch <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> obiektów i jeden <ph id="ph2">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Constructs a new instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Tworzy nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.#ctor">
          <source>Constructs a new instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Tworzy nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> to set as the node type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> Można ustawić jako typ węzła.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Tego <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
          <source>This constructor is called from constructors in derived classes.</source>
          <target state="translated">Ten konstruktor jest wywoływana z konstruktorów w klasach pochodnych.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The visitor to visit this node with.</source>
          <target state="translated">Obiekt odwiedzający odwiedź ten węzeł z.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Dispatches to the specific visit method for this node type.</source>
          <target state="translated">Wysyła do konkretnych można znaleźć metody dla tego typu węzła.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> calls the <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> wywołania <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The result of visiting this node.</source>
          <target state="translated">Wynik tego węzła na stronę.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>This default implementation for <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Ta domyślna implementacja dla <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> wywołania węzłów <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to call into a more specific method on a derived visitor class of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.</source>
          <target state="translated">Przesłonić tę metodę do wywołania do bardziej szczegółowych metody w klasie pochodnej odwiedzający z <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>However, it should still support unknown visitors by calling <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Obsługuje on jednak powinien nadal nieznany odwiedzających przez wywołanie metody <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic addition operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację dodawania arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic addition operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację dodawania arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Add" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Add" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the addition operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator dodawania <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined addition operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator dodawania wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca operator dodawania wstępnie zdefiniowanego typu wyników.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that adds two integers.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia, który dodaje dwie liczb całkowitych.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The addition operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator dodawania nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic addition operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację dodawania arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Add" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Add" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the addition operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator dodawania <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined addition operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator dodawania wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca operator dodawania wstępnie zdefiniowanego typu wyników.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the addition operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> a operator dodawania nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an addition assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dodawania, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an addition assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dodawania, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które dodaje wartość do zmiennej całkowitą, a następnie przypisuje wynik operacji do zmiennej.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an addition assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dodawania, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an addition assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dodawania, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an addition assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dodawania, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an addition assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dodawania, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an addition assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dodawania, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an addition assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dodawania, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic addition operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację dodawania arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic addition operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację dodawania arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the addition operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator dodawania <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined addition operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator dodawania wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca operator dodawania wstępnie zdefiniowanego typu wyników.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The addition operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator dodawania nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic addition operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację dodawania arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method for the operation is chosen based on the following rules:</source>
          <target state="translated">Implementującej metody dla operacji jest wybierany zgodnie z następującymi regułami:</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the addition operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator dodawania <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined addition operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator dodawania wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca operator dodawania wstępnie zdefiniowanego typu wyników.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the addition operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> a operator dodawania nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operacji.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operacji.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.And" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.And" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the bitwise <ph id="ph4">`AND`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads-bitowe <ph id="ph4">`AND`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typów całkowitych lub Boolean, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined bitwise <ph id="ph1">`AND`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ wyniku predefiniowanych bitowe <ph id="ph1">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <ph id="ph1">`AND`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku predefiniowanych bitowe <ph id="ph1">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje logicznej operacji AND na dwóch wartości logicznych.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The bitwise <ph id="ph1">&lt;see langword="AND" /&gt;</ph> operator is not defined for <ph id="ph2">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Bitowe <ph id="ph1">&lt;see langword="AND" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph2">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph3">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operacji.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.And" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.And" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method for the operation is chosen based on the following rules:</source>
          <target state="translated">Implementującej metody dla operacji jest wybierany zgodnie z następującymi regułami:</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the bitwise <ph id="ph4">`AND`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads-bitowe <ph id="ph4">`AND`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typów całkowitych lub Boolean, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined bitwise <ph id="ph1">`AND`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ wyniku predefiniowanych bitowe <ph id="ph1">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <ph id="ph1">`AND`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku predefiniowanych bitowe <ph id="ph1">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the bitwise <ph id="ph3">&lt;see langword="AND" /&gt;</ph> operator is not defined for <ph id="ph4">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph5">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operatora testu koniunkcji <ph id="ph3">&lt;see langword="AND" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph4">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph5">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a conditional <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący warunkowego <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operacja, która ocenia drugi argument tylko wtedy, gdy pierwszy argument operacji daje w wyniku <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a conditional <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący warunkowego <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operacja, która ocenia drugi argument tylko wtedy, gdy pierwszy argument operacji daje w wyniku <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the bitwise <ph id="ph4">`AND`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads-bitowe <ph id="ph4">`AND`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The conditional <ph id="ph1">`AND`</ph> operator cannot be overloaded in C# or Visual Basic.</source>
          <target state="translated">Warunkowe <ph id="ph1">`AND`</ph> nie może zostać Przeciążony operator w języku C# lub Visual Basic.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>However, the conditional <ph id="ph1">`AND`</ph> operator is evaluated by using the bitwise <ph id="ph2">`AND`</ph> operator.</source>
          <target state="translated">Jednak warunkowe <ph id="ph1">`AND`</ph> operator jest oceniane przy użyciu operatora testu koniunkcji <ph id="ph2">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Thus, a user-defined overload of the bitwise <ph id="ph1">`AND`</ph> operator can be the implementing method for this node type.</source>
          <target state="translated">W związku z tym zdefiniowane przez użytkownika przeciążenia operatora testu koniunkcji <ph id="ph1">`AND`</ph> operator może być implementującej metody dla tego typu węzła.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy Boolean, implementującej metody jest <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null, a odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are the same Boolean type.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są tego samego typu Boolean.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined conditional <ph id="ph1">`AND`</ph> operator.</source>
          <target state="translated">Typ węzła jest typu wyników wstępnie zdefiniowanych warunkowego <ph id="ph1">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ dopuszczają wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined conditional <ph id="ph1">`AND`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca typu wyników wstępnie zdefiniowanych warunkowego <ph id="ph1">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które wykonuje logiczną i operacji na jego dwóch argumentów operacji tylko wtedy, gdy pierwszy argument operacji daje w wyniku <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The bitwise <ph id="ph1">&lt;see langword="AND" /&gt;</ph> operator is not defined for <ph id="ph2">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Bitowe <ph id="ph1">&lt;see langword="AND" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph2">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph3">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type are not the same Boolean type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ nie są tego samego typu Boolean.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a conditional <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operation that evaluates the second operand only if the first operand is resolved to true.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący warunkowego <ph id="ph2">&lt;see langword="AND" /&gt;</ph> operacja, która ocenia drugi argument tylko wtedy, gdy pierwszy argument nie zostanie rozwiązany na wartość true.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method for the operation is chosen based on the following rules:</source>
          <target state="translated">Implementującej metody dla operacji jest wybierany zgodnie z następującymi regułami:</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the bitwise <ph id="ph4">`AND`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads-bitowe <ph id="ph4">`AND`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The conditional <ph id="ph1">`AND`</ph> operator cannot be overloaded in C# or Visual Basic.</source>
          <target state="translated">Warunkowe <ph id="ph1">`AND`</ph> nie może zostać Przeciążony operator w języku C# lub Visual Basic.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>However, the conditional <ph id="ph1">`AND`</ph> operator is evaluated by using the bitwise <ph id="ph2">`AND`</ph> operator.</source>
          <target state="translated">Jednak warunkowe <ph id="ph1">`AND`</ph> operator jest oceniane przy użyciu operatora testu koniunkcji <ph id="ph2">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Thus, a user-defined overload of the bitwise <ph id="ph1">`AND`</ph> operator can be the implementing method for this node type.</source>
          <target state="translated">W związku z tym zdefiniowane przez użytkownika przeciążenia operatora testu koniunkcji <ph id="ph1">`AND`</ph> operator może być implementującej metody dla tego typu węzła.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy Boolean, implementującej metody jest <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null, a odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are the same Boolean type.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są tego samego typu Boolean.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined conditional <ph id="ph1">`AND`</ph> operator.</source>
          <target state="translated">Typ węzła jest typu wyników wstępnie zdefiniowanych warunkowego <ph id="ph1">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ dopuszczają wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined conditional <ph id="ph1">`AND`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca typu wyników wstępnie zdefiniowanych warunkowego <ph id="ph1">`AND`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the bitwise <ph id="ph3">&lt;see langword="AND" /&gt;</ph> operator is not defined for <ph id="ph4">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph5">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operatora testu koniunkcji <ph id="ph3">&lt;see langword="AND" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph4">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph5">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type are not the same Boolean type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ nie są tego samego typu Boolean.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise AND assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przypisania i.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise AND assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przypisania i.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise AND assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przypisania i.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise AND assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przypisania i.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> to access an array.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> dostępu do tablicy.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An expression that represents the multidimensional array.</source>
          <target state="translated">Wyrażenie reprezentuje tablicy wielowymiarowej.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> containing expressions used to index the array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierające wyrażenia używane do indeksu tablicy.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> to access a multidimensional array.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> można uzyskać dostępu do tablicy wielowymiarowej.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The expression that represents the array can be obtained by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A&gt;</ph> method, or through <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph>.</source>
          <target state="translated">Wyrażenie, które reprezentuje tablicę można uzyskać za pomocą <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A&gt;</ph> metody, lub za pomocą <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The following code example shows how to change the value of an element in a multidimensional array by using the <ph id="ph1">`ArrayAccess`</ph> method.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak zmienić wartość elementu w tablicy wielowymiarowej przy użyciu <ph id="ph1">`ArrayAccess`</ph> metody.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>An expression representing the array to index.</source>
          <target state="translated">Wyrażenie reprezentujący indeksu tablicy.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>An array that contains expressions used to index the array.</source>
          <target state="translated">Tablica zawiera wyrażenia używane do indeksu tablicy.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> to access an array.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> dostępu do tablicy.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The expression that represents the array can be obtained by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A&gt;</ph> method, or through <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph>.</source>
          <target state="translated">Wyrażenie, które reprezentuje tablicę można uzyskać za pomocą <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A&gt;</ph> metody, lub za pomocą <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>For multidimensional arrays, use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ArrayAccess%2A&gt;</ph> method.</source>
          <target state="translated">Tablice wielowymiarowe, można użyć <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ArrayAccess%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The following code example shows how to change a value of an array element by using the <ph id="ph1">`ArrayAccess`</ph> method.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób zmiany wartości elementu tablicy za pomocą <ph id="ph1">`ArrayAccess`</ph> metody.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents applying an array index operator.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> reprezentujący zastosowanie operatora indeksu tablicy.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents applying an array index operator to an array of rank more than one.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący zastosowanie operatora indeksu tablicy na tablicę rangi więcej niż jeden.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Each element of <ph id="ph1">`indexes`</ph> must have <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> equal to <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Każdy element <ph id="ph1">`indexes`</ph> musi mieć <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> równa <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`array`</ph> must represent an array type whose rank matches the number of elements in <ph id="ph3">`indexes`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`array`</ph> musi reprezentować typu tablicy, której pozycję jest zgodna z liczbą elementów w <ph id="ph3">`indexes`</ph>.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If the rank of <ph id="ph1">`array`</ph>.Type is 1, this method returns a <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph>.</source>
          <target state="translated">Jeśli rangę <ph id="ph1">`array`</ph>. Typ ma wartość 1, ta metoda zwraca <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;</ph> property is set to <ph id="ph2">`array`</ph> and the <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;</ph> property is set to the single element of <ph id="ph4">`indexes`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;</ph> Właściwość jest ustawiona na <ph id="ph2">`array`</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;</ph> właściwość jest ustawiona na pojedynczy element <ph id="ph4">`indexes`</ph>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> represents the element type of <ph id="ph3">`array`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> reprezentuje typ elementu <ph id="ph3">`array`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If the rank of <ph id="ph1">`array`</ph>.Type is more than one, this method returns a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>.</source>
          <target state="translated">Jeśli rangę <ph id="ph1">`array`</ph>. Typ jest więcej niż jeden, ta metoda zwraca <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;</ph> property is set to the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that describes the public instance method <ph id="ph3">`Get`</ph> on the type represented by the <ph id="ph4">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph5">`array`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;</ph> Właściwość jest ustawiona na <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> metody wystąpienia publicznego, który opisuje <ph id="ph3">`Get`</ph> na typ reprezentowany przez <ph id="ph4">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość <ph id="ph5">`array`</ph>.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents indexing into a two-dimensional array.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> reprezentujący przeprowadzane jest indeksowanie do tablicą dwuwymiarową.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> or <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph>.Type does not represent an array type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>. Typ nie odpowiada typowi tablicy.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The rank of <ph id="ph1">&lt;paramref name="array" /&gt;</ph>.Type does not match the number of elements in <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph>.</source>
          <target state="translated">Rangę <ph id="ph1">&lt;paramref name="array" /&gt;</ph>. Typ jest niezgodny z liczbą elementów w <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of one or more elements of <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph> does not represent the <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości jednego lub więcej elementów <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph> nie reprezentuje <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents applying an array index operator to an array of rank one.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący zastosowanie operatora indeksu tablicy na tablicę rangi jeden.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`index`</ph> must represent an index of type <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`index`</ph> musi reprezentować indeksu typu <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> is <ph id="ph3">`null`</ph>, and both <ph id="ph4">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> are set to <ph id="ph6">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> jest <ph id="ph3">`null`</ph>, a oba <ph id="ph4">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph5">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> są ustawione na <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is equal to the element type of <ph id="ph2">`array`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości jest taki sam typ elementu <ph id="ph2">`array`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> or <ph id="ph2">&lt;paramref name="index" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="index" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph>.Type does not represent an array type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>. Typ nie odpowiada typowi tablicy.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph>.Type represents an array type whose rank is not 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>. Typ reprezentuje typ tablicy, której pozycję nie jest 1.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph>.Type does not represent the <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>. Typ nie reprezentuje <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> instances - indexes for the array index operation.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> wystąpienia - indeksów dla operacji indeksu tablicy.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents applying an array index operator to a multidimensional array.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący zastosowanie operatora indeksu tablicy do tablicy wielowymiarowej.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>Each element of <ph id="ph1">`indexes`</ph> must have <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> equal to <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Każdy element <ph id="ph1">`indexes`</ph> musi mieć <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> równa <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`array`</ph> must represent an array type whose rank matches the number of elements in <ph id="ph3">`indexes`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`array`</ph> musi reprezentować typu tablicy, której pozycję jest zgodna z liczbą elementów w <ph id="ph3">`indexes`</ph>.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>If the rank of <ph id="ph1">`array`</ph>.Type is 1, this method returns a <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph>.</source>
          <target state="translated">Jeśli rangę <ph id="ph1">`array`</ph>. Typ ma wartość 1, ta metoda zwraca <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;</ph> property is set to <ph id="ph2">`array`</ph> and the <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;</ph> property is set to the single element of <ph id="ph4">`indexes`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;</ph> Właściwość jest ustawiona na <ph id="ph2">`array`</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;</ph> właściwość jest ustawiona na pojedynczy element <ph id="ph4">`indexes`</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> represents the element type of <ph id="ph3">`array`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> reprezentuje typ elementu <ph id="ph3">`array`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>If the rank of <ph id="ph1">`array`</ph>.Type is more than one, this method returns a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>.</source>
          <target state="translated">Jeśli rangę <ph id="ph1">`array`</ph>. Typ jest więcej niż jeden, ta metoda zwraca <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;</ph> property is set to the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that describes the public instance method <ph id="ph3">`Get`</ph> on the type represented by the <ph id="ph4">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph5">`array`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;</ph> Właściwość jest ustawiona na <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> metody wystąpienia publicznego, który opisuje <ph id="ph3">`Get`</ph> na typ reprezentowany przez <ph id="ph4">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość <ph id="ph5">`array`</ph>.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents indexing into a two-dimensional array.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> reprezentujący przeprowadzane jest indeksowanie do tablicą dwuwymiarową.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> or <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph>.Type does not represent an array type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>. Typ nie odpowiada typowi tablicy.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The rank of <ph id="ph1">&lt;paramref name="array" /&gt;</ph>.Type does not match the number of elements in <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph>.</source>
          <target state="translated">Rangę <ph id="ph1">&lt;paramref name="array" /&gt;</ph>. Typ jest niezgodny z liczbą elementów w <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of one or more elements of <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph> does not represent the <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości jednego lub więcej elementów <ph id="ph2">&lt;paramref name="indexes" /&gt;</ph> nie reprezentuje <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an expression for obtaining the length of a one-dimensional array.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia dla uzyskania długość tablicy jednowymiarowej.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`array`</ph> must represent an array type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`array`</ph> musi reprezentować typem tablicy.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is equal to <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, and both <ph id="ph3">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> are set to <ph id="ph5">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość jest <ph id="ph2">`null`</ph>, a oba <ph id="ph3">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph4">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> są ustawione na <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph>.Type does not represent an array type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>. Typ nie odpowiada typowi tablicy.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operatora przypisania.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Assign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Assign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">`Assign`</ph> expression copies a value for value types, and it copies a reference for reference types.</source>
          <target state="translated"><ph id="ph1">`Assign`</ph> Wyrażenie kopiuje wartości dla typów wartości i kopiuje punkt odniesienia dla typów referencyjnych.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents an assignment operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje operatora przypisania.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> that represents the initialization of a member.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> reprezentujący inicjowanie elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> that represents the initialization of a field or property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> reprezentujący inicjowanie pola lub właściwości.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`expression`</ph> must be assignable to the type represented by the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of <ph id="ph5">`member`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`expression`</ph> musi być można przypisać do typu reprezentowanego przez <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> lub <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> właściwość <ph id="ph5">`member`</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> or <ph id="ph2">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> does not represent a field or property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> nie reprezentować pole lub właściwość.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source>The property represented by <ph id="ph1">&lt;paramref name="member" /&gt;</ph> does not have a <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">Właściwości reprezentowanej przez <ph id="ph1">&lt;paramref name="member" /&gt;</ph> nie ma <ph id="ph2">&lt;see langword="set" /&gt;</ph> metody dostępu.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type is not assignable to the type of the field or property that <ph id="ph2">&lt;paramref name="member" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie jest można przypisać do typu pola lub właściwości, które <ph id="ph2">&lt;paramref name="member" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents a property accessor method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> that represents the initialization of a member by using a property accessor method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> reprezentujący inicjowanie elementu członkowskiego przy użyciu metody dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property set to the <ph id="ph5">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property accessed in <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, and the <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /&gt;</ph> property set to <ph id="ph8">&lt;paramref name="expression" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> reprezentujący dostęp do właściwości <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /&gt;</ph> ustawioną właściwość <ph id="ph8">&lt;paramref name="expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`expression`</ph> must be assignable to the type represented by the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of the property accessed in <ph id="ph4">`propertyAccessor`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`expression`</ph> musi być można przypisać do typu reprezentowanego przez <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> właściwości dostęp do właściwości <ph id="ph4">`propertyAccessor`</ph>.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> or <ph id="ph2">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> does not represent a property accessor method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>The property accessed by <ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> does not have a <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">Właściwość, do której dostęp <ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> nie ma <ph id="ph2">&lt;see langword="set" /&gt;</ph> metody dostępu.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type is not assignable to the type of the field or property that <ph id="ph2">&lt;paramref name="member" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie jest można przypisać do typu pola lub właściwości, które <ph id="ph2">&lt;paramref name="member" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The expressions in the block.</source>
          <target state="translated">Wyrażenia w bloku.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains the given expressions and has no variables.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> czy zawiera danego wyrażenia i nie ma zmiennych.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>When the block expression is executed, it returns the value of the last expression in the block.</source>
          <target state="translated">Podczas wykonywania wyrażenia bloku zwraca wartość wyrażenia ostatniego w bloku.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
          <source>The expressions in the block.</source>
          <target state="translated">Wyrażenia w bloku.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains the given expressions and has no variables.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> czy zawiera danego wyrażenia i nie ma zmiennych.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
          <source>When the block expression is executed, it returns the value of the last expression in the block.</source>
          <target state="translated">Podczas wykonywania wyrażenia bloku zwraca wartość wyrażenia ostatniego w bloku.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
          <source>The following code example shows how to create a block expression.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia bloku.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
          <source>The block expression consists of two <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> objects and one <ph id="ph2">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> object.</source>
          <target state="translated">Wyrażenie bloku składa się z dwóch <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> obiektów i jeden <ph id="ph2">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The variables in the block.</source>
          <target state="translated">Zmienne w bloku.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The expressions in the block.</source>
          <target state="translated">Wyrażenia w bloku.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains the given variables and expressions.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> zawierający dany zmiennych i wyrażeń.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>When the block expression is executed, it returns the value of the last expression in the block.</source>
          <target state="translated">Podczas wykonywania wyrażenia bloku zwraca wartość wyrażenia ostatniego w bloku.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak przekazać parametr do wyrażenia bloku i przetworzenie tego parametru w bloku.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>The variables in the block.</source>
          <target state="translated">Zmienne w bloku.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>The expressions in the block.</source>
          <target state="translated">Wyrażenia w bloku.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains the given variables and expressions.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> zawierający dany zmiennych i wyrażeń.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>When the block expression is executed, it returns the value of the last expression in the block.</source>
          <target state="translated">Podczas wykonywania wyrażenia bloku zwraca wartość wyrażenia ostatniego w bloku.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first expression in the block.</source>
          <target state="translated">Pierwsze wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second expression in the block.</source>
          <target state="translated">Drugie wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains two expressions and has no variables.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> czy zawiera dwa wyrażenia i nie ma zmiennych.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>When the block expression is executed, it returns the value of the last expression in the block.</source>
          <target state="translated">Podczas wykonywania wyrażenia bloku zwraca wartość wyrażenia ostatniego w bloku.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The result type of the block.</source>
          <target state="translated">Typ wyniku bloku.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The expressions in the block.</source>
          <target state="translated">Wyrażenia w bloku.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains the given expressions, has no variables and has specific result type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> która zawiera danego wyrażenia, nie ma zmiennych i ma typ określony wynik.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
          <source>The result type of the block.</source>
          <target state="translated">Typ wyniku bloku.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
          <source>The expressions in the block.</source>
          <target state="translated">Wyrażenia w bloku.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains the given expressions, has no variables and has specific result type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> która zawiera danego wyrażenia, nie ma zmiennych i ma typ określony wynik.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first expression in the block.</source>
          <target state="translated">Pierwsze wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second expression in the block.</source>
          <target state="translated">Drugie wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The third expression in the block.</source>
          <target state="translated">Trzeci wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains three expressions and has no variables.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> czy zawiera trzy wyrażenia i nie ma zmiennych.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>When the block expression is executed, it returns the value of the last expression in the block.</source>
          <target state="translated">Podczas wykonywania wyrażenia bloku zwraca wartość wyrażenia ostatniego w bloku.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The result type of the block.</source>
          <target state="translated">Typ wyniku bloku.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The variables in the block.</source>
          <target state="translated">Zmienne w bloku.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The expressions in the block.</source>
          <target state="translated">Wyrażenia w bloku.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains the given variables and expressions.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> zawierający dany zmiennych i wyrażeń.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>The result type of the block.</source>
          <target state="translated">Typ wyniku bloku.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>The variables in the block.</source>
          <target state="translated">Zmienne w bloku.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>The expressions in the block.</source>
          <target state="translated">Wyrażenia w bloku.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains the given variables and expressions.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> zawierający dany zmiennych i wyrażeń.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first expression in the block.</source>
          <target state="translated">Pierwsze wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second expression in the block.</source>
          <target state="translated">Drugie wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The third expression in the block.</source>
          <target state="translated">Trzeci wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The fourth expression in the block.</source>
          <target state="translated">Czwartym wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains four expressions and has no variables.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> czy zawiera cztery wyrażeń i nie ma zmiennych.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>When the block expression is executed, it returns the value of the last expression in the block.</source>
          <target state="translated">Podczas wykonywania wyrażenia bloku zwraca wartość wyrażenia ostatniego w bloku.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first expression in the block.</source>
          <target state="translated">Pierwsze wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second expression in the block.</source>
          <target state="translated">Drugie wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The third expression in the block.</source>
          <target state="translated">Trzeci wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The fourth expression in the block.</source>
          <target state="translated">Czwartym wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The fifth expression in the block.</source>
          <target state="translated">Piątym wyrażenie w bloku.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> that contains five expressions and has no variables.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph> czy zawiera pięć wyrażeń i nie ma zmiennych.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>When the block expression is executed, it returns the value of the last expression in the block.</source>
          <target state="translated">Podczas wykonywania wyrażenia bloku zwraca wartość wyrażenia ostatniego w bloku.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a break statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji break.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a break statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji break.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Break, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, and a null value to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa podziału, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>i wartość null do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
          <source>The following example demonstrates how to create an expression that contains a <ph id="ph1">&lt;xref:System.Linq.Expressions.LoopExpression&gt;</ph> object that uses the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Break%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie zawierające <ph id="ph1">&lt;xref:System.Linq.Expressions.LoopExpression&gt;</ph> obiekt, który używa <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The value that will be passed to the associated label upon jumping.</source>
          <target state="translated">Wartość, która zostanie przekazany do skojarzone etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a break statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji break.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The value passed to the label upon jumping can be specified.</source>
          <target state="translated">Można określić wartość przekazana do etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Break, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, and <ph id="ph5">&lt;paramref name="value" /&gt;</ph> to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa podziału, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, i <ph id="ph5">&lt;paramref name="value" /&gt;</ph> do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a break statement with the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji break z określonym typem.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Break, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, and the <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph6">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa podziału, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph6">&lt;paramref name="type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The value that will be passed to the associated label upon jumping.</source>
          <target state="translated">Wartość, która zostanie przekazany do skojarzone etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a break statement with the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji break z określonym typem.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The value passed to the label upon jumping can be specified.</source>
          <target state="translated">Można określić wartość przekazana do etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Break, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, the <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph6">&lt;paramref name="type" /&gt;</ph>, and <ph id="ph7">&lt;paramref name="value" /&gt;</ph> to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa podziału, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph6">&lt;paramref name="type" /&gt;</ph>, i <ph id="ph7">&lt;paramref name="value" /&gt;</ph> do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that specifies the instance for an instance method call (pass <ph id="ph2">&lt;see langword="null" /&gt;</ph> for a <ph id="ph3">&lt;see langword="static" /&gt;</ph> (<ph id="ph4">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> , Który określa wystąpienie dla wywołania metody wystąpienia (przekazać <ph id="ph2">&lt;see langword="null" /&gt;</ph> dla <ph id="ph3">&lt;see langword="static" /&gt;</ph> (<ph id="ph4">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) — metoda).</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a method that takes no arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie do metody, która nie przyjmuje żadnych argumentów.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>To represent a call to a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) method, pass in <ph id="ph3">`null`</ph> for the <ph id="ph4">`instance`</ph> parameter when you call this method.</source>
          <target state="translated">Do reprezentowania wywołanie <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> w języku Visual Basic) — metoda, Przekaż <ph id="ph3">`null`</ph> dla <ph id="ph4">`instance`</ph> parametru, gdy ta metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> represents an instance method, the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph3">`instance`</ph> must be assignable to the declaring type of the method represented by <ph id="ph4">`method`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> reprezentuje metodę wystąpienia <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość <ph id="ph3">`instance`</ph> musi być możliwe przypisanie typ deklarujący metodzie reprezentowany przez <ph id="ph4">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest pusta.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is equal to the return type of the method represented by <ph id="ph2">`method`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości jest taki sam zwracany typ metody reprezentowany przez <ph id="ph2">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following code example shows how to create an expression that calls a method without arguments.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które wywołuje metodę bez argumentów.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="method" /&gt;</ph> represents an instance method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="method" /&gt;</ph> reprezentuje metody wystąpienia.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>.Type is not assignable to the declaring type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>. Typ nie jest możliwa do przypisania do typ deklarujący metodzie reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the target method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący metody docelowej.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the call arguments.</source>
          <target state="translated">Kolekcja <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> reprezentujący argumenty wywołania.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a static (Shared in Visual Basic) method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie metody statycznej (Shared w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the first argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący pierwszy argument.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method that takes one argument.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) metodę, która przyjmuje jeden argument.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source>The following example demonstrates how to create an expression that calls a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) method that takes one argument.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie, które wywołuje <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje jeden argument.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> ma wartość null.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents a <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method to set the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) metodę, aby ustawić <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method that has arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) — metoda, która przyjmuje argumenty.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>If <ph id="ph1">`arguments`</ph> is not <ph id="ph2">`null`</ph>, it must have the same number of elements as the number of parameters for the method represented by <ph id="ph3">`method`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`arguments`</ph> nie jest <ph id="ph2">`null`</ph>, musi mieć taką samą liczbę elementów jak liczba parametrów metody reprezentowany przez <ph id="ph3">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Each element in <ph id="ph1">`arguments`</ph> must not be <ph id="ph2">`null`</ph> and must be assignable to the corresponding parameter of <ph id="ph3">`method`</ph>, possibly after <bpt id="p1">*</bpt>quoting<ept id="p1">*</ept>.</source>
          <target state="translated">Każdy element <ph id="ph1">`arguments`</ph> nie może być <ph id="ph2">`null`</ph> i musi być możliwe przypisanie z odpowiadającym parametrem elementu <ph id="ph3">`method`</ph>, prawdopodobnie po <bpt id="p1">*</bpt>zamykający<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An element will be quoted only if the corresponding method parameter is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy odpowiedni parametr metody jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`arguments`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is empty if <ph id="ph3">`arguments`</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest pusta Jeśli <ph id="ph3">`arguments`</ph> jest <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Otherwise, it contains the same elements as <ph id="ph1">`arguments`</ph>, some of which may be quoted.</source>
          <target state="translated">W przeciwnym razie zawiera te same elementy jako <ph id="ph1">`arguments`</ph>, niektóre z nich mogą zostać podane.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method represented by <ph id="ph3">`method`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest taki sam zwracany typ metody reprezentowany przez <ph id="ph3">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> does not equal the number of parameters for the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated">Liczba elementów w <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie równa się z liczbą parametrów metody reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>One or more of the elements of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the corresponding parameter for the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z elementów <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie jest możliwa do przypisania do odpowiadającego mu parametru w metodzie reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> property equal to (pass <ph id="ph3">&lt;see langword="null" /&gt;</ph> for a <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> równa właściwości (przekazać <ph id="ph3">&lt;see langword="null" /&gt;</ph> dla <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) — metoda).</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a method that takes arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie do metody, która przyjmuje argumenty.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>To represent a call to a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) method, pass in <ph id="ph3">`null`</ph> for the <ph id="ph4">`instance`</ph> parameter when you call this method, or call <ph id="ph5">&lt;xref:System.Linq.Expressions.Expression.Call%2A&gt;</ph> instead.</source>
          <target state="translated">Do reprezentowania wywołanie <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> w języku Visual Basic) — metoda, Przekaż <ph id="ph3">`null`</ph> dla <ph id="ph4">`instance`</ph> parametr podczas wywoływania tej metody, lub zadzwoń <ph id="ph5">&lt;xref:System.Linq.Expressions.Expression.Call%2A&gt;</ph> zamiast tego.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If <ph id="ph1">`method`</ph> represents an instance method, the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph3">`instance`</ph> must be assignable to the declaring type of the method represented by <ph id="ph4">`method`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> reprezentuje metodę wystąpienia <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość <ph id="ph3">`instance`</ph> musi być możliwe przypisanie typ deklarujący metodzie reprezentowany przez <ph id="ph4">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If <ph id="ph1">`arguments`</ph> is not <ph id="ph2">`null`</ph>, it must have the same number of elements as the number of parameters for the method represented by <ph id="ph3">`method`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`arguments`</ph> nie jest <ph id="ph2">`null`</ph>, musi mieć taką samą liczbę elementów jak liczba parametrów metody reprezentowany przez <ph id="ph3">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Each element in <ph id="ph1">`arguments`</ph> must not be <ph id="ph2">`null`</ph> and must be assignable to the corresponding parameter of <ph id="ph3">`method`</ph>, possibly after <bpt id="p1">*</bpt>quoting<ept id="p1">*</ept>.</source>
          <target state="translated">Każdy element <ph id="ph1">`arguments`</ph> nie może być <ph id="ph2">`null`</ph> i musi być możliwe przypisanie z odpowiadającym parametrem elementu <ph id="ph3">`method`</ph>, prawdopodobnie po <bpt id="p1">*</bpt>zamykający<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An element will be quoted only if the corresponding method parameter is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy odpowiedni parametr metody jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`arguments`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is empty if <ph id="ph3">`arguments`</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest pusta Jeśli <ph id="ph3">`arguments`</ph> jest <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Otherwise, it contains the same elements as <ph id="ph1">`arguments`</ph>, some of which may be quoted.</source>
          <target state="translated">W przeciwnym razie zawiera te same elementy jako <ph id="ph1">`arguments`</ph>, niektóre z nich mogą zostać podane.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method represented by <ph id="ph3">`method`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest taki sam zwracany typ metody reprezentowany przez <ph id="ph3">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="method" /&gt;</ph> represents an instance method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="method" /&gt;</ph> reprezentuje metody wystąpienia.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>.Type is not assignable to the declaring type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>. Typ nie jest możliwa do przypisania do typ deklarujący metodzie reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> does not equal the number of parameters for the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated">Liczba elementów w <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie równa się z liczbą parametrów metody reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>One or more of the elements of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the corresponding parameter for the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z elementów <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie jest możliwa do przypisania do odpowiadającego mu parametru w metodzie reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that specifies the instance for an instance method call (pass <ph id="ph2">&lt;see langword="null" /&gt;</ph> for a <ph id="ph3">&lt;see langword="static" /&gt;</ph> (<ph id="ph4">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> , Który określa wystąpienie dla wywołania metody wystąpienia (przekazać <ph id="ph2">&lt;see langword="null" /&gt;</ph> dla <ph id="ph3">&lt;see langword="static" /&gt;</ph> (<ph id="ph4">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) — metoda).</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a method that takes arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie do metody, która przyjmuje argumenty.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>To represent a call to a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) method, pass in <ph id="ph3">`null`</ph> for the <ph id="ph4">`instance`</ph> parameter when you call this method, or call <ph id="ph5">&lt;xref:System.Linq.Expressions.Expression.Call%2A&gt;</ph> instead.</source>
          <target state="translated">Do reprezentowania wywołanie <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> w języku Visual Basic) — metoda, Przekaż <ph id="ph3">`null`</ph> dla <ph id="ph4">`instance`</ph> parametr podczas wywoływania tej metody, lub zadzwoń <ph id="ph5">&lt;xref:System.Linq.Expressions.Expression.Call%2A&gt;</ph> zamiast tego.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>If <ph id="ph1">`method`</ph> represents an instance method, the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph3">`instance`</ph> must be assignable to the declaring type of the method represented by <ph id="ph4">`method`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> reprezentuje metodę wystąpienia <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość <ph id="ph3">`instance`</ph> musi być możliwe przypisanie typ deklarujący metodzie reprezentowany przez <ph id="ph4">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>If <ph id="ph1">`arguments`</ph> is not <ph id="ph2">`null`</ph>, it must have the same number of elements as the number of parameters for the method represented by <ph id="ph3">`method`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`arguments`</ph> nie jest <ph id="ph2">`null`</ph>, musi mieć taką samą liczbę elementów jak liczba parametrów metody reprezentowany przez <ph id="ph3">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Each element in <ph id="ph1">`arguments`</ph> must not be <ph id="ph2">`null`</ph> and must be assignable to the corresponding parameter of <ph id="ph3">`method`</ph>, possibly after <bpt id="p1">*</bpt>quoting<ept id="p1">*</ept>.</source>
          <target state="translated">Każdy element <ph id="ph1">`arguments`</ph> nie może być <ph id="ph2">`null`</ph> i musi być możliwe przypisanie z odpowiadającym parametrem elementu <ph id="ph3">`method`</ph>, prawdopodobnie po <bpt id="p1">*</bpt>zamykający<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An element will be quoted only if the corresponding method parameter is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy odpowiedni parametr metody jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`arguments`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is empty if <ph id="ph3">`arguments`</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest pusta Jeśli <ph id="ph3">`arguments`</ph> jest <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Otherwise, it contains the same elements as <ph id="ph1">`arguments`</ph>, some of which may be quoted.</source>
          <target state="translated">W przeciwnym razie zawiera te same elementy jako <ph id="ph1">`arguments`</ph>, niektóre z nich mogą zostać podane.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method represented by <ph id="ph3">`method`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest taki sam zwracany typ metody reprezentowany przez <ph id="ph3">`method`</ph>.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="method" /&gt;</ph> represents an instance method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="method" /&gt;</ph> reprezentuje metody wystąpienia.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and one or more of its elements is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i co najmniej jeden z jego elementów jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>.Type is not assignable to the declaring type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>. Typ nie jest możliwa do przypisania do typ deklarujący metodzie reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> does not equal the number of parameters for the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated">Liczba elementów w <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie równa się z liczbą parametrów metody reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>One or more of the elements of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the corresponding parameter for the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z elementów <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie jest możliwa do przypisania do odpowiadającego mu parametru w metodzie reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the first argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący pierwszy argument.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the second argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący drugi argument.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a static method that takes two arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie metody statycznej, który przyjmuje dwa argumenty.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> ma wartość null.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that specifies the instance for an instance call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> , Który określa wystąpienie dla wywołania wystąpienia.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>(pass null for a static (Shared in Visual Basic) method).</source>
          <target state="translated">(należy przekazać wartość null dla metody statyczne (Shared w języku Visual Basic)).</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the target method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący metody docelowej.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the first argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący pierwszy argument.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the second argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący drugi argument.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a method that takes two arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie do metody, która przyjmuje dwa argumenty.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that calls an instance method that has two arguments.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia, która wywołuje metodę wystąpienia, która ma dwa argumenty.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> whose <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property value will be searched for a specific method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Którego <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> wartość właściwości ma zostać wyszukany określonej metody.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>The name of the method.</source>
          <target state="translated">Nazwa metody.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that specify the type parameters of the generic method.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektów, które określają parametrów typu metody ogólnej.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>This argument should be null when methodName specifies a non-generic method.</source>
          <target state="translated">Ten argument musi mieć wartość null, gdy methodName wskazuje metodę nierodzajową.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects that represents the arguments to the method.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiektów, które reprezentuje argumenty metody.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a method by calling the appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie do metody, wywołując metodę odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> property equal to <ph id="ph5">&lt;paramref name="instance" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> set to the <ph id="ph7">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the specified instance method, and <ph id="ph8">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> set to the specified arguments.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> równa właściwości <ph id="ph5">&lt;paramref name="instance" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> ustawioną <ph id="ph7">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący metodę określonego wystąpienia i <ph id="ph8">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> ustawioną określonych argumentów.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method denoted by <ph id="ph3">`methodName`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest taki sam zwracany typ metody wskazywane przez <ph id="ph3">`methodName`</ph>.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> or <ph id="ph2">&lt;paramref name="methodName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="methodName" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>No method whose name is <ph id="ph1">&lt;paramref name="methodName" /&gt;</ph>, whose type parameters match <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph>, and whose parameter types match <ph id="ph3">&lt;paramref name="arguments" /&gt;</ph> is found in <ph id="ph4">&lt;paramref name="instance" /&gt;</ph>.Type or its base types.</source>
          <target state="translated">Brak metody o nazwie <ph id="ph1">&lt;paramref name="methodName" /&gt;</ph>, którego parametry typu zgodne <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph>, oraz którego parametr typów dopasowania <ph id="ph3">&lt;paramref name="arguments" /&gt;</ph> znajduje się w <ph id="ph4">&lt;paramref name="instance" /&gt;</ph>. Typ lub jego typów podstawowych.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>More than one method whose name is <ph id="ph1">&lt;paramref name="methodName" /&gt;</ph>, whose type parameters match <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph>, and whose parameter types match <ph id="ph3">&lt;paramref name="arguments" /&gt;</ph> is found in <ph id="ph4">&lt;paramref name="instance" /&gt;</ph>.Type or its base types.</source>
          <target state="translated">Więcej niż jedną metodę o nazwie <ph id="ph1">&lt;paramref name="methodName" /&gt;</ph>, którego parametry typu zgodne <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph>, oraz którego parametr typów dopasowania <ph id="ph3">&lt;paramref name="arguments" /&gt;</ph> znajduje się w <ph id="ph4">&lt;paramref name="instance" /&gt;</ph>. Typ lub jego typów podstawowych.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the first argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący pierwszy argument.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the second argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący drugi argument.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the third argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący trzeci argument.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a static method that takes three arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie metody statycznej, który przyjmuje trzy argumenty.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> ma wartość null.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that specifies the type that contains the specified <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> , Który określa typ, który zawiera określony <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) — metoda.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>The name of the method.</source>
          <target state="translated">Nazwa metody.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that specify the type parameters of the generic method.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektów, które określają parametrów typu metody ogólnej.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>This argument should be null when methodName specifies a non-generic method.</source>
          <target state="translated">Ten argument musi mieć wartość null, gdy methodName wskazuje metodę nierodzajową.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects that represent the arguments to the method.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty reprezentujące argumenty metody.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method by calling the appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) — metoda, przez wywołanie metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property set to the <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the specified <ph id="ph6">&lt;see langword="static" /&gt;</ph> (<ph id="ph7">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) method, and the <ph id="ph8">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> property set to the specified arguments.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący określonego <ph id="ph6">&lt;see langword="static" /&gt;</ph> (<ph id="ph7">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) — metoda i <ph id="ph8">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> Właściwość do określonych argumentów.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method denoted by <ph id="ph3">`methodName`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> jest taki sam zwracany typ metody wskazywane przez <ph id="ph3">`methodName`</ph>.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="methodName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="methodName" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>No method whose name is <ph id="ph1">&lt;paramref name="methodName" /&gt;</ph>, whose type parameters match <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph>, and whose parameter types match <ph id="ph3">&lt;paramref name="arguments" /&gt;</ph> is found in <ph id="ph4">&lt;paramref name="type" /&gt;</ph> or its base types.</source>
          <target state="translated">Brak metody o nazwie <ph id="ph1">&lt;paramref name="methodName" /&gt;</ph>, którego parametry typu zgodne <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph>, oraz którego parametr typów dopasowania <ph id="ph3">&lt;paramref name="arguments" /&gt;</ph> znajduje się w <ph id="ph4">&lt;paramref name="type" /&gt;</ph> ani jego typach podstawowych.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
          <source>More than one method whose name is <ph id="ph1">&lt;paramref name="methodName" /&gt;</ph>, whose type parameters match <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph>, and whose parameter types match <ph id="ph3">&lt;paramref name="arguments" /&gt;</ph> is found in <ph id="ph4">&lt;paramref name="type" /&gt;</ph> or its base types.</source>
          <target state="translated">Więcej niż jedną metodę o nazwie <ph id="ph1">&lt;paramref name="methodName" /&gt;</ph>, którego parametry typu zgodne <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph>, oraz którego parametr typów dopasowania <ph id="ph3">&lt;paramref name="arguments" /&gt;</ph> znajduje się w <ph id="ph4">&lt;paramref name="type" /&gt;</ph> ani jego typach podstawowych.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that specifies the instance for an instance call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> , Który określa wystąpienie dla wywołania wystąpienia.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>(pass null for a static (Shared in Visual Basic) method).</source>
          <target state="translated">(należy przekazać wartość null dla metody statyczne (Shared w języku Visual Basic)).</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the target method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący metody docelowej.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the first argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący pierwszy argument.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the second argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący drugi argument.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the third argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący trzeci argument.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a method that takes three arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie do metody pobierającej trzech argumentów.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the first argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący pierwszy argument.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the second argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący drugi argument.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the third argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący trzeci argument.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the fourth argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący czwarty argument.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a static method that takes four arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie metody statycznej, który przyjmuje cztery argumenty.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> ma wartość null.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the first argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący pierwszy argument.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the second argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący drugi argument.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the third argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący trzeci argument.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the fourth argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący czwarty argument.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the fifth argument.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący piąty argument.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that represents a call to a static method that takes five arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> reprezentujący wywołanie statycznej metody pobierającej argumenty.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Call" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> ma wartość null.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.Expression.CanReduce">
          <source>Indicates that the node can be reduced to a simpler node.</source>
          <target state="translated">Wskazuje, czy można zmniejszyć węzła do węzła prostsze.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.Expression.CanReduce">
          <source>If this returns true, Reduce() can be called to produce the reduced form.</source>
          <target state="translated">Jeśli zostanie zwrócona wartość true, Reduce() można wywołać w celu utworzenia zmniejszenie formularza.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.CanReduce">
          <source>True if the node can be reduced, otherwise false.</source>
          <target state="translated">Wartość true, jeśli węzeł może być obniżona, w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> representing a catch statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> reprezentujący instrukcji catch.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> representing a reference to the <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> object caught by this handler.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> reprezentujący odwołanie do <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> obiektu przechwycony przez ten program obsługi.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
          <source>The body of the catch statement.</source>
          <target state="translated">Treść instrukcji catch.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> representing a catch statement with a reference to the caught <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> object for use in the handler body.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> reprezentujący instrukcji catch z odwołaniem do zgłoszony <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> obiekt do użycia w treści procedury obsługi.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> this <ph id="ph3">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> will handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> z <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> to <ph id="ph3">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> będzie obsługiwać.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
          <source>The body of the catch statement.</source>
          <target state="translated">Treść instrukcji catch.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> representing a catch statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> reprezentujący instrukcji catch.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> of <ph id="ph2">&lt;xref:System.Exception&gt;</ph> to be caught can be specified but no reference to the <ph id="ph3">&lt;xref:System.Exception&gt;</ph> object will be available for use in the <ph id="ph4">&lt;xref:System.Linq.Expressions.CatchBlock&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> z <ph id="ph2">&lt;xref:System.Exception&gt;</ph> wychwycony może być określony, ale żadne odwołanie do <ph id="ph3">&lt;xref:System.Exception&gt;</ph> obiekt będzie dostępny do użycia w <ph id="ph4">&lt;xref:System.Linq.Expressions.CatchBlock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> representing a reference to the <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> object caught by this handler.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> reprezentujący odwołanie do <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> obiektu przechwycony przez ten program obsługi.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the catch statement.</source>
          <target state="translated">Treść instrukcji catch.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> filter.</source>
          <target state="translated">Treść <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> filtru.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> representing a catch statement with an <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> filter and a reference to the caught <ph id="ph3">&lt;see cref="T:System.Exception" /&gt;</ph> object.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> reprezentujący instrukcję catch z <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> filtru i odwołania do zgłoszony <ph id="ph3">&lt;see cref="T:System.Exception" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> this <ph id="ph3">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> will handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> z <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> to <ph id="ph3">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> będzie obsługiwać.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the catch statement.</source>
          <target state="translated">Treść instrukcji catch.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> filter.</source>
          <target state="translated">Treść <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> filtru.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> representing a catch statement with an <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> filter but no reference to the caught <ph id="ph3">&lt;see cref="T:System.Exception" /&gt;</ph> object.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> reprezentujący instrukcję catch z <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> filtru, ale żadne odwołanie do zgłoszony <ph id="ph3">&lt;see cref="T:System.Exception" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> that represents the source file.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> Reprezentujący plik źródłowy.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> for clearing a sequence point.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> czyszczenie punktu sekwencji.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> for clearning a sequence point.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> dla proces czyszczenia punktu sekwencji.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a coalescing operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący łączącego operację.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a coalescing operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący łączącego operację.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> is <ph id="ph3">`null`</ph> and both <ph id="ph4">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> are set to <ph id="ph6">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> jest <ph id="ph3">`null`</ph> i oba <ph id="ph4">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph5">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> są ustawione na <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is equal to the result type of the coalescing operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości jest taki sam typ wyniku operacji łączącego.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Result Type</source>
          <target state="translated">Typ wyniku</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the result type:</source>
          <target state="translated">Typ wyniku określa następujące reguły:</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type represents a nullable type and <ph id="ph2">`right`</ph>.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of <ph id="ph3">`left`</ph>.Type.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ reprezentuje typ dopuszczający wartość null i <ph id="ph2">`right`</ph>. Typ jest niejawnie przekonwertować typu odpowiadającego wartości null, typ wyniku jest odpowiednikiem wartości null <ph id="ph3">`left`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`right`</ph>.Type is implicitly convertible to <ph id="ph2">`left`</ph>.Type, the result type is <ph id="ph3">`left`</ph>.Type.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`right`</ph>. Typ jest niejawnie przekonwertować <ph id="ph2">`left`</ph>. Typ jest typ wyniku <ph id="ph3">`left`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if the non-nullable equivalent of <ph id="ph1">`left`</ph>.Type is implicitly convertible to <ph id="ph2">`right`</ph>.Type, the result type is <ph id="ph3">`right`</ph>.Type.</source>
          <target state="translated">W przeciwnym razie, jeśli odpowiednikiem wartości null <ph id="ph1">`left`</ph>. Typ jest niejawnie przekonwertować <ph id="ph2">`right`</ph>. Typ jest typ wyniku <ph id="ph3">`right`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="left" /&gt;</ph> does not represent a reference type or a nullable value type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwość <ph id="ph2">&lt;paramref name="left" /&gt;</ph> nie reprezentuje typem referencyjnym lub typem wartości null.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type are not convertible to each other.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ nie są konwertowane na siebie.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a coalescing operation, given a conversion function.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację łączącego podanej funkcji konwersji.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> is <ph id="ph3">`null`</ph> and both <ph id="ph4">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> are set to <ph id="ph6">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> jest <ph id="ph3">`null`</ph> i oba <ph id="ph4">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph5">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> są ustawione na <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> is equal to the result type of the coalescing operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> jest taki sam typ wyniku operacji łączącego.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>The following rules determine the result type:</source>
          <target state="translated">Typ wyniku określa następujące reguły:</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>If <ph id="ph1">`left`</ph>.Type represents a nullable type and <ph id="ph2">`right`</ph>.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of <ph id="ph3">`left`</ph>.Type.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ reprezentuje typ dopuszczający wartość null i <ph id="ph2">`right`</ph>. Typ jest niejawnie przekonwertować typu odpowiadającego wartości null, typ wyniku jest odpowiednikiem wartości null <ph id="ph3">`left`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>Otherwise, if <ph id="ph1">`right`</ph>.Type is implicitly convertible to <ph id="ph2">`left`</ph>.Type, the result type is <ph id="ph3">`left`</ph>.Type.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`right`</ph>. Typ jest niejawnie przekonwertować <ph id="ph2">`left`</ph>. Typ jest typ wyniku <ph id="ph3">`left`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>Otherwise, if the non-nullable equivalent of <ph id="ph1">`left`</ph>.Type is implicitly convertible to <ph id="ph2">`right`</ph>.Type, the result type is <ph id="ph3">`right`</ph>.Type.</source>
          <target state="translated">W przeciwnym razie, jeśli odpowiednikiem wartości null <ph id="ph1">`left`</ph>. Typ jest niejawnie przekonwertować <ph id="ph2">`right`</ph>. Typ jest typ wyniku <ph id="ph3">`right`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type are not convertible to each other.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ nie są konwertowane na siebie.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source><ph id="ph1">&lt;paramref name="conversion" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="conversion" /&gt;</ph>.Type is a delegate type that does not take exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="conversion" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="conversion" /&gt;</ph>. Typ jest typem delegowanym, który nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="left" /&gt;</ph> does not represent a reference type or a nullable value type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwość <ph id="ph2">&lt;paramref name="left" /&gt;</ph> nie reprezentuje typem referencyjnym lub typem wartości null.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="left" /&gt;</ph> represents a type that is not assignable to the parameter type of the delegate type <ph id="ph3">&lt;paramref name="conversion" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwość <ph id="ph2">&lt;paramref name="left" /&gt;</ph> reprezentuje typ, który nie jest możliwa do przypisania do typu parametru typu delegata <ph id="ph3">&lt;paramref name="conversion" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is not equal to the return type of the delegate type <ph id="ph3">&lt;paramref name="conversion" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwość <ph id="ph2">&lt;paramref name="right" /&gt;</ph> nie jest taki sam typ zwracany typ delegowany <ph id="ph3">&lt;paramref name="conversion" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that represents a conditional statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> reprezentujący instrukcji warunkowej.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that represents a conditional statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> reprezentujący instrukcji warunkowej.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.ConditionalExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph4">`ifTrue`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.ConditionalExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość <ph id="ph4">`ifTrue`</ph>.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents a conditional statement.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia, który reprezentuje instrukcji warunkowej.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the first argument evaluates to <ph id="ph1">`true`</ph>, the second argument is executed; otherwise, the third argument is executed.</source>
          <target state="translated">Jeśli pierwszy argument ma wartość <ph id="ph1">`true`</ph>, drugi argument jest wykonane; w przeciwnym razie, trzeci argument jest wykonywana.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="test" /&gt;</ph> or <ph id="ph2">&lt;paramref name="ifTrue" /&gt;</ph> or <ph id="ph3">&lt;paramref name="ifFalse" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="test" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="ifTrue" /&gt;</ph> lub <ph id="ph3">&lt;paramref name="ifFalse" /&gt;</ph> jest <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="test" /&gt;</ph>.Type is not <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="test" /&gt;</ph>. Typ nie jest <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="ifTrue" /&gt;</ph>.Type is not equal to <ph id="ph2">&lt;paramref name="ifFalse" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ifTrue" /&gt;</ph>. Typ nie jest równa <ph id="ph2">&lt;paramref name="ifFalse" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that represents a conditional statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> reprezentujący instrukcji warunkowej.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>This method allows explicitly unifying the result type of the conditional expression in cases where the types of <ph id="ph1">`ifTrue`</ph> and <ph id="ph2">`ifFalse`</ph> expressions are not equal.</source>
          <target state="translated">Ta metoda umożliwia wyraźnie widać typ wyniku wyrażenia warunkowego, w przypadkach, gdy typy <ph id="ph1">`ifTrue`</ph> i <ph id="ph2">`ifFalse`</ph> wyrażenia nie są takie same.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>Types of both <ph id="ph1">`ifTrue`</ph> and <ph id="ph2">`ifFalse`</ph> must be implicitly reference assignable to the result type.</source>
          <target state="translated">Oba rodzaje <ph id="ph1">`ifTrue`</ph> i <ph id="ph2">`ifFalse`</ph> musi być niejawnie odniesienia można przypisać do typu wyniku.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">`type`</ph> is allowed to be <ph id="ph2">&lt;xref:System.Void&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`type`</ph> Może być <ph id="ph2">&lt;xref:System.Void&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Constant" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Constant" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Constant(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> is equal to the type of <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> jest taki sam typ <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Constant(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> is equal to <ph id="ph4">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> jest równa <ph id="ph4">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Constant(System.Object)">
          <source>To represent <ph id="ph1">`null`</ph>, you can also use the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29&gt;</ph> method, with which you can explicitly specify the type.</source>
          <target state="translated">Do reprezentowania <ph id="ph1">`null`</ph>, można również użyć <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29&gt;</ph> metody, z którą można jawnie określić typ.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Constant(System.Object)">
          <source>The following code example shows how to create an expression that represents a constant value.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje wartość stałą.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> and <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Constant" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Constant" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConstantExpression.Value" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
          <source>This method can be useful for representing values of nullable types.</source>
          <target state="translated">Ta metoda może być przydatne w przypadku reprezentujących wartości typy dopuszczające wartości zerowe.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
          <source>The following code example shows how to create an expression that represents a constant of the nullable type and set its value to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia reprezentuje stałą typu dopuszczającego wartości null i ustaw dla niego wartość <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="type" /&gt;</ph> is not assignable from the dynamic type of <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="type" /&gt;</ph> nie jest możliwa do przypisania z typu dynamicznego <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a continue statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji continue.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a continue statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji continue.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Continue, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, and a null value to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Kontynuuj, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>i wartość null do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
          <source>The following example demonstrates how to create a loop expression that uses the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Continue%2A&gt;</ph> method.</source>
          <target state="translated">Poniższy przykład przedstawia sposób tworzenia wyrażenia pętli, który używa <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Continue%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a continue statement with the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji continue z określonym typem.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Continue, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, the <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph6">&lt;paramref name="type" /&gt;</ph>, and a null value to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Kontynuuj, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph6">&lt;paramref name="type" /&gt;</ph>i wartość null do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a type conversion operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację konwersji typu.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a type conversion operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację konwersji typu.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Convert" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Convert" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> Jest właściwość <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If the node is lifted, <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> jest <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If either <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a user-defined type that defines an implicit or explicit conversion operator, the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli dowolny <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> jest typ zdefiniowany przez użytkownika, który określa operatora konwersji jawnych ani niejawnych <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący który operator jest implementującej metody.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>Otherwise:</source>
          <target state="translated">W przeciwnym razie:</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If both <ph id="ph1">`expression`</ph>.Type and <ph id="ph2">`type`</ph> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Jeśli oba <ph id="ph1">`expression`</ph>. Typ i <ph id="ph2">`type`</ph> reprezentować typu liczbowego lub typu Boolean lub Typy wyliczeniowe wartości null ani wartości null, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If either <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <ph id="ph3">`expression`</ph>.Type to <ph id="ph4">`type`</ph>, the implementing method is <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Jeśli dowolny <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> Typ referencyjny, a jawnej konwersji boxing Rozpakowywanie, lub istnieje konwersja odwołania z <ph id="ph3">`expression`</ph>. Wpisz, aby <ph id="ph4">`type`</ph>, implementacja metody jest <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>Lifted versus Non-Lifted</source>
          <target state="translated">Podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <ph id="ph2">`type`</ph>, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest można przypisać do typu argumentu implementującej metody i typ zwracany metody wykonawcze jest można przypisać do <ph id="ph2">`type`</ph>, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If one or both of <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</source>
          <target state="translated">Jeśli jeden lub oba z <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> jest typem wartości null i odpowiednie typy wartości nieprzyjmujące wartości są równe typ argumentu i zwracany typ metody implementującej odpowiednio zniesienia węzła.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>If both <ph id="ph1">`expression`</ph>.Type and <ph id="ph2">`type`</ph> are non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli oba <ph id="ph1">`expression`</ph>. Typ i <ph id="ph2">`type`</ph> są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>Otherwise the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>The following code example shows how to create an expression that represents a type convertion operation.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia reprezentujący operację umożliwić konwersję typu.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
          <source>No conversion operator is defined between <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated">Żaden operator konwersji zdefiniowany jest między <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a conversion operation for which the implementing method is specified.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację konwersji, dla którego określono implementującej metody.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Convert" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Convert" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> Jest właściwość <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If the node is lifted, <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> jest <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If method is not <ph id="ph1">`null`</ph>, it is the implementing method.</source>
          <target state="translated">Jeśli metoda nie jest <ph id="ph1">`null`</ph>, jest to metoda implementującej.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>It must represent a non-void, <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) method that takes one argument.</source>
          <target state="translated">Musi reprezentować inny niż void, <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje jeden argument.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Otherwise, if either <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a user-defined type that defines an implicit or explicit conversion operator, the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli dowolny <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> jest typ zdefiniowany przez użytkownika, który określa operatora konwersji jawnych ani niejawnych <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący który operator jest implementującej metody.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Otherwise:</source>
          <target state="translated">W przeciwnym razie:</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If both <ph id="ph1">`expression`</ph>.Type and <ph id="ph2">`type`</ph> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Jeśli oba <ph id="ph1">`expression`</ph>. Typ i <ph id="ph2">`type`</ph> reprezentować typu liczbowego lub typu Boolean lub Typy wyliczeniowe wartości null ani wartości null, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If either <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <ph id="ph3">`expression`</ph>.Type to <ph id="ph4">`type`</ph>, the implementing method is <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Jeśli dowolny <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> Typ referencyjny, a jawnej konwersji boxing Rozpakowywanie, lub istnieje konwersja odwołania z <ph id="ph3">`expression`</ph>. Wpisz, aby <ph id="ph4">`type`</ph>, implementacja metody jest <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Lifted versus Non-Lifted</source>
          <target state="translated">Podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <ph id="ph2">`type`</ph>, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest można przypisać do typu argumentu implementującej metody i typ zwracany metody wykonawcze jest można przypisać do <ph id="ph2">`type`</ph>, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If either or both of <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</source>
          <target state="translated">Jeśli jeden lub oba z <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> są typu wartości null i odpowiednie typy wartości nieprzyjmujące wartości są równe typ argumentu i zwracany typ metody implementującej odpowiednio, węzeł została wyjęta.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If both <ph id="ph1">`expression`</ph>.Type and <ph id="ph2">`type`</ph> are non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli oba <ph id="ph1">`expression`</ph>. Typ i <ph id="ph2">`type`</ph> są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Otherwise the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>No conversion operator is defined between <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated">Żaden operator konwersji zdefiniowany jest między <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type is not assignable to the argument type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie jest możliwa do przypisania do typu argumentu metodę reprezentowaną przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The return type of the method represented by <ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not assignable to <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody reprezentowany przez <ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest możliwa do przypisania do <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type or <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <ph id="ph3">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ lub <ph id="ph2">&lt;paramref name="type" /&gt;</ph> jest typem wartości null i odpowiedni typ niedopuszczający wartości null nie jest równa typu argumentu lub typ zwracany odpowiednio metody reprezentowany przez <ph id="ph3">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>More than one method that matches the <ph id="ph1">&lt;paramref name="method" /&gt;</ph> description was found.</source>
          <target state="translated">Więcej niż jedną metodę, która odpowiada <ph id="ph1">&lt;paramref name="method" /&gt;</ph> opis został znaleziony.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a conversion operation that throws an exception if the target type is overflowed.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację konwersji, która zgłasza wyjątek, jeśli typ docelowy jest przepełniony.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a conversion operation that throws an exception if the target type is overflowed.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację konwersji, która zgłasza wyjątek, jeśli typ docelowy jest przepełniony.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> Jest właściwość <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If the node is lifted, <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> jest <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If either <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a user-defined type that defines an implicit or explicit conversion operator, the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli dowolny <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> jest typ zdefiniowany przez użytkownika, który określa operatora konwersji jawnych ani niejawnych <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący który operator jest implementującej metody.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>Otherwise:</source>
          <target state="translated">W przeciwnym razie:</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If both <ph id="ph1">`expression`</ph>.Type and <ph id="ph2">`type`</ph> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Jeśli oba <ph id="ph1">`expression`</ph>. Typ i <ph id="ph2">`type`</ph> reprezentować typu liczbowego lub typu Boolean lub Typy wyliczeniowe wartości null ani wartości null, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If either <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <ph id="ph3">`expression`</ph>.Type to <ph id="ph4">`type`</ph>, the implementing method is <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Jeśli dowolny <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> Typ referencyjny, a jawnej konwersji boxing Rozpakowywanie, lub istnieje konwersja odwołania z <ph id="ph3">`expression`</ph>. Wpisz, aby <ph id="ph4">`type`</ph>, implementacja metody jest <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>Lifted versus Non-Lifted</source>
          <target state="translated">Podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <ph id="ph2">`type`</ph>, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest można przypisać do typu argumentu implementującej metody i typ zwracany metody wykonawcze jest można przypisać do <ph id="ph2">`type`</ph>, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If either or both of <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</source>
          <target state="translated">Jeśli jeden lub oba z <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> są typu wartości null i odpowiednie typy wartości nieprzyjmujące wartości są równe typ argumentu i zwracany typ metody implementującej odpowiednio, węzeł została wyjęta.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>If both <ph id="ph1">`expression`</ph>.Type and <ph id="ph2">`type`</ph> are non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli oba <ph id="ph1">`expression`</ph>. Typ i <ph id="ph2">`type`</ph> są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>Otherwise the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
          <source>No conversion operator is defined between <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated">Żaden operator konwersji zdefiniowany jest między <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację konwersji, która zgłasza wyjątek, jeśli typ docelowy jest przepełniony i dla którego określono implementującej metody.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> Jest właściwość <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If the node is lifted, <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> jest <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If method is not <ph id="ph1">`null`</ph>, it is the implementing method.</source>
          <target state="translated">Jeśli metoda nie jest <ph id="ph1">`null`</ph>, jest to metoda implementującej.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>It must represent a non-void, <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) method that takes one argument.</source>
          <target state="translated">Musi reprezentować inny niż void, <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje jeden argument.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Otherwise, if either <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a user-defined type that defines an implicit or explicit conversion operator, the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli dowolny <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> jest typ zdefiniowany przez użytkownika, który określa operatora konwersji jawnych ani niejawnych <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący który operator jest implementującej metody.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Otherwise:</source>
          <target state="translated">W przeciwnym razie:</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If both <ph id="ph1">`expression`</ph>.Type and <ph id="ph2">`type`</ph> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Jeśli oba <ph id="ph1">`expression`</ph>. Typ i <ph id="ph2">`type`</ph> reprezentować typu liczbowego lub typu Boolean lub Typy wyliczeniowe wartości null ani wartości null, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If either <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <ph id="ph3">`expression`</ph>.Type to <ph id="ph4">`type`</ph>, the implementing method is <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Jeśli dowolny <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> Typ referencyjny, a jawnej konwersji boxing Rozpakowywanie, lub istnieje konwersja odwołania z <ph id="ph3">`expression`</ph>. Wpisz, aby <ph id="ph4">`type`</ph>, implementacja metody jest <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Lifted versus Non-Lifted</source>
          <target state="translated">Podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <ph id="ph2">`type`</ph>, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest można przypisać do typu argumentu implementującej metody i typ zwracany metody wykonawcze jest można przypisać do <ph id="ph2">`type`</ph>, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If either or both of <ph id="ph1">`expression`</ph>.Type or <ph id="ph2">`type`</ph> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</source>
          <target state="translated">Jeśli jeden lub oba z <ph id="ph1">`expression`</ph>. Typ lub <ph id="ph2">`type`</ph> są typu wartości null i odpowiednie typy wartości nieprzyjmujące wartości są równe typ argumentu i zwracany typ metody implementującej odpowiednio, węzeł została wyjęta.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>If both <ph id="ph1">`expression`</ph>.Type and <ph id="ph2">`type`</ph> are non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli oba <ph id="ph1">`expression`</ph>. Typ i <ph id="ph2">`type`</ph> są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Otherwise the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>No conversion operator is defined between <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated">Żaden operator konwersji zdefiniowany jest między <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type is not assignable to the argument type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie jest możliwa do przypisania do typu argumentu metodę reprezentowaną przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The return type of the method represented by <ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not assignable to <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody reprezentowany przez <ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest możliwa do przypisania do <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type or <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <ph id="ph3">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ lub <ph id="ph2">&lt;paramref name="type" /&gt;</ph> jest typem wartości null i odpowiedni typ niedopuszczający wartości null nie jest równa typu argumentu lub typ zwracany odpowiednio metody reprezentowany przez <ph id="ph3">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>More than one method that matches the <ph id="ph1">&lt;paramref name="method" /&gt;</ph> description was found.</source>
          <target state="translated">Więcej niż jedną metodę, która odpowiada <ph id="ph1">&lt;paramref name="method" /&gt;</ph> opis został znaleziony.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> that represents the source file.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> Reprezentujący plik źródłowy.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The start line of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Wiersz początkowy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Must be greater than 0.</source>
          <target state="translated">Musi być większa niż 0.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The start column of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Kolumna start <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Must be greater than 0.</source>
          <target state="translated">Musi być większa niż 0.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The end line of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Do zakończenia wiersza to <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Must be greater or equal than the start line.</source>
          <target state="translated">Musi być mniejsza niż start wiersza.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The end column of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Końcowa kolumny tego <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the end line is the same as the start line, it must be greater or equal than the start column.</source>
          <target state="translated">Jeśli wiersz końcowy jest taki sam jak wiersz początkowy, jego musi być większy lub równy niż kolumna rozpoczęcia.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>In any case, must be greater than 0.</source>
          <target state="translated">W każdym przypadku musi być większa niż 0.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> with the specified span.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph> z określonego zakresu.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the decrementing of the expression by 1.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zmniejszanie wyrażenia o 1.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to decrement.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Zmniejszyć.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the decrementing of the expression by 1.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zmniejszanie wyrażenia o 1.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the decremented expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zmniejszany wyrażenia.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
          <source>This expression is functional and does not change the value of the object passed to it.</source>
          <target state="translated">To wyrażenie będzie działać i nie zmienia wartość przekazany obiekt.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that substracts 1 from a given value.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie tego substracts 1 z danej wartości.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to decrement.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Zmniejszyć.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the decrementing of the expression by 1.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zmniejszanie wyrażenia o 1.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the decremented expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zmniejszany wyrażenia.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>This expression is functional and does not change the value of the object passed to it.</source>
          <target state="translated">To wyrażenie będzie działać i nie zmienia wartość przekazany obiekt.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Default(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Default(System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DefaultExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DefaultExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwość określonego typu.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Default(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DefaultExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Default" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to the specified type.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DefaultExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Default" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwość określonego typu.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Default(System.Type)">
          <source>The following code example shows how to create an expression that represents a default vaule for a given type.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje vaule domyślny dla danego typu.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic division operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację arytmetycznego dzielenia.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic division operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację arytmetycznego dzielenia.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Divide" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Divide" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the division operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator dzielenia <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined division operator.</source>
          <target state="translated">Typ węzła jest typ wyniku dzielenia wstępnie zdefiniowanego operatora.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku dzielenia wstępnie zdefiniowanego operatora.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that divides divides its first argument by its second argument.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, która dzieli bez reszty jej pierwszy parametr przez jej drugi argument.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The division operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator dzielenia nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic division operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację arytmetycznego dzielenia.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Divide" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Divide" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the division operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator dzielenia <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined division operator.</source>
          <target state="translated">Typ węzła jest typ wyniku dzielenia wstępnie zdefiniowanego operatora.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku dzielenia wstępnie zdefiniowanego operatora.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the division operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator dzielenia dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a division assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dzielenia, który nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a division assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dzielenia, który nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a division assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dzielenia, który nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a division assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania dzielenia, który nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operację dynamiczną.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The result type of the dynamic expression.</source>
          <target state="translated">Typ wyniku wyrażenia dynamicznego.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The arguments to the dynamic operation.</source>
          <target state="translated">Argumenty operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> Właściwość wynik będzie można wywnioskować na podstawie typów argumentów i określony typ zwracany.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
          <source>The result type of the dynamic expression.</source>
          <target state="translated">Typ wyniku wyrażenia dynamicznego.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
          <source>The first argument to the dynamic operation.</source>
          <target state="translated">Pierwszy argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> Właściwość wynik będzie można wywnioskować na podstawie typów argumentów i określony typ zwracany.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
          <source>The result type of the dynamic expression.</source>
          <target state="translated">Typ wyniku wyrażenia dynamicznego.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
          <source>The arguments to the dynamic operation.</source>
          <target state="translated">Argumenty operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> Właściwość wynik będzie można wywnioskować na podstawie typów argumentów i określony typ zwracany.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The result type of the dynamic expression.</source>
          <target state="translated">Typ wyniku wyrażenia dynamicznego.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first argument to the dynamic operation.</source>
          <target state="translated">Pierwszy argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second argument to the dynamic operation.</source>
          <target state="translated">Drugi argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> Właściwość wynik będzie można wywnioskować na podstawie typów argumentów i określony typ zwracany.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The result type of the dynamic expression.</source>
          <target state="translated">Typ wyniku wyrażenia dynamicznego.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first argument to the dynamic operation.</source>
          <target state="translated">Pierwszy argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second argument to the dynamic operation.</source>
          <target state="translated">Drugi argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The third argument to the dynamic operation.</source>
          <target state="translated">Trzeci argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> Właściwość wynik będzie można wywnioskować na podstawie typów argumentów i określony typ zwracany.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The result type of the dynamic expression.</source>
          <target state="translated">Typ wyniku wyrażenia dynamicznego.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first argument to the dynamic operation.</source>
          <target state="translated">Pierwszy argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second argument to the dynamic operation.</source>
          <target state="translated">Drugi argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The third argument to the dynamic operation.</source>
          <target state="translated">Trzeci argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The fourth argument to the dynamic operation.</source>
          <target state="translated">Czwarty argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> Właściwość wynik będzie można wywnioskować na podstawie typów argumentów i określony typ zwracany.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to set the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ElementInit.Arguments" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiektów, aby ustawić <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ElementInit.Arguments" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph>, given an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> as the second argument.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph>, używając podanych <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> jako drugi argument.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /&gt;</ph> and <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ElementInit.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> Mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /&gt;</ph> i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ElementInit.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">`addMethod`</ph> parameter must represent an instance method named "Add" (case insensitive).</source>
          <target state="translated"><ph id="ph1">`addMethod`</ph> Parametru musi reprezentować metodą wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter).</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The add method must have the same number of parameters as the number of elements in <ph id="ph1">`arguments`</ph>.</source>
          <target state="translated">Metoda add musi mieć taką samą liczbę parametrów jako liczba elementów w <ph id="ph1">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element in <ph id="ph2">`arguments`</ph> must be assignable to the type of the corresponding parameter of the add method, possibly after <bpt id="p1">*</bpt>quoting<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości każdego elementu w <ph id="ph2">`arguments`</ph> musi być można przypisać do typu odpowiadającego mu parametru metody add prawdopodobnie po <bpt id="p1">*</bpt>zamykający<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An element will be quoted only if the corresponding method parameter is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy odpowiedni parametr metody jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`arguments`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> that represents calling the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method to initialize an element of a dictionary collection.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> reprezentujący wywołanie <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> metodę, aby zainicjować element kolekcji słownika.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> or <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The method that <ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> represents is not named "Add" (case insensitive).</source>
          <target state="translated">Metoda który <ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> reprezentuje nie ma nazwy "Dodaj" (bez uwzględniania wielkości liter).</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The method that <ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> represents is not an instance method.</source>
          <target state="translated">Metoda który <ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> reprezentuje nie jest metodą wystąpienia.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> does not contain the same number of elements as the number of parameters for the method that <ph id="ph2">&lt;paramref name="addMethod" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie zawiera taką samą liczbę elementów jako liczba parametrów metody który <ph id="ph2">&lt;paramref name="addMethod" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of one or more elements of <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the type of the corresponding parameter of the method that <ph id="ph3">&lt;paramref name="addMethod" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości jednego lub więcej elementów <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> nie można przypisać do typu odpowiadającego mu parametru metody który <ph id="ph3">&lt;paramref name="addMethod" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.Arguments" /&gt;</ph> property equal to.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiektów, aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.Arguments" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph>, given an array of values as the second argument.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph>, podanej tablicy wartości jako drugi argument.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /&gt;</ph> and <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ElementInit.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> Mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /&gt;</ph> i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ElementInit.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">`addMethod`</ph> parameter must represent an instance method named "Add" (case insensitive).</source>
          <target state="translated"><ph id="ph1">`addMethod`</ph> Parametru musi reprezentować metodą wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter).</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The add method must have the same number of parameters as the number of elements in <ph id="ph1">`arguments`</ph>.</source>
          <target state="translated">Metoda add musi mieć taką samą liczbę parametrów jako liczba elementów w <ph id="ph1">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element in <ph id="ph2">`arguments`</ph> must be assignable to the type of the corresponding parameter of the add method, possibly after <bpt id="p1">*</bpt>quoting<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości każdego elementu w <ph id="ph2">`arguments`</ph> musi być można przypisać do typu odpowiadającego mu parametru metody add prawdopodobnie po <bpt id="p1">*</bpt>zamykający<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An element will be quoted only if the corresponding method parameter is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy odpowiedni parametr metody jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`arguments`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> that represents calling the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method to initialize an element of a dictionary collection.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> reprezentujący wywołanie <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> metodę, aby zainicjować element kolekcji słownika.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> or <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The method that addMethod represents is not named "Add" (case insensitive).</source>
          <target state="translated">Metodę, która nie jest addMethod reprezentuje o nazwie "Dodaj" (bez uwzględniania wielkości liter).</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The method that addMethod represents is not an instance method.</source>
          <target state="translated">Metoda czy reprezentuje addMethod nie jest metodą wystąpienia.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</source>
          <target state="translated">argumenty nie zawierać taką samą liczbę elementów w postaci z liczbą parametrów metody reprezentuje tego addMethod.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of one or more elements of <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the type of the corresponding parameter of the method that <ph id="ph3">&lt;paramref name="addMethod" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości jednego lub więcej elementów <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> nie można przypisać do typu odpowiadającego mu parametru metody który <ph id="ph3">&lt;paramref name="addMethod" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Empty">
          <source>Creates an empty expression that has <ph id="ph1">&lt;see cref="T:System.Void" /&gt;</ph> type.</source>
          <target state="translated">Tworzy puste wyrażenie, które ma <ph id="ph1">&lt;see cref="T:System.Void" /&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Empty">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DefaultExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Default" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph5">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DefaultExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Default" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Empty">
          <source>An empty expression can be used where an expression is expected but no action is desired.</source>
          <target state="translated">Puste wyrażenie może służyć, gdy wyrażenie jest oczekiwany, ale jest potrzebne żadne działanie.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Empty">
          <source>For example, you can use an empty expression as the last expression in a block expression.</source>
          <target state="translated">Na przykład używając puste wyrażenie jako ostatni wyrażenie w wyrażeniu bloku.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Empty">
          <source>In this case, the block expression's return value is void.</source>
          <target state="translated">W takim przypadku wartość zwrotna wyrażenie bloku jest nieważne.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Empty">
          <source>The following code example shows how to create an empty expression and add it to a block expression.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia puste wyrażenie i dodać je do wyrażenia bloku.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an equality comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący porównanie równości.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an equality comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący porównanie równości.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Equal" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Equal" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> Właściwość jest zawsze <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the equality operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator równości <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, the implementing method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie jest implementującej metody <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło i typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które sprawdza, czy wartości dwa argumenty są takie same.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The equality operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Nie zdefiniowano operator równości dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> można ustawić <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an equality comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący porównanie równości.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Equal" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Equal" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id="ph4">`liftToNull`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> właściwość jest <ph id="ph2">`true`</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości jest równa <ph id="ph4">`liftToNull`</ph>.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, they are both <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the equality operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator równości <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, the implementing method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie jest implementującej metody <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło; Ponadto typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>:</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>.</source>
          <target state="translated">Typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the equality operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator równości dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="XOR" /&gt;</ph> operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="XOR" /&gt;</ph> operacji.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="XOR" /&gt;</ph> operation, using <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> for user-defined types.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="XOR" /&gt;</ph> operację, używając <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> dla typów zdefiniowanych przez użytkownika.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the <ph id="ph4">`XOR`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads <ph id="ph4">`XOR`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typów całkowitych lub Boolean, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined <ph id="ph1">`XOR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ wyniku predefiniowanych <ph id="ph1">`XOR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined <ph id="ph1">`XOR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku predefiniowanych <ph id="ph1">`XOR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents the logical XOR operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje operacji XOR logicznej.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> operator is not defined for <ph id="ph2">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XOR" /&gt;</ph> Operator nie jest zdefiniowany dla <ph id="ph2">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph3">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="XOR" /&gt;</ph> operation, using <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> for user-defined types.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="XOR" /&gt;</ph> operację, używając <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> dla typów zdefiniowanych przez użytkownika.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the chosen implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybrana implementacja metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the <ph id="ph4">`XOR`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads <ph id="ph4">`XOR`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typów całkowitych lub Boolean, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined <ph id="ph1">`XOR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ wyniku predefiniowanych <ph id="ph1">`XOR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined <ph id="ph1">`XOR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku predefiniowanych <ph id="ph1">`XOR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the <ph id="ph3">&lt;see langword="XOR" /&gt;</ph> operator is not defined for <ph id="ph4">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph5">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;see langword="XOR" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph4">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph5">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise XOR assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący XOR operacji przypisania.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise XOR assignment operation, using <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> for user-defined types.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący XOR przypisania operacji, używając <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> dla typów zdefiniowanych przez użytkownika.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise XOR assignment operation, using <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> for user-defined types.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący XOR przypisania operacji, używając <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> dla typów zdefiniowanych przez użytkownika.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise XOR assignment operation, using <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> for user-defined types.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący XOR przypisania operacji, używając <bpt id="p1">&lt;c&gt;</bpt>op_ExclusiveOr<ept id="p1">&lt;/c&gt;</ept> dla typów zdefiniowanych przez użytkownika.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a field.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do pola.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source>For <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), <bpt id="p1">&lt;c&gt;</bpt>expression<ept id="p1">&lt;/c&gt;</ept> must be <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), <bpt id="p1">&lt;c&gt;</bpt>wyrażenie<ept id="p1">&lt;/c&gt;</ept> musi być <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a field.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do pola.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> property of <ph id="ph4">`field`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> właściwość <ph id="ph4">`field`</ph>.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;paramref name="field" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="field" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source>The field represented by <ph id="ph1">&lt;paramref name="field" /&gt;</ph> is not <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) and <ph id="ph4">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Pole reprezentowany przez <ph id="ph1">&lt;paramref name="field" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) i <ph id="ph4">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type is not assignable to the declaring type of the field represented by <ph id="ph2">&lt;paramref name="field" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie jest można przypisać do pola reprezentowane przez typ deklarujący <ph id="ph2">&lt;paramref name="field" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> whose <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> contains a field named <bpt id="p1">&lt;c&gt;</bpt>fieldName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Których <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> zawiera pole o nazwie <bpt id="p1">&lt;c&gt;</bpt>fieldName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>This can be null for static fields.</source>
          <target state="translated">Może to być wartość null dla pola statyczne.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>The name of a field to be accessed.</source>
          <target state="translated">Nazwa pola, aby można było uzyskać dostęp.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a field given the name of the field.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do pola nazwę pola.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> property set to <ph id="ph5">&lt;paramref name="expression" /&gt;</ph>, and the <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> property set to the <ph id="ph7">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> that represents the field denoted by <ph id="ph8">&lt;paramref name="fieldName" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;paramref name="expression" /&gt;</ph>i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> ustawioną właściwość <ph id="ph7">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> reprezentująca pole wskazywane przez <ph id="ph8">&lt;paramref name="fieldName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> that represents the field denoted by <ph id="ph5">`fieldName`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> właściwość <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> reprezentująca pole wskazywane przez <ph id="ph5">`fieldName`</ph>.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>This method searches <ph id="ph1">`expression`</ph>.Type and its base types for a field that has the name <ph id="ph2">`fieldName`</ph>.</source>
          <target state="translated">Ta metoda szuka <ph id="ph1">`expression`</ph>. Typ i jego typów podstawowych dla pola o nazwie <ph id="ph2">`fieldName`</ph>.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>Public fields are given preference over non-public fields.</source>
          <target state="translated">Pola publiczne są preferowane względem niepublicznych pól.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>If a matching field is found, this method passes <ph id="ph1">`expression`</ph> and the <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> that represents that field to <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph>.</source>
          <target state="translated">Jeśli zostanie znaleziony zgodnego pola, ta metoda przekazuje <ph id="ph1">`expression`</ph> i <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> reprezentujący to pole, aby <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>The following code example shows how to create an expression that represents accessing a field.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje podczas uzyskiwania dostępu do pola.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="fieldName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="fieldName" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
          <source>No field named <ph id="ph1">&lt;paramref name="fieldName" /&gt;</ph> is defined in <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>.Type or its base types.</source>
          <target state="translated">Brak pola o nazwie <ph id="ph1">&lt;paramref name="fieldName" /&gt;</ph> jest zdefiniowany w <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>. Typ lub jego typów podstawowych.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>The containing object of the field.</source>
          <target state="translated">Obiekt zawierający pola.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>This can be null for static fields.</source>
          <target state="translated">Może to być wartość null dla pola statyczne.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> that contains the field.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Zawierającego pole.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>The field to be accessed.</source>
          <target state="translated">Pole ma być uzyskiwany dostęp.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a field.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do pola.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
          <source>An array of up to sixteen <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that specify the type arguments for the <ph id="ph2">&lt;see langword="System.Action" /&gt;</ph> delegate type.</source>
          <target state="translated">Tablica do sixteen <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektów, które określają argumentów typu dla <ph id="ph2">&lt;see langword="System.Action" /&gt;</ph> typ delegata.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a generic <bpt id="p1">&lt;c&gt;</bpt>System.Action<ept id="p1">&lt;/c&gt;</ept> delegate type that has specific type arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiekt, który reprezentuje ogólnego <bpt id="p1">&lt;c&gt;</bpt>elementu System.Action<ept id="p1">&lt;/c&gt;</ept> przekazać typ, który ma argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
          <source>The type of a <bpt id="p1">&lt;c&gt;</bpt>System.Action<ept id="p1">&lt;/c&gt;</ept> delegate that has the specified type arguments.</source>
          <target state="translated">Typ <bpt id="p1">&lt;c&gt;</bpt>elementu System.Action<ept id="p1">&lt;/c&gt;</ept> delegata, który ma argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
          <source>As an example, if the elements of <ph id="ph1">`typeArgs`</ph> represent the types <ph id="ph2">`T1…Tn`</ph>, the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object represents the constructed delegate type <ph id="ph4">`System.Action&lt;T1,…,Tn&gt;`</ph> in C# or <ph id="ph5">`System.Action(Of T1,…,Tn)`</ph> in Visual Basic.</source>
          <target state="translated">Na przykład jeśli elementy <ph id="ph1">`typeArgs`</ph> reprezentują typy <ph id="ph2">`T1…Tn`</ph>, powstałe w ten sposób <ph id="ph3">&lt;xref:System.Type&gt;</ph> obiekt reprezentuje typ delegata skonstruowane <ph id="ph4">`System.Action&lt;T1,…,Tn&gt;`</ph> w języku C# lub <ph id="ph5">`System.Action(Of T1,…,Tn)`</ph> w języku Visual Basic.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
          <source><ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph> contains more than sixteen elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph> zawiera więcej niż szesnastu elementy.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
          <source><ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
          <source>The type arguments of the delegate.</source>
          <target state="translated">Argumenty typu delegata.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
          <source>Gets a <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> object that represents a generic <bpt id="p1">&lt;c&gt;</bpt>System.Func<ept id="p1">&lt;/c&gt;</ept> or <bpt id="p2">&lt;c&gt;</bpt>System.Action<ept id="p2">&lt;/c&gt;</ept> delegate type that has specific type arguments.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> obiekt, który reprezentuje ogólnego <bpt id="p1">&lt;c&gt;</bpt>System.Func<ept id="p1">&lt;/c&gt;</ept> lub <bpt id="p2">&lt;c&gt;</bpt>elementu System.Action<ept id="p2">&lt;/c&gt;</ept> przekazać typ, który ma argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
          <source>The delegate type.</source>
          <target state="translated">Typ delegata.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
          <source>The last type argument determines the return type of the delegate.</source>
          <target state="translated">Ostatni argument typu określa typ zwracany delegata.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
          <source>If no Func or Action is large enough, it will generate a custom delegate type.</source>
          <target state="translated">Nie Func akcji jest ani wystarczająco duży, wygeneruje typu delegata niestandardowych.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
          <source>As with Func, the last argument is the return type.</source>
          <target state="translated">Podobnie jak w przypadku Func, ostatni argument jest typu zwracanego.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
          <source>It can be set to System.Void to produce an Action.</source>
          <target state="translated">Można można ustawić na System.Void wygenerowało akcji.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
          <source>An array of one to seventeen <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that specify the type arguments for the <ph id="ph2">&lt;see langword="System.Func" /&gt;</ph> delegate type.</source>
          <target state="translated">Tablica co do seventeen <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektów, które określają argumentów typu dla <ph id="ph2">&lt;see langword="System.Func" /&gt;</ph> typ delegata.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
          <source>Creates a <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> object that represents a generic <bpt id="p1">&lt;c&gt;</bpt>System.Func<ept id="p1">&lt;/c&gt;</ept> delegate type that has specific type arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> obiekt, który reprezentuje ogólnego <bpt id="p1">&lt;c&gt;</bpt>System.Func<ept id="p1">&lt;/c&gt;</ept> przekazać typ, który ma argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
          <source>The last type argument specifies the return type of the created delegate.</source>
          <target state="translated">Ostatni argument typu określa typ zwracany delegata utworzony.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
          <source>The type of a <bpt id="p1">&lt;c&gt;</bpt>System.Func<ept id="p1">&lt;/c&gt;</ept> delegate that has the specified type arguments.</source>
          <target state="translated">Typ <bpt id="p1">&lt;c&gt;</bpt>System.Func<ept id="p1">&lt;/c&gt;</ept> delegata, który ma argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
          <source><ph id="ph1">`typeArgs`</ph> must contain at least one and at most seventeen elements.</source>
          <target state="translated"><ph id="ph1">`typeArgs`</ph> musi zawierać co najmniej jedną i maksymalnie siedemnaście elementów.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
          <source>As an example, if the elements of <ph id="ph1">`typeArgs`</ph> represent the types <ph id="ph2">`T1…Tn`</ph>, the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object represents the constructed delegate type <ph id="ph4">`System.Func&lt;T1,…,Tn&gt;`</ph> in C# or <ph id="ph5">`System.Func(Of T1,…,Tn)`</ph> in Visual Basic.</source>
          <target state="translated">Na przykład jeśli elementy <ph id="ph1">`typeArgs`</ph> reprezentują typy <ph id="ph2">`T1…Tn`</ph>, powstałe w ten sposób <ph id="ph3">&lt;xref:System.Type&gt;</ph> obiekt reprezentuje typ delegata skonstruowane <ph id="ph4">`System.Func&lt;T1,…,Tn&gt;`</ph> w języku C# lub <ph id="ph5">`System.Func(Of T1,…,Tn)`</ph> w języku Visual Basic.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
          <source><ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph> contains fewer than one or more than seventeen elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph> zawiera mniej niż jeden lub więcej niż siedemnaście elementów.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
          <source><ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a "go to" statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcję "Przejdź do".</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a "go to" statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcję "Przejdź do".</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Goto, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to the specified value, and a null value to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Goto, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> właściwość do przekazania do etykiety docelowej na przechodzenie do określonej wartości, a wartość null.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
          <source>The following example demonstrates how to create an expression that contains a <ph id="ph1">&lt;xref:System.Linq.Expressions.GotoExpression&gt;</ph> object.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie zawierające <ph id="ph1">&lt;xref:System.Linq.Expressions.GotoExpression&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The value that will be passed to the associated label upon jumping.</source>
          <target state="translated">Wartość, która zostanie przekazany do skojarzone etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a "go to" statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcję "Przejdź do".</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The value passed to the label upon jumping can be specified.</source>
          <target state="translated">Można określić wartość przekazana do etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Goto, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, and <ph id="ph5">&lt;paramref name="value" /&gt;</ph> to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Goto, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, i <ph id="ph5">&lt;paramref name="value" /&gt;</ph> do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a "go to" statement with the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcję "Przejdź do" z określonym typem.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Goto, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to the specified value, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph5">&lt;paramref name="type" /&gt;</ph>, and a null value to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Goto, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> zestaw do określonej wartości właściwości <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;paramref name="type" /&gt;</ph>i wartość null do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The value that will be passed to the associated label upon jumping.</source>
          <target state="translated">Wartość, która zostanie przekazany do skojarzone etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a "go to" statement with the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcję "Przejdź do" z określonym typem.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The value passed to the label upon jumping can be specified.</source>
          <target state="translated">Można określić wartość przekazana do etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Goto, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, the <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph6">&lt;paramref name="type" /&gt;</ph>, and <ph id="ph7">&lt;paramref name="value" /&gt;</ph> to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Goto, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph6">&lt;paramref name="type" /&gt;</ph>, i <ph id="ph7">&lt;paramref name="value" /&gt;</ph> do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "greater than" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "większe niż" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "greater than" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "większe niż" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> Właściwość jest zawsze <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the "greater than" operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator "większe niż" <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło i typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that compares two integers.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia, który porównuje dwie liczb całkowitych.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The "greater than" operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator "większe niż" nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> można ustawić <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "greater than" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "większe niż" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id="ph4">`liftToNull`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> właściwość jest <ph id="ph2">`true`</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości jest równa <ph id="ph4">`liftToNull`</ph>.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, they are both <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation :</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the "greater than" operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator "większe niż" <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło; Ponadto typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>:</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>.</source>
          <target state="translated">Typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the "greater than" operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operatora "większe niż" nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "greater than or equal" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "większe lub równe" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "greater than or equal" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "większe lub równe" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> Właściwość jest zawsze <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the "greater than or equal" operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator "większe lub równe" <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło i typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that compares two integers.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia, który porównuje dwie liczb całkowitych.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The "greater than or equal" operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator "większe lub równe" nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> można ustawić <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "greater than or equal" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "większe lub równe" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id="ph4">`liftToNull`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> właściwość jest <ph id="ph2">`true`</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości jest równa <ph id="ph4">`liftToNull`</ph>.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, they are both <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the "greater than or equal" operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator "większe lub równe" <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło; Ponadto typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>:</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>.</source>
          <target state="translated">Typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the "greater than or equal" operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operatora "większe lub równe" nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that represents a conditional block with an <ph id="ph2">&lt;see langword="if" /&gt;</ph> statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> reprezentujący bloku warunkowego z <ph id="ph2">&lt;see langword="if" /&gt;</ph> instrukcji.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>, properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>, właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> property is set to default expression and the type of the resulting <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> returned by this method is <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> Właściwość jest ustawiona na wyrażenie wartości domyślnej i typ powstałe w ten sposób <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> zwracane przez tę metodę jest <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents a conditional block.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje blok warunkowego.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that represents a conditional block with <ph id="ph2">&lt;see langword="if" /&gt;</ph> and <ph id="ph3">&lt;see langword="else" /&gt;</ph> statements.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> reprezentujący bloku warunkowego z <ph id="ph2">&lt;see langword="if" /&gt;</ph> i <ph id="ph3">&lt;see langword="else" /&gt;</ph> instrukcje.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the resulting <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> returned by this method is <ph id="ph2">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Typ wyniku <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph> zwracane przez tę metodę jest <ph id="ph2">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents a conditional block.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje blok warunkowego.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the incrementing of the expression value by 1.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zwiększając wartość wyrażenia o 1.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to increment.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Przyrost.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the incrementing of the expression value by 1.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zwiększając wartość wyrażenia o 1.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the incremented expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zwiększany wyrażenia.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
          <source>This expression is functional and does not change the value of the object that is passed to it.</source>
          <target state="translated">To wyrażenie będzie działać i nie zmienia wartość obiektu, który jest przekazywany do niego.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents an increment operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje operacji przyrostu.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to increment.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Przyrost.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the incrementing of the expression by 1.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący przyroście wyrażenie 1.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the incremented expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zwiększany wyrażenia.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>This expression is functional and does not change the value of the object that is passed to it.</source>
          <target state="translated">To wyrażenie będzie działać i nie zmienia wartość obiektu, który jest przekazywany do niego.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the delegate or lambda expression to be applied to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący delegat lub wyrażenie lambda ma zostać zastosowany do.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects that represent the arguments that the delegate or lambda expression is applied to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty reprezentujące argumenty, które delegat lub wyrażenie lambda jest stosowany do.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph> that applies a delegate or lambda expression to a list of argument expressions.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph> dotyczący delegat lub wyrażenie lambda listę wyrażenia argumentów.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph> that applies the specified delegate or lambda expression to the provided arguments.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph> Dotyczący określonej delegat lub wyrażenie lambda do podanych argumentów.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> represents the return type of the delegate that is represented by <ph id="ph3">`expression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> reprezentuje typ zwracany delegata, który jest reprezentowany przez <ph id="ph3">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.InvocationExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> is empty if <ph id="ph3">`arguments`</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.InvocationExpression.Arguments%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> jest pusta Jeśli <ph id="ph3">`arguments`</ph> jest <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Otherwise, it contains the same elements as <ph id="ph1">`arguments`</ph> except that some of these <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> objects may be <bpt id="p1">*</bpt>quoted<ept id="p1">*</ept>.</source>
          <target state="translated">W przeciwnym razie zawiera te same elementy jako <ph id="ph1">`arguments`</ph> z wyjątkiem, że niektóre z nich <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> obiekty mogą być <bpt id="p1">*</bpt>cytowaną<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An element will be quoted only if the corresponding parameter of the delegate represented by <ph id="ph1">`expression`</ph> is of type <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy odpowiadającego mu parametru delegata reprezentowany przez <ph id="ph1">`expression`</ph> jest typu <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`arguments`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> that represents the invocation of a lambda expression with specified arguments.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> reprezentujący wywołanie wyrażenia lambda z określonymi argumentami.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type does not represent a delegate type or an <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie odpowiada typowi obiektu delegowanego lub <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the type of the corresponding parameter of the delegate represented by <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> nie można przypisać do typu odpowiadającego mu parametru delegowanego reprezentowany przez <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> does not contain the same number of elements as the list of parameters for the delegate represented by <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie zawiera taką samą liczbę elementów jak lista parametrów dla delegata reprezentowany przez <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the delegate or lambda expression to be applied.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący delegat lub wyrażenie lambda ma zostać zastosowany.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects that represent the arguments that the delegate or lambda expression is applied to.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty reprezentujące argumenty, które delegat lub wyrażenie lambda jest stosowany do.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph> that applies a delegate or lambda expression to a list of argument expressions.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph> dotyczący delegat lub wyrażenie lambda listę wyrażenia argumentów.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph> that applies the specified delegate or lambda expression to the provided arguments.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph> Dotyczący określonej delegat lub wyrażenie lambda do podanych argumentów.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> represents the return type of the delegate that is represented by <ph id="ph3">`expression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> reprezentuje typ zwracany delegata, który jest reprezentowany przez <ph id="ph3">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.InvocationExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> is empty if <ph id="ph3">`arguments`</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.InvocationExpression.Arguments%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> jest pusta Jeśli <ph id="ph3">`arguments`</ph> jest <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>Otherwise, it contains the same elements as <ph id="ph1">`arguments`</ph> except that some of these <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> objects may be <bpt id="p1">*</bpt>quoted<ept id="p1">*</ept>.</source>
          <target state="translated">W przeciwnym razie zawiera te same elementy jako <ph id="ph1">`arguments`</ph> z wyjątkiem, że niektóre z nich <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> obiekty mogą być <bpt id="p1">*</bpt>cytowaną<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>An element will be quoted only if the corresponding parameter of the delegate represented by <ph id="ph1">`expression`</ph> is of type <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy odpowiadającego mu parametru delegata reprezentowany przez <ph id="ph1">`expression`</ph> jest typu <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`arguments`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`arguments`</ph>.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> that represents the invocation of a lambda expression with specified arguments.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> reprezentujący wywołanie wyrażenia lambda z określonymi argumentami.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type does not represent a delegate type or an <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie odpowiada typowi obiektu delegowanego lub <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the type of the corresponding parameter of the delegate represented by <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> nie można przypisać do typu odpowiadającego mu parametru delegowanego reprezentowany przez <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> does not contain the same number of elements as the list of parameters for the delegate represented by <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> nie zawiera taką samą liczbę elementów jak lista parametrów dla delegata reprezentowany przez <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Returns whether the expression evaluates to false.</source>
          <target state="translated">Zwraca, czy wyrażenie ma wartość false.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to evaluate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Do oceny.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
          <source>Returns whether the expression evaluates to false.</source>
          <target state="translated">Zwraca, czy wyrażenie ma wartość false.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to evaluate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Do oceny.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Returns whether the expression evaluates to false.</source>
          <target state="translated">Zwraca, czy wyrażenie ma wartość false.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Returns whether the expression evaluates to true.</source>
          <target state="translated">Zwraca, czy wyrażenie daje w wyniku wartość true.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to evaluate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Do oceny.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
          <source>Returns whether the expression evaluates to true.</source>
          <target state="translated">Zwraca, czy wyrażenie daje w wyniku wartość true.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to evaluate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Do oceny.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Returns whether the expression evaluates to true.</source>
          <target state="translated">Zwraca, czy wyrażenie daje w wyniku wartość true.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> representing a label.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> reprezentujący etykiety.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> representing a label with void type and no name.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> reprezentujący etykiety z typu void i bez nazwy.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</source>
          <target state="translated">Nowe <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Label">
          <source>The following example demonstrates how to create an expression that contains a <ph id="ph1">&lt;xref:System.Linq.Expressions.LabelTarget&gt;</ph> object.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie zawierające <ph id="ph1">&lt;xref:System.Linq.Expressions.LabelTarget&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> which this <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> will be associated with.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Której ta <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> zostanie skojarzona.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> representing a label without a default value.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> reprezentujący Etykieta bez wartości domyślnej.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> without a default value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> bez wartości domyślnej.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.String)">
          <source>The name of the label.</source>
          <target state="translated">Nazwa etykiety.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> representing a label with void type and the given name.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> reprezentujący etykiety typu void o podanej nazwie.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.String)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</source>
          <target state="translated">Nowe <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Type)">
          <source>The type of value that is passed when jumping to the label.</source>
          <target state="translated">Typ wartości, który jest przekazywany, gdy przeskakiwanie do etykiet.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> representing a label with the given type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> reprezentujący etykiety z danym typem.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Type)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</source>
          <target state="translated">Nowe <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Label(System.Type)">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Linq.Expressions.LabelTarget&gt;</ph> object in a loop expression.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.LabelTarget&gt;</ph> w wyrażeniu pętli.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> which this <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> will be associated with.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Której ta <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> zostanie skojarzona.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The value of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> when the label is reached through regular control flow.</source>
          <target state="translated">Wartość tego <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> po osiągnięciu przez przepływu sterowania regularne etykiety.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> representing a label with the given default value.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> reprezentujący etykiety z daną wartość domyślną.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> with the given default value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph> z daną wartość domyślną.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
          <source>The type of value that is passed when jumping to the label.</source>
          <target state="translated">Typ wartości, który jest przekazywany, gdy przeskakiwanie do etykiet.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
          <source>The name of the label.</source>
          <target state="translated">Nazwa etykiety.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> representing a label with the given type and name.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> reprezentujący etykiety z danym typem i nazwą.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</source>
          <target state="translated">Nowe <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates an expression tree that represents a lambda expression.</source>
          <target state="translated">Tworzy drzewo wyrażenia, który reprezentuje wyrażenie lambda.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> by first constructing a delegate type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> przy pierwszym tworzeniu typem obiektu delegowanego.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The <ph id="ph1">`parameters`</ph> parameter must not have more than sixteen elements.</source>
          <target state="translated"><ph id="ph1">`parameters`</ph> Parametr nie może mieć więcej niż szesnastu elementów.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The elements of <ph id="ph1">`parameters`</ph> must be reference equal to the parameter expressions in <ph id="ph2">`body`</ph>.</source>
          <target state="translated">Elementy <ph id="ph1">`parameters`</ph> odwołania musi być równa wyrażeń w <ph id="ph2">`body`</ph>.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>This method constructs an appropriate delegate type from one of the <ph id="ph1">`System.Func`</ph> generic delegates.</source>
          <target state="translated">Ta metoda tworzy typ delegata odpowiednie z jednego z <ph id="ph1">`System.Func`</ph> delegatów.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>It then passes the delegate type to one of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph> factory methods to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph>.</source>
          <target state="translated">Następnie przekazuje typ delegata do jednego z <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph> metodami factory, aby utworzyć <ph id="ph2">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="body" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="body" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> contains more than sixteen elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> zawiera więcej niż szesnastu elementy.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>An array that contains <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated">Tablica zawierająca <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The name for the lambda.</source>
          <target state="translated">Nazwa lambda.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Used for emitting debug information.</source>
          <target state="translated">Używane w celu emisji informacji o debugowaniu.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents a delegate signature for the lambda.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący podpis delegata lambda.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> by first constructing a delegate type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> przy pierwszym tworzeniu typem obiektu delegowanego.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>It can be used when the delegate type is not known at compile time.</source>
          <target state="translated">Można go po typie delegata nie jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An object that represents a lambda expression which has the <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph2">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">Obiekt, który reprezentuje wyrażenie lambda, które ma <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph2">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The object that is returned from this function is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Obiekt, który jest zwracany z tej funkcji jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> Typ jest używany do reprezentowania zwróconego obiektu, ponieważ konkretnego typu wyrażenia lambda nie jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The number of parameters for the delegate type represented by<ph id="ph1">`delegateType`</ph> must equal the length of <ph id="ph2">`parameters`</ph>.</source>
          <target state="translated">Liczba parametrów dla typu delegata reprezentowany przez<ph id="ph1">`delegateType`</ph> musi być równa długości <ph id="ph2">`parameters`</ph>.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The elements of <ph id="ph1">`parameters`</ph> must be reference equal to the parameter expressions in <ph id="ph2">`body`</ph>.</source>
          <target state="translated">Elementy <ph id="ph1">`parameters`</ph> odwołania musi być równa wyrażeń w <ph id="ph2">`body`</ph>.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting object is equal to <ph id="ph2">`delegateType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości wynikowy obiekt jest taki sam <ph id="ph2">`delegateType`</ph>.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>If <ph id="ph1">`parameters`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> property of the resulting object is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`parameters`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> właściwość wynikowy obiekt ma pustą kolekcję.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie reprezentuje wyrażenie lambda, które dodaje 1 do przekazany argument.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="body" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="body" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>One or more elements in <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden element w <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> does not represent a delegate type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> reprezentuje typ obiektu delegowanego.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source><ph id="ph1">&lt;paramref name="body" /&gt;</ph>.Type represents a type that is not assignable to the return type of the delegate type represented by <ph id="ph2">&lt;paramref name="delegateType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="body" /&gt;</ph>. Typ reprezentuje typ, który nie jest można przypisać do typ zwracany typ delegowany reprezentowany przez <ph id="ph2">&lt;paramref name="delegateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> does not contain the same number of elements as the list of parameters for the delegate type represented by <ph id="ph2">&lt;paramref name="delegateType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> nie zawiera taką samą liczbę elementów jak lista parametrów dla typu delegata reprezentowany przez <ph id="ph2">&lt;paramref name="delegateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="parameters" /&gt;</ph> is not assignable from the type of the corresponding parameter type of the delegate type represented by <ph id="ph3">&lt;paramref name="delegateType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="parameters" /&gt;</ph> nie jest możliwa do przypisania z typu z odpowiadającym typem parametru na typ delegata reprezentowany przez <ph id="ph3">&lt;paramref name="delegateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents a delegate signature for the lambda.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący podpis delegata lambda.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> by first constructing a delegate type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> przy pierwszym tworzeniu typem obiektu delegowanego.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>It can be used when the delegate type is not known at compile time.</source>
          <target state="translated">Można go po typie delegata nie jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>An object that represents a lambda expression which has the <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph2">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">Obiekt, który reprezentuje wyrażenie lambda, które ma <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph2">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The object that is returned from this function is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Obiekt, który jest zwracany z tej funkcji jest typu <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> Typ jest używany do reprezentowania zwróconego obiektu, ponieważ konkretnego typu wyrażenia lambda nie jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The number of parameters for the delegate type represented by <ph id="ph1">`delegateType`</ph> must equal the length of <ph id="ph2">`parameters`</ph>.</source>
          <target state="translated">Liczba parametrów dla typu delegata reprezentowany przez <ph id="ph1">`delegateType`</ph> musi być równa długości <ph id="ph2">`parameters`</ph>.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The elements of <ph id="ph1">`parameters`</ph> must be reference equal to the parameter expressions in <ph id="ph2">`body`</ph>.</source>
          <target state="translated">Elementy <ph id="ph1">`parameters`</ph> odwołania musi być równa wyrażeń w <ph id="ph2">`body`</ph>.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting object is equal to <ph id="ph2">`delegateType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości wynikowy obiekt jest taki sam <ph id="ph2">`delegateType`</ph>.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>If <ph id="ph1">`parameters`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> property of the resulting object is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`parameters`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> właściwość wynikowy obiekt ma pustą kolekcję.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="body" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="body" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>One or more elements in <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden element w <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> does not represent a delegate type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> reprezentuje typ obiektu delegowanego.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="body" /&gt;</ph>.Type represents a type that is not assignable to the return type of the delegate type represented by <ph id="ph2">&lt;paramref name="delegateType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="body" /&gt;</ph>. Typ reprezentuje typ, który nie jest można przypisać do typ zwracany typ delegowany reprezentowany przez <ph id="ph2">&lt;paramref name="delegateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> does not contain the same number of elements as the list of parameters for the delegate type represented by <ph id="ph2">&lt;paramref name="delegateType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> nie zawiera taką samą liczbę elementów jak lista parametrów dla typu delegata reprezentowany przez <ph id="ph2">&lt;paramref name="delegateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="parameters" /&gt;</ph> is not assignable from the type of the corresponding parameter type of the delegate type represented by <ph id="ph3">&lt;paramref name="delegateType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="parameters" /&gt;</ph> nie jest możliwa do przypisania z typu z odpowiadającym typem parametru na typ delegata reprezentowany przez <ph id="ph3">&lt;paramref name="delegateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The name for the lambda.</source>
          <target state="translated">Nazwa lambda.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Used for emitting debug information.</source>
          <target state="translated">Używane w celu emisji informacji o debugowaniu.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> representing the delegate signature for the lambda.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> reprezentujący podpis delegata lambda.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> representing the delegate signature for the lambda.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> reprezentujący podpis delegata lambda.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>An array that contains <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated">Tablica zawierająca <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> representing the delegate signature for the lambda.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> reprezentujący podpis delegata lambda.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The name for the lambda.</source>
          <target state="translated">Nazwa lambda.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Used for emitting debug information.</source>
          <target state="translated">Używane w celu emisji informacji o debugowaniu.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> representing the delegate signature for the lambda.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> reprezentujący podpis delegata lambda.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The name for the lambda.</source>
          <target state="translated">Nazwa lambda.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Used for emitting debug information.</source>
          <target state="translated">Używane w celu emisji informacji o debugowaniu.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a LambdaExpression by first constructing a delegate type.</source>
          <target state="translated">Tworzy typu LambdaExpression, tworząc pierwszy typ delegata.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to Lambda and the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> właściwości równa Lambda i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A delegate type.</source>
          <target state="translated">Typ obiektu delegowanego.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> where the delegate type is known at compile time.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> gdzie typ delegata jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> Mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The number of parameters for the delegate type <ph id="ph1">`TDelegate`</ph> must equal the number of elements in <ph id="ph2">`parameters`</ph>.</source>
          <target state="translated">Liczba parametrów dla typu delegata <ph id="ph1">`TDelegate`</ph> musi być równa liczbie elementów w <ph id="ph2">`parameters`</ph>.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The elements of <ph id="ph1">`parameters`</ph> must be reference equal to the parameter expressions in <ph id="ph2">`body`</ph>.</source>
          <target state="translated">Elementy <ph id="ph1">`parameters`</ph> odwołania musi być równa wyrażeń w <ph id="ph2">`body`</ph>.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting object represents the type <ph id="ph2">`TDelegate`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości wynikowy obiekt reprezentuje typ <ph id="ph2">`TDelegate`</ph>.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>If <ph id="ph1">`parameters`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> property of the resulting object is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`parameters`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> właściwość wynikowy obiekt ma pustą kolekcję.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source><ph id="ph1">&lt;paramref name="body" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="body" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>One or more elements in <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden element w <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source><ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> is not a delegate type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> nie jest typem delegowanym.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source><ph id="ph1">&lt;paramref name="body" /&gt;</ph>.Type represents a type that is not assignable to the return type of <ph id="ph2">&lt;paramref name="TDelegate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="body" /&gt;</ph>. Typ reprezentuje typ, który nie jest możliwa do przypisania do zwracanego typu <ph id="ph2">&lt;paramref name="TDelegate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> does not contain the same number of elements as the list of parameters for <ph id="ph2">&lt;paramref name="TDelegate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> nie zawiera taką samą liczbę elementów jak lista parametrów <ph id="ph2">&lt;paramref name="TDelegate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="parameters" /&gt;</ph> is not assignable from the type of the corresponding parameter type of <ph id="ph3">&lt;paramref name="TDelegate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="parameters" /&gt;</ph> nie jest możliwa do przypisania z typu danego parametru typu <ph id="ph3">&lt;paramref name="TDelegate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>A delegate type.</source>
          <target state="translated">Typ obiektu delegowanego.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> where the delegate type is known at compile time.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> gdzie typ delegata jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> Mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The number of parameters for the delegate type <ph id="ph1">`TDelegate`</ph> must equal the number of elements in <ph id="ph2">`parameters`</ph>.</source>
          <target state="translated">Liczba parametrów dla typu delegata <ph id="ph1">`TDelegate`</ph> musi być równa liczbie elementów w <ph id="ph2">`parameters`</ph>.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The elements of <ph id="ph1">`parameters`</ph> must be reference equal to the parameter expressions in<ph id="ph2">`body`</ph>.</source>
          <target state="translated">Elementy <ph id="ph1">`parameters`</ph> odwołania musi być równa wyrażeń w<ph id="ph2">`body`</ph>.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting object represents the type <ph id="ph2">`TDelegate`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości wynikowy obiekt reprezentuje typ <ph id="ph2">`TDelegate`</ph>.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>If <ph id="ph1">`parameters`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> property of the resulting object is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`parameters`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> właściwość wynikowy obiekt ma pustą kolekcję.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="body" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="body" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>One or more elements in <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden element w <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> is not a delegate type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> nie jest typem delegowanym.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="body" /&gt;</ph>.Type represents a type that is not assignable to the return type of <ph id="ph2">&lt;paramref name="TDelegate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="body" /&gt;</ph>. Typ reprezentuje typ, który nie jest możliwa do przypisania do zwracanego typu <ph id="ph2">&lt;paramref name="TDelegate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> does not contain the same number of elements as the list of parameters for <ph id="ph2">&lt;paramref name="TDelegate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> nie zawiera taką samą liczbę elementów jak lista parametrów <ph id="ph2">&lt;paramref name="TDelegate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="parameters" /&gt;</ph> is not assignable from the type of the corresponding parameter type of <ph id="ph3">&lt;paramref name="TDelegate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="parameters" /&gt;</ph> nie jest możliwa do przypisania z typu danego parametru typu <ph id="ph3">&lt;paramref name="TDelegate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The delegate type.</source>
          <target state="translated">Typ delegata.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> where the delegate type is known at compile time.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> gdzie typ delegata jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> Mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>The delegate type.</source>
          <target state="translated">Typ delegata.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>An array that contains <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated">Tablica zawierająca <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> where the delegate type is known at compile time.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> gdzie typ delegata jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> Mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The delegate type.</source>
          <target state="translated">Typ delegata.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The name of the lambda.</source>
          <target state="translated">Nazwa lambda.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Used for generating debugging information.</source>
          <target state="translated">Używany do generowania informacji o debugowaniu.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> where the delegate type is known at compile time.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> gdzie typ delegata jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> Mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The delegate type.</source>
          <target state="translated">Typ delegata.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The name of the lambda.</source>
          <target state="translated">Nazwa lambda.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Used for generating debugging info.</source>
          <target state="translated">Używany do generowania informacji debugowania.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> wskazujące, że jeśli optymalizację wywołania tail będą stosowane w przypadku kompilowania kodu utworzonego wyrażenia.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> where the delegate type is known at compile time.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> gdzie typ delegata jest znany w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> Mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise left-shift operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise left-shift operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the left-shift operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator przesunięcia w lewo, <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type is an integral type (one of <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt64&gt;</ph>, or the corresponding nullable types) and <ph id="ph10">`right`</ph>.Type is <ph id="ph11">&lt;xref:System.Int32&gt;</ph>, the implementing method is <ph id="ph12">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ jest typem całkowitym (jeden z <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt64&gt;</ph>, lub odpowiednie typy dopuszczające wartości zerowe) i <ph id="ph10">`right`</ph>. Typ jest <ph id="ph11">&lt;xref:System.Int32&gt;</ph>, implementacja metody jest <ph id="ph12">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined left-shift operator.</source>
          <target state="translated">Typ węzła jest typu wyników wstępnie zdefiniowanego operatora przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku wstępnie zdefiniowanego operatora przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The left-shift operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator przesunięcia w lewo nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise left-shift operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the left-shift operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator przesunięcia w lewo, <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type is an integral type (one of <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt64&gt;</ph>, or the corresponding nullable types) and <ph id="ph10">`right`</ph>.Type is <ph id="ph11">&lt;xref:System.Int32&gt;</ph>, the implementing method is <ph id="ph12">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ jest typem całkowitym (jeden z <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt64&gt;</ph>, lub odpowiednie typy dopuszczające wartości zerowe) i <ph id="ph10">`right`</ph>. Typ jest <ph id="ph11">&lt;xref:System.Int32&gt;</ph>, implementacja metody jest <ph id="ph12">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined left-shift operator.</source>
          <target state="translated">Typ węzła jest typu wyników wstępnie zdefiniowanego operatora przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku wstępnie zdefiniowanego operatora przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the left-shift operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator przesunięcia w lewo dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise left-shift assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację bitowe przypisania przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise left-shift assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację bitowe przypisania przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise left-shift assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację bitowe przypisania przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise left-shift assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację bitowe przypisania przesunięcia w lewo.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "less than" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "mniejsze niż" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "less than" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "mniejsze niż" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> Właściwość jest zawsze <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The implementing method for the operation is chosen based on the following rules:</source>
          <target state="translated">Implementującej metody dla operacji jest wybierany zgodnie z następującymi regułami:</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the "less than" operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator "mniejsze niż" <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło i typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that compares two integers.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia, który porównuje dwie liczb całkowitych.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The "less than" operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator "mniejsze niż" nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> można ustawić <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "less than" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "mniejsze niż" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id="ph4">`liftToNull`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> właściwość jest <ph id="ph2">`true`</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości jest równa <ph id="ph4">`liftToNull`</ph>.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, they are both <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the "less than" operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator "mniejsze niż" <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło; Ponadto typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>:</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>.</source>
          <target state="translated">Typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the "less than" operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operator "mniejsze niż" nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a " less than or equal" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "mniejsze niż lub równe" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a " less than or equal" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "mniejsze niż lub równe" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> Właściwość jest zawsze <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the "less than or equal" operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator "mniejsze niż lub równe" <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło i typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that compares two integers.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia, który porównuje dwie liczb całkowitych.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The "less than or equal" operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator "mniejsze niż lub równe" nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> można ustawić <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a "less than or equal" numeric comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący "mniejsze niż lub równe" porównanie liczbowe.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id="ph4">`liftToNull`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> właściwość jest <ph id="ph2">`true`</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości jest równa <ph id="ph4">`liftToNull`</ph>.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, they are both <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the "less than or equal" operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator "mniejsze niż lub równe" <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło; Ponadto typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>:</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>.</source>
          <target state="translated">Typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the "less than or equal" operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operator "mniejsze niż lub równe" nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> object.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that represents a field or property to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> reprezentująca pole lub właściwość można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> where the member is a field or property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> gdzie element członkowski jest on polem ani właściwością.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> does not represent a field or property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> nie reprezentować pole lub właściwość.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Reflection.FieldInfo.FieldType" /&gt;</ph> or <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> of the field or property that <ph id="ph3">&lt;paramref name="member" /&gt;</ph> represents does not implement <ph id="ph4">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Reflection.FieldInfo.FieldType" /&gt;</ph> Lub <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> pola lub właściwości, które <ph id="ph3">&lt;paramref name="member" /&gt;</ph> reprezentuje nie implementuje <ph id="ph4">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that represents a field or property to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> reprezentująca pole lub właściwość można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> where the member is a field or property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> gdzie element członkowski jest on polem ani właściwością.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> does not represent a field or property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> nie reprezentować pole lub właściwość.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Reflection.FieldInfo.FieldType" /&gt;</ph> or <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> of the field or property that <ph id="ph3">&lt;paramref name="member" /&gt;</ph> represents does not implement <ph id="ph4">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Reflection.FieldInfo.FieldType" /&gt;</ph> Lub <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> pola lub właściwości, które <ph id="ph3">&lt;paramref name="member" /&gt;</ph> reprezentuje nie implementuje <ph id="ph4">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents a property accessor method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> based on a specified property accessor method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> na podstawie metody dostępu określonej właściwości.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property set to the <ph id="ph5">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that represents the property accessed in <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> populated with the elements of <ph id="ph8">&lt;paramref name="initializers" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> reprezentujący dostęp do właściwości <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> wypełniane przy użyciu elementów <ph id="ph8">&lt;paramref name="initializers" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> does not represent a property accessor method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> of the property that the method represented by <ph id="ph2">&lt;paramref name="propertyAccessor" /&gt;</ph> accesses does not implement <ph id="ph3">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> Właściwości, która metoda reprezentowany przez <ph id="ph2">&lt;paramref name="propertyAccessor" /&gt;</ph> dostępy nie implementuje <ph id="ph3">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents a property accessor method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> object based on a specified property accessor method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> obiektu oparte na metodę dostępu określonej właściwości.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property set to the <ph id="ph5">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that represents the property accessed in <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> populated with the elements of <ph id="ph8">&lt;paramref name="initializers" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> reprezentujący dostęp do właściwości <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /&gt;</ph> wypełniane przy użyciu elementów <ph id="ph8">&lt;paramref name="initializers" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> does not represent a property accessor method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> of the property that the method represented by <ph id="ph2">&lt;paramref name="propertyAccessor" /&gt;</ph> accesses does not implement <ph id="ph3">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> Właściwości, która metoda reprezentowany przez <ph id="ph2">&lt;paramref name="propertyAccessor" /&gt;</ph> dostępy nie implementuje <ph id="ph3">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that uses specified <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> objects to initialize a collection.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> które używa określony <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> obiektów do zainicjowania kolekcji.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`newExpression`</ph> must represent a type that implements <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`newExpression`</ph> musi reprezentować typu, który implementuje <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id="ph3">`newExpression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> jest równa <ph id="ph3">`newExpression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> that represents the initialization of a new dictionary instance with two key-value pairs.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> reprezentujący inicjowania nowe wystąpienie słownika z dwóch par klucz wartość.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type does not implement <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ nie implementuje <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that uses a method named "Add" to add elements to a collection.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> używającą metodę o nazwie "Dodaj" można dodać elementów do kolekcji.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`newExpression`</ph> must represent a type that implements <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`newExpression`</ph> musi reprezentować typu, który implementuje <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>In order to use this overload of <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29&gt;</ph>, <ph id="ph2">`newExpression`</ph>.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</source>
          <target state="translated">Aby można było używać tego przeciążenia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29&gt;</ph>, <ph id="ph2">`newExpression`</ph>. Typ lub jego typ podstawowy musi zadeklarować pojedynczą metodę o nazwie "Dodaj" (bez uwzględniania wielkości liter), która przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The type of the argument must be assignable from the type represented by the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the first element of <ph id="ph2">`initializers`</ph>.</source>
          <target state="translated">Typ argumentu musi być możliwa do przypisania z typu reprezentowanego przez <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości pierwszego elementu obiektu <ph id="ph2">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> contains one element of type <ph id="ph3">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> for each element of <ph id="ph4">`initializers`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> Właściwości zwracana <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> zawiera jeden element typu <ph id="ph3">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> dla każdego elementu <ph id="ph4">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> property of each element of <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is a singleton collection that contains the corresponding element of <ph id="ph3">`initializers`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> jest pojedyncza kolekcja, która zawiera odpowiadającego mu elementu z <ph id="ph3">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> property of each element of <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> represents the add method that was discovered on <ph id="ph3">`newExpression`</ph>.Type or its base type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> reprezentuje metody add, który został wykryty na <ph id="ph3">`newExpression`</ph>. Typ lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id="ph3">`newExpression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> jest równa <ph id="ph3">`newExpression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type does not implement <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ nie implementuje <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>There is no instance method named "Add" (case insensitive) declared in <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type or its base type.</source>
          <target state="translated">Nie istnieje metoda wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter) zadeklarowany w <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The add method on <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type or its base type does not take exactly one argument.</source>
          <target state="translated">Metoda add na <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ lub jego typ podstawowy nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The type represented by the <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of the first element of <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is not assignable to the argument type of the add method on <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>.Type or its base type.</source>
          <target state="translated">Typ reprezentowany przez <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości pierwszego elementu obiektu <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> nie można przypisać do typu argumentu metody add na <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>. Typ lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>More than one argument-compatible method named "Add" (case-insensitive) exists on <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type and/or its base type.</source>
          <target state="translated">Istnieje więcej niż jedna metoda zgodnego argumentu o nazwie "Dodaj" (bez uwzględniania wielkości liter) na <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ i/lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that uses specified <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> objects to initialize a collection.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> które używa określony <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph> obiektów do zainicjowania kolekcji.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`newExpression`</ph> must represent a type that implements <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`newExpression`</ph> musi reprezentować typu, który implementuje <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id="ph3">`newExpression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> jest równa <ph id="ph3">`newExpression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> that represents the initialization of a new dictionary instance with two key-value pairs.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> reprezentujący inicjowania nowe wystąpienie słownika z dwóch par klucz wartość.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type does not implement <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ nie implementuje <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that uses a method named "Add" to add elements to a collection.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> używającą metodę o nazwie "Dodaj" można dodać elementów do kolekcji.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`newExpression`</ph> must represent a type that implements <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`newExpression`</ph> musi reprezentować typu, który implementuje <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>In order to use this overload of <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph>, <ph id="ph2">`newExpression`</ph>.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</source>
          <target state="translated">Aby można było używać tego przeciążenia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph>, <ph id="ph2">`newExpression`</ph>. Typ lub jego typ podstawowy musi zadeklarować pojedynczą metodę o nazwie "Dodaj" (bez uwzględniania wielkości liter), która przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>The type of the argument must be assignable from the type represented by the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the first element of <ph id="ph2">`initializers`</ph>.</source>
          <target state="translated">Typ argumentu musi być możliwa do przypisania z typu reprezentowanego przez <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości pierwszego elementu obiektu <ph id="ph2">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> contains one element of type <ph id="ph3">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> for each element of <ph id="ph4">`initializers`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> Właściwości zwracana <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> zawiera jeden element typu <ph id="ph3">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> dla każdego elementu <ph id="ph4">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> property of each element of <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is a singleton collection that contains the corresponding element of <ph id="ph3">`initializers`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> jest pojedyncza kolekcja, która zawiera odpowiadającego mu elementu z <ph id="ph3">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> property of each element of <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> represents the add method that was discovered on <ph id="ph3">`newExpression`</ph>.Type or its base type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> reprezentuje metody add, który został wykryty na <ph id="ph3">`newExpression`</ph>. Typ lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id="ph3">`newExpression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> jest równa <ph id="ph3">`newExpression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type does not implement <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ nie implementuje <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>There is no instance method named "Add" (case insensitive) declared in <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type or its base type.</source>
          <target state="translated">Nie istnieje metoda wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter) zadeklarowany w <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>The add method on <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type or its base type does not take exactly one argument.</source>
          <target state="translated">Metoda add na <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ lub jego typ podstawowy nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>The type represented by the <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of the first element of <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is not assignable to the argument type of the add method on <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>.Type or its base type.</source>
          <target state="translated">Typ reprezentowany przez <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości pierwszego elementu obiektu <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> nie można przypisać do typu argumentu metody add na <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>. Typ lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
          <source>More than one argument-compatible method named "Add" (case-insensitive) exists on <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type and/or its base type.</source>
          <target state="translated">Istnieje więcej niż jedna metoda zgodnego argumentu o nazwie "Dodaj" (bez uwzględniania wielkości liter) na <ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ i/lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący metodę wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter), który dodaje element do kolekcji.</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that uses a specified method to add elements to a collection.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> używającą określonej metody do dodawania elementów w kolekcji.</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`newExpression`</ph> must represent a type that implements <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`newExpression`</ph> musi reprezentować typu, który implementuje <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If <ph id="ph1">`addMethod`</ph> is <ph id="ph2">`null`</ph>, <ph id="ph3">`newExpression`</ph>.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</source>
          <target state="translated">Jeśli <ph id="ph1">`addMethod`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">`newExpression`</ph>. Typ lub jego typ podstawowy musi zadeklarować pojedynczą metodę o nazwie "Dodaj" (bez uwzględniania wielkości liter), która przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If <ph id="ph1">`addMethod`</ph> is not <ph id="ph2">`null`</ph>, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</source>
          <target state="translated">Jeśli <ph id="ph1">`addMethod`</ph> nie jest <ph id="ph2">`null`</ph>, musi reprezentować metodą wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter), który ma dokładnie jeden parametr.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The type represented by the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id="ph2">`initializers`</ph> must be assignable to the argument type of the add method.</source>
          <target state="translated">Typ reprezentowany przez <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości każdego elementu <ph id="ph2">`initializers`</ph> musi być można przypisać do typu argumentu metody add.</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> contains one element of type <ph id="ph3">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> for each element of <ph id="ph4">`initializers`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> Właściwości zwracana <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> zawiera jeden element typu <ph id="ph3">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> dla każdego elementu <ph id="ph4">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> property of each element of <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is a singleton collection that contains the corresponding element of <ph id="ph3">`initializers`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> jest pojedyncza kolekcja, która zawiera odpowiadającego mu elementu z <ph id="ph3">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> property of each element of <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is equal to <ph id="ph3">`addMethod`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> jest równa <ph id="ph3">`addMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id="ph3">`newExpression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> jest równa <ph id="ph3">`newExpression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type does not implement <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ nie implementuje <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie reprezentuje metodę wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter), który przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the type represented by the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of one or more elements of <ph id="ph4">&lt;paramref name="initializers" /&gt;</ph> is not assignable to the argument type of the method that <ph id="ph5">&lt;paramref name="addMethod" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i typ reprezentowany przez <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości jednego lub więcej elementów <ph id="ph4">&lt;paramref name="initializers" /&gt;</ph> nie można przypisać do typu argumentu metody który <ph id="ph5">&lt;paramref name="addMethod" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and no instance method named "Add" that takes one type-compatible argument exists on <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>.Type or its base type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie wystąpienia o nazwie "Dodaj", który przyjmuje jeden argument typu zgodnego istnieje metoda na <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>. Typ lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents an instance method that takes one argument, that adds an element to a collection.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący metodę wystąpienia, który przyjmuje jeden argument, który dodaje element do kolekcji.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that uses a specified method to add elements to a collection.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> używającą określonej metody do dodawania elementów w kolekcji.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph2">`newExpression`</ph> must represent a type that implements <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość <ph id="ph2">`newExpression`</ph> musi reprezentować typu, który implementuje <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>If <ph id="ph1">`addMethod`</ph> is <ph id="ph2">`null`</ph>, <ph id="ph3">`newExpression`</ph>.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</source>
          <target state="translated">Jeśli <ph id="ph1">`addMethod`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">`newExpression`</ph>. Typ lub jego typ podstawowy musi zadeklarować pojedynczą metodę o nazwie "Dodaj" (bez uwzględniania wielkości liter), która przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>If <ph id="ph1">`addMethod`</ph> is not <ph id="ph2">`null`</ph>, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</source>
          <target state="translated">Jeśli <ph id="ph1">`addMethod`</ph> nie jest <ph id="ph2">`null`</ph>, musi reprezentować metodą wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter), który ma dokładnie jeden parametr.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The type represented by the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id="ph2">`initializers`</ph> must be assignable to the argument type of the add method.</source>
          <target state="translated">Typ reprezentowany przez <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości każdego elementu <ph id="ph2">`initializers`</ph> musi być można przypisać do typu argumentu metody add.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> contains one element of type <ph id="ph3">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> for each element of <ph id="ph4">`initializers`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> Właściwości zwracana <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> zawiera jeden element typu <ph id="ph3">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> dla każdego elementu <ph id="ph4">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> property of each element of <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is a singleton collection that contains the corresponding element of <ph id="ph3">`initializers`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> jest pojedyncza kolekcja, która zawiera odpowiadającego mu elementu z <ph id="ph3">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> property of each element of <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is equal to <ph id="ph3">`addMethod`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> jest równa <ph id="ph3">`addMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id="ph3">`newExpression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> jest równa <ph id="ph3">`newExpression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>One or more elements of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeden lub więcej elementów <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> są <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>.Type does not implement <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph>. Typ nie implementuje <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie reprezentuje metodę wystąpienia o nazwie "Dodaj" (bez uwzględniania wielkości liter), który przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the type represented by the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of one or more elements of <ph id="ph4">&lt;paramref name="initializers" /&gt;</ph> is not assignable to the argument type of the method that <ph id="ph5">&lt;paramref name="addMethod" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i typ reprezentowany przez <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości jednego lub więcej elementów <ph id="ph4">&lt;paramref name="initializers" /&gt;</ph> nie można przypisać do typu argumentu metody który <ph id="ph5">&lt;paramref name="addMethod" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and no instance method named "Add" that takes one type-compatible argument exists on <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>.Type or its base type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="addMethod" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie wystąpienia o nazwie "Dodaj", który przyjmuje jeden argument typu zgodnego istnieje metoda na <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>. Typ lub jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
          <source>The body of the loop.</source>
          <target state="translated">Treści pętli.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph> with the given body.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph> danej jednostki.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
          <source>The body of the loop.</source>
          <target state="translated">Treści pętli.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
          <source>The break target used by the loop body.</source>
          <target state="translated">Obiekt docelowy podziału używane przez treści pętli.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph> with the given body and break target.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph> z danym elementem docelowym treści i podziału.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
          <source>The following example demonstrates how to create a block expression that contains a <ph id="ph1">&lt;xref:System.Linq.Expressions.LoopExpression&gt;</ph> object.</source>
          <target state="translated">Poniższy przykład przedstawia sposób tworzenia wyrażenia bloku, który zawiera <ph id="ph1">&lt;xref:System.Linq.Expressions.LoopExpression&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
          <source>The body of the loop.</source>
          <target state="translated">Treści pętli.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
          <source>The break target used by the loop body.</source>
          <target state="translated">Obiekt docelowy podziału używane przez treści pętli.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
          <source>The continue target used by the loop body.</source>
          <target state="translated">Obiekt docelowy Kontynuuj używane przez treści pętli.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph> with the given body.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph> danej jednostki.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> by calling the appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> przez wywołanie metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that specifies the type of binary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> Określająca typ operację binarną.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the left operand.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący Lewy argument operacji.</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the right operand.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący prawy argument operacji.</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph>, given the left and right operands, by calling an appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph>, podanych argumentów operacji lewy i prawy przez wywołanie metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that results from calling the appropriate factory method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> Który wynikiem wywołania metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">`binaryType`</ph> parameter determines which <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> factory method this method calls.</source>
          <target state="translated"><ph id="ph1">`binaryType`</ph> Określa parametr, który <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ta metoda wywołuje metodę fabryki.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>For example, if <ph id="ph1">`binaryType`</ph> is <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, this method invokes <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.</source>
          <target state="translated">Na przykład jeśli <ph id="ph1">`binaryType`</ph> jest <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, ta metoda wywołuje <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> that represents the subtraction of one number from another.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> reprezentujący odejmowania jeden numer z innej.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="binaryType" /&gt;</ph> does not correspond to a binary expression node.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="binaryType" /&gt;</ph> nie odpowiada na węzeł wyrażenie binarne.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that specifies the type of binary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> Określająca typ operację binarną.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the left operand.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący Lewy argument operacji.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the right operand.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący prawy argument operacji.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> można ustawić <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that specifies the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> , który określa implementującej metody.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph>, given the left operand, right operand and implementing method, by calling the appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph>, podany argument po lewej stronie, kliknij prawym przyciskiem myszy operand i wdrażanie — metoda, przez wywołanie metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that results from calling the appropriate factory method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> Który wynikiem wywołania metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">`binaryType`</ph> parameter determines which <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> factory method this method will call.</source>
          <target state="translated"><ph id="ph1">`binaryType`</ph> Określa parametr, który <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> metoda fabryki będzie wywoływać tej metody.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>For example, if <ph id="ph1">`binaryType`</ph> is <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, this method invokes <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.</source>
          <target state="translated">Na przykład jeśli <ph id="ph1">`binaryType`</ph> jest <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, ta metoda wywołuje <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">`liftToNull`</ph> and <ph id="ph2">`method`</ph> parameters are ignored if the appropriate factory method does not have a corresponding parameter.</source>
          <target state="translated"><ph id="ph1">`liftToNull`</ph> i <ph id="ph2">`method`</ph> parametry są ignorowane, jeśli metoda odpowiednie fabryki nie ma odpowiadającego mu parametru.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="binaryType" /&gt;</ph> does not correspond to a binary expression node.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="binaryType" /&gt;</ph> nie odpowiada na węzeł wyrażenie binarne.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that specifies the type of binary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> Określająca typ operację binarną.</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the left operand.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący Lewy argument operacji.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the right operand.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący prawy argument operacji.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> można ustawić <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that specifies the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> , który określa implementującej metody.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> that represents a type conversion function.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> reprezentujący funkcji konwersji typu.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>This parameter is used only if <bpt id="p1">&lt;c&gt;</bpt>binaryType<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /&gt;</ph> or compound assignment..</source>
          <target state="translated">Ten parametr jest używany tylko wtedy, gdy <bpt id="p1">&lt;c&gt;</bpt>binaryType<ept id="p1">&lt;/c&gt;</ept> jest <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /&gt;</ph> lub przydział złożony.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph>, podany argument po lewej stronie, kliknij prawym przyciskiem myszy operand implementacja metody i wpisz przez wywołanie metody fabryki odpowiedniej funkcji konwersji.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that results from calling the appropriate factory method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> Który wynikiem wywołania metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">`binaryType`</ph> parameter determines which <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> factory method this method will call.</source>
          <target state="translated"><ph id="ph1">`binaryType`</ph> Określa parametr, który <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> metoda fabryki będzie wywoływać tej metody.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>For example, if <ph id="ph1">`binaryType`</ph> is <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, this method invokes <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.</source>
          <target state="translated">Na przykład jeśli <ph id="ph1">`binaryType`</ph> jest <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, ta metoda wywołuje <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>The <ph id="ph1">`liftToNull`</ph>, <ph id="ph2">`method`</ph> and <ph id="ph3">`conversion`</ph> parameters are ignored if the appropriate factory method does not have a corresponding parameter.</source>
          <target state="translated"><ph id="ph1">`liftToNull`</ph>, <ph id="ph2">`method`</ph> i <ph id="ph3">`conversion`</ph> parametry są ignorowane, jeśli metoda odpowiednie fabryki nie ma odpowiadającego mu parametru.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source><ph id="ph1">&lt;paramref name="binaryType" /&gt;</ph> does not correspond to a binary expression node.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="binaryType" /&gt;</ph> nie odpowiada na węzeł wyrażenie binarne.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> this <ph id="ph3">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> will handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> z <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> to <ph id="ph3">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> będzie obsługiwać.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> representing a reference to the <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> object caught by this handler.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> reprezentujący odwołanie do <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> obiektu przechwycony przez ten program obsługi.</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the catch statement.</source>
          <target state="translated">Treść instrukcji catch.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> filter.</source>
          <target state="translated">Treść <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> filtru.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> representing a catch statement with the specified elements.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> reprezentujący instrukcję catch z określonych elementów.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`type`</ph> must be non-null and match the type of <ph id="ph2">`variable`</ph> (if it is supplied).</source>
          <target state="translated"><ph id="ph1">`type`</ph> muszą być niezerowe i zgodny z typem <ph id="ph2">`variable`</ph> (jeśli go podano).</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operację dynamiczną.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The type of the delegate used by the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</source>
          <target state="translated">Typ delegata używane przez <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The arguments to the dynamic operation.</source>
          <target state="translated">Argumenty operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
          <source>The type of the delegate used by the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</source>
          <target state="translated">Typ delegata używane przez <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
          <source>The argument to the dynamic operation.</source>
          <target state="translated">Argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph> and one argument.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph> i jeden argument.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
          <source>The type of the delegate used by the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</source>
          <target state="translated">Typ delegata używane przez <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
          <source>The arguments to the dynamic operation.</source>
          <target state="translated">Argumenty operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the delegate used by the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</source>
          <target state="translated">Typ delegata używane przez <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first argument to the dynamic operation.</source>
          <target state="translated">Pierwszy argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second argument to the dynamic operation.</source>
          <target state="translated">Drugi argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph> and two arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph> i dwa argumenty.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the delegate used by the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</source>
          <target state="translated">Typ delegata używane przez <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first argument to the dynamic operation.</source>
          <target state="translated">Pierwszy argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second argument to the dynamic operation.</source>
          <target state="translated">Drugi argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The third argument to the dynamic operation.</source>
          <target state="translated">Trzeci argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph> and three arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph> i trzech argumentów.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the delegate used by the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</source>
          <target state="translated">Typ delegata używane przez <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.CallSite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The runtime binder for the dynamic operation.</source>
          <target state="translated">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The first argument to the dynamic operation.</source>
          <target state="translated">Pierwszy argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The second argument to the dynamic operation.</source>
          <target state="translated">Drugi argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The third argument to the dynamic operation.</source>
          <target state="translated">Trzeci argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The fourth argument to the dynamic operation.</source>
          <target state="translated">Czwarty argument operacji dynamicznej.</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that represents a dynamic operation bound by the provided <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph> and four arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> reprezentujący operacji dynamicznej związana dostarczonych <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /&gt;</ph> i cztery argumenty.</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> that has <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> and has the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /&gt;</ph> i ma <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /&gt;</ph> określonej wartości.</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpressionKind" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpressionKind" /&gt;</ph> z <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The value that will be passed to the associated label upon jumping.</source>
          <target state="translated">Wartość, która zostanie przekazany do skojarzone etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a jump of the specified <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpressionKind" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący skoku określonego <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpressionKind" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The value passed to the label upon jumping can also be specified.</source>
          <target state="translated">Można także określić wartość przekazana do etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to <ph id="ph3">&lt;paramref name="kind" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph5">&lt;paramref name="target" /&gt;</ph>, the <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph7">&lt;paramref name="type" /&gt;</ph>, and <ph id="ph8">&lt;paramref name="value" /&gt;</ph> to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa <ph id="ph3">&lt;paramref name="kind" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;paramref name="target" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph7">&lt;paramref name="type" /&gt;</ph>, i <ph id="ph8">&lt;paramref name="value" /&gt;</ph> do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The object to which the property belongs.</source>
          <target state="translated">Obiekt, do którego należy właściwość.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>It should be null if the property is <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="shared" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Powinna ona mieć wartość null, jeśli właściwość jest <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="shared" /&gt;</ph> w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representing the property to index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujące właściwość do indeksu.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Expression<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> (<bpt id="p2">&lt;c&gt;</bpt>IEnumerable (Of Expression)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic) that contains the arguments that will be used to index the property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>wyrażenie<ph id="ph2">&amp;gt;</ph> <ept id="p1">&lt;/c&gt;</ept> (<bpt id="p2">&lt;c&gt;</bpt>IEnumerable (o wyrażenie)<ept id="p2">&lt;/c&gt;</ept> w języku Visual Basic) zawiera argumenty, które będą używane do indeksowania właściwości.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> that represents accessing an indexed property in an object.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> reprezentujący uzyskiwania dostępu do właściwości indeksowanych w obiekcie.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the object that the member belongs to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący element członkowski należy do obiektu.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source>This can be null for static members.</source>
          <target state="translated">Może to być wartość null dla statycznych elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that describes the field or property to be accessed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> Opisujący pola lub właściwości, aby można było uzyskać dostęp.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing either a field or a property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący uzyskiwania dostępu do pola lub właściwości.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that results from calling the appropriate factory method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> Który wynikiem wywołania metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source>This method can be used to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> that represents accessing either a field or a property, depending on the type of <ph id="ph2">`member`</ph>.</source>
          <target state="translated">Ta metoda może służyć do tworzenia <ph id="ph1">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> reprezentujący uzyskiwania dostępu do pola lub właściwości, w zależności od typu <ph id="ph2">`member`</ph>.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source>If <ph id="ph1">`member`</ph> is of type <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, this method calls <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph> to create the <ph id="ph4">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`member`</ph> jest typu <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, ta metoda wywołuje <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph> do utworzenia <ph id="ph4">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source>If <ph id="ph1">`member`</ph> is of type <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, this method calls <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph> to create the <ph id="ph4">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`member`</ph> jest typu <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, ta metoda wywołuje <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph> do utworzenia <ph id="ph4">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> does not represent a field or property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> nie reprezentować pole lub właściwość.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>The result type of the try expression.</source>
          <target state="translated">Typ wyniku wyrażenia try.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>If null, bodh and all handlers must have identical type.</source>
          <target state="translated">Jeśli wartość null, bodh i wszystkich programów obsługi muszą mieć taki sam typ.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>The body of the try block.</source>
          <target state="translated">Treść bloku try.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>The body of the finally block.</source>
          <target state="translated">Treść bloku finally.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>Pass null if the try block has no finally block associated with it.</source>
          <target state="translated">Należy przekazać wartość null, jeśli blok try ma nie koniec bloku skojarzonych z nim.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>The body of the fault block.</source>
          <target state="translated">Treść bloku błędów.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>Pass null if the try block has no fault block associated with it.</source>
          <target state="translated">Należy przekazać wartość null, jeśli blok try ma nie bloku błędów skojarzonych z nim.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>s representing the catch statements to be associated with the try block.</source>
          <target state="translated">Kolekcja <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>s reprezentujący instrukcji catch ma zostać skojarzony z bloku try.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> representing a try block with the specified elements.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> reprezentujący bloku try z określonych elementów.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> by calling the appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> przez wywołanie metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that specifies the type of unary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> Określająca typ operację jednoargumentową.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the operand.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący argument.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that specifies the type to be converted to (pass <ph id="ph2">&lt;see langword="null" /&gt;</ph> if not applicable).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> , Który określa typ, który ma zostać przekonwertowane na (przekazać <ph id="ph2">&lt;see langword="null" /&gt;</ph> Jeśli nie ma to zastosowanie).</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>, given an operand, by calling the appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>, podany argument przez wywołanie metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that results from calling the appropriate factory method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> Który wynikiem wywołania metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">`unaryType`</ph> parameter determines which <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> factory method this method calls.</source>
          <target state="translated"><ph id="ph1">`unaryType`</ph> Określa parametr, który <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ta metoda wywołuje metodę fabryki.</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source>For example, if <ph id="ph1">`unaryType`</ph> is equal to <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Convert&gt;</ph>, this method invokes <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Convert%2A&gt;</ph>.</source>
          <target state="translated">Na przykład jeśli <ph id="ph1">`unaryType`</ph> jest równa <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Convert&gt;</ph>, ta metoda wywołuje <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Convert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">`type`</ph>parameter is ignored if it does not apply to the factory method that is called.</source>
          <target state="translated"><ph id="ph1">`type`</ph>Parametru jest ignorowana, jeśli nie ma zastosowania do metody fabryki, która jest wywoływana.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source><ph id="ph1">&lt;paramref name="operand" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="operand" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
          <source><ph id="ph1">&lt;paramref name="unaryType" /&gt;</ph> does not correspond to a unary expression node.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="unaryType" /&gt;</ph> nie odpowiada na węzeł wyrażenie jednoargumentowe.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that specifies the type of unary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> Określająca typ operację jednoargumentową.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the operand.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Reprezentujący argument.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that specifies the type to be converted to (pass <ph id="ph2">&lt;see langword="null" /&gt;</ph> if not applicable).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> , Który określa typ, który ma zostać przekonwertowane na (przekazać <ph id="ph2">&lt;see langword="null" /&gt;</ph> Jeśli nie ma to zastosowanie).</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>, given an operand and implementing method, by calling the appropriate factory method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>, podany argument i wdrażanie — metoda, przez wywołanie metody fabryki odpowiednie.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that results from calling the appropriate factory method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> Który wynikiem wywołania metody odpowiednie fabryki.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">`unaryType`</ph> parameter determines which <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> factory method this method calls.</source>
          <target state="translated"><ph id="ph1">`unaryType`</ph> Określa parametr, który <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ta metoda wywołuje metodę fabryki.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>For example, if <ph id="ph1">`unaryType`</ph> is equal to <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Convert&gt;</ph>, this method invokes <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Convert%2A&gt;</ph>.</source>
          <target state="translated">Na przykład jeśli <ph id="ph1">`unaryType`</ph> jest równa <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Convert&gt;</ph>, ta metoda wywołuje <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Convert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">`type`</ph> and <ph id="ph2">`method`</ph> parameters are ignored if they do not apply to the factory method that is called.</source>
          <target state="translated"><ph id="ph1">`type`</ph> i <ph id="ph2">`method`</ph> parametry są ignorowane, jeśli nie mają zastosowania do metody fabryki, która jest wywoływana.</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="operand" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="operand" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="unaryType" /&gt;</ph> does not correspond to a unary expression node.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="unaryType" /&gt;</ph> nie odpowiada na węzeł wyrażenie jednoargumentowe.</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that represents the recursive initialization of members of a member.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> reprezentujący inicjowania Cykliczne elementów członkowskich elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that represents the recursive initialization of members of a field or property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> reprezentujący inicjowania Cykliczne elementów członkowskich pola lub właściwości.</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>The <ph id="ph1">`member`</ph> parameter must represent a field or property.</source>
          <target state="translated"><ph id="ph1">`member`</ph> Parametru musi reprezentować pole lub właściwość.</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> does not represent a field or property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> nie reprezentować pole lub właściwość.</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> does not represent a member of the type of the field or property that <ph id="ph3">&lt;paramref name="member" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> nie reprezentuje element członkowski typu pola lub właściwości, które <ph id="ph3">&lt;paramref name="member" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that represents the recursive initialization of members of a field or property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> reprezentujący inicjowania Cykliczne elementów członkowskich pola lub właściwości.</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source>The <ph id="ph1">`member`</ph> parameter must represent a field or property.</source>
          <target state="translated"><ph id="ph1">`member`</ph> Parametru musi reprezentować pole lub właściwość.</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source><ph id="ph1">&lt;paramref name="member" /&gt;</ph> does not represent a field or property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="member" /&gt;</ph> nie reprezentować pole lub właściwość.</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> does not represent a member of the type of the field or property that <ph id="ph3">&lt;paramref name="member" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> nie reprezentuje element członkowski typu pola lub właściwości, które <ph id="ph3">&lt;paramref name="member" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents a property accessor method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> reprezentujący inicjowania Cykliczne elementów członkowskich elementu członkowskiego, który jest dostępny za pomocą metody dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property set to the <ph id="ph5">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property accessed in <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> reprezentujący dostęp do właściwości <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> does not represent a property accessor method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> does not represent a member of the type of the property accessed by the method that <ph id="ph3">&lt;paramref name="propertyAccessor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> nie reprezentuje element członkowski typu właściwości używane przez metodę który <ph id="ph3">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents a property accessor method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> reprezentujący inicjowania Cykliczne elementów członkowskich elementu członkowskiego, który jest dostępny za pomocą metody dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property set to the <ph id="ph5">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property accessed in <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> reprezentujący dostęp do właściwości <ph id="ph6">&lt;paramref name="propertyAccessor" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> does not represent a property accessor method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> does not represent a member of the type of the property accessed by the method that <ph id="ph3">&lt;paramref name="propertyAccessor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> nie reprezentuje element członkowski typu właściwości używane przez metodę który <ph id="ph3">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Represents an expression that creates a new object and initializes a property of the object.</source>
          <target state="translated">Reprezentuje wyrażenie, które tworzy nowy obiekt i inicjuje właściwości obiektu.</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>Represents an expression that creates a new object and initializes a property of the object.</source>
          <target state="translated">Reprezentuje wyrażenie, które tworzy nowy obiekt i inicjuje właściwości obiektu.</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberInitExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberInitExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberInitExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph4">`newExpression`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberInitExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość <ph id="ph4">`newExpression`</ph>.</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>The following example demonstrates an expression that creates a new object and initializes a property of the object.</source>
          <target state="translated">W poniższym przykładzie pokazano wyrażenie, które tworzy nowy obiekt i inicjuje właściwości obiektu.</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> does not represent a member of the type that <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>.Type represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> nie reprezentuje element członkowski typu który <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>. Wpisz reprezentuje.</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberInitExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberInitExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberInitExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberInitExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberInitExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id="ph4">`newExpression`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberInitExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość <ph id="ph4">`newExpression`</ph>.</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberInitExpression&gt;</ph> that represents the initialization of two members of a new object.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberInitExpression&gt;</ph> reprezentujący inicjowania nowego obiektu dwóch członków.</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
          <source><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newExpression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> does not represent a member of the type that <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>.Type represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MemberBinding.Member" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="bindings" /&gt;</ph> nie reprezentuje element członkowski typu który <ph id="ph3">&lt;paramref name="newExpression" /&gt;</ph>. Wpisz reprezentuje.</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic remainder operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji arytmetycznych resztę.</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic remainder operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji arytmetycznych resztę.</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the modulus operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator modulo <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined modulus operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator modulo wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiadający typowi wynik operatora modulo wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The modulus operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator modulo nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic remainder operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji arytmetycznych resztę.</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method for the operation is chosen based on the following rules:</source>
          <target state="translated">Implementującej metody dla operacji jest wybierany zgodnie z następującymi regułami:</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the modulus operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator modulo <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined modulus operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator modulo wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiadający typowi wynik operatora modulo wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the modulus operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operator modulo nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a remainder assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania resztę.</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a remainder assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania resztę.</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a remainder assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania resztę.</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a remainder assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania resztę.</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic multiplication operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację mnożenia arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic multiplication operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację mnożenia arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the multiplication operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator mnożenia <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined multiplication operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator mnożenia wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku mnożenia wstępnie zdefiniowanego operatora.</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that multiplies two values.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wyrażenia mnoży dwie wartości.</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The multiplication operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator mnożenia nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic multiplication operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację mnożenia arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the multiplication operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator mnożenia <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined multiplication operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator mnożenia wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku mnożenia wstępnie zdefiniowanego operatora.</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the multiplication operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator mnożenia dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a multiplication assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący przypisania mnożenie nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a multiplication assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący przypisania mnożenie nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a multiplication assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący przypisania mnożenie nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a multiplication assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący przypisania mnożenie nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a multiplication assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania mnożenia, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a multiplication assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania mnożenia, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a multiplication assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania mnożenia, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a multiplication assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację przypisania mnożenia, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic multiplication operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący arytmetyczne mnożenie, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic multiplication operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący arytmetyczne mnożenie, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the multiplication operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator mnożenia <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined multiplication operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator mnożenia wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku mnożenia wstępnie zdefiniowanego operatora.</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The multiplication operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator mnożenia nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic multiplication operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący arytmetyczne mnożenie, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the multiplication operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator mnożenia <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined multiplication operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator mnożenia wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku mnożenia wstępnie zdefiniowanego operatora.</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the multiplication operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator mnożenia dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an arithmetic negation operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację negacji arytmetyczne.</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an arithmetic negation operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację negacji arytmetyczne.</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Negate" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Negate" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>Otherwise, they are false.</source>
          <target state="translated">Są one w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is a user-defined type that defines the unary minus operator, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest typem zdefiniowane przez użytkownika, który definiuje Jednoargumentowy operator, minus <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, który jest operator implementującej metody.</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`expression`</ph>.Type is a numeric type, the implementing method is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`expression`</ph>. Typ jest typ liczbowy, implementującej metody <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ można przypisać do typu argumentu implementującej metody, nie została wyjęta węzła.</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>. Typ jest typem wartości null, a odpowiedni typ niedopuszczający wartości null jest taki sam, jak typ argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>, the type of the node is <ph id="ph2">`expression`</ph>.Type.</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>, jest typ węzła <ph id="ph2">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>Otherwise, the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>The following example demonstrates how to create an expression that represents an arithmetic negation operation.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie reprezentuje operacji arytmetycznych negacji.</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
          <source>The unary minus operator is not defined for <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type.</source>
          <target state="translated">Jednoargumentowy minus operator nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an arithmetic negation operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację negacji arytmetyczne.</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Negate" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Negate" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are false.</source>
          <target state="translated">Są one w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes one argument, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje jeden argument jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is a user-defined type that defines the unary minus operator, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest typem zdefiniowane przez użytkownika, który definiuje Jednoargumentowy operator, minus <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, który jest operator implementującej metody.</target>       </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`expression`</ph>.Type is a numeric type, the implementing method is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`expression`</ph>. Typ jest typ liczbowy, implementującej metody <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ można przypisać do typu argumentu implementującej metody, nie została wyjęta węzła.</target>       </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>. Typ jest typem wartości null, a odpowiedni typ niedopuszczający wartości null jest taki sam, jak typ argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>, the type of the node is <ph id="ph2">`expression`</ph>.Type.</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>, jest typ węzła <ph id="ph2">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the unary minus operator is not defined for <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i jednoargumentowy minus operator nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ (lub odpowiedniego typu wartości null, jeśli jest to typ wartości null) nie jest można przypisać do typu argumentu metody reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an arithmetic negation operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację negacji arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an arithmetic negation operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację negacji arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>Otherwise, they are false.</source>
          <target state="translated">Są one w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is a user-defined type that defines the unary minus operator, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest typem zdefiniowane przez użytkownika, który definiuje Jednoargumentowy operator, minus <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, który jest operator implementującej metody.</target>       </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`expression`</ph>.Type is a numeric type, the implementing method is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`expression`</ph>. Typ jest typ liczbowy, implementującej metody <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ można przypisać do typu argumentu implementującej metody, nie została wyjęta węzła.</target>       </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>. Typ jest typem wartości null, a odpowiedni typ niedopuszczający wartości null jest taki sam, jak typ argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>, the type of the node is <ph id="ph2">`expression`</ph>.Type.</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>, jest typ węzła <ph id="ph2">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>Otherwise, the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
          <source>The unary minus operator is not defined for <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type.</source>
          <target state="translated">Jednoargumentowy minus operator nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an arithmetic negation operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację negacji arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are false.</source>
          <target state="translated">Są one w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes one argument, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje jeden argument jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is a user-defined type that defines the unary minus operator, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest typem zdefiniowane przez użytkownika, który definiuje Jednoargumentowy operator, minus <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, który jest operator implementującej metody.</target>       </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`expression`</ph>.Type is a numeric type, the implementing method is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`expression`</ph>. Typ jest typ liczbowy, implementującej metody <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ można przypisać do typu argumentu implementującej metody, nie została wyjęta węzła.</target>       </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>. Typ jest typem wartości null, a odpowiedni typ niedopuszczający wartości null jest taki sam, jak typ argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>, the type of the node is <ph id="ph2">`expression`</ph>.Type.</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>, jest typ węzła <ph id="ph2">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the unary minus operator is not defined for <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i jednoargumentowy minus operator nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ (lub odpowiedniego typu wartości null, jeśli jest to typ wartości null) nie jest można przypisać do typu argumentu metody reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that represents calling the specified constructor that takes no arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> reprezentujący wywołanie określony Konstruktor, który nie przyjmuje żadnych argumentów.</target>       </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> properties of the resulting <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> are empty collections.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> właściwości powstałe w ten sposób <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> są puste kolekcje.</target>       </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property represents the declaring type of the constructor represented by <ph id="ph2">`constructor`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość reprezentuje typ deklarujący reprezentowany przez konstruktora <ph id="ph2">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
          <source><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
          <source>The constructor that <ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> represents has at least one parameter.</source>
          <target state="translated">Konstruktor, który <ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> reprezentuje ma co najmniej jeden parametr.</target>       </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that has a constructor that takes no arguments.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> mający konstruktora, który nie przyjmuje żadnych argumentów.</target>       </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that represents calling the parameterless constructor of the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> reprezentujący wywołanie konstruktora określonego typu.</target>       </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> property set to the <ph id="ph5">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> that represents the constructor without parameters for the specified type.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> reprezentujący konstruktor bez parametrów dla określonego typu.</target>       </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source>The <ph id="ph1">`type`</ph> parameter must represent a type that has a constructor without parameters.</source>
          <target state="translated"><ph id="ph1">`type`</ph> Parametru musi reprezentować typu, który ma konstruktor bez parametrów.</target>       </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> properties of the resulting <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> are empty collections.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> właściwości powstałe w ten sposób <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> są puste kolekcje.</target>       </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is equal to <ph id="ph2">`type`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości jest równa <ph id="ph2">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.New%28System.Type%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.New%28System.Type%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> reprezentujący utworzenie nowego wystąpienia obiektu słownika przez wywołanie konstruktora bez parametrów.</target>       </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Type)">
          <source>The type that <ph id="ph1">&lt;paramref name="type" /&gt;</ph> represents does not have a constructor without parameters.</source>
          <target state="translated">Typ który <ph id="ph1">&lt;paramref name="type" /&gt;</ph> reprezentuje nie ma konstruktora bez parametrów.</target>       </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that represents calling the specified constructor with the specified arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> reprezentujący wywołanie określony Konstruktor z określonymi argumentami.</target>       </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">`arguments`</ph> parameter must contain the same number of elements as the number of parameters for the constructor represented by <ph id="ph2">`constructor`</ph>.</source>
          <target state="translated"><ph id="ph1">`arguments`</ph> Parametr muszą zawierać taką samą liczbę elementów jako liczba parametrów dla konstruktora reprezentowany przez <ph id="ph2">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If <ph id="ph1">`arguments`</ph> is <ph id="ph2">`null`</ph>, it is considered empty, and the <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`arguments`</ph> jest <ph id="ph2">`null`</ph>, jest on uznawany za pusta i <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> właściwość powstałe w ten sposób <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> jest pustej kolekcji.</target>       </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> represents the declaring type of the constructor represented by <ph id="ph3">`constructor`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> reprezentuje typ deklarujący reprezentowany przez konstruktora <ph id="ph3">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property is an empty collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> Właściwość ma pustą kolekcję.</target>       </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An element of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> parameter does not contain the same number of elements as the number of parameters for the constructor that <ph id="ph2">&lt;paramref name="constructor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> Parametru nie zawiera taką samą liczbę elementów jak liczba parametrów konstruktora który <ph id="ph2">&lt;paramref name="constructor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the type of the corresponding parameter of the constructor that <ph id="ph3">&lt;paramref name="constructor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> nie można przypisać do typu odpowiadającego mu parametru konstruktora który <ph id="ph3">&lt;paramref name="constructor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that represents calling the specified constructor with the specified arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> reprezentujący wywołanie określony Konstruktor z określonymi argumentami.</target>       </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">`arguments`</ph> parameter must contain the same number of elements as the number of parameters for the constructor represented by <ph id="ph2">`constructor`</ph>.</source>
          <target state="translated"><ph id="ph1">`arguments`</ph> Parametr muszą zawierać taką samą liczbę elementów jako liczba parametrów dla konstruktora reprezentowany przez <ph id="ph2">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>If <ph id="ph1">`arguments`</ph> is <ph id="ph2">`null`</ph>, it is considered empty, and the <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`arguments`</ph> jest <ph id="ph2">`null`</ph>, jest on uznawany za pusta i <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> właściwość powstałe w ten sposób <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> jest pustej kolekcji.</target>       </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> represents the declaring type of the constructor represented by <ph id="ph3">`constructor`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> reprezentuje typ deklarujący reprezentowany przez konstruktora <ph id="ph3">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property is an empty collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> Właściwość ma pustą kolekcję.</target>       </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>An element of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>The length of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> does match the number of parameters for the constructor that <ph id="ph2">&lt;paramref name="constructor" /&gt;</ph> represents.</source>
          <target state="translated">Długość <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> jest zgodna z liczbą parametrów dla konstruktora który <ph id="ph2">&lt;paramref name="constructor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the type of the corresponding parameter of the constructor that <ph id="ph3">&lt;paramref name="constructor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> nie można przypisać do typu odpowiadającego mu parametru konstruktora który <ph id="ph3">&lt;paramref name="constructor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewExpression.Members" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewExpression.Members" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that represents calling the specified constructor with the specified arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> reprezentujący wywołanie określony Konstruktor z określonymi argumentami.</target>       </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>The members that access the constructor initialized fields are specified.</source>
          <target state="translated">Elementy członkowskie, które uzyskują dostęp do pola zainicjowany konstruktor został określony.</target>       </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.NewExpression.Members" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.NewExpression.Members" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>The <ph id="ph1">`arguments`</ph> parameter must contain the same number of elements as the number of parameters for the constructor represented by <ph id="ph2">`constructor`</ph>.</source>
          <target state="translated"><ph id="ph1">`arguments`</ph> Parametr muszą zawierać taką samą liczbę elementów jako liczba parametrów dla konstruktora reprezentowany przez <ph id="ph2">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>If <ph id="ph1">`arguments`</ph> is <ph id="ph2">`null`</ph>, it is considered empty, and the <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`arguments`</ph> jest <ph id="ph2">`null`</ph>, jest on uznawany za pusta i <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> właściwość powstałe w ten sposób <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> jest pustej kolekcji.</target>       </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>If <ph id="ph1">`members`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property of the resulting <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`members`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> właściwość powstałe w ten sposób <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> jest pustej kolekcji.</target>       </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>If <ph id="ph1">`members`</ph> is not <ph id="ph2">`null`</ph>, it must have the same number of elements as <ph id="ph3">`arguments`</ph> and each element must not be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`members`</ph> nie jest <ph id="ph2">`null`</ph>, musi mieć taką samą liczbę elementów jako <ph id="ph3">`arguments`</ph> i nie może być każdy element <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>Each element of <ph id="ph1">`members`</ph> must be a <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> or <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents an instance member on the declaring type of the constructor represented by <ph id="ph5">`constructor`</ph>.</source>
          <target state="translated">Każdy element <ph id="ph1">`members`</ph> musi być <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> lub <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący elementu członkowskiego wystąpienia na typ deklarujący reprezentowany przez konstruktora <ph id="ph5">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>If it represents a property, the property must have a <ph id="ph1">`get`</ph> accessor.</source>
          <target state="translated">Jeśli termin reprezentuje właściwością, musi mieć właściwość <ph id="ph1">`get`</ph> metody dostępu.</target>       </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>The corresponding element of <ph id="ph1">`arguments`</ph> for each element of <ph id="ph2">`members`</ph> must have a <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property that represents a type that is assignable to the type of the member that the <ph id="ph4">`members`</ph> element represents.</source>
          <target state="translated">Odpowiedni element <ph id="ph1">`arguments`</ph> dla każdego elementu <ph id="ph2">`members`</ph> musi mieć <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość, która reprezentuje typ, który można przypisać do typu elementu członkowskiego który <ph id="ph4">`members`</ph> reprezentuje element.</target>       </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> represents the declaring type of the constructor that <ph id="ph3">`constructor`</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> reprezentuje typ deklarujący konstruktora który <ph id="ph3">`constructor`</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>An element of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>An element of <ph id="ph1">&lt;paramref name="members" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="members" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>The <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> parameter does not contain the same number of elements as the number of parameters for the constructor that <ph id="ph2">&lt;paramref name="constructor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> Parametru nie zawiera taką samą liczbę elementów jak liczba parametrów konstruktora który <ph id="ph2">&lt;paramref name="constructor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the type of the corresponding parameter of the constructor that <ph id="ph3">&lt;paramref name="constructor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> nie można przypisać do typu odpowiadającego mu parametru konstruktora który <ph id="ph3">&lt;paramref name="constructor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>The <ph id="ph1">&lt;paramref name="members" /&gt;</ph> parameter does not have the same number of elements as <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="members" /&gt;</ph> Parametru nie ma taką samą liczbę elementów jako <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
          <source>An element of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> has a <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <ph id="ph3">&lt;paramref name="members" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> ma <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwość, która reprezentuje typ, który nie jest możliwa do przypisania do typu elementu członkowskiego reprezentowanego przez odpowiedni element <ph id="ph3">&lt;paramref name="members" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Members" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewExpression.Members" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that represents calling the specified constructor with the specified arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> reprezentujący wywołanie określony Konstruktor z określonymi argumentami.</target>       </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>The members that access the constructor initialized fields are specified as an array.</source>
          <target state="translated">Elementy członkowskie, które uzyskują dostęp do pola zainicjowany konstruktor są określone jako tablicy.</target>       </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.NewExpression.Members" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.New" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewExpression.Constructor" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.NewExpression.Members" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>The <ph id="ph1">`arguments`</ph> parameter must contain the same number of elements as the number of parameters for the constructor represented by <ph id="ph2">`constructor`</ph>.</source>
          <target state="translated"><ph id="ph1">`arguments`</ph> Parametr muszą zawierać taką samą liczbę elementów jako liczba parametrów dla konstruktora reprezentowany przez <ph id="ph2">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>If <ph id="ph1">`arguments`</ph> is <ph id="ph2">`null`</ph>, it is considered empty, and the <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property of the resulting <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`arguments`</ph> jest <ph id="ph2">`null`</ph>, jest on uznawany za pusta i <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> właściwość powstałe w ten sposób <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> jest pustej kolekcji.</target>       </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>If <ph id="ph1">`members`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property of the resulting <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.</source>
          <target state="translated">Jeśli <ph id="ph1">`members`</ph> jest <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> właściwość powstałe w ten sposób <ph id="ph4">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> jest pustej kolekcji.</target>       </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>If <ph id="ph1">`members`</ph> is not <ph id="ph2">`null`</ph>, it must have the same number of elements as <ph id="ph3">`arguments`</ph> and each element must not be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`members`</ph> nie jest <ph id="ph2">`null`</ph>, musi mieć taką samą liczbę elementów jako <ph id="ph3">`arguments`</ph> i nie może być każdy element <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>Each element of <ph id="ph1">`members`</ph> must be a <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> or <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents an instance member on the declaring type of the constructor represented by <ph id="ph5">`constructor`</ph>.</source>
          <target state="translated">Każdy element <ph id="ph1">`members`</ph> musi być <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> lub <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący elementu członkowskiego wystąpienia na typ deklarujący reprezentowany przez konstruktora <ph id="ph5">`constructor`</ph>.</target>       </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>If it represents a property, the property must be able to retrieve the value of the associated field.</source>
          <target state="translated">Jeśli termin reprezentuje właściwość, właściwość musi być może pobrać wartości pola skojarzone.</target>       </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>The corresponding element of <ph id="ph1">`arguments`</ph> for each element of <ph id="ph2">`members`</ph> must have a <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property that represents a type that is assignable to the type of the member that the <ph id="ph4">`members`</ph> element represents.</source>
          <target state="translated">Odpowiedni element <ph id="ph1">`arguments`</ph> dla każdego elementu <ph id="ph2">`members`</ph> musi mieć <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwość, która reprezentuje typ, który można przypisać do typu elementu członkowskiego który <ph id="ph4">`members`</ph> reprezentuje element.</target>       </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> represents the declaring type of the constructor that <ph id="ph3">`constructor`</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> reprezentuje typ deklarujący konstruktora który <ph id="ph3">`constructor`</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="constructor" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>An element of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>An element of <ph id="ph1">&lt;paramref name="members" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="members" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>The <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> parameter does not contain the same number of elements as the number of parameters for the constructor that <ph id="ph2">&lt;paramref name="constructor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> Parametru nie zawiera taką samą liczbę elementów jak liczba parametrów konstruktora który <ph id="ph2">&lt;paramref name="constructor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> is not assignable to the type of the corresponding parameter of the constructor that <ph id="ph3">&lt;paramref name="constructor" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> nie można przypisać do typu odpowiadającego mu parametru konstruktora który <ph id="ph3">&lt;paramref name="constructor" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>The <ph id="ph1">&lt;paramref name="members" /&gt;</ph> parameter does not have the same number of elements as <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="members" /&gt;</ph> Parametru nie ma taką samą liczbę elementów jako <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
          <source>An element of <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> has a <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <ph id="ph3">&lt;paramref name="members" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="arguments" /&gt;</ph> ma <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwość, która reprezentuje typ, który nie jest możliwa do przypisania do typu elementu członkowskiego reprezentowanego przez odpowiedni element <ph id="ph3">&lt;paramref name="members" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that represents creating an array that has a specified rank.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> reprezentujący tworzenie tablicę, która ma określony rangę.</target>       </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the element type of the array.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący typ elementu tablicy.</target>       </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that represents creating an array that has a specified rank.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> reprezentujący tworzenie tablicę, która ma określony rangę.</target>       </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> represents an array type whose rank is equal to the length of <ph id="ph3">`bounds`</ph> and whose element type is <ph id="ph4">`type`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> reprezentuje typ tablicy, której pozycję jest równa długości <ph id="ph3">`bounds`</ph> i o typie elementu <ph id="ph4">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id="ph2">`bounds`</ph> must represent an integral type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">`bounds`</ph> musi przedstawiać typ całkowity.</target>       </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> method to create an expression tree that represents creating a string array that has a rank of 2.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> metodę, aby utworzyć drzewo wyrażenia, które reprezentuje tworzenie tablicy ciągów, które ma pozycję 2.</target>       </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bounds" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bounds" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An element of <ph id="ph1">&lt;paramref name="bounds" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="bounds" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="bounds" /&gt;</ph> does not represent an integral type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="bounds" /&gt;</ph> nie reprezentuje typ całkowity.</target>       </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the element type of the array.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący typ elementu tablicy.</target>       </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that represents creating an array that has a specified rank.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> reprezentujący tworzenie tablicę, która ma określony rangę.</target>       </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> represents an array type whose rank is equal to the length of <ph id="ph3">`bounds`</ph> and whose element type is <ph id="ph4">`type`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> reprezentuje typ tablicy, której pozycję jest równa długości <ph id="ph3">`bounds`</ph> i o typie elementu <ph id="ph4">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id="ph2">`bounds`</ph> must represent an integral type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">`bounds`</ph> musi przedstawiać typ całkowity.</target>       </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> method to create an expression tree that represents creating a string array that has a rank of 2.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> metodę, aby utworzyć drzewo wyrażenia, które reprezentuje tworzenie tablicy ciągów, które ma pozycję 2.</target>       </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bounds" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="bounds" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>An element of <ph id="ph1">&lt;paramref name="bounds" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="bounds" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="bounds" /&gt;</ph> does not represent an integral type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="bounds" /&gt;</ph> nie reprezentuje typ całkowity.</target>       </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that represents creating a one-dimensional array and initializing it from a list of elements.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> reprezentujący tworzenia tablicą jednowymiarową i inicjowania go z listy elementów.</target>       </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the element type of the array.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący typ elementu tablicy.</target>       </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Zawierający <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that represents creating a one-dimensional array and initializing it from a list of elements.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> reprezentujący tworzenia tablicą jednowymiarową i inicjowania go z listy elementów.</target>       </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id="ph2">`initializers`</ph> must represent a type that is assignable to the type represented by <ph id="ph3">`type`</ph>, possibly after it is <bpt id="p1">*</bpt>quoted<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">`initializers`</ph> musi reprezentować typu, który można przypisać do typu reprezentowanego przez <ph id="ph3">`type`</ph>, prawdopodobnie po jest <bpt id="p1">*</bpt>cytowaną<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An element will be quoted only if <ph id="ph1">`type`</ph> is <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy <ph id="ph1">`type`</ph> jest <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`initializers`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> represents an array type whose rank is 1 and whose element type is <ph id="ph3">`type`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> reprezentuje typ tablica której pozycję to 1, którego typ elementu <ph id="ph3">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph> metodę, aby utworzyć drzewo wyrażenia, które reprezentuje tworzenie tablicy jednowymiarowej tablicy ciągów, które jest inicjowany z listy wyrażeń ciągu.</target>       </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An element of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> represents a type that is not assignable to the type that <ph id="ph3">&lt;paramref name="type" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> reprezentuje typ, który nie jest możliwa do przypisania do typu który <ph id="ph3">&lt;paramref name="type" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the element type of the array.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący typ elementu tablicy.</target>       </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that represents creating a one-dimensional array and initializing it from a list of elements.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> reprezentujący tworzenia tablicą jednowymiarową i inicjowania go z listy elementów.</target>       </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id="ph2">`initializers`</ph> must represent a type that is assignable to the type represented by <ph id="ph3">`type`</ph>, possibly after it is <bpt id="p1">*</bpt>quoted<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwości każdego elementu <ph id="ph2">`initializers`</ph> musi reprezentować typu, który można przypisać do typu reprezentowanego przez <ph id="ph3">`type`</ph>, prawdopodobnie po jest <bpt id="p1">*</bpt>cytowaną<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>An element will be quoted only if <ph id="ph1">`type`</ph> is <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
          <target state="translated">Element będzie można podać tylko wtedy, gdy <ph id="ph1">`type`</ph> jest <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>Quoting means the element is wrapped in a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.</source>
          <target state="translated">Zamykający oznacza, że element jest ujęte w <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> węzła.</target>       </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>The resulting node is a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id="ph3">`initializers`</ph>.</source>
          <target state="translated">Wynikowa węzeł jest <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> których <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> właściwości jest elementem <ph id="ph3">`initializers`</ph>.</target>       </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> represents an array type whose rank is 1 and whose element type is <ph id="ph3">`type`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> reprezentuje typ tablica której pozycję to 1, którego typ elementu <ph id="ph3">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph> metodę, aby utworzyć drzewo wyrażenia, które reprezentuje tworzenie tablicy jednowymiarowej tablicy ciągów, które jest inicjowany z listy wyrażeń ciągu.</target>       </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>An element of <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Element <ph id="ph1">&lt;paramref name="initializers" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property of an element of <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> represents a type that is not assignable to the type <ph id="ph3">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Właściwości elementu <ph id="ph2">&lt;paramref name="initializers" /&gt;</ph> reprezentuje typ, który nie jest możliwa do przypisania do typu <ph id="ph3">&lt;paramref name="type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.Expression.NodeType">
          <source>Gets the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Pobiera typ węzła <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.NodeType">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> values.</source>
          <target state="translated">Jeden z <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> wartości.</target>       </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.NodeType">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property provides a more specialized description of an <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> than just its derived type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> Właściwość zawiera opis wyspecjalizowanego <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> niż tylko jego typu pochodnego.</target>       </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.NodeType">
          <source>For example, a <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> może służyć do reprezentowania różne rodzaje wyrażenia binarne, takie jak "większe niż" operacja lub operacji dzielenia.</target>       </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.NodeType">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property would describe these binary expressions as <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Divide&gt;</ph> and <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.GreaterThan&gt;</ph>, respectively.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> Właściwość czy opisano te wyrażenia binarne jako <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType.Divide&gt;</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.GreaterThan&gt;</ph>odpowiednio.</target>       </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.NodeType">
          <source>The static CLR type of the expression that the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> object represents is represented by the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property.</source>
          <target state="translated">Typ CLR statyczny wyrażenia który <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> reprezentuje obiekt jest reprezentowana przez <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a bitwise complement operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację dopełnienia bitowego.</target>       </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a bitwise complement operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację dopełnienia bitowego.</target>       </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Not" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Not" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is a user-defined type that defines the unary not operator, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typem jest typ zdefiniowany przez użytkownika, który określa jednoargumentowy not operator <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, który jest operator implementującej metody.</target>       </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`expression`</ph>.Type is a numeric or Boolean type, the implementing method is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`expression`</ph>. Typ typu liczbowego lub typu Boolean, metoda wykonawcze jest <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ można przypisać do typu argumentu implementującej metody, nie została wyjęta węzła.</target>       </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>. Typ jest typem wartości null, a odpowiedni typ niedopuszczający wartości null jest taki sam typ argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>, the type of the node is <ph id="ph2">`expression`</ph>.Type.</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>, jest typ węzła <ph id="ph2">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>Otherwise, the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>The following example demonstrates how to create an expression that represents a logical NOT operation.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie reprezentuje logicznych nie operacji.</target>       </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
          <source>The unary not operator is not defined for <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type.</source>
          <target state="translated">Jednoargumentowy not operator nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a bitwise complement operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący operację dopełnienia bitowego.</target>       </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The implementing method can be specified.</source>
          <target state="translated">Można określić implementującej metody.</target>       </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Not" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Not" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes one argument, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje jeden argument jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is a user-defined type that defines the unary not operator, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typem jest typ zdefiniowany przez użytkownika, który określa jednoargumentowy not operator <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, który jest operator implementującej metody.</target>       </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`expression`</ph>.Type is a numeric type, the implementing method is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`expression`</ph>. Typ jest typ liczbowy, implementującej metody <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ można przypisać do typu argumentu implementującej metody, nie została wyjęta węzła.</target>       </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>. Typ jest typem wartości null, a odpowiedni typ niedopuszczający wartości null jest taki sam, jak typ argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>, the type of the node is <ph id="ph2">`expression`</ph>.Type.</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>, jest typ węzła <ph id="ph2">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the unary not operator is not defined for <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i jednoargumentowy not operator nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ (lub odpowiedniego typu wartości null, jeśli jest to typ wartości null) nie jest można przypisać do typu argumentu metody reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an inequality comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący porównania nierówności.</target>       </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an inequality comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący porównania nierówności.</target>       </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, it is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie jest <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> Właściwość jest zawsze <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the inequality operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator nierówności <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, the implementing method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie jest implementującej metody <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło i typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The inequality operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator nierówności nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2934" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2935" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to set <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> to <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph3">&lt;see langword="true" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> można ustawić <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph> do <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2936" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2937" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an inequality comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący porównania nierówności.</target>       </trans-unit>
        <trans-unit id="2938" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id="ph4">`liftToNull`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> właściwość jest <ph id="ph2">`true`</ph> i <ph id="ph3">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości jest równa <ph id="ph4">`liftToNull`</ph>.</target>       </trans-unit>
        <trans-unit id="2942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, they are both <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="2948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the inequality operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator nierówności <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Otherwise, the implementing method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie jest implementującej metody <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>:</source>
          <target state="translated">Jeśli są spełnione następujące dwa warunki, węzeł jest unosiło; Ponadto typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>:</target>       </trans-unit>
        <trans-unit id="2955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Zwracany typ metody wykonawcze jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">Typ węzła jest <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source>The type of the node is nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph2">`liftToNull`</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> if <ph id="ph5">`liftToNull`</ph> is <ph id="ph6">`false`</ph>.</source>
          <target state="translated">Typ węzła jest nullable <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph2">`liftToNull`</ph> jest <ph id="ph3">`true`</ph> lub <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> Jeśli <ph id="ph5">`liftToNull`</ph> jest <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2962" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2963" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="2964" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the inequality operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator nierówności dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="2965" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Returns the expression representing the ones complement.</source>
          <target state="translated">Zwraca wyrażenie odpowiadające te dopełnienia.</target>       </trans-unit>
        <trans-unit id="2966" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2967" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
          <source>Returns the expression representing the ones complement.</source>
          <target state="translated">Zwraca wyrażenie odpowiadające te dopełnienia.</target>       </trans-unit>
        <trans-unit id="2968" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2969" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2970" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="2971" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Returns the expression representing the ones complement.</source>
          <target state="translated">Zwraca wyrażenie odpowiadające te dopełnienia.</target>       </trans-unit>
        <trans-unit id="2972" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2973" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operacji.</target>       </trans-unit>
        <trans-unit id="2974" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2975" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="2976" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operacji.</target>       </trans-unit>
        <trans-unit id="2977" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Or" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Or" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="2978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="2979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="2980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="2984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="2985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="2986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the bitwise <ph id="ph4">`OR`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads-bitowe <ph id="ph4">`OR`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="2987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typów całkowitych lub Boolean, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="2988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="2989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="2992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="2993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="2994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="2995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="2996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="2997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined bitwise <ph id="ph1">`OR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ wyniku predefiniowanych bitowe <ph id="ph1">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="2998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="2999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <ph id="ph1">`OR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku predefiniowanych bitowe <ph id="ph1">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents a logical OR operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie reprezentuje logicznej operacji lub.</target>       </trans-unit>
        <trans-unit id="3001" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3002" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The bitwise <ph id="ph1">&lt;see langword="OR" /&gt;</ph> operator is not defined for <ph id="ph2">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Bitowe <ph id="ph1">&lt;see langword="OR" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph2">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph3">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3003" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3004" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3005" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3006" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący bitowej <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operacji.</target>       </trans-unit>
        <trans-unit id="3007" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Or" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Or" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="3017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the bitwise <ph id="ph4">`OR`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads-bitowe <ph id="ph4">`OR`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typów całkowitych lub Boolean, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined bitwise <ph id="ph1">`OR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ wyniku predefiniowanych bitowe <ph id="ph1">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <ph id="ph1">`OR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, odpowiednio do typu wyniku predefiniowanych bitowe <ph id="ph1">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3031" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3032" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="3033" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the bitwise <ph id="ph3">&lt;see langword="OR" /&gt;</ph> operator is not defined for <ph id="ph4">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph5">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operatora testu koniunkcji <ph id="ph3">&lt;see langword="OR" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph4">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph5">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3034" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise OR assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przypisania OR.</target>       </trans-unit>
        <trans-unit id="3035" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3036" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3037" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise OR assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przypisania OR.</target>       </trans-unit>
        <trans-unit id="3038" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3039" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3040" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3041" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3042" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise OR assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przypisania OR.</target>       </trans-unit>
        <trans-unit id="3043" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3044" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3045" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3046" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3047" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3048" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise OR assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przypisania OR.</target>       </trans-unit>
        <trans-unit id="3049" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3050" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a conditional <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operation that evaluates the second operand only if the first operator evaluates to <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący warunkowego <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operacja, która ocenia drugi argument tylko wtedy, gdy pierwszy operatora daje w wyniku <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3051" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3052" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3053" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a conditional <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący warunkowego <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operacja, która ocenia drugi argument tylko wtedy, gdy pierwszy argument operacji daje w wyniku <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3054" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the bitwise <ph id="ph4">`OR`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads-bitowe <ph id="ph4">`OR`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The conditional <ph id="ph1">`OR`</ph> operator cannot be overloaded in C# or Visual Basic.</source>
          <target state="translated">Warunkowe <ph id="ph1">`OR`</ph> nie może zostać Przeciążony operator w języku C# lub Visual Basic.</target>       </trans-unit>
        <trans-unit id="3065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>However, the conditional <ph id="ph1">`OR`</ph> operator is evaluated by using the bitwise <ph id="ph2">`OR`</ph> operator.</source>
          <target state="translated">Jednak warunkowe <ph id="ph1">`OR`</ph> operator jest oceniane przy użyciu operatora testu koniunkcji <ph id="ph2">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Thus, a user-defined overload of the bitwise <ph id="ph1">`OR`</ph> operator can be the implementing method for this node type.</source>
          <target state="translated">W związku z tym zdefiniowane przez użytkownika przeciążenia operatora testu koniunkcji <ph id="ph1">`OR`</ph> operator może być implementującej metody dla tego typu węzła.</target>       </trans-unit>
        <trans-unit id="3067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy Boolean, implementującej metody jest <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null, a odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are the same Boolean type.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są tego samego typu Boolean.</target>       </trans-unit>
        <trans-unit id="3077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined conditional <ph id="ph1">`OR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typu wyników wstępnie zdefiniowanych warunkowego <ph id="ph1">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ dopuszczają wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined conditional <ph id="ph1">`OR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca typu wyników wstępnie zdefiniowanych warunkowego <ph id="ph1">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that represents a logical <ph id="ph1">`OR`</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób utworzyć wyrażenie reprezentuje logicznych <ph id="ph1">`OR`</ph> operacja, która ocenia drugi argument tylko wtedy, gdy pierwszy argument operacji daje w wyniku <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3082" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3083" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The bitwise <ph id="ph1">&lt;see langword="OR" /&gt;</ph> operator is not defined for <ph id="ph2">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Bitowe <ph id="ph1">&lt;see langword="OR" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph2">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph3">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3084" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="3085" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type are not the same Boolean type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ nie są tego samego typu Boolean.</target>       </trans-unit>
        <trans-unit id="3086" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3087" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3088" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3089" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a conditional <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący warunkowego <ph id="ph2">&lt;see langword="OR" /&gt;</ph> operacja, która ocenia drugi argument tylko wtedy, gdy pierwszy argument operacji daje w wyniku <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3090" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="3100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the bitwise <ph id="ph4">`OR`</ph> operator, the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads-bitowe <ph id="ph4">`OR`</ph> operatora <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The conditional <ph id="ph1">`OR`</ph> operator cannot be overloaded in C# or Visual Basic.</source>
          <target state="translated">Warunkowe <ph id="ph1">`OR`</ph> nie może zostać Przeciążony operator w języku C# lub Visual Basic.</target>       </trans-unit>
        <trans-unit id="3102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>However, the conditional <ph id="ph1">`OR`</ph> operator is evaluated by using the bitwise <ph id="ph2">`OR`</ph> operator.</source>
          <target state="translated">Jednak warunkowe <ph id="ph1">`OR`</ph> operator jest oceniane przy użyciu operatora testu koniunkcji <ph id="ph2">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Thus, a user-defined overload of the bitwise <ph id="ph1">`OR`</ph> operator can be the implementing method for this node type.</source>
          <target state="translated">W związku z tym zdefiniowane przez użytkownika przeciążenia operatora testu koniunkcji <ph id="ph1">`OR`</ph> operator może być implementującej metody dla tego typu węzła.</target>       </trans-unit>
        <trans-unit id="3104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are Boolean types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy Boolean, implementującej metody jest <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null, a odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are the same Boolean type.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są tego samego typu Boolean.</target>       </trans-unit>
        <trans-unit id="3114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined conditional <ph id="ph1">`OR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typu wyników wstępnie zdefiniowanych warunkowego <ph id="ph1">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ dopuszczają wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined conditional <ph id="ph1">`OR`</ph> operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca typu wyników wstępnie zdefiniowanych warunkowego <ph id="ph1">`OR`</ph> operatora.</target>       </trans-unit>
        <trans-unit id="3118" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3119" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="3120" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the bitwise <ph id="ph3">&lt;see langword="OR" /&gt;</ph> operator is not defined for <ph id="ph4">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph5">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operatora testu koniunkcji <ph id="ph3">&lt;see langword="OR" /&gt;</ph> operator nie jest zdefiniowany dla <ph id="ph4">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph5">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3121" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="3122" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type are not the same Boolean type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ nie są tego samego typu Boolean.</target>       </trans-unit>
        <trans-unit id="3123" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</target>       </trans-unit>
        <trans-unit id="3124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
          <source>The type of the parameter or variable.</source>
          <target state="translated">Typ parametr lub zmienna.</target>       </trans-unit>
        <trans-unit id="3125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</target>       </trans-unit>
        <trans-unit id="3126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node with the specified name and type.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła o określonej nazwie i typu.</target>       </trans-unit>
        <trans-unit id="3127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> object that prints the value of a <ph id="ph2">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph> object.</source>
          <target state="translated">Poniższy przykład przedstawia sposób tworzenia <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> obiekt, który wyświetla wartość <ph id="ph2">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="3128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
          <source>The type of the parameter or variable.</source>
          <target state="translated">Typ parametr lub zmienna.</target>       </trans-unit>
        <trans-unit id="3129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
          <source>The name of the parameter or variable, used for debugging or printing purpose only.</source>
          <target state="translated">Nazwa parametr lub zmienna, używana do debugowania lub drukowania tylko do celów.</target>       </trans-unit>
        <trans-unit id="3130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</target>       </trans-unit>
        <trans-unit id="3131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ParameterExpression.Name" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.ParameterExpression.Name" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3133" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący przypisanie następuje przez kolejne dekrementacja 1 oryginalne wyrażenie wyrażenia.</target>       </trans-unit>
        <trans-unit id="3134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to apply the operations on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Mogła zastosować operacji.</target>       </trans-unit>
        <trans-unit id="3135" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący przypisanie następuje przez kolejne dekrementacja 1 oryginalne wyrażenie wyrażenia.</target>       </trans-unit>
        <trans-unit id="3136" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the resultant expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia wynikowego.</target>       </trans-unit>
        <trans-unit id="3137" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to apply the operations on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Mogła zastosować operacji.</target>       </trans-unit>
        <trans-unit id="3138" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="3139" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący przypisanie następuje przez kolejne dekrementacja 1 oryginalne wyrażenie wyrażenia.</target>       </trans-unit>
        <trans-unit id="3140" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the resultant expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia wynikowego.</target>       </trans-unit>
        <trans-unit id="3141" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący przypisanie następuje przez kolejne przyrostu 1 oryginalne wyrażenie wyrażenia.</target>       </trans-unit>
        <trans-unit id="3142" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to apply the operations on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Mogła zastosować operacji.</target>       </trans-unit>
        <trans-unit id="3143" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący przypisanie następuje przez kolejne przyrostu 1 oryginalne wyrażenie wyrażenia.</target>       </trans-unit>
        <trans-unit id="3144" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the resultant expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia wynikowego.</target>       </trans-unit>
        <trans-unit id="3145" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to apply the operations on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Mogła zastosować operacji.</target>       </trans-unit>
        <trans-unit id="3146" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="3147" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący przypisanie następuje przez kolejne przyrostu 1 oryginalne wyrażenie wyrażenia.</target>       </trans-unit>
        <trans-unit id="3148" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the resultant expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia wynikowego.</target>       </trans-unit>
        <trans-unit id="3149" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents raising a number to a power.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący podniesienia liczby do potęgi.</target>       </trans-unit>
        <trans-unit id="3150" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3151" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3152" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents raising a number to a power.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący podniesienia liczby do potęgi.</target>       </trans-unit>
        <trans-unit id="3153" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Power" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Power" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the exponentiation operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator wykładniczy <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both <ph id="ph3">&lt;xref:System.Double&gt;</ph>, the implementing method is <ph id="ph4">&lt;xref:System.Math.Pow%2A&gt;</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są <ph id="ph3">&lt;xref:System.Double&gt;</ph>, implementacja metody jest <ph id="ph4">&lt;xref:System.Math.Pow%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3170" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3171" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The exponentiation operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator wykładniczy nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3172" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="3173" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and/or <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type are not <ph id="ph3">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i/lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Nie są typu <ph id="ph3">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3174" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3175" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3176" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3177" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents raising a number to a power.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący podniesienia liczby do potęgi.</target>       </trans-unit>
        <trans-unit id="3178" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Power" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Power" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest metoda implementującej.</target>       </trans-unit>
        <trans-unit id="3188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the exponentiation operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator wykładniczy <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both <ph id="ph3">&lt;xref:System.Double&gt;</ph>, the implementing method is <ph id="ph4">&lt;xref:System.Math.Pow%2A&gt;</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są <ph id="ph3">&lt;xref:System.Double&gt;</ph>, implementacja metody jest <ph id="ph4">&lt;xref:System.Math.Pow%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3196" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3197" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="3198" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the exponentiation operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator wykładniczy dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3199" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="3200" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and/or <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type are not <ph id="ph5">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i/lub <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Nie są typu <ph id="ph5">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3201" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents raising an expression to a power and assigning the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący podnoszenia wyrażenia do potęgi i przypisywanie wyniku wyrażenia.</target>       </trans-unit>
        <trans-unit id="3202" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3203" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3204" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents raising an expression to a power and assigning the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący podnoszenia wyrażenia do potęgi i przypisywanie wyniku wyrażenia.</target>       </trans-unit>
        <trans-unit id="3205" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3206" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3207" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3208" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3209" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents raising an expression to a power and assigning the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący podnoszenia wyrażenia do potęgi i przypisywanie wyniku wyrażenia.</target>       </trans-unit>
        <trans-unit id="3210" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3211" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3212" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3213" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3214" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3215" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents raising an expression to a power and assigning the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący podnoszenia wyrażenia do potęgi i przypisywanie wyniku wyrażenia.</target>       </trans-unit>
        <trans-unit id="3216" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3217" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that decrements the expression by 1 and assigns the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> zmniejsza tego wyrażenia 1 i przypisuje wynik z powrotem do wyrażenia.</target>       </trans-unit>
        <trans-unit id="3218" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to apply the operations on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Mogła zastosować operacji.</target>       </trans-unit>
        <trans-unit id="3219" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that decrements the expression by 1 and assigns the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> zmniejsza tego wyrażenia 1 i przypisuje wynik z powrotem do wyrażenia.</target>       </trans-unit>
        <trans-unit id="3220" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the resultant expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia wynikowego.</target>       </trans-unit>
        <trans-unit id="3221" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to apply the operations on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Mogła zastosować operacji.</target>       </trans-unit>
        <trans-unit id="3222" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="3223" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that decrements the expression by 1 and assigns the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> zmniejsza tego wyrażenia 1 i przypisuje wynik z powrotem do wyrażenia.</target>       </trans-unit>
        <trans-unit id="3224" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the resultant expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia wynikowego.</target>       </trans-unit>
        <trans-unit id="3225" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that increments the expression by 1 and assigns the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> zwiększa wyrażenie 1 i przypisuje wynik wyrażenia.</target>       </trans-unit>
        <trans-unit id="3226" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to apply the operations on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Mogła zastosować operacji.</target>       </trans-unit>
        <trans-unit id="3227" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that increments the expression by 1 and assigns the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> zwiększa wyrażenie 1 i przypisuje wynik wyrażenia.</target>       </trans-unit>
        <trans-unit id="3228" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the resultant expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia wynikowego.</target>       </trans-unit>
        <trans-unit id="3229" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to apply the operations on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Mogła zastosować operacji.</target>       </trans-unit>
        <trans-unit id="3230" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> reprezentujący implementującej metody.</target>       </trans-unit>
        <trans-unit id="3231" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that increments the expression by 1 and assigns the result back to the expression.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> zwiększa wyrażenie 1 i przypisuje wynik wyrażenia.</target>       </trans-unit>
        <trans-unit id="3232" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the resultant expression.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenia wynikowego.</target>       </trans-unit>
        <trans-unit id="3233" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do właściwości.</target>       </trans-unit>
        <trans-unit id="3234" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3235" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>This can be null for static properties.</source>
          <target state="translated">Może to być wartość null dla właściwości statycznej.</target>       </trans-unit>
        <trans-unit id="3236" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents a property accessor method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> Reprezentujący metodę dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="3237" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a property by using a property accessor method.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do właściwości, za pomocą metody dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="3238" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> property set to <ph id="ph5">&lt;paramref name="expression" /&gt;</ph> and the <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> property set to the <ph id="ph7">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property accessed in <ph id="ph8">&lt;paramref name="propertyAccessor" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;paramref name="expression" /&gt;</ph> i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> ustawioną właściwość <ph id="ph7">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> reprezentujący dostęp do właściwości <ph id="ph8">&lt;paramref name="propertyAccessor" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> właściwość <ph id="ph4">&lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the method represented by <ph id="ph1">`propertyAccessor`</ph> is <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic), <ph id="ph4">`expression`</ph> can be <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Jeśli metoda reprezentowany przez <ph id="ph1">`propertyAccessor`</ph> jest <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> w języku Visual Basic), <ph id="ph4">`expression`</ph> może być <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3241" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3242" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="3243" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The method that <ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> represents is not <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) and <ph id="ph4">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Metoda który <ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje nie jest <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) i <ph id="ph4">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3244" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type is not assignable to the declaring type of the method represented by <ph id="ph2">&lt;paramref name="propertyAccessor" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie jest możliwa do przypisania do typ deklarujący metodzie reprezentowany przez <ph id="ph2">&lt;paramref name="propertyAccessor" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3245" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="3246" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The method that <ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> represents is not a property accessor method.</source>
          <target state="translated">Metoda który <ph id="ph1">&lt;paramref name="propertyAccessor" /&gt;</ph> reprezentuje nie jest metodą dostępu właściwości.</target>       </trans-unit>
        <trans-unit id="3247" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3248" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>This can be null for static properties.</source>
          <target state="translated">Może to być wartość null dla właściwości statycznej.</target>       </trans-unit>
        <trans-unit id="3249" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3250" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do właściwości.</target>       </trans-unit>
        <trans-unit id="3251" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> właściwość <ph id="ph4">&lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>If the property represented by <ph id="ph1">`property`</ph> is <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic), <ph id="ph4">`expression`</ph> can be <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Jeśli właściwość reprezentowany przez <ph id="ph1">`property`</ph> jest <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> w języku Visual Basic), <ph id="ph4">`expression`</ph> może być <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3254" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3255" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="3256" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source>The property that <ph id="ph1">&lt;paramref name="property" /&gt;</ph> represents is not <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) and <ph id="ph4">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Właściwość który <ph id="ph1">&lt;paramref name="property" /&gt;</ph> reprezentuje nie jest <ph id="ph2">&lt;see langword="static" /&gt;</ph> (<ph id="ph3">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) i <ph id="ph4">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3257" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type is not assignable to the declaring type of the property that <ph id="ph2">&lt;paramref name="property" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ nie jest możliwa do przypisania do właściwości typ deklarujący który <ph id="ph2">&lt;paramref name="property" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="3258" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> whose <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> contains a property named <bpt id="p1">&lt;c&gt;</bpt>propertyName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Których <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> zawiera właściwość o nazwie <bpt id="p1">&lt;c&gt;</bpt>propertyName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="3259" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for static properties.</source>
          <target state="translated">Może to być <ph id="ph1">&lt;see langword="null" /&gt;</ph> właściwości statycznej.</target>       </trans-unit>
        <trans-unit id="3260" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>The name of a property to be accessed.</source>
          <target state="translated">Nazwa właściwości, aby można było uzyskać dostęp.</target>       </trans-unit>
        <trans-unit id="3261" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do właściwości.</target>       </trans-unit>
        <trans-unit id="3262" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> property set to <ph id="ph5">&lt;paramref name="expression" /&gt;</ph>, and the <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> property set to the <ph id="ph7">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property denoted by <ph id="ph8">&lt;paramref name="propertyName" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;paramref name="expression" /&gt;</ph>i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> ustawioną właściwość <ph id="ph7">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> reprezentujący właściwość oznaczona <ph id="ph8">&lt;paramref name="propertyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> that represents the property denoted by <ph id="ph5">`propertyName`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> właściwość <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> reprezentujący właściwość oznaczona <ph id="ph5">`propertyName`</ph>.</target>       </trans-unit>
        <trans-unit id="3264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>This method searches <ph id="ph1">`expression`</ph>.Type and its base types for a property that has the name <ph id="ph2">`propertyName`</ph>.</source>
          <target state="translated">Ta metoda szuka <ph id="ph1">`expression`</ph>. Typ i jego typów podstawowych dla właściwości o nazwie <ph id="ph2">`propertyName`</ph>.</target>       </trans-unit>
        <trans-unit id="3265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>Public properties are given preference over non-public properties.</source>
          <target state="translated">Właściwości publiczne są preferowane względem niepublicznych właściwości.</target>       </trans-unit>
        <trans-unit id="3266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>If a matching property is found, this method passes <ph id="ph1">`expression`</ph> and the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> that represents that property to <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph>.</source>
          <target state="translated">Jeśli zostanie znaleziony zgodnej właściwości, ta metoda przekazuje <ph id="ph1">`expression`</ph> i <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> reprezentujący tej właściwości, aby <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>The following example shows how to create an expression that represents accessing a property.</source>
          <target state="translated">Poniższy przykład pokazuje, jak utworzyć wyrażenie reprezentuje podczas uzyskiwania dostępu do właściwości.</target>       </trans-unit>
        <trans-unit id="3268" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="propertyName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="propertyName" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3269" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
          <source>No property named <ph id="ph1">&lt;paramref name="propertyName" /&gt;</ph> is defined in <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>.Type or its base types.</source>
          <target state="translated">Nie ma właściwości o nazwie <ph id="ph1">&lt;paramref name="propertyName" /&gt;</ph> jest zdefiniowany w <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>. Typ lub jego typów podstawowych.</target>       </trans-unit>
        <trans-unit id="3270" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The object to which the property belongs.</source>
          <target state="translated">Obiekt, do którego należy właściwość.</target>       </trans-unit>
        <trans-unit id="3271" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If the property is static/shared, it must be null.</source>
          <target state="translated">Jeśli właściwość jest statyczna/udostępnionego, może mieć wartości null.</target>       </trans-unit>
        <trans-unit id="3272" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property to index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> Reprezentujący właściwość do indeksu.</target>       </trans-unit>
        <trans-unit id="3273" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects that are used to index the property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> z <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiektów, które są używane do indeksowania właściwości.</target>       </trans-unit>
        <trans-unit id="3274" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> representing the access to an indexed property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> reprezentujący dostępu do właściwości indeksowanej.</target>       </trans-unit>
        <trans-unit id="3275" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3276" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
          <source>The object to which the property belongs.</source>
          <target state="translated">Obiekt, do którego należy właściwość.</target>       </trans-unit>
        <trans-unit id="3277" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
          <source>If the property is static/shared, it must be null.</source>
          <target state="translated">Jeśli właściwość jest statyczna/udostępnionego, może mieć wartości null.</target>       </trans-unit>
        <trans-unit id="3278" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property to index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> Reprezentujący właściwość do indeksu.</target>       </trans-unit>
        <trans-unit id="3279" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects that are used to index the property.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiektów, które są używane do indeksowania właściwości.</target>       </trans-unit>
        <trans-unit id="3280" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> representing the access to an indexed property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> reprezentujący dostępu do właściwości indeksowanej.</target>       </trans-unit>
        <trans-unit id="3281" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3282" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
          <source>The object to which the property belongs.</source>
          <target state="translated">Obiekt, do którego należy właściwość.</target>       </trans-unit>
        <trans-unit id="3283" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
          <source>If the property is static/shared, it must be null.</source>
          <target state="translated">Jeśli właściwość jest statyczna/udostępnionego, może mieć wartości null.</target>       </trans-unit>
        <trans-unit id="3284" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
          <source>The name of the indexer.</source>
          <target state="translated">Nazwa indeksatora.</target>       </trans-unit>
        <trans-unit id="3285" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects that are used to index the property.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> obiektów, które są używane do indeksowania właściwości.</target>       </trans-unit>
        <trans-unit id="3286" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> representing the access to an indexed property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph> reprezentujący dostępu do właściwości indeksowanej.</target>       </trans-unit>
        <trans-unit id="3287" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3288" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>The containing object of the property.</source>
          <target state="translated">Obiekt zawierający właściwości.</target>       </trans-unit>
        <trans-unit id="3289" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>This can be null for static properties.</source>
          <target state="translated">Może to być wartość null dla właściwości statycznej.</target>       </trans-unit>
        <trans-unit id="3290" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> that contains the property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> Zawierający właściwości.</target>       </trans-unit>
        <trans-unit id="3291" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>The property to be accessed.</source>
          <target state="translated">Właściwość, aby można było uzyskać dostęp.</target>       </trans-unit>
        <trans-unit id="3292" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> accessing a property.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> podczas uzyskiwania dostępu do właściwości.</target>       </trans-unit>
        <trans-unit id="3293" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3294" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> whose <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> contains a property or field named <bpt id="p1">&lt;c&gt;</bpt>propertyOrFieldName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Których <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> zawiera właściwość lub pole o nazwie <bpt id="p1">&lt;c&gt;</bpt>propertyOrFieldName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="3295" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>This can be null for static members.</source>
          <target state="translated">Może to być wartość null dla statycznych elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="3296" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>The name of a property or field to be accessed.</source>
          <target state="translated">Nazwa właściwości lub pola, aby można było uzyskać dostęp.</target>       </trans-unit>
        <trans-unit id="3297" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that represents accessing a property or field.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> reprezentujący podczas uzyskiwania dostępu do właściwości lub pola.</target>       </trans-unit>
        <trans-unit id="3298" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph>, the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> property set to <ph id="ph5">&lt;paramref name="expression" /&gt;</ph>, and the <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> property set to the <ph id="ph7">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> or <ph id="ph8">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> that represents the property or field denoted by <ph id="ph9">&lt;paramref name="propertyOrFieldName" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Expression" /&gt;</ph> ustawioną właściwość <ph id="ph5">&lt;paramref name="expression" /&gt;</ph>i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.MemberExpression.Member" /&gt;</ph> ustawioną właściwość <ph id="ph7">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> lub <ph id="ph8">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> reprezentujący właściwości lub pola wskazywane przez <ph id="ph9">&lt;paramref name="propertyOrFieldName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> properties of the <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> or <ph id="ph6">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, respectively, that represents the property or field denoted by <ph id="ph7">`propertyOrFieldName`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> jest równa <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> lub <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> właściwości <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> lub <ph id="ph6">&lt;xref:System.Reflection.FieldInfo&gt;</ph>odpowiednio reprezentujący właściwość lub pole wskazywane przez <ph id="ph7">`propertyOrFieldName`</ph>.</target>       </trans-unit>
        <trans-unit id="3300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>This method searches <ph id="ph1">`expression`</ph>.Type and its base types for a property or field that has the name <ph id="ph2">`propertyOrFieldName`</ph>.</source>
          <target state="translated">Ta metoda szuka <ph id="ph1">`expression`</ph>. Typ i jego typów podstawowych właściwości lub pola o nazwie <ph id="ph2">`propertyOrFieldName`</ph>.</target>       </trans-unit>
        <trans-unit id="3301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>Public properties and fields are given preference over non-public properties and fields.</source>
          <target state="translated">Właściwości publiczne i pola są preferowane względem niepublicznych właściwości i pola.</target>       </trans-unit>
        <trans-unit id="3302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>Also, properties are given preference over fields.</source>
          <target state="translated">Ponadto właściwości są preferowane względem pola.</target>       </trans-unit>
        <trans-unit id="3303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>If a matching property or field is found, this method passes <ph id="ph1">`expression`</ph> and the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> or <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> that represents that property or field to <ph id="ph4">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph>, respectively.</source>
          <target state="translated">Jeśli zostanie znaleziony zgodnej właściwości ani pola, ta metoda przekazuje <ph id="ph1">`expression`</ph> i <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> lub <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> reprezentujący tej właściwości lub pola do <ph id="ph4">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph> lub <ph id="ph5">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph>odpowiednio.</target>       </trans-unit>
        <trans-unit id="3304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>The following example shows how to create an expression that represents accessing a property or field.</source>
          <target state="translated">Poniższy przykład przedstawia sposób tworzenia wyrażenie reprezentuje podczas uzyskiwania dostępu do właściwości lub pola.</target>       </trans-unit>
        <trans-unit id="3305" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="propertyOrFieldName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="propertyOrFieldName" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3306" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
          <source>No property or field named <ph id="ph1">&lt;paramref name="propertyOrFieldName" /&gt;</ph> is defined in <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>.Type or its base types.</source>
          <target state="translated">Nie właściwości lub pola o nazwie <ph id="ph1">&lt;paramref name="propertyOrFieldName" /&gt;</ph> jest zdefiniowany w <ph id="ph2">&lt;paramref name="expression" /&gt;</ph>. Typ lub jego typów podstawowych.</target>       </trans-unit>
        <trans-unit id="3307" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3308" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an expression that has a constant value of type <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyrażenie, które ma stałej wartości typu <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3309" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Quote" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Quote" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="3310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> represents the constructed type <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, where the type argument is the type represented by <ph id="ph4">`expression`</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> reprezentuje utworzony typ <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, gdzie argument typu jest reprezentowana przez typ <ph id="ph4">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
          <source>Both <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> are <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Zarówno <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> są <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3313" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3314" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Reduce">
          <source>Reduces this node to a simpler expression.</source>
          <target state="translated">Ogranicza ten węzeł do wyrażenia prostsze.</target>       </trans-unit>
        <trans-unit id="3315" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Reduce">
          <source>If CanReduce returns true, this should return a valid expression.</source>
          <target state="translated">Jeśli CanReduce zwraca wartość true, powinny zostać zwrócone prawidłowe wyrażenie.</target>       </trans-unit>
        <trans-unit id="3316" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Reduce">
          <source>This method can return another node which itself must be reduced.</source>
          <target state="translated">Ta metoda może zwracać innego węzła, które muszą zostać zmniejszona.</target>       </trans-unit>
        <trans-unit id="3317" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Reduce">
          <source>The reduced expression.</source>
          <target state="translated">Zmniejszenie wyrażenie.</target>       </trans-unit>
        <trans-unit id="3318" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReduceAndCheck">
          <source>Reduces this node to a simpler expression.</source>
          <target state="translated">Ogranicza ten węzeł do wyrażenia prostsze.</target>       </trans-unit>
        <trans-unit id="3319" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReduceAndCheck">
          <source>If CanReduce returns true, this should return a valid expression.</source>
          <target state="translated">Jeśli CanReduce zwraca wartość true, powinny zostać zwrócone prawidłowe wyrażenie.</target>       </trans-unit>
        <trans-unit id="3320" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReduceAndCheck">
          <source>This method can return another node which itself must be reduced.</source>
          <target state="translated">Ta metoda może zwracać innego węzła, które muszą zostać zmniejszona.</target>       </trans-unit>
        <trans-unit id="3321" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReduceAndCheck">
          <source>The reduced expression.</source>
          <target state="translated">Zmniejszenie wyrażenie.</target>       </trans-unit>
        <trans-unit id="3322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.ReduceAndCheck">
          <source>Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</source>
          <target state="translated">W odróżnieniu od Zmniejsz ta metoda sprawdza, czy węzeł zmniejszenie spełnia niektórych invariants.</target>       </trans-unit>
        <trans-unit id="3323" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReduceExtensions">
          <source>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</source>
          <target state="translated">Zmniejsza wyrażenie z typem węzła znane (który nie jest węzłem rozszerzenia) lub po prostu zwraca wyrażenie, jeśli jest on już znanego typu.</target>       </trans-unit>
        <trans-unit id="3324" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReduceExtensions">
          <source>The reduced expression.</source>
          <target state="translated">Zmniejszenie wyrażenie.</target>       </trans-unit>
        <trans-unit id="3325" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3326" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3327" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a reference equality comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący porównanie równości odwołań.</target>       </trans-unit>
        <trans-unit id="3328" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Equal" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Equal" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3329" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3330" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3331" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a reference inequality comparison.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący porównanie nierówności odwołań.</target>       </trans-unit>
        <trans-unit id="3332" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3333" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a rethrowing of an exception.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący ponowne generowanie Wystąpił wyjątek.</target>       </trans-unit>
        <trans-unit id="3334" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Rethrow">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a rethrowing of an exception.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący ponowne generowanie Wystąpił wyjątek.</target>       </trans-unit>
        <trans-unit id="3335" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Rethrow">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a rethrowing of an exception.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący ponowne generowanie Wystąpił wyjątek.</target>       </trans-unit>
        <trans-unit id="3336" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the expression.</source>
          <target state="translated">Nowe <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> wyrażenia.</target>       </trans-unit>
        <trans-unit id="3337" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a rethrowing of an exception with a given type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący ponowne generowanie wyjątek z danym typem.</target>       </trans-unit>
        <trans-unit id="3338" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a rethrowing of an exception.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący ponowne generowanie Wystąpił wyjątek.</target>       </trans-unit>
        <trans-unit id="3339" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a return statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji return.</target>       </trans-unit>
        <trans-unit id="3340" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="3341" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a return statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji return.</target>       </trans-unit>
        <trans-unit id="3342" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Return, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, and a null value to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Return <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>i wartość null do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="3343" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="3344" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The value that will be passed to the associated label upon jumping.</source>
          <target state="translated">Wartość, która zostanie przekazany do skojarzone etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="3345" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a return statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji return.</target>       </trans-unit>
        <trans-unit id="3346" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The value passed to the label upon jumping can be specified.</source>
          <target state="translated">Można określić wartość przekazana do etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="3347" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Continue, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, and <ph id="ph5">&lt;paramref name="value" /&gt;</ph> to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Kontynuuj, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, i <ph id="ph5">&lt;paramref name="value" /&gt;</ph> do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="3348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
          <source>The following example demonstrates how to create an expression that contains the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Return%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie zawierające <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Return%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="3349" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="3350" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3351" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a return statement with the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji return z określonym typem.</target>       </trans-unit>
        <trans-unit id="3352" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Return, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, the <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph6">&lt;paramref name="type" /&gt;</ph>, and a null value to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Return <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph6">&lt;paramref name="type" /&gt;</ph>i wartość null do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="3353" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> will jump to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph> Który <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> spowoduje przejście do.</target>       </trans-unit>
        <trans-unit id="3354" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The value that will be passed to the associated label upon jumping.</source>
          <target state="translated">Wartość, która zostanie przekazany do skojarzone etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="3355" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3356" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> representing a return statement with the specified type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> reprezentujący instrukcji return z określonym typem.</target>       </trans-unit>
        <trans-unit id="3357" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>The value passed to the label upon jumping can be specified.</source>
          <target state="translated">Można określić wartość przekazana do etykiety na przejście.</target>       </trans-unit>
        <trans-unit id="3358" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> with <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> equal to Continue, the <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> property set to <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, the <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property set to <ph id="ph6">&lt;paramref name="type" /&gt;</ph>, and <ph id="ph7">&lt;paramref name="value" /&gt;</ph> to be passed to the target label upon jumping.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph> z <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Kind" /&gt;</ph> równa Kontynuuj, <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.GotoExpression.Target" /&gt;</ph> ustawioną właściwość <ph id="ph4">&lt;paramref name="target" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> ustawioną właściwość <ph id="ph6">&lt;paramref name="type" /&gt;</ph>, i <ph id="ph7">&lt;paramref name="value" /&gt;</ph> do przekazania do etykiety docelowej na przejście.</target>       </trans-unit>
        <trans-unit id="3359" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise right-shift operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3360" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3361" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3362" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise right-shift operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3363" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the right-shift operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator przesunięcia w prawo <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type is an integral type (one of <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt64&gt;</ph>, or the corresponding nullable types) and <ph id="ph10">`right`</ph>.Type is <ph id="ph11">&lt;xref:System.Int32&gt;</ph>, the implementing method is <ph id="ph12">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ jest typem całkowitym (jeden z <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt64&gt;</ph>, lub odpowiednie typy dopuszczające wartości zerowe) i <ph id="ph10">`right`</ph>. Typ jest <ph id="ph11">&lt;xref:System.Int32&gt;</ph>, implementacja metody jest <ph id="ph12">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined right-shift operator.</source>
          <target state="translated">Typ węzła jest typu wyników wstępnie zdefiniowanego operatora przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, która odnosi się do typu wyniku wstępnie zdefiniowanego operatora przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3386" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3387" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The right-shift operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator przesunięcia w prawo nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3388" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3389" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3390" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3391" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise right-shift operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operacji przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3392" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="3402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the right-shift operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator przesunięcia w prawo <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type is an integral type (one of <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt64&gt;</ph>, or the corresponding nullable types) and <ph id="ph10">`right`</ph>.Type is <ph id="ph11">&lt;xref:System.Int32&gt;</ph>, the implementing method is <ph id="ph12">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ jest typem całkowitym (jeden z <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt64&gt;</ph>, lub odpowiednie typy dopuszczające wartości zerowe) i <ph id="ph10">`right`</ph>. Typ jest <ph id="ph11">&lt;xref:System.Int32&gt;</ph>, implementacja metody jest <ph id="ph12">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined right-shift operator.</source>
          <target state="translated">Typ węzła jest typu wyników wstępnie zdefiniowanego operatora przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, która odnosi się do typu wyniku wstępnie zdefiniowanego operatora przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3416" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3417" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="3418" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the right-shift operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i operator przesunięcia w prawo nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3419" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise right-shift assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację bitowe przypisania przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3420" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3421" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3422" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise right-shift assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację bitowe przypisania przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3423" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3424" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3425" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3426" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3427" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise right-shift assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację bitowe przypisania przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3428" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3429" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3430" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3431" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3432" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3433" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a bitwise right-shift assignment operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację bitowe przypisania przesunięcia w prawo.</target>       </trans-unit>
        <trans-unit id="3434" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3435" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates an instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3436" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /&gt;</ph> collection.</source>
          <target state="translated">Kolekcja <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="3437" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates an instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3438" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="3439" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> objects to use to populate the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /&gt;</ph> collection.</source>
          <target state="translated">Tablica <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> obiekty służące do wypełniania <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="3440" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
          <source>Creates an instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3441" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="3442" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic subtraction operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację odejmowania arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3443" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3444" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3445" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic subtraction operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację odejmowania arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3446" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the subtraction operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator odejmowania <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined subtraction operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator odejmowania wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="3467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca operator odejmowania wstępnie zdefiniowanego typu wyników.</target>       </trans-unit>
        <trans-unit id="3469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following code example shows how to create an expression that subtracts the argument from the first argument.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie odejmuje argumentu z pierwszym argumentem.</target>       </trans-unit>
        <trans-unit id="3470" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3471" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The subtraction operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator odejmowania nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3472" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3473" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3474" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3475" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic subtraction operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację odejmowania arytmetyczne, która nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3476" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="3486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the subtraction operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator odejmowania <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined subtraction operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator odejmowania wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="3498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca operator odejmowania wstępnie zdefiniowanego typu wyników.</target>       </trans-unit>
        <trans-unit id="3500" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3501" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="3502" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the subtraction operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator odejmowania dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3503" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a subtraction assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację Przypisanie odejmowania, który nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3504" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3505" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3506" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a subtraction assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację Przypisanie odejmowania, który nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3507" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3508" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3509" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3510" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3511" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a subtraction assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację Przypisanie odejmowania, który nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3512" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3513" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3514" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3515" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3516" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3517" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a subtraction assignment operation that does not have overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację Przypisanie odejmowania, który nie ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3518" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3519" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a subtraction assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację Przypisanie odejmowania, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3520" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3521" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3522" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a subtraction assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację Przypisanie odejmowania, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3523" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3524" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3525" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3526" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3527" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a subtraction assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację Przypisanie odejmowania, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3528" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3529" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3530" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3531" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3532" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LambdaExpression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3533" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents a subtraction assignment operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację Przypisanie odejmowania, który ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3534" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, and <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph>, i <ph id="ph7">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3535" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic subtraction operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację odejmowania arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3536" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3537" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3538" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic subtraction operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację odejmowania arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3539" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The following rules determine the selected implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają wybranej implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the subtraction operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator odejmowania <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the result type of the predefined subtraction operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator odejmowania wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="3560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca operator odejmowania wstępnie zdefiniowanego typu wyników.</target>       </trans-unit>
        <trans-unit id="3562" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3563" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The subtraction operator is not defined for <ph id="ph1">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated">Operator odejmowania nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph2">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3564" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3565" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3566" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3567" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that represents an arithmetic subtraction operation that has overflow checking.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> reprezentujący operację odejmowania arytmetyczne, która ma sprawdzanie przepełnienia.</target>       </trans-unit>
        <trans-unit id="3568" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, and <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Left" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Right" /&gt;</ph>, i <ph id="ph6">&lt;see cref="P:System.Linq.Expressions.BinaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The resulting <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.</source>
          <target state="translated">Powstałe w ten sposób <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> ma <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> właściwość implementującej metody.</target>       </trans-unit>
        <trans-unit id="3570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are <ph id="ph1">`false`</ph>.</source>
          <target state="translated">W przeciwnym razie są one <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> Jest właściwość <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following information describes the implementing method, the node type, and whether a node is lifted.</source>
          <target state="translated">Poniżej opisano implementującej metody typu węzła i czy węzeł jest unosiło.</target>       </trans-unit>
        <trans-unit id="3575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation :</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje dwa argumenty jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="3578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id="ph2">`left`</ph> or <ph id="ph3">`right`</ph> represents a user-defined type that overloads the subtraction operator, the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> właściwości albo <ph id="ph2">`left`</ph> lub <ph id="ph3">`right`</ph> reprezentuje typ zdefiniowany przez użytkownika, który overloads operator odejmowania <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, że metoda jest metodą implementującej.</target>       </trans-unit>
        <trans-unit id="3579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are numeric types, the implementing method is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ typy liczbowe, jest implementującej metody <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ można przypisać odpowiednie typy argumentu implementującej metody, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</source>
          <target state="translated"><ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są oba typy wartości, których co najmniej jedna nie dopuszcza wartości null i odpowiednie typy wartości null są takie same odpowiednie typy argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są dopuszcza wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the result type of the predefined subtraction operator.</source>
          <target state="translated">Typ węzła jest typu wyników operator odejmowania wstępnie zdefiniowane.</target>       </trans-unit>
        <trans-unit id="3590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`left`</ph>.Type and <ph id="ph2">`right`</ph>.Type are both nullable, the node is lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`left`</ph>. Typ i <ph id="ph2">`right`</ph>. Typ są wartości null, jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</source>
          <target state="translated">Typ węzła jest typ dopuszczający wartość null, umożliwiająca operator odejmowania wstępnie zdefiniowanego typu wyników.</target>       </trans-unit>
        <trans-unit id="3592" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="right" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="right" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3593" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly two arguments.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</target>       </trans-unit>
        <trans-unit id="3594" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the subtraction operator is not defined for <ph id="ph3">&lt;paramref name="left" /&gt;</ph>.Type and <ph id="ph4">&lt;paramref name="right" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i nie zdefiniowano operator odejmowania dla <ph id="ph3">&lt;paramref name="left" /&gt;</ph>. Typ i <ph id="ph4">&lt;paramref name="right" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3595" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> that represents a <ph id="ph2">&lt;see langword="switch" /&gt;</ph> statement.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="switch" /&gt;</ph> instrukcji.</target>       </trans-unit>
        <trans-unit id="3596" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The value to be tested against each case.</source>
          <target state="translated">Wartość do sprawdzenia przed każdym przypadku.</target>       </trans-unit>
        <trans-unit id="3597" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The set of cases for this switch expression.</source>
          <target state="translated">Zestaw przypadków dla tego wyrażenia switch.</target>       </trans-unit>
        <trans-unit id="3598" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> that represents a <ph id="ph2">&lt;see langword="switch" /&gt;</ph> statement without a default case.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="switch" /&gt;</ph> instrukcję bez przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3599" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>All <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> objects in a <ph id="ph2">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> object must have the same type, unless the <ph id="ph3">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> has the type <ph id="ph4">`void`</ph>.</source>
          <target state="translated">Wszystkie <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> obiekty w <ph id="ph2">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> obiekt musi mieć ten sam typ, chyba że <ph id="ph3">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> ma typ <ph id="ph4">`void`</ph>.</target>       </trans-unit>
        <trans-unit id="3601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>Each <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> object has an implicit <ph id="ph2">`break`</ph> statement, which means that there is no implicit fall through from one case label to another.</source>
          <target state="translated">Każdy <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> obiekt ma niejawne <ph id="ph2">`break`</ph> instrukcja, która oznacza, że nie Brak niejawnego poniżej od jednej etykiety case do innej.</target>       </trans-unit>
        <trans-unit id="3602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>If <ph id="ph1">`switchValue`</ph> does not match any of the cases, no exception is thrown.</source>
          <target state="translated">Jeśli <ph id="ph1">`switchValue`</ph> nie pasuje do żadnego przypadków, nie wyjątku.</target>       </trans-unit>
        <trans-unit id="3603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The following example demonstrates how to create an expression that represents a swtich statement without a default case.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie reprezentuje przełącznik instrukcję bez przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3604" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The value to be tested against each case.</source>
          <target state="translated">Wartość do sprawdzenia przed każdym przypadku.</target>       </trans-unit>
        <trans-unit id="3605" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The result of the switch if <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> does not match any of the cases.</source>
          <target state="translated">Wynik przełącznika Jeśli <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> nie pasuje do żadnego z przypadków.</target>       </trans-unit>
        <trans-unit id="3606" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The set of cases for this switch expression.</source>
          <target state="translated">Zestaw przypadków dla tego wyrażenia switch.</target>       </trans-unit>
        <trans-unit id="3607" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> that represents a <ph id="ph2">&lt;see langword="switch" /&gt;</ph> statement that has a default case.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="switch" /&gt;</ph> instrukcji, która ma przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3608" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>All <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> objects in a <ph id="ph2">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> object must have the same type, unless the <ph id="ph3">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> has the type <ph id="ph4">`void`</ph>.</source>
          <target state="translated">Wszystkie <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> obiekty w <ph id="ph2">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> obiekt musi mieć ten sam typ, chyba że <ph id="ph3">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> ma typ <ph id="ph4">`void`</ph>.</target>       </trans-unit>
        <trans-unit id="3610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>Each <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> object has an implicit <ph id="ph2">`break`</ph> statement, which means that there is no implicit fall through from one case label to another.</source>
          <target state="translated">Każdy <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> obiekt ma niejawne <ph id="ph2">`break`</ph> instrukcja, która oznacza, że nie Brak niejawnego poniżej od jednej etykiety case do innej.</target>       </trans-unit>
        <trans-unit id="3611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>If <ph id="ph1">`switchValue`</ph> does not match any of the cases, the default case represented by <ph id="ph2">`defaultBody`</ph> is run.</source>
          <target state="translated">Jeśli <ph id="ph1">`switchValue`</ph> nie pasuje do żadnego przypadkach przypadek domyślny reprezentowany przez <ph id="ph2">`defaultBody`</ph> jest uruchamiany.</target>       </trans-unit>
        <trans-unit id="3612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
          <source>The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie reprezentuje przełącznik instrukcję, która ma przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3613" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The value to be tested against each case.</source>
          <target state="translated">Wartość do sprawdzenia przed każdym przypadku.</target>       </trans-unit>
        <trans-unit id="3614" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The result of the switch if <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> does not match any of the cases.</source>
          <target state="translated">Wynik przełącznika Jeśli <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> nie pasuje do żadnego z przypadków.</target>       </trans-unit>
        <trans-unit id="3615" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The equality comparison method to use.</source>
          <target state="translated">Metoda porównania równości do użycia.</target>       </trans-unit>
        <trans-unit id="3616" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The set of cases for this switch expression.</source>
          <target state="translated">Zestaw przypadków dla tego wyrażenia switch.</target>       </trans-unit>
        <trans-unit id="3617" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> that represents a <ph id="ph2">&lt;see langword="switch" /&gt;</ph> statement that has a default case.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="switch" /&gt;</ph> instrukcji, która ma przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3618" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3619" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The value to be tested against each case.</source>
          <target state="translated">Wartość do sprawdzenia przed każdym przypadku.</target>       </trans-unit>
        <trans-unit id="3620" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The result of the switch if <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> does not match any of the cases.</source>
          <target state="translated">Wynik przełącznika Jeśli <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> nie pasuje do żadnego z przypadków.</target>       </trans-unit>
        <trans-unit id="3621" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The equality comparison method to use.</source>
          <target state="translated">Metoda porównania równości do użycia.</target>       </trans-unit>
        <trans-unit id="3622" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The set of cases for this switch expression.</source>
          <target state="translated">Zestaw przypadków dla tego wyrażenia switch.</target>       </trans-unit>
        <trans-unit id="3623" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> that represents a <ph id="ph2">&lt;see langword="switch" /&gt;</ph> statement that has a default case.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="switch" /&gt;</ph> instrukcji, która ma przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3624" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3625" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The result type of the switch.</source>
          <target state="translated">Typ wyniku przełącznika.</target>       </trans-unit>
        <trans-unit id="3626" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The value to be tested against each case.</source>
          <target state="translated">Wartość do sprawdzenia przed każdym przypadku.</target>       </trans-unit>
        <trans-unit id="3627" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The result of the switch if <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> does not match any of the cases.</source>
          <target state="translated">Wynik przełącznika Jeśli <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> nie pasuje do żadnego z przypadków.</target>       </trans-unit>
        <trans-unit id="3628" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The equality comparison method to use.</source>
          <target state="translated">Metoda porównania równości do użycia.</target>       </trans-unit>
        <trans-unit id="3629" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The set of cases for this switch expression.</source>
          <target state="translated">Zestaw przypadków dla tego wyrażenia switch.</target>       </trans-unit>
        <trans-unit id="3630" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> that represents a <ph id="ph2">&lt;see langword="switch" /&gt;</ph> statement that has a default case.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="switch" /&gt;</ph> instrukcji, która ma przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3631" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3632" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The result type of the switch.</source>
          <target state="translated">Typ wyniku przełącznika.</target>       </trans-unit>
        <trans-unit id="3633" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The value to be tested against each case.</source>
          <target state="translated">Wartość do sprawdzenia przed każdym przypadku.</target>       </trans-unit>
        <trans-unit id="3634" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The result of the switch if <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> does not match any of the cases.</source>
          <target state="translated">Wynik przełącznika Jeśli <bpt id="p1">&lt;c&gt;</bpt>switchValue<ept id="p1">&lt;/c&gt;</ept> nie pasuje do żadnego z przypadków.</target>       </trans-unit>
        <trans-unit id="3635" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The equality comparison method to use.</source>
          <target state="translated">Metoda porównania równości do użycia.</target>       </trans-unit>
        <trans-unit id="3636" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The set of cases for this switch expression.</source>
          <target state="translated">Zestaw przypadków dla tego wyrażenia switch.</target>       </trans-unit>
        <trans-unit id="3637" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> that represents a <ph id="ph2">&lt;see langword="switch" /&gt;</ph> statement that has a default case..</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> reprezentujący <ph id="ph2">&lt;see langword="switch" /&gt;</ph> instrukcji, która ma przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3638" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3639" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph> object to be used in a <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> object.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph> obiektu do użycia w <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="3640" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The body of the case.</source>
          <target state="translated">Treść wielkość liter.</target>       </trans-unit>
        <trans-unit id="3641" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The test values of the case.</source>
          <target state="translated">Wartości testowe sprawy.</target>       </trans-unit>
        <trans-unit id="3642" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph> object to be used in a <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> object.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph> obiektu do użycia w <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="3643" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>All <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> objects in a <ph id="ph2">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> object must have the same type, unless the <ph id="ph3">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> has the type <ph id="ph4">`void`</ph>.</source>
          <target state="translated">Wszystkie <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> obiekty w <ph id="ph2">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> obiekt musi mieć ten sam typ, chyba że <ph id="ph3">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> ma typ <ph id="ph4">`void`</ph>.</target>       </trans-unit>
        <trans-unit id="3645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Each <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> object has an implicit <ph id="ph2">`break`</ph> statement, which means that there is no implicit fall through from one case label to another.</source>
          <target state="translated">Każdy <ph id="ph1">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> obiekt ma niejawne <ph id="ph2">`break`</ph> instrukcja, która oznacza, że nie Brak niejawnego poniżej od jednej etykiety case do innej.</target>       </trans-unit>
        <trans-unit id="3646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć wyrażenie reprezentuje przełącznik instrukcję, która ma przypadek domyślny.</target>       </trans-unit>
        <trans-unit id="3647" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The body of the case.</source>
          <target state="translated">Treść wielkość liter.</target>       </trans-unit>
        <trans-unit id="3648" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The test values of the case.</source>
          <target state="translated">Wartości testowe sprawy.</target>       </trans-unit>
        <trans-unit id="3649" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph> for use in a <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph> do użycia w <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3650" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3651" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates an instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</source>
          <target state="translated">Tworzy wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3652" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3653" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
          <source>Creates an instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</source>
          <target state="translated">Tworzy wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3654" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="3655" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3656" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3657" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
          <source>Creates an instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</source>
          <target state="translated">Tworzy wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3658" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> and <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> properties set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> ustawiono wartość określonej właściwości.</target>       </trans-unit>
        <trans-unit id="3659" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3660" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3661" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3662" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
          <source>Creates an instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</source>
          <target state="translated">Tworzy wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3663" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> and <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /&gt;</ph> properties set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /&gt;</ph> ustawiono wartość określonej właściwości.</target>       </trans-unit>
        <trans-unit id="3664" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3665" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3666" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3667" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /&gt;</ph> equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /&gt;</ph> równa.</target>       </trans-unit>
        <trans-unit id="3668" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>Creates an instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</source>
          <target state="translated">Tworzy wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3669" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> and <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /&gt;</ph> properties set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /&gt;</ph> i <ph id="ph3">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /&gt;</ph> ustawiono wartość określonej właściwości.</target>       </trans-unit>
        <trans-unit id="3670" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a throwing of an exception.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący Zgłaszanie wyjątku.</target>       </trans-unit>
        <trans-unit id="3671" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3672" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a throwing of an exception.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący Zgłaszanie wyjątku.</target>       </trans-unit>
        <trans-unit id="3673" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the exception.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyjątek.</target>       </trans-unit>
        <trans-unit id="3674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.TryExpression&gt;</ph> object that uses the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Throw%2A&gt;</ph> method.</source>
          <target state="translated">Poniższy przykład przedstawia sposób tworzenia <ph id="ph1">&lt;xref:System.Linq.Expressions.TryExpression&gt;</ph> obiekt, który używa <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Throw%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="3675" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3676" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the expression.</source>
          <target state="translated">Nowe <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> wyrażenia.</target>       </trans-unit>
        <trans-unit id="3677" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a throwing of an exception with a given type.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący zgłaszanie wyjątków z danym typem.</target>       </trans-unit>
        <trans-unit id="3678" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents the exception.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący wyjątek.</target>       </trans-unit>
        <trans-unit id="3679" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ToString">
          <source>Returns a textual representation of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Zwraca tekstową reprezentację wartości <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3680" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.ToString">
          <source>A textual representation of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Tekstową reprezentację wartości <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3681" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The body of the try block.</source>
          <target state="translated">Treść bloku try.</target>       </trans-unit>
        <trans-unit id="3682" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The array of zero or more <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> expressions representing the catch statements to be associated with the try block.</source>
          <target state="translated">Tablica zero lub więcej <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> wyrażeń reprezentujących instrukcji catch ma zostać skojarzony z bloku try.</target>       </trans-unit>
        <trans-unit id="3683" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> representing a try block with any number of catch statements and neither a fault nor finally block.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> reprezentujący bloku try z dowolnej liczby catch instrukcji i ani błędów ani bloku finally.</target>       </trans-unit>
        <trans-unit id="3684" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.TryExpression&gt;</ph> object that contains a catch statement.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć <ph id="ph1">&lt;xref:System.Linq.Expressions.TryExpression&gt;</ph> obiekt, który zawiera instrukcję catch.</target>       </trans-unit>
        <trans-unit id="3686" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The body of the try block.</source>
          <target state="translated">Treść bloku try.</target>       </trans-unit>
        <trans-unit id="3687" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The body of the finally block.</source>
          <target state="translated">Treść bloku finally.</target>       </trans-unit>
        <trans-unit id="3688" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The array of zero or more <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> expressions representing the catch statements to be associated with the try block.</source>
          <target state="translated">Tablica zero lub więcej <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> wyrażeń reprezentujących instrukcji catch ma zostać skojarzony z bloku try.</target>       </trans-unit>
        <trans-unit id="3689" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> representing a try block with any number of catch statements and a finally block.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> reprezentujący bloku try z dowolną liczbę instrukcji catch i bloku finally.</target>       </trans-unit>
        <trans-unit id="3690" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.TryExpression&gt;</ph> object that contains a catch statement and a finally statement.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć <ph id="ph1">&lt;xref:System.Linq.Expressions.TryExpression&gt;</ph> obiekt, który zawiera instrukcję catch i finally instrukcji.</target>       </trans-unit>
        <trans-unit id="3692" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the try block.</source>
          <target state="translated">Treść bloku try.</target>       </trans-unit>
        <trans-unit id="3693" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the fault block.</source>
          <target state="translated">Treść bloku błędów.</target>       </trans-unit>
        <trans-unit id="3694" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> representing a try block with a fault block and no catch statements.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> reprezentujący bloku try z blokiem błąd i nie catch instrukcji.</target>       </trans-unit>
        <trans-unit id="3695" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3696" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the try block.</source>
          <target state="translated">Treść bloku try.</target>       </trans-unit>
        <trans-unit id="3697" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The body of the finally block.</source>
          <target state="translated">Treść bloku finally.</target>       </trans-unit>
        <trans-unit id="3698" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> representing a try block with a finally block and no catch statements.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph> bloku try przy reprezentujący koniec instrukcji catch bloku i nie.</target>       </trans-unit>
        <trans-unit id="3699" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</source>
          <target state="translated">Utworzony <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3700" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
          <source>An array of Type objects that specify the type arguments for the System.Action delegate type.</source>
          <target state="translated">Tablica obiektów typu, które określają argumentów typu dla typu delegata elementu System.Action.</target>       </trans-unit>
        <trans-unit id="3701" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
          <source>When this method returns, contains the generic System.Action delegate type that has specific type arguments.</source>
          <target state="translated">Po powrocie z tej metody zawiera typu ogólnego delegat elementu System.Action, która przyjmuje argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="3702" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
          <source>Contains null if there is no generic System.Action delegate that matches the <bpt id="p1">&lt;c&gt;</bpt>typeArgs<ept id="p1">&lt;/c&gt;</ept>.This parameter is passed uninitialized.</source>
          <target state="translated">Zawiera wartość null, jeśli nie delegat elementu System.Action ogólny zgodny <bpt id="p1">&lt;c&gt;</bpt>typeArgs<ept id="p1">&lt;/c&gt;</ept>. Ten parametr jest przekazywany jako niezainicjowany.</target>       </trans-unit>
        <trans-unit id="3703" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
          <source>Creates a <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> object that represents a generic System.Action delegate type that has specific type arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> obiekt, który reprezentuje typu ogólnego delegat elementu System.Action, która przyjmuje argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="3704" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
          <source>true if generic System.Action delegate type was created for specific <ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph>; false otherwise.</source>
          <target state="translated">wartość true, jeśli ogólny typ delegata elementu System.Action został utworzony dla konkretnego <ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph>false w przeciwnym razie wartość.</target>       </trans-unit>
        <trans-unit id="3705" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
          <source>An array of Type objects that specify the type arguments for the System.Func delegate type.</source>
          <target state="translated">Tablica obiektów typu, które określają argumentów typu dla typu delegata System.Func.</target>       </trans-unit>
        <trans-unit id="3706" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
          <source>When this method returns, contains the generic System.Func delegate type that has specific type arguments.</source>
          <target state="translated">Gdy metoda zwróci wartość, zawiera ogólny typ delegata System.Func, który ma argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="3707" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
          <source>Contains null if there is no generic System.Func delegate that matches the <bpt id="p1">&lt;c&gt;</bpt>typeArgs<ept id="p1">&lt;/c&gt;</ept>.This parameter is passed uninitialized.</source>
          <target state="translated">Zawiera wartość null, jeśli nie Delegat ogólny System.Func, który odpowiada <bpt id="p1">&lt;c&gt;</bpt>typeArgs<ept id="p1">&lt;/c&gt;</ept>. Ten parametr jest przekazywany jako niezainicjowany.</target>       </trans-unit>
        <trans-unit id="3708" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
          <source>Creates a <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> object that represents a generic System.Func delegate type that has specific type arguments.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> obiekt, który reprezentuje ogólny typ delegata System.Func, który zawiera argumenty określonego typu.</target>       </trans-unit>
        <trans-unit id="3709" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
          <source>The last type argument specifies the return type of the created delegate.</source>
          <target state="translated">Ostatni argument typu określa typ zwracany delegata utworzony.</target>       </trans-unit>
        <trans-unit id="3710" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
          <source>true if generic System.Func delegate type was created for specific <ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph>; false otherwise.</source>
          <target state="translated">wartość true, jeśli utworzono ogólny typ delegata System.Func określonych <ph id="ph1">&lt;paramref name="typeArgs" /&gt;</ph>false w przeciwnym razie wartość.</target>       </trans-unit>
        <trans-unit id="3711" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.Expression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">Pobiera typ statyczny wyrażenia, który to <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> reprezentuje.</target>       </trans-unit>
        <trans-unit id="3712" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Reprezentujący typ statyczny wyrażenia.</target>       </trans-unit>
        <trans-unit id="3713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.Type">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> is the type of the expression tree node, whereas the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> represents the static common language runtime (CLR) type of the expression that the node represents.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> Jest typ węzła drzewa wyrażenia, podczas gdy <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> reprezentuje wspólnego języka środowiska uruchomieniowego (języka wspólnego CLR) typ statyczny wyrażenia, który reprezentuje węzeł.</target>       </trans-unit>
        <trans-unit id="3714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.Expression.Type">
          <source>For example, two nodes with different node types can have the same <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph>, as shown in the following code example.</source>
          <target state="translated">Na przykład dwa węzły o różnych typach węzłów może mieć takie same <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph>, jak pokazano w poniższym przykładzie kodu.</target>       </trans-unit>
        <trans-unit id="3715" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3716" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3717" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an explicit reference or boxing conversion where <ph id="ph2">&lt;see langword="null" /&gt;</ph> is supplied if the conversion fails.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący jawnego odwołania lub konwersji pakującej gdzie <ph id="ph2">&lt;see langword="null" /&gt;</ph> jest dostarczany w razie niepowodzenia konwersji.</target>       </trans-unit>
        <trans-unit id="3718" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> jest <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="3721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> reprezentujący konwersji odwołania wyrażenia liczby całkowitej wartości null na typ integer wartości null.</target>       </trans-unit>
        <trans-unit id="3722" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3723" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3724" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3725" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph> that compares run-time type identity.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph> który porównuje tożsamości typu run-time.</target>       </trans-unit>
        <trans-unit id="3726" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph> for which the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property is equal to <ph id="ph3">&lt;see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /&gt;</ph> and for which the <ph id="ph4">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /&gt;</ph> properties are set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph> dla którego <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> właściwości jest równa <ph id="ph3">&lt;see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /&gt;</ph> i dla których <ph id="ph4">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /&gt;</ph> właściwości są ustawione na określone wartości.</target>       </trans-unit>
        <trans-unit id="3727" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3728" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.Expression.Type" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3729" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph>.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3730" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph> for which the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property is equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /&gt;</ph> and for which the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /&gt;</ph> properties are set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph> dla którego <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> właściwości jest równa <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /&gt;</ph> i dla których <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /&gt;</ph> właściwości są ustawione na określone wartości.</target>       </trans-unit>
        <trans-unit id="3731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> represents <ph id="ph3">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> reprezentuje <ph id="ph3">&lt;xref:System.Boolean&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.TypeBinaryExpression&gt;</ph> that represents a type test of a string value against the <ph id="ph3">&lt;xref:System.Int32&gt;</ph> type.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Linq.Expressions.TypeBinaryExpression&gt;</ph> reprezentujący typ testu wartość ciągu przed <ph id="ph3">&lt;xref:System.Int32&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="3733" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> or <ph id="ph2">&lt;paramref name="type" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="type" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3734" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a unary plus operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący jednoargumentowe plus operacji.</target>       </trans-unit>
        <trans-unit id="3735" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3736" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a unary plus operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący jednoargumentowe plus operacji.</target>       </trans-unit>
        <trans-unit id="3737" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property set to the specified value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> właściwość o określonej wartości.</target>       </trans-unit>
        <trans-unit id="3738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="3739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>Otherwise, they are false.</source>
          <target state="translated">Są one w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="3742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is a user-defined type that defines the unary plus operator, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest zdefiniowany przez użytkownika typu, który definiuje jednoargumentowe plus operatora, <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, który jest operator implementującej metody.</target>       </trans-unit>
        <trans-unit id="3745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>Otherwise, if <ph id="ph1">`expression`</ph>.Type is a numeric type, the implementing method is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`expression`</ph>. Typ jest typ liczbowy, implementującej metody <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ można przypisać do typu argumentu implementującej metody, nie została wyjęta węzła.</target>       </trans-unit>
        <trans-unit id="3749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>. Typ jest typem wartości null, a odpowiedni typ niedopuszczający wartości null jest taki sam, jak typ argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>, the type of the node is <ph id="ph2">`expression`</ph>.Type.</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>, jest typ węzła <ph id="ph2">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>If <ph id="ph1">`expression`</ph>.Type is non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>Otherwise, the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3756" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3757" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
          <source>The unary plus operator is not defined for <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type.</source>
          <target state="translated">Jednoargumentowe plus operator nie jest zdefiniowany dla <ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3758" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property equal to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3759" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> to set the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> property equal to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> można ustawić <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> równa właściwości.</target>       </trans-unit>
        <trans-unit id="3760" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents a unary plus operation.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący jednoargumentowe plus operacji.</target>       </trans-unit>
        <trans-unit id="3761" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that has the <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> property equal to <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> and <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> properties set to the specified values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> mający <ph id="ph2">&lt;see cref="P:System.Linq.Expressions.Expression.NodeType" /&gt;</ph> równa właściwości <ph id="ph3">&lt;see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /&gt;</ph> i <ph id="ph4">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> i <ph id="ph5">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Method" /&gt;</ph> właściwości mają określone wartości.</target>       </trans-unit>
        <trans-unit id="3762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> Właściwość powstałe w ten sposób <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> ustawiono implementującej metody.</target>       </trans-unit>
        <trans-unit id="3763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> Właściwość jest ustawiona na typ węzła.</target>       </trans-unit>
        <trans-unit id="3764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the node is lifted, the <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli węzeł została wyjęta, <ph id="ph1">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> właściwości są <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="3765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, they are false.</source>
          <target state="translated">Są one w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="3766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Implementing Method</source>
          <target state="translated">Metoda implementująca</target>       </trans-unit>
        <trans-unit id="3767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The following rules determine the implementing method for the operation:</source>
          <target state="translated">Następujące reguły określają implementującej metody dla operacji:</target>       </trans-unit>
        <trans-unit id="3768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`method`</ph> is not <ph id="ph2">`null`</ph> and it represents a non-void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method that takes one argument, it is the implementing method for the node.</source>
          <target state="translated">Jeśli <ph id="ph1">`method`</ph> nie jest <ph id="ph2">`null`</ph> i reprezentuje inny niż void, <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> w języku Visual Basic) metodę, która przyjmuje jeden argument jest implementującej metody dla węzła.</target>       </trans-unit>
        <trans-unit id="3769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is a user-defined type that defines the unary plus operator, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ jest zdefiniowany przez użytkownika typu, który definiuje jednoargumentowe plus operatora, <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> reprezentujący, który jest operator implementującej metody.</target>       </trans-unit>
        <trans-unit id="3770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, if <ph id="ph1">`expression`</ph>.Type is a numeric type, the implementing method is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">W przeciwnym razie, jeśli <ph id="ph1">`expression`</ph>. Typ jest typ liczbowy, implementującej metody <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="3771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Node Type and Lifted versus Non-Lifted</source>
          <target state="translated">Typ węzła oraz węzły podniesione i niepodniesione</target>       </trans-unit>
        <trans-unit id="3772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is not <ph id="ph1">`null`</ph>:</source>
          <target state="translated">Jeśli metoda implementujący nie jest <ph id="ph1">`null`</ph>:</target>       </trans-unit>
        <trans-unit id="3773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ można przypisać do typu argumentu implementującej metody, nie została wyjęta węzła.</target>       </trans-unit>
        <trans-unit id="3774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The type of the node is the return type of the implementing method.</source>
          <target state="translated">Typ węzła jest zwracany typ metody implementującej.</target>       </trans-unit>
        <trans-unit id="3775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</source>
          <target state="translated">Jeśli spełnione są następujące dwa warunki, zniesienia węzeł i typ węzła jest typ dopuszczający wartość null, umożliwiająca zwracany typ implementujący metody:</target>       </trans-unit>
        <trans-unit id="3776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>. Typ jest typem wartości null, a odpowiedni typ niedopuszczający wartości null jest taki sam, jak typ argumentu implementującej metody.</target>       </trans-unit>
        <trans-unit id="3777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>The return type of the implementing method is a non-nullable value type.</source>
          <target state="translated">Zwracany typ metody implementującej to typ niedopuszczający wartości null.</target>       </trans-unit>
        <trans-unit id="3778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If the implementing method is <ph id="ph1">`null`</ph>, the type of the node is <ph id="ph2">`expression`</ph>.Type.</source>
          <target state="translated">Jeśli metoda wykonawcze jest <ph id="ph1">`null`</ph>, jest typ węzła <ph id="ph2">`expression`</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`expression`</ph>.Type is non-nullable, the node is not lifted.</source>
          <target state="translated">Jeśli <ph id="ph1">`expression`</ph>. Typ wartości null, węzeł nie została wyjęta.</target>       </trans-unit>
        <trans-unit id="3780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>Otherwise, the node is lifted.</source>
          <target state="translated">W przeciwnym razie jest unosiło węzła.</target>       </trans-unit>
        <trans-unit id="3781" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3782" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the method it represents returns <ph id="ph3">&lt;see langword="void" /&gt;</ph>, is not <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> in Visual Basic), or does not take exactly one argument.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> nie jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> , a także metoda reprezentuje zwraca <ph id="ph3">&lt;see langword="void" /&gt;</ph>, nie jest <ph id="ph4">&lt;see langword="static" /&gt;</ph> (<ph id="ph5">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic), lub nie przyjmuje dokładnie jeden argument.</target>       </trans-unit>
        <trans-unit id="3783" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="method" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the unary plus operator is not defined for <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>.Type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="method" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i jednoargumentowe plus operator nie jest zdefiniowany dla <ph id="ph3">&lt;paramref name="expression" /&gt;</ph>. Typ.</target>       </trans-unit>
        <trans-unit id="3784" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="3785" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="expression" /&gt;</ph>. Typ (lub odpowiedniego typu wartości null, jeśli jest to typ wartości null) nie jest można przypisać do typu argumentu metody reprezentowany przez <ph id="ph2">&lt;paramref name="method" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3786" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> to unbox.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> Do unbox —.</target>       </trans-unit>
        <trans-unit id="3787" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the expression.</source>
          <target state="translated">Nowe <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> wyrażenia.</target>       </trans-unit>
        <trans-unit id="3788" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> that represents an explicit unboxing.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph> reprezentujący Rozpakowywanie jawnego.</target>       </trans-unit>
        <trans-unit id="3789" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3790" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</target>       </trans-unit>
        <trans-unit id="3791" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Variable(System.Type)">
          <source>The type of the parameter or variable.</source>
          <target state="translated">Typ parametr lub zmienna.</target>       </trans-unit>
        <trans-unit id="3792" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Variable(System.Type)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</target>       </trans-unit>
        <trans-unit id="3793" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Variable(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node with the specified name and type</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła o określonej nazwie i typ</target>       </trans-unit>
        <trans-unit id="3794" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
          <source>The type of the parameter or variable.</source>
          <target state="translated">Typ parametr lub zmienna.</target>       </trans-unit>
        <trans-unit id="3795" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
          <source>The name of the parameter or variable.</source>
          <target state="translated">Nazwa parametru lub zmiennej.</target>       </trans-unit>
        <trans-unit id="3796" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
          <source>This name is used for debugging or printing purpose only.</source>
          <target state="translated">Ta nazwa jest używana do debugowania lub drukowania tylko do celów.</target>       </trans-unit>
        <trans-unit id="3797" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</target>       </trans-unit>
        <trans-unit id="3798" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> node with the specified name and type.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph> węzła o określonej nazwie i typu.</target>       </trans-unit>
        <trans-unit id="3799" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Func`2" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Func`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="3800" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
          <source>Reduces the node and then calls the visitor delegate on the reduced expression.</source>
          <target state="translated">Zmniejsza węzeł, a następnie wywołuje delegata dla gości na zmniejszenie wyrażenia.</target>       </trans-unit>
        <trans-unit id="3801" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
          <source>The method throws an exception if the node is not reducible.</source>
          <target state="translated">Metoda zgłasza wyjątek, jeśli węzeł nie jest możliwe do zredukowania.</target>       </trans-unit>
        <trans-unit id="3802" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
          <source>The expression being visited, or an expression which should replace it in the tree.</source>
          <target state="translated">Wyrażenie odwiedzana lub wyrażenie, które powinny zostać użyte w drzewie.</target>       </trans-unit>
        <trans-unit id="3803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to provide logic to walk the node's children.</source>
          <target state="translated">Przesłonić tę metodę w celu zapewnienia logiki przeprowadzenie elementów podrzędnych węzła.</target>       </trans-unit>
        <trans-unit id="3804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
          <source>A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</source>
          <target state="translated">Typowa implementacja wywołuje obiekt odwiedzający. Odwiedź na wszystkich jego elementów podrzędnych i czy je zmienić, powinien zwrócić nową kopię samego zmodyfikowanego podrzędnych.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>